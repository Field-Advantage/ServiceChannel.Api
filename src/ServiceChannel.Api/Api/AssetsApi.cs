/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object Assets(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0);

        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0);
        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsActivation(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0);

        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsActivationWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0);
        /// <summary>
        /// Add Update Asset
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsAddUpdateAsset(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0);

        /// <summary>
        /// Add Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsAddUpdateAssetWithHttpInfo(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0);
        /// <summary>
        /// Add asset meters
        /// </summary>
        /// <remarks>
        /// Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetsAssetMeter(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0);

        /// <summary>
        /// Add asset meters
        /// </summary>
        /// <remarks>
        /// Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsAssetMeterWithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0);
        /// <summary>
        /// Update an asset meter reading
        /// </summary>
        /// <remarks>
        /// Updates information of a particular asset meter reading.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetsAssetMeterReading(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0);

        /// <summary>
        /// Update an asset meter reading
        /// </summary>
        /// <remarks>
        /// Updates information of a particular asset meter reading.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsAssetMeterReadingWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetsAssetMeterReading_0(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsAssetMeterReading_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0);
        /// <summary>
        /// Get asset readings
        /// </summary>
        /// <remarks>
        /// Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get asset readings
        /// </summary>
        /// <remarks>
        /// Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyWithHttpInfo(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get asset meters
        /// </summary>
        /// <remarks>
        /// Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetMeter> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get asset meters
        /// </summary>
        /// <remarks>
        /// Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeter>> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdWithHttpInfo(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get circuits and components
        /// </summary>
        /// <remarks>
        /// Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetsAssetcomponents(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0);

        /// <summary>
        /// Get circuits and components
        /// </summary>
        /// <remarks>
        /// Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsAssetcomponentsWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Asset Repair Status By AssetId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string AssetsAssetrepairstatusassetIdassetId(int assetId, int operationIndex = 0);

        /// <summary>
        /// Get Asset Repair Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AssetsAssetrepairstatusassetIdassetIdWithHttpInfo(int assetId, int operationIndex = 0);
        /// <summary>
        /// Get Assets For Replacement
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsAssetsforreplacement(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0);

        /// <summary>
        /// Get Assets For Replacement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsAssetsforreplacementWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Asset Status History By AssetId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse</returns>
        SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse AssetsAssetstatushistoryassetIdassetId(int assetId, int operationIndex = 0);

        /// <summary>
        /// Get Asset Status History By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse> AssetsAssetstatushistoryassetIdassetIdWithHttpInfo(int assetId, int operationIndex = 0);
        /// <summary>
        /// Associate Asset Code
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsAssociateAssetCode(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0);

        /// <summary>
        /// Associate Asset Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsAssociateAssetCodeWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Brands
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsManufacturer> AssetsBrands(int operationIndex = 0);

        /// <summary>
        /// Get Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsManufacturer>> AssetsBrandsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsCanCreateAssetassetTypeId(int assetTypeId, int operationIndex = 0);

        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsCanCreateAssetassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0);
        /// <summary>
        /// Check if provider is allowed to manage attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetsCanManageAttachmentssubscriberIdsubscriberId(int subscriberId, int operationIndex = 0);

        /// <summary>
        /// Check if provider is allowed to manage attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsCanManageAttachmentssubscriberIdsubscriberIdWithHttpInfo(int subscriberId, int operationIndex = 0);
        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsCanProviderCreateAssetForTradetradeId(int tradeId, int operationIndex = 0);

        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsCanProviderCreateAssetForTradetradeIdWithHttpInfo(int tradeId, int operationIndex = 0);
        /// <summary>
        /// Getting permission for edit asset
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsCanUserEditAssetassetTypeIdassetTypeId(int? assetTypeId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Getting permission for edit asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsCanUserEditAssetassetTypeIdassetTypeIdWithHttpInfo(int? assetTypeId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Asset meter readings bulk create
        /// </summary>
        /// <remarks>
        /// Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem> AssetsCreateAssetMeterReadingsBulk(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0);

        /// <summary>
        /// Asset meter readings bulk create
        /// </summary>
        /// <remarks>
        /// Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsCreateAssetMeterReadingsBulkWithHttpInfo(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0);
        /// <summary>
        /// Get asset type groups by assetsIds
        /// </summary>
        /// <remarks>
        /// Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup> AssetsGetAssetTypeGroupsByAssetsIds(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0);

        /// <summary>
        /// Get asset type groups by assetsIds
        /// </summary>
        /// <remarks>
        /// Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetsGetAssetTypeGroupsByAssetsIdsWithHttpInfo(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0);
        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> AssetsGetAssetValidationHistoryByTrackingNumber(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0);

        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationHistoryByTrackingNumberWithHttpInfo(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0);
        /// <summary>
        /// Returns asset tag validation information for the specified list of assets
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> AssetsGetAssetValidationInformation(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0);

        /// <summary>
        /// Returns asset tag validation information for the specified list of assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationInformationWithHttpInfo(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0);
        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment> AssetsGetPrimaryAttachmentsForAssetList(List<int> listOfAssetIds, int operationIndex = 0);

        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListWithHttpInfo(List<int> listOfAssetIds, int operationIndex = 0);
        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment> AssetsGetPrimaryAttachmentsForAssetListV1(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0);

        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListV1WithHttpInfo(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0);
        /// <summary>
        /// Gets list of asset validation statuses for multiple work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse</returns>
        SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse AssetsGetValidationStatusesForMultipleWorkOrders(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0);

        /// <summary>
        /// Gets list of asset validation statuses for multiple work order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse> AssetsGetValidationStatusesForMultipleWorkOrdersWithHttpInfo(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Assets WorkOrders
        /// </summary>
        /// <remarks>
        /// This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;</returns>
        Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCount(int workOrdersCount, List<int> assetIds, int operationIndex = 0);

        /// <summary>
        /// Get Assets WorkOrders
        /// </summary>
        /// <remarks>
        /// This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCountWithHttpInfo(int workOrdersCount, List<int> assetIds, int operationIndex = 0);
        /// <summary>
        /// Ge tFiltered Asset Leaks
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsGetfilteredassetleaks(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0);

        /// <summary>
        /// Ge tFiltered Asset Leaks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsGetfilteredassetleaksWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Filtered Assets
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsGetfilteredassets(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0);

        /// <summary>
        /// Get Filtered Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsGetfilteredassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Filtered Assets V1
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsGetfilteredassetsV1providerIdproviderId(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Filtered Assets V1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsGetfilteredassetsV1providerIdproviderIdWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Wo Asset Tracking
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsGetwoassettrackingwoIdwoId(int woId, int operationIndex = 0);

        /// <summary>
        /// Get Wo Asset Tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsGetwoassettrackingwoIdwoIdWithHttpInfo(int woId, int operationIndex = 0);
        /// <summary>
        /// Determines if the specified asset has had its tag validated or not
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool AssetsHasAssetBeenValidated(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0);

        /// <summary>
        /// Determines if the specified asset has had its tag validated or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> AssetsHasAssetBeenValidatedWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode> AssetsLocationAssetsTreelocationIdlocationIdtradetrade(int locationId, string? trade = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>> AssetsLocationAssetsTreelocationIdlocationIdtradetradeWithHttpInfo(int locationId, string? trade = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetsInfoResponse</returns>
        SCServiceChannelServicesMessagingAssetsAssetsInfoResponse AssetsLocationslocationIdtradetrade(int locationId, string? trade = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetsInfoResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse> AssetsLocationslocationIdtradetradeWithHttpInfo(int locationId, string? trade = default(string?), int operationIndex = 0);
        /// <summary>
        /// Records an audit record for the asset tag that was scanned
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool AssetsRecordScannedAsset(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0);

        /// <summary>
        /// Records an audit record for the asset tag that was scanned
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> AssetsRecordScannedAssetWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0);
        /// <summary>
        /// Search Assets
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsSearchassets(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0);

        /// <summary>
        /// Search Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsSearchassetsWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0);
        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse> AssetsSearchassetsByGroupId(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0);

        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>> AssetsSearchassetsByGroupIdWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0);
        /// <summary>
        /// Gets list of unable to add reasons.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason</returns>
        SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason AssetsUnableToAddReasons(int operationIndex = 0);

        /// <summary>
        /// Gets list of unable to add reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason</returns>
        ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason> AssetsUnableToAddReasonsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Creates wo_UnableToAddAssetHistory.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest</returns>
        SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest AssetsUnableToAddReasons_0(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0);

        /// <summary>
        /// Creates wo_UnableToAddAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest> AssetsUnableToAddReasons_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0);
        /// <summary>
        /// Creates wo_UnableToScanAssetHistory.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest</returns>
        SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest AssetsUnableToScanReasons(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0);

        /// <summary>
        /// Creates wo_UnableToScanAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest> AssetsUnableToScanReasonsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0);
        /// <summary>
        /// Gets list of unable to scan reasons not attached assets.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset</returns>
        SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset AssetsUnableToScanReasonsNotAttachedAsset(int operationIndex = 0);

        /// <summary>
        /// Gets list of unable to scan reasons not attached assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset</returns>
        ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset> AssetsUnableToScanReasonsNotAttachedAssetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets list of unable to scan reasons.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason</returns>
        SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason AssetsUnableToScanReasonssubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Gets list of unable to scan reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason</returns>
        ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason> AssetsUnableToScanReasonssubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Gets list of unable to validate reasons.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason</returns>
        SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason AssetsUnableToValidateReasons(int operationIndex = 0);

        /// <summary>
        /// Gets list of unable to validate reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason</returns>
        ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason> AssetsUnableToValidateReasonsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets list of unable to validate reasons not attached assets.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset</returns>
        SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset AssetsUnableToValidateReasonsNotAttachedAsset(int operationIndex = 0);

        /// <summary>
        /// Gets list of unable to validate reasons not attached assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset</returns>
        ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset> AssetsUnableToValidateReasonsNotAttachedAssetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest</returns>
        SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest AssetsUnableToValidateReasons_0(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0);

        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest> AssetsUnableToValidateReasons_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0);
        /// <summary>
        /// Update asset location
        /// </summary>
        /// <remarks>
        /// Updates asset location
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId(int assetId, int locationId, int operationIndex = 0);

        /// <summary>
        /// Update asset location
        /// </summary>
        /// <remarks>
        /// Updates asset location
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdWithHttpInfo(int assetId, int locationId, int operationIndex = 0);
        /// <summary>
        /// Asset meter readings bulk update
        /// </summary>
        /// <remarks>
        /// Updates information about asset meter readings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem> AssetsUpdateAssetMeterReadingsBulk(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0);

        /// <summary>
        /// Asset meter readings bulk update
        /// </summary>
        /// <remarks>
        /// Updates information about asset meter readings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsUpdateAssetMeterReadingsBulkWithHttpInfo(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0);
        /// <summary>
        /// Update Asset Status By AssetId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool AssetsUpdateAssetStatus(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0);

        /// <summary>
        /// Update Asset Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> AssetsUpdateAssetStatusWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0);
        /// <summary>
        /// Update Assets Statuses
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetsUpdateAssetsStatuses(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0);

        /// <summary>
        /// Update Assets Statuses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsUpdateAssetsStatusesWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0);
        /// <summary>
        /// Update Asset Repair Status By AssetId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool AssetsUpdateassetrepairstatus(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0);

        /// <summary>
        /// Update Asset Repair Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> AssetsUpdateassetrepairstatusWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Brands (ver.2)
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsManufacturersResponce</returns>
        SCServiceChannelServicesMessagingAssetsManufacturersResponce AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Brands (ver.2)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsManufacturersResponce</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsManufacturersResponce> AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeWithHttpInfo(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging AssetsValidationRulesForMultipleSubscribers(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0);

        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetsValidationRulesForMultipleSubscribersWithHttpInfo(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Work Orders Area list
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;</returns>
        List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString> AssetsWorkorderAreassubscriberId(int subscriberId, int operationIndex = 0);

        /// <summary>
        /// Get Work Orders Area list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;</returns>
        ApiResponse<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>> AssetsWorkorderAreassubscriberIdWithHttpInfo(int subscriberId, int operationIndex = 0);
        /// <summary>
        /// Add assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkordersAttachassets(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0);

        /// <summary>
        /// Add assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkordersAttachassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0);
        /// <summary>
        /// Remove specified assets from specified work order
        /// </summary>
        /// <remarks>
        /// Remove Assets from Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkordersRemoveassets(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0);

        /// <summary>
        /// Remove specified assets from specified work order
        /// </summary>
        /// <remarks>
        /// Remove Assets from Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkordersRemoveassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0);
        /// <summary>
        /// Add and replace assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkordersSetupassets(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0);

        /// <summary>
        /// Add and replace assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkordersSetupassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0);
        /// <summary>
        /// Attach an asset
        /// </summary>
        /// <remarks>
        /// Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkordersworkorderIdAttach(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0);

        /// <summary>
        /// Attach an asset
        /// </summary>
        /// <remarks>
        /// Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkordersworkorderIdAttachWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0);
        /// <summary>
        /// Remove assets
        /// </summary>
        /// <remarks>
        /// Removes all assets assigned to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkordersworkorderIdDetach(int workorderId, int operationIndex = 0);

        /// <summary>
        /// Remove assets
        /// </summary>
        /// <remarks>
        /// Removes all assets assigned to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkordersworkorderIdDetachWithHttpInfo(int workorderId, int operationIndex = 0);
        /// <summary>
        /// Remove specified assets from specified work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkrequestRemove(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0);

        /// <summary>
        /// Remove specified assets from specified work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkrequestRemoveWithHttpInfo(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0);
        /// <summary>
        /// Setup assets to the work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkrequestSetup(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0);

        /// <summary>
        /// Setup assets to the work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkrequestSetupWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0);
        /// <summary>
        /// Setup assets to the specified work order
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsWorkrequestworkRequestId(int workRequestId, int operationIndex = 0);

        /// <summary>
        /// Setup assets to the specified work order
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsWorkrequestworkRequestIdWithHttpInfo(int workRequestId, int operationIndex = 0);
        /// <summary>
        /// Add an asset
        /// </summary>
        /// <remarks>
        /// Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Assets_0(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0);

        /// <summary>
        /// Add an asset
        /// </summary>
        /// <remarks>
        /// Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Assets_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0);
        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        SCServiceChannelServicesMessagingAssetsAssetResponse AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberWithHttpInfo(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get asset workorder history
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;</returns>
        List<SCServiceChannelApiModelEquipmentsAssetWorkHistory> AssetsassetidAssetwohistory(int assetid, int operationIndex = 0);

        /// <summary>
        /// Get asset workorder history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;</returns>
        ApiResponse<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>> AssetsassetidAssetwohistoryWithHttpInfo(int assetid, int operationIndex = 0);
        /// <summary>
        /// Add Brand
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        int AssetsbrandNameAddBrand(string brandName, int operationIndex = 0);

        /// <summary>
        /// Add Brand
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> AssetsbrandNameAddBrandWithHttpInfo(string brandName, int operationIndex = 0);
        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging AssetssubscriberIdValidationRules(int subscriberId, int operationIndex = 0);

        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetssubscriberIdValidationRulesWithHttpInfo(int subscriberId, int operationIndex = 0);
        /// <summary>
        /// Get Scan Method
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetstrackingNumberIsValidationRequired(int trackingNumber, int operationIndex = 0);

        /// <summary>
        /// Get Scan Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetstrackingNumberIsValidationRequiredWithHttpInfo(int trackingNumber, int operationIndex = 0);
        /// <summary>
        /// Get asset type groups by tradeId
        /// </summary>
        /// <remarks>
        /// Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup> AssetstradeIdGetAssetTypeGroupsByTradeId(int tradeId, int operationIndex = 0);

        /// <summary>
        /// Get asset type groups by tradeId
        /// </summary>
        /// <remarks>
        /// Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetstradeIdGetAssetTypeGroupsByTradeIdWithHttpInfo(int tradeId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssociateAssetCode(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateAssetCodeWithHttpInfo(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetResponse> FindAssets(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsWithHttpInfo(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetResponse> FindAssetsByLocation(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsByLocationWithHttpInfo(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetResponse> FindAssetsBySubscriber(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsBySubscriberWithHttpInfo(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        SCServiceChannelServicesMessagingAssetsAssetResponse GetAsset(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> GetAssetWithHttpInfo(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60;
        /// </summary>
        /// <remarks>
        /// Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetResponse> SearchAssets(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60;
        /// </summary>
        /// <remarks>
        /// Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> SearchAssetsWithHttpInfo(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsActivationAsync(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsActivationWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsAddUpdateAssetAsync(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Update Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsAddUpdateAssetWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add asset meters
        /// </summary>
        /// <remarks>
        /// Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsAssetMeterAsync(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add asset meters
        /// </summary>
        /// <remarks>
        /// Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsAssetMeterWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an asset meter reading
        /// </summary>
        /// <remarks>
        /// Updates information of a particular asset meter reading.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsAssetMeterReadingAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an asset meter reading
        /// </summary>
        /// <remarks>
        /// Updates information of a particular asset meter reading.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsAssetMeterReadingWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsAssetMeterReading_0Async(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsAssetMeterReading_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset readings
        /// </summary>
        /// <remarks>
        /// Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyAsync(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset readings
        /// </summary>
        /// <remarks>
        /// Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyWithHttpInfoAsync(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset meters
        /// </summary>
        /// <remarks>
        /// Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeter>> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdAsync(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset meters
        /// </summary>
        /// <remarks>
        /// Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeter>>> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdWithHttpInfoAsync(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get circuits and components
        /// </summary>
        /// <remarks>
        /// Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsAssetcomponentsAsync(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get circuits and components
        /// </summary>
        /// <remarks>
        /// Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsAssetcomponentsWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset Repair Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AssetsAssetrepairstatusassetIdassetIdAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Repair Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AssetsAssetrepairstatusassetIdassetIdWithHttpInfoAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Assets For Replacement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsAssetsforreplacementAsync(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Assets For Replacement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsAssetsforreplacementWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset Status History By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse> AssetsAssetstatushistoryassetIdassetIdAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Status History By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse>> AssetsAssetstatushistoryassetIdassetIdWithHttpInfoAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate Asset Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsAssociateAssetCodeAsync(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate Asset Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsAssociateAssetCodeWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsManufacturer>> AssetsBrandsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsManufacturer>>> AssetsBrandsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsCanCreateAssetassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsCanCreateAssetassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if provider is allowed to manage attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsCanManageAttachmentssubscriberIdsubscriberIdAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if provider is allowed to manage attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsCanManageAttachmentssubscriberIdsubscriberIdWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsCanProviderCreateAssetForTradetradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsCanProviderCreateAssetForTradetradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getting permission for edit asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsCanUserEditAssetassetTypeIdassetTypeIdAsync(int? assetTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getting permission for edit asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsCanUserEditAssetassetTypeIdassetTypeIdWithHttpInfoAsync(int? assetTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Asset meter readings bulk create
        /// </summary>
        /// <remarks>
        /// Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsCreateAssetMeterReadingsBulkAsync(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Asset meter readings bulk create
        /// </summary>
        /// <remarks>
        /// Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>> AssetsCreateAssetMeterReadingsBulkWithHttpInfoAsync(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset type groups by assetsIds
        /// </summary>
        /// <remarks>
        /// Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetsGetAssetTypeGroupsByAssetsIdsAsync(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset type groups by assetsIds
        /// </summary>
        /// <remarks>
        /// Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>> AssetsGetAssetTypeGroupsByAssetsIdsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationHistoryByTrackingNumberAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>> AssetsGetAssetValidationHistoryByTrackingNumberWithHttpInfoAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns asset tag validation information for the specified list of assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationInformationAsync(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns asset tag validation information for the specified list of assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>> AssetsGetAssetValidationInformationWithHttpInfoAsync(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListAsync(List<int> listOfAssetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>> AssetsGetPrimaryAttachmentsForAssetListWithHttpInfoAsync(List<int> listOfAssetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListV1Async(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>
        /// Adds new asset. Returns list of attachments for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>> AssetsGetPrimaryAttachmentsForAssetListV1WithHttpInfoAsync(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets list of asset validation statuses for multiple work order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse> AssetsGetValidationStatusesForMultipleWorkOrdersAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets list of asset validation statuses for multiple work order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse>> AssetsGetValidationStatusesForMultipleWorkOrdersWithHttpInfoAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Assets WorkOrders
        /// </summary>
        /// <remarks>
        /// This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCountAsync(int workOrdersCount, List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Assets WorkOrders
        /// </summary>
        /// <remarks>
        /// This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCountWithHttpInfoAsync(int workOrdersCount, List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ge tFiltered Asset Leaks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsGetfilteredassetleaksAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ge tFiltered Asset Leaks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsGetfilteredassetleaksWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Filtered Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsGetfilteredassetsAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Filtered Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsGetfilteredassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Filtered Assets V1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsGetfilteredassetsV1providerIdproviderIdAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Filtered Assets V1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsGetfilteredassetsV1providerIdproviderIdWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Wo Asset Tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsGetwoassettrackingwoIdwoIdAsync(int woId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Wo Asset Tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsGetwoassettrackingwoIdwoIdWithHttpInfoAsync(int woId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Determines if the specified asset has had its tag validated or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> AssetsHasAssetBeenValidatedAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Determines if the specified asset has had its tag validated or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> AssetsHasAssetBeenValidatedWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>> AssetsLocationAssetsTreelocationIdlocationIdtradetradeAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>>> AssetsLocationAssetsTreelocationIdlocationIdtradetradeWithHttpInfoAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetsInfoResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse> AssetsLocationslocationIdtradetradeAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetsInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse>> AssetsLocationslocationIdtradetradeWithHttpInfoAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Records an audit record for the asset tag that was scanned
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> AssetsRecordScannedAssetAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Records an audit record for the asset tag that was scanned
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> AssetsRecordScannedAssetWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsSearchassetsAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsSearchassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>> AssetsSearchassetsByGroupIdAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>>> AssetsSearchassetsByGroupIdWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets list of unable to add reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason> AssetsUnableToAddReasonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets list of unable to add reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason>> AssetsUnableToAddReasonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates wo_UnableToAddAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest> AssetsUnableToAddReasons_0Async(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates wo_UnableToAddAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest>> AssetsUnableToAddReasons_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates wo_UnableToScanAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest> AssetsUnableToScanReasonsAsync(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates wo_UnableToScanAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest>> AssetsUnableToScanReasonsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets list of unable to scan reasons not attached assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset> AssetsUnableToScanReasonsNotAttachedAssetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets list of unable to scan reasons not attached assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset>> AssetsUnableToScanReasonsNotAttachedAssetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets list of unable to scan reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason> AssetsUnableToScanReasonssubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets list of unable to scan reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason>> AssetsUnableToScanReasonssubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets list of unable to validate reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason> AssetsUnableToValidateReasonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets list of unable to validate reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason>> AssetsUnableToValidateReasonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets list of unable to validate reasons not attached assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset> AssetsUnableToValidateReasonsNotAttachedAssetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets list of unable to validate reasons not attached assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset>> AssetsUnableToValidateReasonsNotAttachedAssetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest> AssetsUnableToValidateReasons_0Async(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest>> AssetsUnableToValidateReasons_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update asset location
        /// </summary>
        /// <remarks>
        /// Updates asset location
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdAsync(int assetId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update asset location
        /// </summary>
        /// <remarks>
        /// Updates asset location
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdWithHttpInfoAsync(int assetId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Asset meter readings bulk update
        /// </summary>
        /// <remarks>
        /// Updates information about asset meter readings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsUpdateAssetMeterReadingsBulkAsync(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Asset meter readings bulk update
        /// </summary>
        /// <remarks>
        /// Updates information about asset meter readings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>> AssetsUpdateAssetMeterReadingsBulkWithHttpInfoAsync(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Asset Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> AssetsUpdateAssetStatusAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Asset Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> AssetsUpdateAssetStatusWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Assets Statuses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsUpdateAssetsStatusesAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Assets Statuses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsUpdateAssetsStatusesWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Asset Repair Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> AssetsUpdateassetrepairstatusAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Asset Repair Status By AssetId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> AssetsUpdateassetrepairstatusWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Brands (ver.2)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsManufacturersResponce</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsManufacturersResponce> AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeAsync(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Brands (ver.2)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsManufacturersResponce)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsManufacturersResponce>> AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeWithHttpInfoAsync(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetsValidationRulesForMultipleSubscribersAsync(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>> AssetsValidationRulesForMultipleSubscribersWithHttpInfoAsync(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Work Orders Area list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;</returns>
        System.Threading.Tasks.Task<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>> AssetsWorkorderAreassubscriberIdAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Work Orders Area list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>>> AssetsWorkorderAreassubscriberIdWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkordersAttachassetsAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkordersAttachassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove specified assets from specified work order
        /// </summary>
        /// <remarks>
        /// Remove Assets from Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkordersRemoveassetsAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove specified assets from specified work order
        /// </summary>
        /// <remarks>
        /// Remove Assets from Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkordersRemoveassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add and replace assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkordersSetupassetsAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add and replace assets
        /// </summary>
        /// <remarks>
        /// Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkordersSetupassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach an asset
        /// </summary>
        /// <remarks>
        /// Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkordersworkorderIdAttachAsync(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach an asset
        /// </summary>
        /// <remarks>
        /// Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkordersworkorderIdAttachWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove assets
        /// </summary>
        /// <remarks>
        /// Removes all assets assigned to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkordersworkorderIdDetachAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove assets
        /// </summary>
        /// <remarks>
        /// Removes all assets assigned to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkordersworkorderIdDetachWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove specified assets from specified work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkrequestRemoveAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove specified assets from specified work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkrequestRemoveWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Setup assets to the work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkrequestSetupAsync(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Setup assets to the work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkrequestSetupWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Setup assets to the specified work order
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsWorkrequestworkRequestIdAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Setup assets to the specified work order
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsWorkrequestworkRequestIdWithHttpInfoAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add an asset
        /// </summary>
        /// <remarks>
        /// Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Assets_0Async(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an asset
        /// </summary>
        /// <remarks>
        /// Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Assets_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetResponse> AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberAsync(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse>> AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberWithHttpInfoAsync(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset workorder history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>> AssetsassetidAssetwohistoryAsync(int assetid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset workorder history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>>> AssetsassetidAssetwohistoryWithHttpInfoAsync(int assetid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Brand
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> AssetsbrandNameAddBrandAsync(string brandName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Brand
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> AssetsbrandNameAddBrandWithHttpInfoAsync(string brandName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetssubscriberIdValidationRulesAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>> AssetssubscriberIdValidationRulesWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scan Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetstrackingNumberIsValidationRequiredAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scan Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetstrackingNumberIsValidationRequiredWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset type groups by tradeId
        /// </summary>
        /// <remarks>
        /// Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetstradeIdGetAssetTypeGroupsByTradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset type groups by tradeId
        /// </summary>
        /// <remarks>
        /// Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>> AssetstradeIdGetAssetTypeGroupsByTradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateAssetCodeAsync(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateAssetCodeWithHttpInfoAsync(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsAsync(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> FindAssetsWithHttpInfoAsync(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsByLocationAsync(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> FindAssetsByLocationWithHttpInfoAsync(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsBySubscriberAsync(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> FindAssetsBySubscriberWithHttpInfoAsync(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetResponse> GetAssetAsync(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse>> GetAssetWithHttpInfoAsync(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60;
        /// </summary>
        /// <remarks>
        /// Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> SearchAssetsAsync(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60;
        /// </summary>
        /// <remarks>
        /// Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> SearchAssetsWithHttpInfoAsync(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IAssetsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Update an asset Modifies the details of an existing asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object Assets(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWithHttpInfo(assetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an asset Modifies the details of an existing asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetRequest' is set
            if (assetRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetRequest' when calling AssetsApi->Assets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetRequest;

            localVarRequestOptions.Operation = "AssetsApi.Assets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Assets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an asset Modifies the details of an existing asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWithHttpInfoAsync(assetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an asset Modifies the details of an existing asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetRequest' is set
            if (assetRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetRequest' when calling AssetsApi->Assets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetRequest;

            localVarRequestOptions.Operation = "AssetsApi.Assets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Assets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsActivation(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsActivationWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsActivationWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsActivation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/Activation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsActivationAsync(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsActivationWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsActivationWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsActivation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/Activation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Update Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsAddUpdateAsset(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsAddUpdateAssetWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Update Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsAddUpdateAssetWithHttpInfo(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAddUpdateAsset");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAddUpdateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/AddUpdateAsset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAddUpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Update Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsAddUpdateAssetAsync(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsAddUpdateAssetWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Update Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsAddUpdateAssetWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAddUpdateAsset");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAddUpdateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/AddUpdateAsset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAddUpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add asset meters Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetsAssetMeter(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0)
        {
            AssetsAssetMeterWithHttpInfo(request);
        }

        /// <summary>
        /// Add asset meters Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsAssetMeterWithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetMeter");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/AssetMeter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add asset meters Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsAssetMeterAsync(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetsAssetMeterWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add asset meters Attaches an asset meter to a certain asset by specifying a particular asset type meter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsAssetMeterWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetMeter");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/AssetMeter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an asset meter reading Updates information of a particular asset meter reading.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetsAssetMeterReading(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0)
        {
            AssetsAssetMeterReadingWithHttpInfo(request);
        }

        /// <summary>
        /// Update an asset meter reading Updates information of a particular asset meter reading.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsAssetMeterReadingWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetMeterReading");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeterReading";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/AssetMeterReading", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeterReading", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an asset meter reading Updates information of a particular asset meter reading.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsAssetMeterReadingAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetsAssetMeterReadingWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an asset meter reading Updates information of a particular asset meter reading.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsAssetMeterReadingWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetMeterReading");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeterReading";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/AssetMeterReading", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeterReading", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetsAssetMeterReading_0(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0)
        {
            AssetsAssetMeterReading_0WithHttpInfo(request);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsAssetMeterReading_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetMeterReading_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeterReading_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/AssetMeterReading", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeterReading_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsAssetMeterReading_0Async(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetsAssetMeterReading_0WithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsAssetMeterReading_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetMeterReading_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeterReading_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/AssetMeterReading", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeterReading_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset readings Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> localVarResponse = AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyWithHttpInfo(assetId, lastMeterReadingValuesOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset readings Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyWithHttpInfo(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (lastMeterReadingValuesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "lastMeterReadingValuesOnly", lastMeterReadingValuesOnly));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>("/assets/AssetMeterReadings/{assetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset readings Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyAsync(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> localVarResponse = await AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyWithHttpInfoAsync(assetId, lastMeterReadingValuesOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset readings Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyWithHttpInfoAsync(int assetId, bool? lastMeterReadingValuesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (lastMeterReadingValuesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "lastMeterReadingValuesOnly", lastMeterReadingValuesOnly));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>("/assets/AssetMeterReadings/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset meters Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetMeter> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeter>> localVarResponse = AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdWithHttpInfo(assetMeterId, assetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset meters Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeter>> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdWithHttpInfo(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetMeterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetMeterId", assetMeterId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetMeter>>("/assets/AssetMeters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset meters Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeter>> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdAsync(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeter>> localVarResponse = await AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdWithHttpInfoAsync(assetMeterId, assetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset meters Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of. (optional)</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeter&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeter>>> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdWithHttpInfoAsync(int? assetMeterId = default(int?), int? assetId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetMeterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetMeterId", assetMeterId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetMeter>>("/assets/AssetMeters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get circuits and components Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetsAssetcomponents(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0)
        {
            AssetsAssetcomponentsWithHttpInfo(request);
        }

        /// <summary>
        /// Get circuits and components Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsAssetcomponentsWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetcomponents");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetcomponents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/assetcomponents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetcomponents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get circuits and components Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsAssetcomponentsAsync(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetsAssetcomponentsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get circuits and components Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsAssetcomponentsWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetcomponents");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetcomponents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/assetcomponents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetcomponents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string AssetsAssetrepairstatusassetIdassetId(int assetId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<string> localVarResponse = AssetsAssetrepairstatusassetIdassetIdWithHttpInfo(assetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public ServiceChannel.Api.Client.ApiResponse<string> AssetsAssetrepairstatusassetIdassetIdWithHttpInfo(int assetId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetrepairstatusassetIdassetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/assets/assetrepairstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetrepairstatusassetIdassetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AssetsAssetrepairstatusassetIdassetIdAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<string> localVarResponse = await AssetsAssetrepairstatusassetIdassetIdWithHttpInfoAsync(assetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<string>> AssetsAssetrepairstatusassetIdassetIdWithHttpInfoAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetrepairstatusassetIdassetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/assets/assetrepairstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetrepairstatusassetIdassetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Assets For Replacement 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsAssetsforreplacement(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsAssetsforreplacementWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assets For Replacement 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsAssetsforreplacementWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetsforreplacement");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetsforreplacement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/assetsforreplacement", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetsforreplacement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Assets For Replacement 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsAssetsforreplacementAsync(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsAssetsforreplacementWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assets For Replacement 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsAssetsforreplacementWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssetsforreplacement");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetsforreplacement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/assetsforreplacement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetsforreplacement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Status History By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse</returns>
        public SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse AssetsAssetstatushistoryassetIdassetId(int assetId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse> localVarResponse = AssetsAssetstatushistoryassetIdassetIdWithHttpInfo(assetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Status History By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse> AssetsAssetstatushistoryassetIdassetIdWithHttpInfo(int assetId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetstatushistoryassetIdassetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse>("/assets/assetstatushistory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetstatushistoryassetIdassetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Status History By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse> AssetsAssetstatushistoryassetIdassetIdAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse> localVarResponse = await AssetsAssetstatushistoryassetIdassetIdWithHttpInfoAsync(assetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Status History By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse>> AssetsAssetstatushistoryassetIdassetIdWithHttpInfoAsync(int assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssetstatushistoryassetIdassetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse>("/assets/assetstatushistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssetstatushistoryassetIdassetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Asset Code 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsAssociateAssetCode(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsAssociateAssetCodeWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Asset Code 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsAssociateAssetCodeWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssociateAssetCode");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssociateAssetCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/AssociateAssetCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssociateAssetCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Asset Code 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsAssociateAssetCodeAsync(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsAssociateAssetCodeWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Asset Code 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsAssociateAssetCodeWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsAssociateAssetCode");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsAssociateAssetCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/AssociateAssetCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsAssociateAssetCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsManufacturer> AssetsBrands(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsManufacturer>> localVarResponse = AssetsBrandsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsManufacturer>> AssetsBrandsWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsManufacturer>>("/assets/Brands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsManufacturer>> AssetsBrandsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsManufacturer>> localVarResponse = await AssetsBrandsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsManufacturer&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsManufacturer>>> AssetsBrandsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsManufacturer>>("/assets/Brands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsCanCreateAssetassetTypeId(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsCanCreateAssetassetTypeIdWithHttpInfo(assetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsCanCreateAssetassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanCreateAssetassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/assets/CanCreateAsset/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanCreateAssetassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsCanCreateAssetassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsCanCreateAssetassetTypeIdWithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsCanCreateAssetassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanCreateAssetassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/assets/CanCreateAsset/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanCreateAssetassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if provider is allowed to manage attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetsCanManageAttachmentssubscriberIdsubscriberId(int subscriberId, int operationIndex = 0)
        {
            AssetsCanManageAttachmentssubscriberIdsubscriberIdWithHttpInfo(subscriberId);
        }

        /// <summary>
        /// Check if provider is allowed to manage attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsCanManageAttachmentssubscriberIdsubscriberIdWithHttpInfo(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanManageAttachmentssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/canManageAttachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanManageAttachmentssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if provider is allowed to manage attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsCanManageAttachmentssubscriberIdsubscriberIdAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetsCanManageAttachmentssubscriberIdsubscriberIdWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check if provider is allowed to manage attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsCanManageAttachmentssubscriberIdsubscriberIdWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanManageAttachmentssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/canManageAttachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanManageAttachmentssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsCanProviderCreateAssetForTradetradeId(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsCanProviderCreateAssetForTradetradeIdWithHttpInfo(tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsCanProviderCreateAssetForTradetradeIdWithHttpInfo(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(tradeId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanProviderCreateAssetForTradetradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/assets/CanProviderCreateAssetForTrade/{tradeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanProviderCreateAssetForTradetradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsCanProviderCreateAssetForTradetradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsCanProviderCreateAssetForTradetradeIdWithHttpInfoAsync(tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting permission for provider for create new asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsCanProviderCreateAssetForTradetradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(tradeId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanProviderCreateAssetForTradetradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/assets/CanProviderCreateAssetForTrade/{tradeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanProviderCreateAssetForTradetradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting permission for edit asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsCanUserEditAssetassetTypeIdassetTypeId(int? assetTypeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsCanUserEditAssetassetTypeIdassetTypeIdWithHttpInfo(assetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting permission for edit asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsCanUserEditAssetassetTypeIdassetTypeIdWithHttpInfo(int? assetTypeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetTypeId", assetTypeId));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanUserEditAssetassetTypeIdassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/assets/CanUserEditAsset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanUserEditAssetassetTypeIdassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting permission for edit asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsCanUserEditAssetassetTypeIdassetTypeIdAsync(int? assetTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsCanUserEditAssetassetTypeIdassetTypeIdWithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting permission for edit asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsCanUserEditAssetassetTypeIdassetTypeIdWithHttpInfoAsync(int? assetTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetTypeId", assetTypeId));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsCanUserEditAssetassetTypeIdassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/assets/CanUserEditAsset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCanUserEditAssetassetTypeIdassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Asset meter readings bulk create Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem> AssetsCreateAssetMeterReadingsBulk(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> localVarResponse = AssetsCreateAssetMeterReadingsBulkWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Asset meter readings bulk create Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsCreateAssetMeterReadingsBulkWithHttpInfo(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsCreateAssetMeterReadingsBulk");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsCreateAssetMeterReadingsBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>("/assets/CreateAssetMeterReadingsBulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCreateAssetMeterReadingsBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Asset meter readings bulk create Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsCreateAssetMeterReadingsBulkAsync(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> localVarResponse = await AssetsCreateAssetMeterReadingsBulkWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Asset meter readings bulk create Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to create asset readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>> AssetsCreateAssetMeterReadingsBulkWithHttpInfoAsync(List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsCreateAssetMeterReadingsBulk");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsCreateAssetMeterReadingsBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>("/assets/CreateAssetMeterReadingsBulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsCreateAssetMeterReadingsBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type groups by assetsIds Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup> AssetsGetAssetTypeGroupsByAssetsIds(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> localVarResponse = AssetsGetAssetTypeGroupsByAssetsIdsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type groups by assetsIds Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetsGetAssetTypeGroupsByAssetsIdsWithHttpInfo(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetAssetTypeGroupsByAssetsIds");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetAssetTypeGroupsByAssetsIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>("/assets/GetAssetTypeGroupsByAssetsIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetAssetTypeGroupsByAssetsIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type groups by assetsIds Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetsGetAssetTypeGroupsByAssetsIdsAsync(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> localVarResponse = await AssetsGetAssetTypeGroupsByAssetsIdsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type groups by assetsIds Adds assetsids. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>> AssetsGetAssetTypeGroupsByAssetsIdsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetAssetTypeGroupsByAssetsIds");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetAssetTypeGroupsByAssetsIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>("/assets/GetAssetTypeGroupsByAssetsIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetAssetTypeGroupsByAssetsIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> AssetsGetAssetValidationHistoryByTrackingNumber(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> localVarResponse = AssetsGetAssetValidationHistoryByTrackingNumberWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationHistoryByTrackingNumberWithHttpInfo(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetAssetValidationHistoryByTrackingNumber");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetAssetValidationHistoryByTrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>("/assets/GetAssetValidationHistoryByTrackingNumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetAssetValidationHistoryByTrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationHistoryByTrackingNumberAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> localVarResponse = await AssetsGetAssetValidationHistoryByTrackingNumberWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>> AssetsGetAssetValidationHistoryByTrackingNumberWithHttpInfoAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetAssetValidationHistoryByTrackingNumber");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetAssetValidationHistoryByTrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>("/assets/GetAssetValidationHistoryByTrackingNumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetAssetValidationHistoryByTrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified list of assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> AssetsGetAssetValidationInformation(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> localVarResponse = AssetsGetAssetValidationInformationWithHttpInfo(auditRequests);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified list of assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationInformationWithHttpInfo(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0)
        {
            // verify the required parameter 'auditRequests' is set
            if (auditRequests == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'auditRequests' when calling AssetsApi->AssetsGetAssetValidationInformation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = auditRequests;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetAssetValidationInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>("/assets/GetAssetValidationInformation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetAssetValidationInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified list of assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> AssetsGetAssetValidationInformationAsync(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>> localVarResponse = await AssetsGetAssetValidationInformationWithHttpInfoAsync(auditRequests, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns asset tag validation information for the specified list of assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequests"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>> AssetsGetAssetValidationInformationWithHttpInfoAsync(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'auditRequests' is set
            if (auditRequests == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'auditRequests' when calling AssetsApi->AssetsGetAssetValidationInformation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = auditRequests;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetAssetValidationInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>("/assets/GetAssetValidationInformation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetAssetValidationInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment> AssetsGetPrimaryAttachmentsForAssetList(List<int> listOfAssetIds, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> localVarResponse = AssetsGetPrimaryAttachmentsForAssetListWithHttpInfo(listOfAssetIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListWithHttpInfo(List<int> listOfAssetIds, int operationIndex = 0)
        {
            // verify the required parameter 'listOfAssetIds' is set
            if (listOfAssetIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'listOfAssetIds' when calling AssetsApi->AssetsGetPrimaryAttachmentsForAssetList");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listOfAssetIds;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetPrimaryAttachmentsForAssetList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>("/assets/getPrimaryAttachmentsForAssetList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetPrimaryAttachmentsForAssetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListAsync(List<int> listOfAssetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> localVarResponse = await AssetsGetPrimaryAttachmentsForAssetListWithHttpInfoAsync(listOfAssetIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listOfAssetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>> AssetsGetPrimaryAttachmentsForAssetListWithHttpInfoAsync(List<int> listOfAssetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'listOfAssetIds' is set
            if (listOfAssetIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'listOfAssetIds' when calling AssetsApi->AssetsGetPrimaryAttachmentsForAssetList");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listOfAssetIds;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetPrimaryAttachmentsForAssetList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>("/assets/getPrimaryAttachmentsForAssetList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetPrimaryAttachmentsForAssetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment> AssetsGetPrimaryAttachmentsForAssetListV1(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> localVarResponse = AssetsGetPrimaryAttachmentsForAssetListV1WithHttpInfo(assetAttachmentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListV1WithHttpInfo(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetAttachmentsRequest' is set
            if (assetAttachmentsRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetAttachmentsRequest' when calling AssetsApi->AssetsGetPrimaryAttachmentsForAssetListV1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetAttachmentsRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetPrimaryAttachmentsForAssetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>("/assets/getPrimaryAttachmentsForAssetList_v1", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetPrimaryAttachmentsForAssetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> AssetsGetPrimaryAttachmentsForAssetListV1Async(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>> localVarResponse = await AssetsGetPrimaryAttachmentsForAssetListV1WithHttpInfoAsync(assetAttachmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary attachments for asset list Adds new asset. Returns list of attachments for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>> AssetsGetPrimaryAttachmentsForAssetListV1WithHttpInfoAsync(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAttachmentsRequest' is set
            if (assetAttachmentsRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetAttachmentsRequest' when calling AssetsApi->AssetsGetPrimaryAttachmentsForAssetListV1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetAttachmentsRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetPrimaryAttachmentsForAssetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>("/assets/getPrimaryAttachmentsForAssetList_v1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetPrimaryAttachmentsForAssetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of asset validation statuses for multiple work order. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse</returns>
        public SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse AssetsGetValidationStatusesForMultipleWorkOrders(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse> localVarResponse = AssetsGetValidationStatusesForMultipleWorkOrdersWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of asset validation statuses for multiple work order. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse> AssetsGetValidationStatusesForMultipleWorkOrdersWithHttpInfo(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetValidationStatusesForMultipleWorkOrders");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetValidationStatusesForMultipleWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse>("/assets/GetValidationStatusesForMultipleWorkOrders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetValidationStatusesForMultipleWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of asset validation statuses for multiple work order. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse> AssetsGetValidationStatusesForMultipleWorkOrdersAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse> localVarResponse = await AssetsGetValidationStatusesForMultipleWorkOrdersWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of asset validation statuses for multiple work order. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse>> AssetsGetValidationStatusesForMultipleWorkOrdersWithHttpInfoAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetValidationStatusesForMultipleWorkOrders");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetValidationStatusesForMultipleWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse>("/assets/GetValidationStatusesForMultipleWorkOrders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetValidationStatusesForMultipleWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Assets WorkOrders This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;</returns>
        public Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCount(int workOrdersCount, List<int> assetIds, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> localVarResponse = AssetsGetassetwohistoryworkOrdersCountworkOrdersCountWithHttpInfo(workOrdersCount, assetIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assets WorkOrders This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCountWithHttpInfo(int workOrdersCount, List<int> assetIds, int operationIndex = 0)
        {
            // verify the required parameter 'assetIds' is set
            if (assetIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetIds' when calling AssetsApi->AssetsGetassetwohistoryworkOrdersCountworkOrdersCount");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workOrdersCount", workOrdersCount));
            localVarRequestOptions.Data = assetIds;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetassetwohistoryworkOrdersCountworkOrdersCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>>("/assets/getassetwohistory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetassetwohistoryworkOrdersCountworkOrdersCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Assets WorkOrders This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCountAsync(int workOrdersCount, List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> localVarResponse = await AssetsGetassetwohistoryworkOrdersCountworkOrdersCountWithHttpInfoAsync(workOrdersCount, assetIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assets WorkOrders This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>>> AssetsGetassetwohistoryworkOrdersCountworkOrdersCountWithHttpInfoAsync(int workOrdersCount, List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetIds' is set
            if (assetIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetIds' when calling AssetsApi->AssetsGetassetwohistoryworkOrdersCountworkOrdersCount");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workOrdersCount", workOrdersCount));
            localVarRequestOptions.Data = assetIds;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetassetwohistoryworkOrdersCountworkOrdersCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>>("/assets/getassetwohistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetassetwohistoryworkOrdersCountworkOrdersCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ge tFiltered Asset Leaks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsGetfilteredassetleaks(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsGetfilteredassetleaksWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ge tFiltered Asset Leaks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsGetfilteredassetleaksWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetfilteredassetleaks");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetfilteredassetleaks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/getfilteredassetleaks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetfilteredassetleaks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ge tFiltered Asset Leaks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsGetfilteredassetleaksAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsGetfilteredassetleaksWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ge tFiltered Asset Leaks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsGetfilteredassetleaksWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetfilteredassetleaks");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetfilteredassetleaks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/getfilteredassetleaks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetfilteredassetleaks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsGetfilteredassets(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsGetfilteredassetsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsGetfilteredassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetfilteredassets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetfilteredassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/getfilteredassets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetfilteredassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsGetfilteredassetsAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsGetfilteredassetsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsGetfilteredassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetfilteredassets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetfilteredassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/getfilteredassets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetfilteredassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered Assets V1 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsGetfilteredassetsV1providerIdproviderId(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsGetfilteredassetsV1providerIdproviderIdWithHttpInfo(request, providerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered Assets V1 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsGetfilteredassetsV1providerIdproviderIdWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetfilteredassetsV1providerIdproviderId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetfilteredassetsV1providerIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/getfilteredassetsV1", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetfilteredassetsV1providerIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered Assets V1 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsGetfilteredassetsV1providerIdproviderIdAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsGetfilteredassetsV1providerIdproviderIdWithHttpInfoAsync(request, providerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered Assets V1 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsGetfilteredassetsV1providerIdproviderIdWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsGetfilteredassetsV1providerIdproviderId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetfilteredassetsV1providerIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/getfilteredassetsV1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetfilteredassetsV1providerIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Wo Asset Tracking 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsGetwoassettrackingwoIdwoId(int woId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsGetwoassettrackingwoIdwoIdWithHttpInfo(woId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wo Asset Tracking 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsGetwoassettrackingwoIdwoIdWithHttpInfo(int woId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "woId", woId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetwoassettrackingwoIdwoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/getwoassettracking", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetwoassettrackingwoIdwoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Wo Asset Tracking 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsGetwoassettrackingwoIdwoIdAsync(int woId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsGetwoassettrackingwoIdwoIdWithHttpInfoAsync(woId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wo Asset Tracking 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="woId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsGetwoassettrackingwoIdwoIdWithHttpInfoAsync(int woId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "woId", woId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsGetwoassettrackingwoIdwoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/getwoassettracking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetwoassettrackingwoIdwoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Determines if the specified asset has had its tag validated or not 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool AssetsHasAssetBeenValidated(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = AssetsHasAssetBeenValidatedWithHttpInfo(auditRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Determines if the specified asset has had its tag validated or not 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ServiceChannel.Api.Client.ApiResponse<bool> AssetsHasAssetBeenValidatedWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0)
        {
            // verify the required parameter 'auditRequest' is set
            if (auditRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'auditRequest' when calling AssetsApi->AssetsHasAssetBeenValidated");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = auditRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsHasAssetBeenValidated";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/assets/HasAssetBeenValidated", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsHasAssetBeenValidated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Determines if the specified asset has had its tag validated or not 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> AssetsHasAssetBeenValidatedAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = await AssetsHasAssetBeenValidatedWithHttpInfoAsync(auditRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Determines if the specified asset has had its tag validated or not 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<bool>> AssetsHasAssetBeenValidatedWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'auditRequest' is set
            if (auditRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'auditRequest' when calling AssetsApi->AssetsHasAssetBeenValidated");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = auditRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsHasAssetBeenValidated";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/assets/HasAssetBeenValidated", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsHasAssetBeenValidated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode> AssetsLocationAssetsTreelocationIdlocationIdtradetrade(int locationId, string? trade = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>> localVarResponse = AssetsLocationAssetsTreelocationIdlocationIdtradetradeWithHttpInfo(locationId, trade);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>> AssetsLocationAssetsTreelocationIdlocationIdtradetradeWithHttpInfo(int locationId, string? trade = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsLocationAssetsTreelocationIdlocationIdtradetrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>>("/assets/locationAssetsTree", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsLocationAssetsTreelocationIdlocationIdtradetrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>> AssetsLocationAssetsTreelocationIdlocationIdtradetradeAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>> localVarResponse = await AssetsLocationAssetsTreelocationIdlocationIdtradetradeWithHttpInfoAsync(locationId, trade, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="trade"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>>> AssetsLocationAssetsTreelocationIdlocationIdtradetradeWithHttpInfoAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsLocationAssetsTreelocationIdlocationIdtradetrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>>("/assets/locationAssetsTree", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsLocationAssetsTreelocationIdlocationIdtradetrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetsInfoResponse</returns>
        public SCServiceChannelServicesMessagingAssetsAssetsInfoResponse AssetsLocationslocationIdtradetrade(int locationId, string? trade = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse> localVarResponse = AssetsLocationslocationIdtradetradeWithHttpInfo(locationId, trade);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetsInfoResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse> AssetsLocationslocationIdtradetradeWithHttpInfo(int locationId, string? trade = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsLocationslocationIdtradetrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse>("/assets/locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsLocationslocationIdtradetrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetsInfoResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse> AssetsLocationslocationIdtradetradeAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse> localVarResponse = await AssetsLocationslocationIdtradetradeWithHttpInfoAsync(locationId, trade, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetsInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse>> AssetsLocationslocationIdtradetradeWithHttpInfoAsync(int locationId, string? trade = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsLocationslocationIdtradetrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse>("/assets/locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsLocationslocationIdtradetrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Records an audit record for the asset tag that was scanned 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool AssetsRecordScannedAsset(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = AssetsRecordScannedAssetWithHttpInfo(auditRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Records an audit record for the asset tag that was scanned 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ServiceChannel.Api.Client.ApiResponse<bool> AssetsRecordScannedAssetWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0)
        {
            // verify the required parameter 'auditRequest' is set
            if (auditRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'auditRequest' when calling AssetsApi->AssetsRecordScannedAsset");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = auditRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsRecordScannedAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/assets/RecordScannedAsset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsRecordScannedAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Records an audit record for the asset tag that was scanned 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> AssetsRecordScannedAssetAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = await AssetsRecordScannedAssetWithHttpInfoAsync(auditRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Records an audit record for the asset tag that was scanned 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<bool>> AssetsRecordScannedAssetWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'auditRequest' is set
            if (auditRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'auditRequest' when calling AssetsApi->AssetsRecordScannedAsset");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = auditRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsRecordScannedAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/assets/RecordScannedAsset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsRecordScannedAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsSearchassets(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsSearchassetsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsSearchassetsWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsSearchassets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsSearchassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/searchassets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsSearchassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsSearchassetsAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsSearchassetsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Assets 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsSearchassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsSearchassets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsSearchassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/searchassets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsSearchassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse> AssetsSearchassetsByGroupId(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>> localVarResponse = AssetsSearchassetsByGroupIdWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>> AssetsSearchassetsByGroupIdWithHttpInfo(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsSearchassetsByGroupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsSearchassetsByGroupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>>("/assets/searchassetsByGroupId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsSearchassetsByGroupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>> AssetsSearchassetsByGroupIdAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>> localVarResponse = await AssetsSearchassetsByGroupIdWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>>> AssetsSearchassetsByGroupIdWithHttpInfoAsync(SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsSearchassetsByGroupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsSearchassetsByGroupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>>("/assets/searchassetsByGroupId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsSearchassetsByGroupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to add reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason</returns>
        public SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason AssetsUnableToAddReasons(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason> localVarResponse = AssetsUnableToAddReasonsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to add reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason> AssetsUnableToAddReasonsWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToAddReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason>("/assets/UnableToAddReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToAddReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to add reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason> AssetsUnableToAddReasonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason> localVarResponse = await AssetsUnableToAddReasonsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to add reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason>> AssetsUnableToAddReasonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToAddReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason>("/assets/UnableToAddReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToAddReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates wo_UnableToAddAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest</returns>
        public SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest AssetsUnableToAddReasons_0(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest> localVarResponse = AssetsUnableToAddReasons_0WithHttpInfo(model);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates wo_UnableToAddAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest> AssetsUnableToAddReasons_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling AssetsApi->AssetsUnableToAddReasons_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToAddReasons_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest>("/assets/UnableToAddReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToAddReasons_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates wo_UnableToAddAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest> AssetsUnableToAddReasons_0Async(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest> localVarResponse = await AssetsUnableToAddReasons_0WithHttpInfoAsync(model, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates wo_UnableToAddAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest>> AssetsUnableToAddReasons_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling AssetsApi->AssetsUnableToAddReasons_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToAddReasons_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest>("/assets/UnableToAddReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToAddReasons_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates wo_UnableToScanAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest</returns>
        public SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest AssetsUnableToScanReasons(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest> localVarResponse = AssetsUnableToScanReasonsWithHttpInfo(model);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates wo_UnableToScanAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest> AssetsUnableToScanReasonsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling AssetsApi->AssetsUnableToScanReasons");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToScanReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest>("/assets/UnableToScanReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToScanReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates wo_UnableToScanAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest> AssetsUnableToScanReasonsAsync(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest> localVarResponse = await AssetsUnableToScanReasonsWithHttpInfoAsync(model, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates wo_UnableToScanAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest>> AssetsUnableToScanReasonsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling AssetsApi->AssetsUnableToScanReasons");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToScanReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest>("/assets/UnableToScanReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToScanReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to scan reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset</returns>
        public SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset AssetsUnableToScanReasonsNotAttachedAsset(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset> localVarResponse = AssetsUnableToScanReasonsNotAttachedAssetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to scan reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset> AssetsUnableToScanReasonsNotAttachedAssetWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToScanReasonsNotAttachedAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset>("/assets/UnableToScanReasonsNotAttachedAsset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToScanReasonsNotAttachedAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to scan reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset> AssetsUnableToScanReasonsNotAttachedAssetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset> localVarResponse = await AssetsUnableToScanReasonsNotAttachedAssetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to scan reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset>> AssetsUnableToScanReasonsNotAttachedAssetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToScanReasonsNotAttachedAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset>("/assets/UnableToScanReasonsNotAttachedAsset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToScanReasonsNotAttachedAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to scan reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason</returns>
        public SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason AssetsUnableToScanReasonssubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason> localVarResponse = AssetsUnableToScanReasonssubscriberIdsubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to scan reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason> AssetsUnableToScanReasonssubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToScanReasonssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason>("/assets/UnableToScanReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToScanReasonssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to scan reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason> AssetsUnableToScanReasonssubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason> localVarResponse = await AssetsUnableToScanReasonssubscriberIdsubscriberIdWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to scan reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique indentifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason>> AssetsUnableToScanReasonssubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToScanReasonssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason>("/assets/UnableToScanReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToScanReasonssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to validate reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason</returns>
        public SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason AssetsUnableToValidateReasons(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason> localVarResponse = AssetsUnableToValidateReasonsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to validate reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason> AssetsUnableToValidateReasonsWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToValidateReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason>("/assets/UnableToValidateReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToValidateReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to validate reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason> AssetsUnableToValidateReasonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason> localVarResponse = await AssetsUnableToValidateReasonsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to validate reasons. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason>> AssetsUnableToValidateReasonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToValidateReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason>("/assets/UnableToValidateReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToValidateReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to validate reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset</returns>
        public SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset AssetsUnableToValidateReasonsNotAttachedAsset(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset> localVarResponse = AssetsUnableToValidateReasonsNotAttachedAssetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to validate reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset> AssetsUnableToValidateReasonsNotAttachedAssetWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToValidateReasonsNotAttachedAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset>("/assets/UnableToValidateReasonsNotAttachedAsset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToValidateReasonsNotAttachedAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets list of unable to validate reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset> AssetsUnableToValidateReasonsNotAttachedAssetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset> localVarResponse = await AssetsUnableToValidateReasonsNotAttachedAssetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of unable to validate reasons not attached assets. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset>> AssetsUnableToValidateReasonsNotAttachedAssetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToValidateReasonsNotAttachedAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset>("/assets/UnableToValidateReasonsNotAttachedAsset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToValidateReasonsNotAttachedAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest</returns>
        public SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest AssetsUnableToValidateReasons_0(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest> localVarResponse = AssetsUnableToValidateReasons_0WithHttpInfo(model);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest> AssetsUnableToValidateReasons_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling AssetsApi->AssetsUnableToValidateReasons_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToValidateReasons_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest>("/assets/UnableToValidateReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToValidateReasons_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest> AssetsUnableToValidateReasons_0Async(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest> localVarResponse = await AssetsUnableToValidateReasons_0WithHttpInfoAsync(model, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest>> AssetsUnableToValidateReasons_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling AssetsApi->AssetsUnableToValidateReasons_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUnableToValidateReasons_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest>("/assets/UnableToValidateReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUnableToValidateReasons_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset location Updates asset location
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId(int assetId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdWithHttpInfo(assetId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset location Updates asset location
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdWithHttpInfo(int assetId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/updateAssetLocation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset location Updates asset location
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdAsync(int assetId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdWithHttpInfoAsync(assetId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset location Updates asset location
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdWithHttpInfoAsync(int assetId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/updateAssetLocation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Asset meter readings bulk update Updates information about asset meter readings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem> AssetsUpdateAssetMeterReadingsBulk(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> localVarResponse = AssetsUpdateAssetMeterReadingsBulkWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Asset meter readings bulk update Updates information about asset meter readings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsUpdateAssetMeterReadingsBulkWithHttpInfo(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateAssetMeterReadingsBulk");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetMeterReadingsBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>("/assets/UpdateAssetMeterReadingsBulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetMeterReadingsBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Asset meter readings bulk update Updates information about asset meter readings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> AssetsUpdateAssetMeterReadingsBulkAsync(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>> localVarResponse = await AssetsUpdateAssetMeterReadingsBulkWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Asset meter readings bulk update Updates information about asset meter readings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>> AssetsUpdateAssetMeterReadingsBulkWithHttpInfoAsync(List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateAssetMeterReadingsBulk");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetMeterReadingsBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>("/assets/UpdateAssetMeterReadingsBulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetMeterReadingsBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool AssetsUpdateAssetStatus(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = AssetsUpdateAssetStatusWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ServiceChannel.Api.Client.ApiResponse<bool> AssetsUpdateAssetStatusWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateAssetStatus");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/assets/updateAssetStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> AssetsUpdateAssetStatusAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = await AssetsUpdateAssetStatusWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<bool>> AssetsUpdateAssetStatusWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateAssetStatus");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/assets/updateAssetStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Assets Statuses 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetsUpdateAssetsStatuses(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0)
        {
            AssetsUpdateAssetsStatusesWithHttpInfo(request);
        }

        /// <summary>
        /// Update Assets Statuses 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsUpdateAssetsStatusesWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateAssetsStatuses");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetsStatuses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/updateAssetsStatuses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetsStatuses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Assets Statuses 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsUpdateAssetsStatusesAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetsUpdateAssetsStatusesWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Assets Statuses 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsUpdateAssetsStatusesWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateAssetsStatuses");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateAssetsStatuses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/updateAssetsStatuses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetsStatuses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool AssetsUpdateassetrepairstatus(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = AssetsUpdateassetrepairstatusWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ServiceChannel.Api.Client.ApiResponse<bool> AssetsUpdateassetrepairstatusWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateassetrepairstatus");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateassetrepairstatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/assets/updateassetrepairstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateassetrepairstatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> AssetsUpdateassetrepairstatusAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = await AssetsUpdateassetrepairstatusWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Asset Repair Status By AssetId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<bool>> AssetsUpdateassetrepairstatusWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsUpdateassetrepairstatus");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsUpdateassetrepairstatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/assets/updateassetrepairstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateassetrepairstatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brands (ver.2) 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsManufacturersResponce</returns>
        public SCServiceChannelServicesMessagingAssetsManufacturersResponce AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsManufacturersResponce> localVarResponse = AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeWithHttpInfo(keyword, startIndex, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brands (ver.2) 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsManufacturersResponce</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsManufacturersResponce> AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeWithHttpInfo(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsManufacturersResponce>("/assets/v2/Brands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brands (ver.2) 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsManufacturersResponce</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsManufacturersResponce> AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeAsync(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsManufacturersResponce> localVarResponse = await AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeWithHttpInfoAsync(keyword, startIndex, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brands (ver.2) 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="startIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsManufacturersResponce)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsManufacturersResponce>> AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeWithHttpInfoAsync(string? keyword = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsManufacturersResponce>("/assets/v2/Brands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        public SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging AssetsValidationRulesForMultipleSubscribers(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> localVarResponse = AssetsValidationRulesForMultipleSubscribersWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetsValidationRulesForMultipleSubscribersWithHttpInfo(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsValidationRulesForMultipleSubscribers");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsValidationRulesForMultipleSubscribers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>("/assets/ValidationRulesForMultipleSubscribers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsValidationRulesForMultipleSubscribers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetsValidationRulesForMultipleSubscribersAsync(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> localVarResponse = await AssetsValidationRulesForMultipleSubscribersWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>> AssetsValidationRulesForMultipleSubscribersWithHttpInfoAsync(SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsValidationRulesForMultipleSubscribers");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsValidationRulesForMultipleSubscribers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>("/assets/ValidationRulesForMultipleSubscribers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsValidationRulesForMultipleSubscribers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Work Orders Area list 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;</returns>
        public List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString> AssetsWorkorderAreassubscriberId(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>> localVarResponse = AssetsWorkorderAreassubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Work Orders Area list 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>> AssetsWorkorderAreassubscriberIdWithHttpInfo(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkorderAreassubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>>("/assets/WorkorderAreas/{subscriberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkorderAreassubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Work Orders Area list 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>> AssetsWorkorderAreassubscriberIdAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>> localVarResponse = await AssetsWorkorderAreassubscriberIdWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Work Orders Area list 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>>> AssetsWorkorderAreassubscriberIdWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkorderAreassubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>>("/assets/WorkorderAreas/{subscriberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkorderAreassubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkordersAttachassets(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkordersAttachassetsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkordersAttachassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkordersAttachassets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersAttachassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/workorders/attachassets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersAttachassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkordersAttachassetsAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkordersAttachassetsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkordersAttachassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkordersAttachassets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersAttachassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/workorders/attachassets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersAttachassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove specified assets from specified work order Remove Assets from Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkordersRemoveassets(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkordersRemoveassetsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove specified assets from specified work order Remove Assets from Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkordersRemoveassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkordersRemoveassets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersRemoveassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/workorders/removeassets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersRemoveassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove specified assets from specified work order Remove Assets from Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkordersRemoveassetsAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkordersRemoveassetsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove specified assets from specified work order Remove Assets from Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkordersRemoveassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkordersRemoveassets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersRemoveassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/workorders/removeassets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersRemoveassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add and replace assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkordersSetupassets(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkordersSetupassetsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add and replace assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkordersSetupassetsWithHttpInfo(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkordersSetupassets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersSetupassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/workorders/setupassets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersSetupassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add and replace assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkordersSetupassetsAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkordersSetupassetsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add and replace assets Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkordersSetupassetsWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkordersSetupassets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersSetupassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/workorders/setupassets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersSetupassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach an asset Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkordersworkorderIdAttach(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkordersworkorderIdAttachWithHttpInfo(workorderId, attachAssetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach an asset Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkordersworkorderIdAttachWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'attachAssetRequest' is set
            if (attachAssetRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'attachAssetRequest' when calling AssetsApi->AssetsWorkordersworkorderIdAttach");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = attachAssetRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersworkorderIdAttach";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/workorders/{workorderId}/attach", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersworkorderIdAttach", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach an asset Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkordersworkorderIdAttachAsync(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkordersworkorderIdAttachWithHttpInfoAsync(workorderId, attachAssetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach an asset Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkordersworkorderIdAttachWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'attachAssetRequest' is set
            if (attachAssetRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'attachAssetRequest' when calling AssetsApi->AssetsWorkordersworkorderIdAttach");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = attachAssetRequest;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersworkorderIdAttach";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/workorders/{workorderId}/attach", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersworkorderIdAttach", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove assets Removes all assets assigned to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkordersworkorderIdDetach(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkordersworkorderIdDetachWithHttpInfo(workorderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove assets Removes all assets assigned to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkordersworkorderIdDetachWithHttpInfo(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersworkorderIdDetach";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/workorders/{workorderId}/detach", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersworkorderIdDetach", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove assets Removes all assets assigned to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkordersworkorderIdDetachAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkordersworkorderIdDetachWithHttpInfoAsync(workorderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove assets Removes all assets assigned to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkordersworkorderIdDetachWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkordersworkorderIdDetach";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/workorders/{workorderId}/detach", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkordersworkorderIdDetach", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove specified assets from specified work request *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkrequestRemove(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkrequestRemoveWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove specified assets from specified work request *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkrequestRemoveWithHttpInfo(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkrequestRemove");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkrequestRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/workrequest/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkrequestRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove specified assets from specified work request *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkrequestRemoveAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkrequestRemoveWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove specified assets from specified work request *In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkrequestRemoveWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkrequestRemove");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkrequestRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/workrequest/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkrequestRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Setup assets to the work request *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkrequestSetup(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkrequestSetupWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Setup assets to the work request *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkrequestSetupWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkrequestSetup");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkrequestSetup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/workrequest/setup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkrequestSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Setup assets to the work request *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkrequestSetupAsync(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkrequestSetupWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Setup assets to the work request *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkrequestSetupWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetsApi->AssetsWorkrequestSetup");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkrequestSetup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/workrequest/setup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkrequestSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Setup assets to the specified work order *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsWorkrequestworkRequestId(int workRequestId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsWorkrequestworkRequestIdWithHttpInfo(workRequestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Setup assets to the specified work order *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsWorkrequestworkRequestIdWithHttpInfo(int workRequestId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkrequestworkRequestId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/assets/workrequest/{workRequestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkrequestworkRequestId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Setup assets to the specified work order *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsWorkrequestworkRequestIdAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsWorkrequestworkRequestIdWithHttpInfoAsync(workRequestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Setup assets to the specified work order *In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsWorkrequestworkRequestIdWithHttpInfoAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsWorkrequestworkRequestId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/assets/workrequest/{workRequestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsWorkrequestworkRequestId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an asset Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Assets_0(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0)
        {
            Assets_0WithHttpInfo(assetRequest);
        }

        /// <summary>
        /// Add an asset Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> Assets_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetRequest' is set
            if (assetRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetRequest' when calling AssetsApi->Assets_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetRequest;

            localVarRequestOptions.Operation = "AssetsApi.Assets_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Assets_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an asset Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Assets_0Async(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await Assets_0WithHttpInfoAsync(assetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add an asset Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> Assets_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetRequest' is set
            if (assetRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetRequest' when calling AssetsApi->Assets_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetRequest;

            localVarRequestOptions.Operation = "AssetsApi.Assets_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Assets_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        public SCServiceChannelServicesMessagingAssetsAssetResponse AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> localVarResponse = AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberWithHttpInfo(assetId, locationId, storeId, tagId, trackingNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberWithHttpInfo(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (tagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tagId", tagId));
            }
            if (trackingNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetResponse>("/assets/{assetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetResponse> AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberAsync(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> localVarResponse = await AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberWithHttpInfoAsync(assetId, locationId, storeId, tagId, trackingNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly. (optional)</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly. (optional)</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse>> AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberWithHttpInfoAsync(int assetId, int? locationId = default(int?), string? storeId = default(string?), string? tagId = default(string?), int? trackingNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (tagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tagId", tagId));
            }
            if (trackingNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetResponse>("/assets/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset workorder history 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;</returns>
        public List<SCServiceChannelApiModelEquipmentsAssetWorkHistory> AssetsassetidAssetwohistory(int assetid, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>> localVarResponse = AssetsassetidAssetwohistoryWithHttpInfo(assetid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset workorder history 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>> AssetsassetidAssetwohistoryWithHttpInfo(int assetid, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetid", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetid)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsassetidAssetwohistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>>("/assets/{assetid}/assetwohistory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetidAssetwohistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset workorder history 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>> AssetsassetidAssetwohistoryAsync(int assetid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>> localVarResponse = await AssetsassetidAssetwohistoryWithHttpInfoAsync(assetid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset workorder history 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelEquipmentsAssetWorkHistory&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>>> AssetsassetidAssetwohistoryWithHttpInfoAsync(int assetid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetid", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetid)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsassetidAssetwohistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>>("/assets/{assetid}/assetwohistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetidAssetwohistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Brand 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        public int AssetsbrandNameAddBrand(string brandName, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<int> localVarResponse = AssetsbrandNameAddBrandWithHttpInfo(brandName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Brand 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        public ServiceChannel.Api.Client.ApiResponse<int> AssetsbrandNameAddBrandWithHttpInfo(string brandName, int operationIndex = 0)
        {
            // verify the required parameter 'brandName' is set
            if (brandName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'brandName' when calling AssetsApi->AssetsbrandNameAddBrand");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandName", ServiceChannel.Api.Client.ClientUtils.ParameterToString(brandName)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsbrandNameAddBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<int>("/assets/{brandName}/AddBrand", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsbrandNameAddBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Brand 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> AssetsbrandNameAddBrandAsync(string brandName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<int> localVarResponse = await AssetsbrandNameAddBrandWithHttpInfoAsync(brandName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Brand 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<int>> AssetsbrandNameAddBrandWithHttpInfoAsync(string brandName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandName' is set
            if (brandName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'brandName' when calling AssetsApi->AssetsbrandNameAddBrand");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandName", ServiceChannel.Api.Client.ClientUtils.ParameterToString(brandName)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetsbrandNameAddBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<int>("/assets/{brandName}/AddBrand", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsbrandNameAddBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        public SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging AssetssubscriberIdValidationRules(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> localVarResponse = AssetssubscriberIdValidationRulesWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetssubscriberIdValidationRulesWithHttpInfo(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetssubscriberIdValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>("/assets/{subscriberId}/ValidationRules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetssubscriberIdValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> AssetssubscriberIdValidationRulesAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging> localVarResponse = await AssetssubscriberIdValidationRulesWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>> AssetssubscriberIdValidationRulesWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetssubscriberIdValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>("/assets/{subscriberId}/ValidationRules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetssubscriberIdValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scan Method 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetstrackingNumberIsValidationRequired(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetstrackingNumberIsValidationRequiredWithHttpInfo(trackingNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scan Method 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetstrackingNumberIsValidationRequiredWithHttpInfo(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(trackingNumber)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetstrackingNumberIsValidationRequired";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/assets/{trackingNumber}/IsValidationRequired", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetstrackingNumberIsValidationRequired", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scan Method 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetstrackingNumberIsValidationRequiredAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetstrackingNumberIsValidationRequiredWithHttpInfoAsync(trackingNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scan Method 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetstrackingNumberIsValidationRequiredWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(trackingNumber)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetstrackingNumberIsValidationRequired";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/assets/{trackingNumber}/IsValidationRequired", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetstrackingNumberIsValidationRequired", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type groups by tradeId Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup> AssetstradeIdGetAssetTypeGroupsByTradeId(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> localVarResponse = AssetstradeIdGetAssetTypeGroupsByTradeIdWithHttpInfo(tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type groups by tradeId Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetstradeIdGetAssetTypeGroupsByTradeIdWithHttpInfo(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(tradeId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetstradeIdGetAssetTypeGroupsByTradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>("/assets/{tradeId}/getAssetTypeGroupsByTradeId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetstradeIdGetAssetTypeGroupsByTradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type groups by tradeId Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetstradeIdGetAssetTypeGroupsByTradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> localVarResponse = await AssetstradeIdGetAssetTypeGroupsByTradeIdWithHttpInfoAsync(tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type groups by tradeId Adds tradeId. Returns list of assetTypeGroup for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>> AssetstradeIdGetAssetTypeGroupsByTradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(tradeId)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.AssetstradeIdGetAssetTypeGroupsByTradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>("/assets/{tradeId}/getAssetTypeGroupsByTradeId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetstradeIdGetAssetTypeGroupsByTradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssociateAssetCode(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            AssociateAssetCodeWithHttpInfo(processDuplicatedAssetTag, code, equipmentId, expand, select, filter, orderby, top, skip, count);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssociateAssetCodeWithHttpInfo(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'code' when calling AssetsApi->AssociateAssetCode");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processDuplicatedAssetTag", ServiceChannel.Api.Client.ClientUtils.ParameterToString(processDuplicatedAssetTag)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", ServiceChannel.Api.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("equipmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(equipmentId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssociateAssetCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/odata/assets/Service.AssociateAssetCode(equipmentId={equipmentId},code={code},processDuplicatedAssetTag={processDuplicatedAssetTag})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateAssetCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateAssetCodeAsync(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssociateAssetCodeWithHttpInfoAsync(processDuplicatedAssetTag, code, equipmentId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssociateAssetCodeWithHttpInfoAsync(bool processDuplicatedAssetTag, string code, int equipmentId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'code' when calling AssetsApi->AssociateAssetCode");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processDuplicatedAssetTag", ServiceChannel.Api.Client.ClientUtils.ParameterToString(processDuplicatedAssetTag)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", ServiceChannel.Api.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("equipmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(equipmentId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.AssociateAssetCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/odata/assets/Service.AssociateAssetCode(equipmentId={equipmentId},code={code},processDuplicatedAssetTag={processDuplicatedAssetTag})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateAssetCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetResponse> FindAssets(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = FindAssetsWithHttpInfo(searchCriteria, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsWithHttpInfo(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'searchCriteria' is set
            if (searchCriteria == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'searchCriteria' when calling AssetsApi->FindAssets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("searchCriteria", ServiceChannel.Api.Client.ClientUtils.ParameterToString(searchCriteria)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.FindAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.FindAssets(searchCriteria={searchCriteria})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsAsync(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = await FindAssetsWithHttpInfoAsync(searchCriteria, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> FindAssetsWithHttpInfoAsync(string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchCriteria' is set
            if (searchCriteria == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'searchCriteria' when calling AssetsApi->FindAssets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("searchCriteria", ServiceChannel.Api.Client.ClientUtils.ParameterToString(searchCriteria)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.FindAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.FindAssets(searchCriteria={searchCriteria})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetResponse> FindAssetsByLocation(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = FindAssetsByLocationWithHttpInfo(locationId, searchCriteria, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsByLocationWithHttpInfo(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'searchCriteria' is set
            if (searchCriteria == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'searchCriteria' when calling AssetsApi->FindAssetsByLocation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("searchCriteria", ServiceChannel.Api.Client.ClientUtils.ParameterToString(searchCriteria)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.FindAssetsByLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.FindAssetsByLocation(searchCriteria={searchCriteria},locationId={locationId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAssetsByLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsByLocationAsync(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = await FindAssetsByLocationWithHttpInfoAsync(locationId, searchCriteria, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> FindAssetsByLocationWithHttpInfoAsync(int locationId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchCriteria' is set
            if (searchCriteria == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'searchCriteria' when calling AssetsApi->FindAssetsByLocation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("searchCriteria", ServiceChannel.Api.Client.ClientUtils.ParameterToString(searchCriteria)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.FindAssetsByLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.FindAssetsByLocation(searchCriteria={searchCriteria},locationId={locationId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAssetsByLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetResponse> FindAssetsBySubscriber(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = FindAssetsBySubscriberWithHttpInfo(subscriberId, searchCriteria, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsBySubscriberWithHttpInfo(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'searchCriteria' is set
            if (searchCriteria == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'searchCriteria' when calling AssetsApi->FindAssetsBySubscriber");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("searchCriteria", ServiceChannel.Api.Client.ClientUtils.ParameterToString(searchCriteria)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.FindAssetsBySubscriber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.FindAssetsBySubscriber(searchCriteria={searchCriteria},subscriberId={subscriberId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAssetsBySubscriber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> FindAssetsBySubscriberAsync(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = await FindAssetsBySubscriberWithHttpInfoAsync(subscriberId, searchCriteria, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> FindAssetsBySubscriberWithHttpInfoAsync(int subscriberId, string searchCriteria, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchCriteria' is set
            if (searchCriteria == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'searchCriteria' when calling AssetsApi->FindAssetsBySubscriber");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("searchCriteria", ServiceChannel.Api.Client.ClientUtils.ParameterToString(searchCriteria)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.FindAssetsBySubscriber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.FindAssetsBySubscriber(searchCriteria={searchCriteria},subscriberId={subscriberId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAssetsBySubscriber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        public SCServiceChannelServicesMessagingAssetsAssetResponse GetAsset(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> localVarResponse = GetAssetWithHttpInfo(assetId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> GetAssetWithHttpInfo(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.GetAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetResponse>("/odata/assets({assetId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetResponse> GetAssetAsync(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse> localVarResponse = await GetAssetWithHttpInfoAsync(assetId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an asset Returns the details of the specified asset for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetResponse>> GetAssetWithHttpInfoAsync(int assetId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.GetAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetResponse>("/odata/assets({assetId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60; Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetResponse> SearchAssets(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = SearchAssetsWithHttpInfo(code, locationId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60; Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> SearchAssetsWithHttpInfo(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'code' when calling AssetsApi->SearchAssets");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", ServiceChannel.Api.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.SearchAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.Search(locationId={locationId},code={code})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60; Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> SearchAssetsAsync(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>> localVarResponse = await SearchAssetsWithHttpInfoAsync(code, locationId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60; Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>> SearchAssetsWithHttpInfoAsync(string code, int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'code' when calling AssetsApi->SearchAssets");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", ServiceChannel.Api.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AssetsApi.SearchAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>("/odata/assets/Service.Search(locationId={locationId},code={code})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
