/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdapterApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CheckIn/checkOut of work order
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse AdapterCheckInOutworkorders(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0);

        /// <summary>
        /// CheckIn/checkOut of work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterCheckInOutworkordersWithHttpInfo(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0);
        /// <summary>
        /// Assign provider
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdapterProviderAssignments(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0);

        /// <summary>
        /// Assign provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdapterProviderAssignmentsWithHttpInfo(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0);
        /// <summary>
        /// Update proposal status
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingProposalResponse</returns>
        SCServiceChannelServicesBrokerModelsProcessingProposalResponse AdapterUpdateProposalStatus(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0);

        /// <summary>
        /// Update proposal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingProposalResponse</returns>
        ApiResponse<SCServiceChannelServicesBrokerModelsProcessingProposalResponse> AdapterUpdateProposalStatusWithHttpInfo(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0);
        /// <summary>
        /// Update location notes
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdapterUpdatelocationnotes(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0);

        /// <summary>
        /// Update location notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdapterUpdatelocationnotesWithHttpInfo(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0);
        /// <summary>
        /// Update work order
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse AdapterUpdateworkorders(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0);

        /// <summary>
        /// Update work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterUpdateworkordersWithHttpInfo(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0);
        /// <summary>
        /// Create a new work order
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse AdapterWorkorders(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0);

        /// <summary>
        /// Create a new work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterWorkordersWithHttpInfo(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdapterApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// CheckIn/checkOut of work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterCheckInOutworkordersAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CheckIn/checkOut of work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>> AdapterCheckInOutworkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdapterProviderAssignmentsAsync(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdapterProviderAssignmentsWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update proposal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingProposalResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingProposalResponse> AdapterUpdateProposalStatusAsync(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update proposal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingProposalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesBrokerModelsProcessingProposalResponse>> AdapterUpdateProposalStatusWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update location notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdapterUpdatelocationnotesAsync(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update location notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdapterUpdatelocationnotesWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterUpdateworkordersAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>> AdapterUpdateworkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterWorkordersAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>> AdapterWorkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdapterApi : IAdapterApiSync, IAdapterApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdapterApi : IAdapterApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdapterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdapterApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdapterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdapterApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdapterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdapterApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdapterApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AdapterApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// CheckIn/checkOut of work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse AdapterCheckInOutworkorders(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> localVarResponse = AdapterCheckInOutworkordersWithHttpInfo(message);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CheckIn/checkOut of work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterCheckInOutworkordersWithHttpInfo(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0)
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterCheckInOutworkorders");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterCheckInOutworkorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>("/adapter/checkInOutworkorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterCheckInOutworkorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CheckIn/checkOut of work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterCheckInOutworkordersAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> localVarResponse = await AdapterCheckInOutworkordersWithHttpInfoAsync(message, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CheckIn/checkOut of work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>> AdapterCheckInOutworkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrderCheckInOut message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterCheckInOutworkorders");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterCheckInOutworkorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>("/adapter/checkInOutworkorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterCheckInOutworkorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdapterProviderAssignments(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0)
        {
            AdapterProviderAssignmentsWithHttpInfo(message);
        }

        /// <summary>
        /// Assign provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AdapterProviderAssignmentsWithHttpInfo(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0)
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterProviderAssignments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterProviderAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/adapter/providerAssignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterProviderAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdapterProviderAssignmentsAsync(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdapterProviderAssignmentsWithHttpInfoAsync(message, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AdapterProviderAssignmentsWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationProviderTradeAssignmentNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterProviderAssignments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterProviderAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/adapter/providerAssignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterProviderAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update proposal status 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingProposalResponse</returns>
        public SCServiceChannelServicesBrokerModelsProcessingProposalResponse AdapterUpdateProposalStatus(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingProposalResponse> localVarResponse = AdapterUpdateProposalStatusWithHttpInfo(message);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update proposal status 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingProposalResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingProposalResponse> AdapterUpdateProposalStatusWithHttpInfo(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0)
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterUpdateProposalStatus");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterUpdateProposalStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesBrokerModelsProcessingProposalResponse>("/adapter/UpdateProposalStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterUpdateProposalStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update proposal status 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingProposalResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingProposalResponse> AdapterUpdateProposalStatusAsync(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingProposalResponse> localVarResponse = await AdapterUpdateProposalStatusWithHttpInfoAsync(message, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update proposal status 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingProposalResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingProposalResponse>> AdapterUpdateProposalStatusWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationNoteProposalNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterUpdateProposalStatus");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterUpdateProposalStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesBrokerModelsProcessingProposalResponse>("/adapter/UpdateProposalStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterUpdateProposalStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update location notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdapterUpdatelocationnotes(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0)
        {
            AdapterUpdatelocationnotesWithHttpInfo(message);
        }

        /// <summary>
        /// Update location notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AdapterUpdatelocationnotesWithHttpInfo(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0)
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterUpdatelocationnotes");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterUpdatelocationnotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/adapter/updatelocationnotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterUpdatelocationnotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update location notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdapterUpdatelocationnotesAsync(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdapterUpdatelocationnotesWithHttpInfoAsync(message, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update location notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AdapterUpdatelocationnotesWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationNoteLocationNotesNotificationObject message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterUpdatelocationnotes");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterUpdatelocationnotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/adapter/updatelocationnotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterUpdatelocationnotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse AdapterUpdateworkorders(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> localVarResponse = AdapterUpdateworkordersWithHttpInfo(message);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterUpdateworkordersWithHttpInfo(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0)
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterUpdateworkorders");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterUpdateworkorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>("/adapter/updateworkorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterUpdateworkorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterUpdateworkordersAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> localVarResponse = await AdapterUpdateworkordersWithHttpInfoAsync(message, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version              &lt;br /&gt;Expect the Object of type **ServiceChannel.Notifications.Objects.WorkOrder** for the following EventType values:               • **WorkOrderStatusChanged**.               • **RefrigerantWasUsedChanged**.               • **WorkOrderCertifiedTechnicianAssigned**.               • **WorkOrderAttachmentAdded**.               • **WorkOrderTradeChanged**.               • **WorkOrderIssueChoiceChanged**.               • **WorkOrderNteChanged**.               • **WorkOrderScheduledDateChanged**.               • **WorkOrderPriorityChanged**.               • **WorkOrderCategoryChanged**.               • **WorkOrderDescriptionChanged**.               • **WorkOrderAssetAttached**.               • **WorkOrderAssetDetached**.               • **WorkOrderAssetValidated**.               • **WorkOrderRootCauseCodeUpdated**.               • **WorkOrderResolutionCodeUpdated**.               • **WorkOrderResolutionCreated**.               • **WorkOrderResolutionUpdated**.               • **WorkOrderLabelAdded**.               • **WorkOrderLabelDeleted**.               • **WorkOrderNoteAdded**.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>> AdapterUpdateworkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterUpdateworkorders");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterUpdateworkorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>("/adapter/updateworkorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterUpdateworkorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse AdapterWorkorders(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> localVarResponse = AdapterWorkordersWithHttpInfo(message);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterWorkordersWithHttpInfo(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0)
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterWorkorders");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterWorkorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>("/adapter/workorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterWorkorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> AdapterWorkordersAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse> localVarResponse = await AdapterWorkordersWithHttpInfoAsync(message, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">Message envelope containing a body and describes an event type and the body version.              Expects EventType WorkOrderCreated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>> AdapterWorkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationMessageServiceChannelServicesBrokerModelsContextsRequestBrokerWorkOrder message, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'message' is set
            if (message == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'message' when calling AdapterApi->AdapterWorkorders");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "AdapterApi.AdapterWorkorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesBrokerModelsProcessingWorkOrderResponse>("/adapter/workorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdapterWorkorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
