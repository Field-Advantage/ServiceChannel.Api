/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationWebHooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List existing webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;</returns>
        List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> NotificationWebHooks(int operationIndex = 0);

        /// <summary>
        /// List existing webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> NotificationWebHooksWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse</returns>
        SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse NotificationWebHooks_0(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0);

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse> NotificationWebHooks_0WithHttpInfo(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0);
        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified webhook.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsWebHooksWebHook</returns>
        SCServiceChannelServicesMessagingNotificationsWebHooksWebHook NotificationWebHooksid(int id, int operationIndex = 0);

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified webhook.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsWebHooksWebHook</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> NotificationWebHooksidWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NotificationWebHooksid_0(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationWebHooksid_0WithHttpInfo(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified webhook. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NotificationWebHooksid_1(int id, int operationIndex = 0);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified webhook. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationWebHooksid_1WithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationWebHooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List existing webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> NotificationWebHooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List existing webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>>> NotificationWebHooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse> NotificationWebHooks_0Async(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse>> NotificationWebHooks_0WithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified webhook.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsWebHooksWebHook</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> NotificationWebHooksidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified webhook.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsWebHooksWebHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> NotificationWebHooksidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationWebHooksid_0Async(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationWebHooksid_0WithHttpInfoAsync(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified webhook. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationWebHooksid_1Async(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified webhook. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationWebHooksid_1WithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationWebHooksApi : INotificationWebHooksApiSync, INotificationWebHooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationWebHooksApi : INotificationWebHooksApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationWebHooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationWebHooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationWebHooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationWebHooksApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationWebHooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationWebHooksApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationWebHooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotificationWebHooksApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List existing webhooks Returns a list of webhooks for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;</returns>
        public List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> NotificationWebHooks(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> localVarResponse = NotificationWebHooksWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing webhooks Returns a list of webhooks for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> NotificationWebHooksWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>>("/NotificationWebHooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing webhooks Returns a list of webhooks for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> NotificationWebHooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> localVarResponse = await NotificationWebHooksWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing webhooks Returns a list of webhooks for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotificationsWebHooksWebHook&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>>> NotificationWebHooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>>("/NotificationWebHooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a webhook Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse</returns>
        public SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse NotificationWebHooks_0(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse> localVarResponse = NotificationWebHooks_0WithHttpInfo(req);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse> NotificationWebHooks_0WithHttpInfo(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0)
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationWebHooksApi->NotificationWebHooks_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooks_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse>("/NotificationWebHooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooks_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a webhook Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse> NotificationWebHooks_0Async(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse> localVarResponse = await NotificationWebHooks_0WithHttpInfoAsync(req, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse>> NotificationWebHooks_0WithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationWebHooksApi->NotificationWebHooks_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooks_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse>("/NotificationWebHooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooks_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook Retrieves the details of the specified webhook.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsWebHooksWebHook</returns>
        public SCServiceChannelServicesMessagingNotificationsWebHooksWebHook NotificationWebHooksid(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> localVarResponse = NotificationWebHooksidWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook Retrieves the details of the specified webhook.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsWebHooksWebHook</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> NotificationWebHooksidWithHttpInfo(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooksid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>("/NotificationWebHooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooksid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook Retrieves the details of the specified webhook.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsWebHooksWebHook</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> NotificationWebHooksidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook> localVarResponse = await NotificationWebHooksidWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook Retrieves the details of the specified webhook.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsWebHooksWebHook)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>> NotificationWebHooksidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooksid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>("/NotificationWebHooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooksid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void NotificationWebHooksid_0(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0)
        {
            NotificationWebHooksid_0WithHttpInfo(id, req);
        }

        /// <summary>
        /// Update a webhook Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> NotificationWebHooksid_0WithHttpInfo(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0)
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationWebHooksApi->NotificationWebHooksid_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooksid_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/NotificationWebHooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooksid_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationWebHooksid_0Async(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NotificationWebHooksid_0WithHttpInfoAsync(id, req, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a webhook Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> NotificationWebHooksid_0WithHttpInfoAsync(int id, SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationWebHooksApi->NotificationWebHooksid_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooksid_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/NotificationWebHooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooksid_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook Permanently deletes the specified webhook. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void NotificationWebHooksid_1(int id, int operationIndex = 0)
        {
            NotificationWebHooksid_1WithHttpInfo(id);
        }

        /// <summary>
        /// Delete a webhook Permanently deletes the specified webhook. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> NotificationWebHooksid_1WithHttpInfo(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooksid_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/NotificationWebHooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooksid_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook Permanently deletes the specified webhook. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationWebHooksid_1Async(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NotificationWebHooksid_1WithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a webhook Permanently deletes the specified webhook. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> NotificationWebHooksid_1WithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationWebHooksApi.NotificationWebHooksid_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/NotificationWebHooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationWebHooksid_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
