/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckListsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Submit a response to a checklist question
        /// </summary>
        /// <remarks>
        /// Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture ChecklistsCheckListResponse(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Submit a response to a checklist question
        /// </summary>
        /// <remarks>
        /// Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistsCheckListResponseWithHttpInfo(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        /// <summary>
        /// Get standard checklists
        /// </summary>
        /// <remarks>
        /// [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse</returns>
        SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get standard checklists
        /// </summary>
        /// <remarks>
        /// [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse> ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdWithHttpInfo(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get checklists with asset tasks
        /// </summary>
        /// <remarks>
        /// Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse</returns>
        SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get checklists with asset tasks
        /// </summary>
        /// <remarks>
        /// Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse> ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfo(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve checklist types
        /// </summary>
        /// <remarks>
        /// Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse</returns>
        SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve checklist types
        /// </summary>
        /// <remarks>
        /// Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse> ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfo(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update a response to a checklist question
        /// </summary>
        /// <remarks>
        /// [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture ChecklistscheckListResponseIdCheckListResponse(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Update a response to a checklist question
        /// </summary>
        /// <remarks>
        /// [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistscheckListResponseIdCheckListResponseWithHttpInfo(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckListsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Submit a response to a checklist question
        /// </summary>
        /// <remarks>
        /// Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistsCheckListResponseAsync(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit a response to a checklist question
        /// </summary>
        /// <remarks>
        /// Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>> ChecklistsCheckListResponseWithHttpInfoAsync(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get standard checklists
        /// </summary>
        /// <remarks>
        /// [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse> ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get standard checklists
        /// </summary>
        /// <remarks>
        /// [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse>> ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdWithHttpInfoAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get checklists with asset tasks
        /// </summary>
        /// <remarks>
        /// Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse> ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get checklists with asset tasks
        /// </summary>
        /// <remarks>
        /// Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse>> ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfoAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve checklist types
        /// </summary>
        /// <remarks>
        /// Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse> ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdAsync(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve checklist types
        /// </summary>
        /// <remarks>
        /// Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse>> ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfoAsync(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a response to a checklist question
        /// </summary>
        /// <remarks>
        /// [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistscheckListResponseIdCheckListResponseAsync(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a response to a checklist question
        /// </summary>
        /// <remarks>
        /// [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>> ChecklistscheckListResponseIdCheckListResponseWithHttpInfoAsync(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckListsApi : ICheckListsApiSync, ICheckListsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CheckListsApi : ICheckListsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CheckListsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CheckListsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckListsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CheckListsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckListsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CheckListsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Submit a response to a checklist question Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture ChecklistsCheckListResponse(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> localVarResponse = ChecklistsCheckListResponseWithHttpInfo(checkListResponseRequest, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a response to a checklist question Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistsCheckListResponseWithHttpInfo(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (checkListResponseRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("CheckListResponseRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponseRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsCheckListResponse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>("/checklists/CheckListResponse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsCheckListResponse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a response to a checklist question Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistsCheckListResponseAsync(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> localVarResponse = await ChecklistsCheckListResponseWithHttpInfoAsync(checkListResponseRequest, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a response to a checklist question Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>> ChecklistsCheckListResponseWithHttpInfoAsync(Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (checkListResponseRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("CheckListResponseRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponseRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsCheckListResponse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>("/checklists/CheckListResponse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsCheckListResponse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get standard checklists [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse</returns>
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse> localVarResponse = ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdWithHttpInfo(tradeid, checklistid, categoryid, subscriberId, tradeName, checkListName, categoryName, locationId, storeId, workOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get standard checklists [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse> ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdWithHttpInfo(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tradeid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeid", tradeid));
            }
            if (checklistid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistid", checklistid));
            }
            if (categoryid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryid", categoryid));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeName", tradeName));
            }
            if (checkListName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkListName", checkListName));
            }
            if (categoryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryName", categoryName));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (workOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workOrderId", workOrderId));
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse>("/checklists/detail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get standard checklists [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse> ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse> localVarResponse = await ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdWithHttpInfoAsync(tradeid, checklistid, categoryid, subscriberId, tradeName, checkListName, categoryName, locationId, storeId, workOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get standard checklists [Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="workOrderId">Work Order ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse>> ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdWithHttpInfoAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? workOrderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tradeid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeid", tradeid));
            }
            if (checklistid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistid", checklistid));
            }
            if (categoryid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryid", categoryid));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeName", tradeName));
            }
            if (checkListName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkListName", checkListName));
            }
            if (categoryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryName", categoryName));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (workOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workOrderId", workOrderId));
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse>("/checklists/detail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklists with asset tasks Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse</returns>
        public SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse> localVarResponse = ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfo(tradeid, checklistid, categoryid, subscriberId, tradeName, checkListName, categoryName, locationId, storeId, providerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklists with asset tasks Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse> ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfo(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tradeid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeid", tradeid));
            }
            if (checklistid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistid", checklistid));
            }
            if (categoryid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryid", categoryid));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeName", tradeName));
            }
            if (checkListName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkListName", checkListName));
            }
            if (categoryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryName", categoryName));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse>("/checklists/taskslist", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklists with asset tasks Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse> ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse> localVarResponse = await ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfoAsync(tradeid, checklistid, categoryid, subscriberId, tradeName, checkListName, categoryName, locationId, storeId, providerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklists with asset tasks Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistid">Checklist ID. (optional)</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checkListName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse>> ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfoAsync(int? tradeid = default(int?), int? checklistid = default(int?), int? categoryid = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checkListName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tradeid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeid", tradeid));
            }
            if (checklistid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistid", checklistid));
            }
            if (categoryid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryid", categoryid));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeName", tradeName));
            }
            if (checkListName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkListName", checkListName));
            }
            if (categoryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryName", categoryName));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse>("/checklists/taskslist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve checklist types Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse</returns>
        public SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse> localVarResponse = ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfo(tradeId, checklistId, categoryId, subscriberId, tradeName, checklistName, categoryName, locationId, storeId, providerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve checklist types Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse> ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfo(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }
            if (checklistId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistId", checklistId));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeName", tradeName));
            }
            if (checklistName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistName", checklistName));
            }
            if (categoryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryName", categoryName));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse>("/checklists/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve checklist types Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse> ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdAsync(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse> localVarResponse = await ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfoAsync(tradeId, checklistId, categoryId, subscriberId, tradeName, checklistName, categoryName, locationId, storeId, providerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve checklist types Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request. (optional)</param>
        /// <param name="checklistId">Checklist ID. (optional)</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method. (optional)</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers. (optional)</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_. (optional)</param>
        /// <param name="checklistName">Checklist name. (optional)</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_. (optional)</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber. (optional)</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse>> ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdWithHttpInfoAsync(int? tradeId = default(int?), int? checklistId = default(int?), int? categoryId = default(int?), int? subscriberId = default(int?), string? tradeName = default(string?), string? checklistName = default(string?), string? categoryName = default(string?), int? locationId = default(int?), string? storeId = default(string?), int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }
            if (checklistId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistId", checklistId));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeName", tradeName));
            }
            if (checklistName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checklistName", checklistName));
            }
            if (categoryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryName", categoryName));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse>("/checklists/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a response to a checklist question [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture ChecklistscheckListResponseIdCheckListResponse(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> localVarResponse = ChecklistscheckListResponseIdCheckListResponseWithHttpInfo(checkListResponseId, checkListResponsePictureId, checkListResponseRequest, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a response to a checklist question [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistscheckListResponseIdCheckListResponseWithHttpInfo(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("checkListResponseId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponseId)); // path parameter
            if (checkListResponsePictureId != null)
            {
                localVarRequestOptions.FormParameters.Add("CheckListResponsePictureId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponsePictureId)); // form parameter
            }
            if (checkListResponseRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("CheckListResponseRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponseRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistscheckListResponseIdCheckListResponse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>("/checklists/{checkListResponseId}/CheckListResponse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistscheckListResponseIdCheckListResponse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a response to a checklist question [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> ChecklistscheckListResponseIdCheckListResponseAsync(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture> localVarResponse = await ChecklistscheckListResponseIdCheckListResponseWithHttpInfoAsync(checkListResponseId, checkListResponsePictureId, checkListResponseRequest, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a response to a checklist question [Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response. (optional)</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  } (optional)</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>> ChecklistscheckListResponseIdCheckListResponseWithHttpInfoAsync(int checkListResponseId, Object? checkListResponsePictureId = default(Object?), Object? checkListResponseRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("checkListResponseId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponseId)); // path parameter
            if (checkListResponsePictureId != null)
            {
                localVarRequestOptions.FormParameters.Add("CheckListResponsePictureId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponsePictureId)); // form parameter
            }
            if (checkListResponseRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("CheckListResponseRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListResponseRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CheckListsApi.ChecklistscheckListResponseIdCheckListResponse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>("/checklists/{checkListResponseId}/CheckListResponse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChecklistscheckListResponseIdCheckListResponse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
