/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkRequestNoteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a work request note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkrequestIdNotes(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a work request note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkrequestIdNotesWithHttpInfo(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0);
        /// <summary>
        /// Add Followers to Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkrequestIdNotesFollowers(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0);

        /// <summary>
        /// Add Followers to Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkrequestIdNotesFollowersWithHttpInfo(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0);
        /// <summary>
        /// Remove Follower from Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkrequestIdNotesFollowersemailemail(int workrequestId, string email, int operationIndex = 0);

        /// <summary>
        /// Remove Follower from Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkrequestIdNotesFollowersemailemailWithHttpInfo(int workrequestId, string email, int operationIndex = 0);
        /// <summary>
        /// Work request Notes Collection
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSize(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0);

        /// <summary>
        /// Work request Notes Collection
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeWithHttpInfo(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkRequestNoteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a work request note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkrequestIdNotesAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a work request note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkrequestIdNotesWithHttpInfoAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Followers to Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkrequestIdNotesFollowersAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Followers to Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkrequestIdNotesFollowersWithHttpInfoAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Follower from Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkrequestIdNotesFollowersemailemailAsync(int workrequestId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Follower from Work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkrequestIdNotesFollowersemailemailWithHttpInfoAsync(int workrequestId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Work request Notes Collection
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeAsync(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Work request Notes Collection
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeWithHttpInfoAsync(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkRequestNoteApi : IWorkRequestNoteApiSync, IWorkRequestNoteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkRequestNoteApi : IWorkRequestNoteApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestNoteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkRequestNoteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestNoteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkRequestNoteApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestNoteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkRequestNoteApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestNoteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkRequestNoteApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a work request note *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkrequestIdNotes(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0)
        {
            WorkrequestsworkrequestIdNotesWithHttpInfo(workrequestId, noteRequest);
        }

        /// <summary>
        /// Creates a work request note *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkrequestIdNotesWithHttpInfo(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'noteRequest' is set
            if (noteRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'noteRequest' when calling WorkRequestNoteApi->WorkrequestsworkrequestIdNotes");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.Data = noteRequest;

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workrequests/{workrequestId}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a work request note *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkrequestIdNotesAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkrequestIdNotesWithHttpInfoAsync(workrequestId, noteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a work request note *In limited availability phase.*              &lt;br /&gt;Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkrequestIdNotesWithHttpInfoAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'noteRequest' is set
            if (noteRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'noteRequest' when calling WorkRequestNoteApi->WorkrequestsworkrequestIdNotes");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.Data = noteRequest;

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workrequests/{workrequestId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Followers to Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkrequestIdNotesFollowers(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0)
        {
            WorkrequestsworkrequestIdNotesFollowersWithHttpInfo(workrequestId, request);
        }

        /// <summary>
        /// Add Followers to Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkrequestIdNotesFollowersWithHttpInfo(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkRequestNoteApi->WorkrequestsworkrequestIdNotesFollowers");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotesFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workrequests/{workrequestId}/notes/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotesFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Followers to Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkrequestIdNotesFollowersAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkrequestIdNotesFollowersWithHttpInfoAsync(workrequestId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Followers to Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkrequestIdNotesFollowersWithHttpInfoAsync(int workrequestId, SCServiceChannelServicesMessagingWorkRequestsAddWorkRequestNoteFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkRequestNoteApi->WorkrequestsworkrequestIdNotesFollowers");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotesFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workrequests/{workrequestId}/notes/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotesFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Follower from Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkrequestIdNotesFollowersemailemail(int workrequestId, string email, int operationIndex = 0)
        {
            WorkrequestsworkrequestIdNotesFollowersemailemailWithHttpInfo(workrequestId, email);
        }

        /// <summary>
        /// Remove Follower from Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkrequestIdNotesFollowersemailemailWithHttpInfo(int workrequestId, string email, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'email' when calling WorkRequestNoteApi->WorkrequestsworkrequestIdNotesFollowersemailemail");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotesFollowersemailemail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/workrequests/{workrequestId}/notes/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotesFollowersemailemail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Follower from Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkrequestIdNotesFollowersemailemailAsync(int workrequestId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkrequestIdNotesFollowersemailemailWithHttpInfoAsync(workrequestId, email, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Follower from Work request *In limited availability phase.*              &lt;br /&gt;Returns status \&quot;OK\&quot; for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="email">Follower email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkrequestIdNotesFollowersemailemailWithHttpInfoAsync(int workrequestId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'email' when calling WorkRequestNoteApi->WorkrequestsworkrequestIdNotesFollowersemailemail");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotesFollowersemailemail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/workrequests/{workrequestId}/notes/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotesFollowersemailemail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work request Notes Collection *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSize(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0)
        {
            WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeWithHttpInfo(workrequestId, pageNumber, pageSize);
        }

        /// <summary>
        /// Work request Notes Collection *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeWithHttpInfo(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/workrequests/{workrequestId}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work request Notes Collection *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeAsync(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeWithHttpInfoAsync(workrequestId, pageNumber, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Work request Notes Collection *In limited availability phase.*              &lt;br /&gt;Returns list of work request notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workrequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="pageNumber">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSizeWithHttpInfoAsync(int workrequestId, int pageNumber, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workrequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workrequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));

            localVarRequestOptions.Operation = "WorkRequestNoteApi.WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/workrequests/{workrequestId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkrequestIdNotespageNumberpageNumberpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
