/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceRequestApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest</returns>
        SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest> ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfo(int subscriberId, int locationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoWithHttpInfo(int subscriberId, int locationId, int operationIndex = 0);
        /// <summary>
        /// Get list of providers per service request
        /// </summary>
        /// <remarks>
        /// Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse</returns>
        SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentId(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get list of providers per service request
        /// </summary>
        /// <remarks>
        /// Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse> ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdWithHttpInfo(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeWithHttpInfo(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0);
        /// <summary>
        /// Get Service Request Info
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get Service Request Info
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get Service Request Info Without Dashboard Settings
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get Service Request Info Without Dashboard Settings
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceRequestApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest> ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateAsync(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest>> ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoWithHttpInfoAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of providers per service request
        /// </summary>
        /// <remarks>
        /// Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse> ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdAsync(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of providers per service request
        /// </summary>
        /// <remarks>
        /// Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse>> ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdWithHttpInfoAsync(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeAsync(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeWithHttpInfoAsync(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Request Info
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Request Info
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>> SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Request Info Without Dashboard Settings
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Request Info Without Dashboard Settings
        /// </summary>
        /// <remarks>
        /// Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>> SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceRequestApi : IServiceRequestApiSync, IServiceRequestApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceRequestApi : IServiceRequestApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceRequestApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceRequestApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRequestApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceRequestApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRequestApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServiceRequestApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest</returns>
        public SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest> localVarResponse = ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(subscriberId, areaName, problemType, equipmentType, problemCode, locationId, setupId, callDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest> ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (areaName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaName", areaName));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "callDate", callDate));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest>("/providers/current/subscribers/{subscriberId}/applicationissuechoice/servicerequest/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest> ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateAsync(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest> localVarResponse = await ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(subscriberId, areaName, problemType, equipmentType, problemCode, locationId, setupId, callDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest>> ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(int subscriberId, string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (areaName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaName", areaName));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "callDate", callDate));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest>("/providers/current/subscribers/{subscriberId}/applicationissuechoice/servicerequest/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfo(int subscriberId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoWithHttpInfo(subscriberId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoWithHttpInfo(int subscriberId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "ServiceRequestApi.ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/providers/current/subscriber/{subscriberId}/location/{locationId}/applicationissuechoice/servicerequest/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoWithHttpInfoAsync(subscriberId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfoWithHttpInfoAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "ServiceRequestApi.ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/providers/current/subscriber/{subscriberId}/location/{locationId}/applicationissuechoice/servicerequest/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of providers per service request Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse</returns>
        public SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentId(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse> localVarResponse = ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdWithHttpInfo(locationId, trade, equipmentType, providerRank, equipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of providers per service request Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse> ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdWithHttpInfo(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (providerRank != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerRank", providerRank));
            }
            if (equipmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentId", equipmentId));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse>("/servicerequest/providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of providers per service request Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse> ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdAsync(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse> localVarResponse = await ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdWithHttpInfoAsync(locationId, trade, equipmentType, providerRank, equipmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of providers per service request Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id (optional)</param>
        /// <param name="trade">Trade (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="providerRank">Sets default provider with specified rank (optional)</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse>> ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentIdWithHttpInfoAsync(int? locationId = default(int?), string? trade = default(string?), string? equipmentType = default(string?), int? providerRank = default(int?), int? equipmentId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (providerRank != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerRank", providerRank));
            }
            if (equipmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentId", equipmentId));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse>("/servicerequest/providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0)
        {
            SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeWithHttpInfo(subscriberId, setupId, locationId, providerId, trade);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeWithHttpInfo(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ServiceRequestApi->SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));

            localVarRequestOptions.Operation = "ServiceRequestApi.SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/servicerequest/addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeAsync(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeWithHttpInfoAsync(subscriberId, setupId, locationId, providerId, trade, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTradeWithHttpInfoAsync(int subscriberId, int setupId, int locationId, int providerId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ServiceRequestApi->SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));

            localVarRequestOptions.Operation = "ServiceRequestApi.SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/servicerequest/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Request Info Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> localVarResponse = SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(areaName, problemType, equipmentType, problemCode, locationId, setupId, callDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Request Info Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (areaName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaName", areaName));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "callDate", callDate));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>("/subscribers/current/servicerequest/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Request Info Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> localVarResponse = await SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(areaName, problemType, equipmentType, problemCode, locationId, setupId, callDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Request Info Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>> SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (areaName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaName", areaName));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "callDate", callDate));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>("/subscribers/current/servicerequest/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Request Info Without Dashboard Settings Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> localVarResponse = SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(areaName, problemType, equipmentType, problemCode, locationId, setupId, callDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Request Info Without Dashboard Settings Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfo(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (areaName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaName", areaName));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "callDate", callDate));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>("/subscribers/current/servicerequest/info/nosettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Request Info Without Dashboard Settings Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse> localVarResponse = await SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(areaName, problemType, equipmentType, problemCode, locationId, setupId, callDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Request Info Without Dashboard Settings Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName">Name of the area (optional)</param>
        /// <param name="problemType">Problem type (optional)</param>
        /// <param name="equipmentType">Equipment type (optional)</param>
        /// <param name="problemCode">Problem name (optional)</param>
        /// <param name="locationId">ID of a location (optional)</param>
        /// <param name="setupId">SetupId (optional)</param>
        /// <param name="callDate">Call Date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>> SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDateWithHttpInfoAsync(string? areaName = default(string?), string? problemType = default(string?), string? equipmentType = default(string?), string? problemCode = default(string?), int? locationId = default(int?), int? setupId = default(int?), DateTime? callDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (areaName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaName", areaName));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (equipmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "callDate", callDate));
            }

            localVarRequestOptions.Operation = "ServiceRequestApi.SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse>("/subscribers/current/servicerequest/info/nosettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
