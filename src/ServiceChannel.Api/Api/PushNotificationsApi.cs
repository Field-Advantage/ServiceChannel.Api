/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPushNotificationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List existing email subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of email subscriptions
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LocationslocationIdPushdeviceTokendeviceToken(int locationId, string deviceToken, int operationIndex = 0);

        /// <summary>
        /// List existing email subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of email subscriptions
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LocationslocationIdPushdeviceTokendeviceTokenWithHttpInfo(int locationId, string deviceToken, int operationIndex = 0);
        /// <summary>
        /// Subscribe to Push Notifications
        /// </summary>
        /// <remarks>
        /// Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LocationslocationIdSubscribe(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0);

        /// <summary>
        /// Subscribe to Push Notifications
        /// </summary>
        /// <remarks>
        /// Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LocationslocationIdSubscribeWithHttpInfo(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0);
        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LocationslocationIdUnsubscribeidid(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0);

        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LocationslocationIdUnsubscribeididWithHttpInfo(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0);
        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UnsubscribedeviceTokendeviceToken(string deviceToken, int operationIndex = 0);

        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UnsubscribedeviceTokendeviceTokenWithHttpInfo(string deviceToken, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPushNotificationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List existing email subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of email subscriptions
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LocationslocationIdPushdeviceTokendeviceTokenAsync(int locationId, string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List existing email subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of email subscriptions
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationslocationIdPushdeviceTokendeviceTokenWithHttpInfoAsync(int locationId, string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Subscribe to Push Notifications
        /// </summary>
        /// <remarks>
        /// Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LocationslocationIdSubscribeAsync(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to Push Notifications
        /// </summary>
        /// <remarks>
        /// Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationslocationIdSubscribeWithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LocationslocationIdUnsubscribeididAsync(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationslocationIdUnsubscribeididWithHttpInfoAsync(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UnsubscribedeviceTokendeviceTokenAsync(string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unsubscribe from Push Notifications
        /// </summary>
        /// <remarks>
        /// Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnsubscribedeviceTokendeviceTokenWithHttpInfoAsync(string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPushNotificationsApi : IPushNotificationsApiSync, IPushNotificationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PushNotificationsApi : IPushNotificationsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PushNotificationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PushNotificationsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PushNotificationsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PushNotificationsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List existing email subscriptions Returns a list of email subscriptions
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LocationslocationIdPushdeviceTokendeviceToken(int locationId, string deviceToken, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = LocationslocationIdPushdeviceTokendeviceTokenWithHttpInfo(locationId, deviceToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing email subscriptions Returns a list of email subscriptions
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationslocationIdPushdeviceTokendeviceTokenWithHttpInfo(int locationId, string deviceToken, int operationIndex = 0)
        {
            // verify the required parameter 'deviceToken' is set
            if (deviceToken == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceToken' when calling PushNotificationsApi->LocationslocationIdPushdeviceTokendeviceToken");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceToken", deviceToken));

            localVarRequestOptions.Operation = "PushNotificationsApi.LocationslocationIdPushdeviceTokendeviceToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/locations/{locationId}/push", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdPushdeviceTokendeviceToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing email subscriptions Returns a list of email subscriptions
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LocationslocationIdPushdeviceTokendeviceTokenAsync(int locationId, string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await LocationslocationIdPushdeviceTokendeviceTokenWithHttpInfoAsync(locationId, deviceToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing email subscriptions Returns a list of email subscriptions
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="deviceToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationslocationIdPushdeviceTokendeviceTokenWithHttpInfoAsync(int locationId, string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deviceToken' is set
            if (deviceToken == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceToken' when calling PushNotificationsApi->LocationslocationIdPushdeviceTokendeviceToken");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceToken", deviceToken));

            localVarRequestOptions.Operation = "PushNotificationsApi.LocationslocationIdPushdeviceTokendeviceToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/locations/{locationId}/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdPushdeviceTokendeviceToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to Push Notifications Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LocationslocationIdSubscribe(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = LocationslocationIdSubscribeWithHttpInfo(locationId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to Push Notifications Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationslocationIdSubscribeWithHttpInfo(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling PushNotificationsApi->LocationslocationIdSubscribe");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "PushNotificationsApi.LocationslocationIdSubscribe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/locations/{locationId}/subscribe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdSubscribe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to Push Notifications Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LocationslocationIdSubscribeAsync(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await LocationslocationIdSubscribeWithHttpInfoAsync(locationId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to Push Notifications Subscribe Push Notification.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="request">The Subscription Push Notification request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationslocationIdSubscribeWithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingNotificationsPushNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling PushNotificationsApi->LocationslocationIdSubscribe");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "PushNotificationsApi.LocationslocationIdSubscribe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/locations/{locationId}/subscribe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdSubscribe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LocationslocationIdUnsubscribeidid(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = LocationslocationIdUnsubscribeididWithHttpInfo(locationId, deviceToken, deviceType, notificationType, application, id, notificationRulesRules);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationslocationIdUnsubscribeididWithHttpInfo(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0)
        {
            // verify the required parameter 'deviceToken' is set
            if (deviceToken == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceToken' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }

            // verify the required parameter 'deviceType' is set
            if (deviceType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceType' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }

            // verify the required parameter 'notificationType' is set
            if (notificationType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'notificationType' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }

            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'application' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceToken", deviceToken));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceType", deviceType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "notificationType", notificationType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "application", application));
            if (notificationRulesRules != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "notificationRules.rules", notificationRulesRules));
            }

            localVarRequestOptions.Operation = "PushNotificationsApi.LocationslocationIdUnsubscribeidid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/locations/{locationId}/unsubscribe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdUnsubscribeidid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LocationslocationIdUnsubscribeididAsync(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await LocationslocationIdUnsubscribeididWithHttpInfoAsync(locationId, deviceToken, deviceType, notificationType, application, id, notificationRulesRules, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric Id of the Location to perform action with.</param>
        /// <param name="deviceToken">Required Device Token.</param>
        /// <param name="deviceType">Device type: Android, iOS, Amazon</param>
        /// <param name="notificationType">Notification type: Check In , ....</param>
        /// <param name="application">Application : ScMobile, FTM, ...</param>
        /// <param name="id">Numeric Id of the Subscription to perform action with. (optional)</param>
        /// <param name="notificationRulesRules"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationslocationIdUnsubscribeididWithHttpInfoAsync(int locationId, string deviceToken, string deviceType, string notificationType, string application, int? id = default(int?), List<Object>? notificationRulesRules = default(List<Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deviceToken' is set
            if (deviceToken == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceToken' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }

            // verify the required parameter 'deviceType' is set
            if (deviceType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceType' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }

            // verify the required parameter 'notificationType' is set
            if (notificationType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'notificationType' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }

            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'application' when calling PushNotificationsApi->LocationslocationIdUnsubscribeidid");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceToken", deviceToken));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceType", deviceType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "notificationType", notificationType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "application", application));
            if (notificationRulesRules != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "notificationRules.rules", notificationRulesRules));
            }

            localVarRequestOptions.Operation = "PushNotificationsApi.LocationslocationIdUnsubscribeidid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/locations/{locationId}/unsubscribe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdUnsubscribeidid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UnsubscribedeviceTokendeviceToken(string deviceToken, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = UnsubscribedeviceTokendeviceTokenWithHttpInfo(deviceToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> UnsubscribedeviceTokendeviceTokenWithHttpInfo(string deviceToken, int operationIndex = 0)
        {
            // verify the required parameter 'deviceToken' is set
            if (deviceToken == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceToken' when calling PushNotificationsApi->UnsubscribedeviceTokendeviceToken");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceToken", deviceToken));

            localVarRequestOptions.Operation = "PushNotificationsApi.UnsubscribedeviceTokendeviceToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/unsubscribe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnsubscribedeviceTokendeviceToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UnsubscribedeviceTokendeviceTokenAsync(string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await UnsubscribedeviceTokendeviceTokenWithHttpInfoAsync(deviceToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe from Push Notifications Unsubscribe from Push Notifications.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceToken">Device token: \&quot;35353-335345-FAC342...\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> UnsubscribedeviceTokendeviceTokenWithHttpInfoAsync(string deviceToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deviceToken' is set
            if (deviceToken == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'deviceToken' when calling PushNotificationsApi->UnsubscribedeviceTokendeviceToken");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "deviceToken", deviceToken));

            localVarRequestOptions.Operation = "PushNotificationsApi.UnsubscribedeviceTokendeviceToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/unsubscribe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnsubscribedeviceTokendeviceToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
