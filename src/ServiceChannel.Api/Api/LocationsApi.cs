/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Locations by location ids
        /// </summary>
        /// <remarks>
        /// Returns a list of locations.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetApiLocationResponse</returns>
        SCServiceChannelServicesMessagingLocationGetApiLocationResponse Filter(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0);

        /// <summary>
        /// Retrieve Locations by location ids
        /// </summary>
        /// <remarks>
        /// Returns a list of locations.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetApiLocationResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetApiLocationResponse> FilterWithHttpInfo(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0);
        /// <summary>
        /// Get locations by filters
        /// </summary>
        /// <remarks>
        /// Returns locations based on the filters applied.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;</returns>
        List<SCServiceChannelServicesMessagingLocationLocationShortModel> GetFilteredLocations(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0);

        /// <summary>
        /// Get locations by filters
        /// </summary>
        /// <remarks>
        /// Returns locations based on the filters applied.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationShortModel>> GetFilteredLocationsWithHttpInfo(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0);
        /// <summary>
        /// Get location districts
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse</returns>
        SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get location districts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse> GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionWithHttpInfo(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        List<SCServiceChannelServicesMessagingLocationLocation> GetLocations(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Locations
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse</returns>
        SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse> GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedWithHttpInfo(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get locations by geographic coordinates
        /// </summary>
        /// <remarks>
        /// Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        List<SCServiceChannelServicesMessagingLocationLocation> GetLocationsNearMe(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get locations by geographic coordinates
        /// </summary>
        /// <remarks>
        /// Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsNearMeWithHttpInfo(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        List<SCServiceChannelServicesMessagingLocationLocation> GetServiceRequestLocations(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> GetServiceRequestLocationsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update Landlord Responsibility
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LandlordResponsibilities(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0);

        /// <summary>
        /// Update Landlord Responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LandlordResponsibilitiesWithHttpInfo(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0);
        /// <summary>
        /// Create landlord responsibility
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel</returns>
        SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel LandlordResponsibilities_0(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0);

        /// <summary>
        /// Create landlord responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel> LandlordResponsibilities_0WithHttpInfo(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Landlord Responsibility
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LandlordResponsibilitiesresponsibilityId(int responsibilityId, int operationIndex = 0);

        /// <summary>
        /// Delete Landlord Responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LandlordResponsibilitiesresponsibilityIdWithHttpInfo(int responsibilityId, int operationIndex = 0);
        /// <summary>
        /// Get landlord responsibilities
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse</returns>
        SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse LandlordResponsibilitiesstoreIdstoreId(string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get landlord responsibilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse> LandlordResponsibilitiesstoreIdstoreIdWithHttpInfo(string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Add a location
        /// </summary>
        /// <remarks>
        /// Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Locations(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0);

        /// <summary>
        /// Add a location
        /// </summary>
        /// <remarks>
        /// Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationsWithHttpInfo(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0);
        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids
        /// </summary>
        /// <remarks>
        /// Returns a list of address types (Id, Pattern).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;</returns>
        List<SCServiceChannelServicesMessagingLocationAddressType> LocationsAddressformatsc0c0c1c1id0id0id1id1(List<string> c, List<int> id, int operationIndex = 0);

        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids
        /// </summary>
        /// <remarks>
        /// Returns a list of address types (Id, Pattern).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingLocationAddressType>> LocationsAddressformatsc0c0c1c1id0id0id1id1WithHttpInfo(List<string> c, List<int> id, int operationIndex = 0);
        /// <summary>
        /// Check whether the location is open or closed.
        /// </summary>
        /// <remarks>
        /// Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse</returns>
        SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Check whether the location is open or closed.
        /// </summary>
        /// <remarks>
        /// Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse> LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeWithHttpInfo(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Retrieve locations by filters
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationsGetLocationsByFilterColumns(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0);

        /// <summary>
        /// Retrieve locations by filters
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationsGetLocationsByFilterColumnsWithHttpInfo(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0);
        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfo(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create a location with location notes
        /// </summary>
        /// <remarks>
        /// Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse</returns>
        SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse LocationsLocationWithNotes(Dictionary<string, Object> locationWithNotes, int operationIndex = 0);

        /// <summary>
        /// Create a location with location notes
        /// </summary>
        /// <remarks>
        /// Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse> LocationsLocationWithNotesWithHttpInfo(Dictionary<string, Object> locationWithNotes, int operationIndex = 0);
        /// <summary>
        /// Get unassigned contracts
        /// </summary>
        /// <remarks>
        /// Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse</returns>
        SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse LocationsUnassignedContracts(int operationIndex = 0);

        /// <summary>
        /// Get unassigned contracts
        /// </summary>
        /// <remarks>
        /// Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse> LocationsUnassignedContractsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve a location
        /// </summary>
        /// <remarks>
        /// Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationLocationWithTimezoneName</returns>
        SCServiceChannelServicesMessagingLocationLocationWithTimezoneName LocationslocationId(int locationId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a location
        /// </summary>
        /// <remarks>
        /// Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationLocationWithTimezoneName</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName> LocationslocationIdWithHttpInfo(int locationId, int operationIndex = 0);
        /// <summary>
        /// Get an evacuation plan map of a location
        /// </summary>
        /// <remarks>
        /// Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse</returns>
        SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse LocationslocationIdEvacuationmaps(int locationId, int operationIndex = 0);

        /// <summary>
        /// Get an evacuation plan map of a location
        /// </summary>
        /// <remarks>
        /// Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse> LocationslocationIdEvacuationmapsWithHttpInfo(int locationId, int operationIndex = 0);
        /// <summary>
        /// Add a location note
        /// </summary>
        /// <remarks>
        /// Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationslocationIdNotes(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0);

        /// <summary>
        /// Add a location note
        /// </summary>
        /// <remarks>
        /// Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationslocationIdNotesWithHttpInfo(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0);
        /// <summary>
        /// Retrieve location notes
        /// </summary>
        /// <remarks>
        /// Returns the location notes for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationNoteLocationNote</returns>
        SCServiceChannelServicesMessagingLocationNoteLocationNote LocationslocationIdNotesprivateNotesprivateNotes(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve location notes
        /// </summary>
        /// <remarks>
        /// Returns the location notes for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationNoteLocationNote</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationNoteLocationNote> LocationslocationIdNotesprivateNotesprivateNotesWithHttpInfo(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update a location
        /// </summary>
        /// <remarks>
        /// Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationslocationId_0(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0);

        /// <summary>
        /// Update a location
        /// </summary>
        /// <remarks>
        /// Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationslocationId_0WithHttpInfo(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0);
        /// <summary>
        /// Delete a location
        /// </summary>
        /// <remarks>
        /// Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationslocationId_1(int locationId, int operationIndex = 0);

        /// <summary>
        /// Delete a location
        /// </summary>
        /// <remarks>
        /// Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationslocationId_1WithHttpInfo(int locationId, int operationIndex = 0);
        /// <summary>
        /// Get a Location’s Attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of attachments.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingLocationLocationAttachment> LocationsstoreIdAttachments(string storeId, int operationIndex = 0);

        /// <summary>
        /// Get a Location’s Attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of attachments.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationAttachment>> LocationsstoreIdAttachmentsWithHttpInfo(string storeId, int operationIndex = 0);
        /// <summary>
        /// Delete a Location Attachment
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationsstoreIdAttachmentsattachmentId(string storeId, int attachmentId, int operationIndex = 0);

        /// <summary>
        /// Delete a Location Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationsstoreIdAttachmentsattachmentIdWithHttpInfo(string storeId, int attachmentId, int operationIndex = 0);
        /// <summary>
        /// Create a Location Attachment
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationLocationAttachment</returns>
        SCServiceChannelServicesMessagingLocationLocationAttachment LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Create a Location Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationLocationAttachment</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationLocationAttachment> LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanWithHttpInfo(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add location notes
        /// </summary>
        /// <remarks>
        /// Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationsstoreIdUpdateNotes(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0);

        /// <summary>
        /// Add location notes
        /// </summary>
        /// <remarks>
        /// Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationsstoreIdUpdateNotesWithHttpInfo(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0);
        /// <summary>
        /// Get provider primary location assignments by Provider Ids
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0);

        /// <summary>
        /// Get provider primary location assignments by Provider Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToWithHttpInfo(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0);
        /// <summary>
        /// Retrieve Provider Assignments by locations and trades
        /// </summary>
        /// <remarks>
        /// Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse> ProvidersGetProviderAssignmentsForLocationsAndTrades(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0);

        /// <summary>
        /// Retrieve Provider Assignments by locations and trades
        /// </summary>
        /// <remarks>
        /// Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>> ProvidersGetProviderAssignmentsForLocationsAndTradesWithHttpInfo(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0);
        /// <summary>
        /// Get provider location assignments
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProvidersGetProviderLocationAssignments(int operationIndex = 0);

        /// <summary>
        /// Get provider location assignments
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProvidersGetProviderLocationAssignmentsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfo(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get stores
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentUsersCurrentStores(int operationIndex = 0);

        /// <summary>
        /// Get stores
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentUsersCurrentStoresWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve location information
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve location information
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringWithHttpInfo(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Locations by location ids
        /// </summary>
        /// <remarks>
        /// Returns a list of locations.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetApiLocationResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetApiLocationResponse> FilterAsync(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Locations by location ids
        /// </summary>
        /// <remarks>
        /// Returns a list of locations.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetApiLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetApiLocationResponse>> FilterWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get locations by filters
        /// </summary>
        /// <remarks>
        /// Returns locations based on the filters applied.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocationShortModel>> GetFilteredLocationsAsync(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get locations by filters
        /// </summary>
        /// <remarks>
        /// Returns locations based on the filters applied.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationShortModel>>> GetFilteredLocationsWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get location districts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse> GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionAsync(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get location districts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse>> GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionWithHttpInfoAsync(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>>> GetLocationsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse> GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedAsync(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse>> GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedWithHttpInfoAsync(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get locations by geographic coordinates
        /// </summary>
        /// <remarks>
        /// Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsNearMeAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get locations by geographic coordinates
        /// </summary>
        /// <remarks>
        /// Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>>> GetLocationsNearMeWithHttpInfoAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocation>> GetServiceRequestLocationsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>
        /// Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>>> GetServiceRequestLocationsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Landlord Responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LandlordResponsibilitiesAsync(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Landlord Responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LandlordResponsibilitiesWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create landlord responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel> LandlordResponsibilities_0Async(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create landlord responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel>> LandlordResponsibilities_0WithHttpInfoAsync(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Landlord Responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LandlordResponsibilitiesresponsibilityIdAsync(int responsibilityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Landlord Responsibility
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LandlordResponsibilitiesresponsibilityIdWithHttpInfoAsync(int responsibilityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get landlord responsibilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse> LandlordResponsibilitiesstoreIdstoreIdAsync(string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get landlord responsibilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse>> LandlordResponsibilitiesstoreIdstoreIdWithHttpInfoAsync(string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a location
        /// </summary>
        /// <remarks>
        /// Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationsAsync(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a location
        /// </summary>
        /// <remarks>
        /// Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationsWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids
        /// </summary>
        /// <remarks>
        /// Returns a list of address types (Id, Pattern).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationAddressType>> LocationsAddressformatsc0c0c1c1id0id0id1id1Async(List<string> c, List<int> id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids
        /// </summary>
        /// <remarks>
        /// Returns a list of address types (Id, Pattern).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingLocationAddressType>>> LocationsAddressformatsc0c0c1c1id0id0id1id1WithHttpInfoAsync(List<string> c, List<int> id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check whether the location is open or closed.
        /// </summary>
        /// <remarks>
        /// Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse> LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeAsync(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check whether the location is open or closed.
        /// </summary>
        /// <remarks>
        /// Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse>> LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeWithHttpInfoAsync(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve locations by filters
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationsGetLocationsByFilterColumnsAsync(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve locations by filters
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationsGetLocationsByFilterColumnsWithHttpInfoAsync(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>> LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfoAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a location with location notes
        /// </summary>
        /// <remarks>
        /// Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse> LocationsLocationWithNotesAsync(Dictionary<string, Object> locationWithNotes, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a location with location notes
        /// </summary>
        /// <remarks>
        /// Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse>> LocationsLocationWithNotesWithHttpInfoAsync(Dictionary<string, Object> locationWithNotes, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get unassigned contracts
        /// </summary>
        /// <remarks>
        /// Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse> LocationsUnassignedContractsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get unassigned contracts
        /// </summary>
        /// <remarks>
        /// Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse>> LocationsUnassignedContractsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a location
        /// </summary>
        /// <remarks>
        /// Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationLocationWithTimezoneName</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName> LocationslocationIdAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a location
        /// </summary>
        /// <remarks>
        /// Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationLocationWithTimezoneName)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName>> LocationslocationIdWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an evacuation plan map of a location
        /// </summary>
        /// <remarks>
        /// Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse> LocationslocationIdEvacuationmapsAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an evacuation plan map of a location
        /// </summary>
        /// <remarks>
        /// Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse>> LocationslocationIdEvacuationmapsWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a location note
        /// </summary>
        /// <remarks>
        /// Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationslocationIdNotesAsync(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a location note
        /// </summary>
        /// <remarks>
        /// Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationslocationIdNotesWithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve location notes
        /// </summary>
        /// <remarks>
        /// Returns the location notes for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationNoteLocationNote</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationNoteLocationNote> LocationslocationIdNotesprivateNotesprivateNotesAsync(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve location notes
        /// </summary>
        /// <remarks>
        /// Returns the location notes for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationNoteLocationNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationNoteLocationNote>> LocationslocationIdNotesprivateNotesprivateNotesWithHttpInfoAsync(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a location
        /// </summary>
        /// <remarks>
        /// Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationslocationId_0Async(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a location
        /// </summary>
        /// <remarks>
        /// Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationslocationId_0WithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a location
        /// </summary>
        /// <remarks>
        /// Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationslocationId_1Async(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a location
        /// </summary>
        /// <remarks>
        /// Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationslocationId_1WithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Location’s Attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of attachments.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocationAttachment>> LocationsstoreIdAttachmentsAsync(string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Location’s Attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of attachments.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationAttachment>>> LocationsstoreIdAttachmentsWithHttpInfoAsync(string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Location Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationsstoreIdAttachmentsattachmentIdAsync(string storeId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Location Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationsstoreIdAttachmentsattachmentIdWithHttpInfoAsync(string storeId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Location Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationLocationAttachment</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationLocationAttachment> LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanAsync(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Location Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationLocationAttachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationLocationAttachment>> LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanWithHttpInfoAsync(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add location notes
        /// </summary>
        /// <remarks>
        /// Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationsstoreIdUpdateNotesAsync(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add location notes
        /// </summary>
        /// <remarks>
        /// Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationsstoreIdUpdateNotesWithHttpInfoAsync(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get provider primary location assignments by Provider Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToAsync(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get provider primary location assignments by Provider Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToWithHttpInfoAsync(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Provider Assignments by locations and trades
        /// </summary>
        /// <remarks>
        /// Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>> ProvidersGetProviderAssignmentsForLocationsAndTradesAsync(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Provider Assignments by locations and trades
        /// </summary>
        /// <remarks>
        /// Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>>> ProvidersGetProviderAssignmentsForLocationsAndTradesWithHttpInfoAsync(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get provider location assignments
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProvidersGetProviderLocationAssignmentsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get provider location assignments
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProvidersGetProviderLocationAssignmentsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>
        /// Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>> StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfoAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get stores
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentUsersCurrentStoresAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get stores
        /// </summary>
        /// <remarks>
        /// Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentUsersCurrentStoresWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve location information
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringAsync(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve location information
        /// </summary>
        /// <remarks>
        /// Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringWithHttpInfoAsync(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApi : ILocationsApiSync, ILocationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationsApi : ILocationsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocationsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LocationsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Locations by location ids Returns a list of locations.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetApiLocationResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetApiLocationResponse Filter(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetApiLocationResponse> localVarResponse = FilterWithHttpInfo(locationFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Locations by location ids Returns a list of locations.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetApiLocationResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetApiLocationResponse> FilterWithHttpInfo(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0)
        {
            // verify the required parameter 'locationFilter' is set
            if (locationFilter == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationFilter' when calling LocationsApi->Filter");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = locationFilter;

            localVarRequestOptions.Operation = "LocationsApi.Filter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingLocationGetApiLocationResponse>("/filter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Filter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Locations by location ids Returns a list of locations.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetApiLocationResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetApiLocationResponse> FilterAsync(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetApiLocationResponse> localVarResponse = await FilterWithHttpInfoAsync(locationFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Locations by location ids Returns a list of locations.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetApiLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetApiLocationResponse>> FilterWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locationFilter' is set
            if (locationFilter == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationFilter' when calling LocationsApi->Filter");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = locationFilter;

            localVarRequestOptions.Operation = "LocationsApi.Filter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingLocationGetApiLocationResponse>("/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Filter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locations by filters Returns locations based on the filters applied.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;</returns>
        public List<SCServiceChannelServicesMessagingLocationLocationShortModel> GetFilteredLocations(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationShortModel>> localVarResponse = GetFilteredLocationsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locations by filters Returns locations based on the filters applied.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationShortModel>> GetFilteredLocationsWithHttpInfo(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling LocationsApi->GetFilteredLocations");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "LocationsApi.GetFilteredLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingLocationLocationShortModel>>("/GetFilteredLocations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilteredLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locations by filters Returns locations based on the filters applied.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocationShortModel>> GetFilteredLocationsAsync(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationShortModel>> localVarResponse = await GetFilteredLocationsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locations by filters Returns locations based on the filters applied.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocationShortModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationShortModel>>> GetFilteredLocationsWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling LocationsApi->GetFilteredLocations");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "LocationsApi.GetFilteredLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingLocationLocationShortModel>>("/GetFilteredLocations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilteredLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get location districts 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse> localVarResponse = GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionWithHttpInfo(page, pageSize, searchExpression);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get location districts 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse> GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionWithHttpInfo(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (searchExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchExpression", searchExpression));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse>("/GetLocationDistricts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get location districts 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse> GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionAsync(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse> localVarResponse = await GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionWithHttpInfoAsync(page, pageSize, searchExpression, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get location districts 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse>> GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionWithHttpInfoAsync(int page, int pageSize, string? searchExpression = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (searchExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchExpression", searchExpression));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse>("/GetLocationDistricts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public List<SCServiceChannelServicesMessagingLocationLocation> GetLocations(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> localVarResponse = GetLocationsWithHttpInfo(expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingLocationLocation>>("/odata/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> localVarResponse = await GetLocationsWithHttpInfoAsync(expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>>> GetLocationsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingLocationLocation>>("/odata/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Locations 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse> localVarResponse = GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedWithHttpInfo(page, pageSize, latitude, longitude, searchExpression, onlyOpened);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Locations 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse> GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedWithHttpInfo(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (searchExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchExpression", searchExpression));
            }
            if (onlyOpened != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "onlyOpened", onlyOpened));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse>("/GetLocationsMobile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Locations 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse> GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedAsync(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse> localVarResponse = await GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedWithHttpInfoAsync(page, pageSize, latitude, longitude, searchExpression, onlyOpened, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Locations 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location (optional)</param>
        /// <param name="longitude">The longitude of the user location (optional)</param>
        /// <param name="searchExpression">User input text (optional)</param>
        /// <param name="onlyOpened">Include only open locations (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse>> GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedWithHttpInfoAsync(int page, int pageSize, double? latitude = default(double?), double? longitude = default(double?), string? searchExpression = default(string?), bool? onlyOpened = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (searchExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchExpression", searchExpression));
            }
            if (onlyOpened != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "onlyOpened", onlyOpened));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse>("/GetLocationsMobile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locations by geographic coordinates Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public List<SCServiceChannelServicesMessagingLocationLocation> GetLocationsNearMe(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> localVarResponse = GetLocationsNearMeWithHttpInfo(longitude, latitude, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locations by geographic coordinates Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsNearMeWithHttpInfo(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("longitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("latitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsNearMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingLocationLocation>>("/odata/locations/Service.NearBy(latitude={latitude},longitude={longitude})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsNearMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locations by geographic coordinates Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocation>> GetLocationsNearMeAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> localVarResponse = await GetLocationsNearMeWithHttpInfoAsync(longitude, latitude, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locations by geographic coordinates Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>>> GetLocationsNearMeWithHttpInfoAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("longitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("latitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsNearMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingLocationLocation>>("/odata/locations/Service.NearBy(latitude={latitude},longitude={longitude})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsNearMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public List<SCServiceChannelServicesMessagingLocationLocation> GetServiceRequestLocations(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> localVarResponse = GetServiceRequestLocationsWithHttpInfo(expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> GetServiceRequestLocationsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetServiceRequestLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingLocationLocation>>("/odata/locations/Service.ForServiceRequest()", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceRequestLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocation>> GetServiceRequestLocationsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>> localVarResponse = await GetServiceRequestLocationsWithHttpInfoAsync(expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve locations Returns a list of locations of a service request. You can use filter parameters to make the request more specific.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocation>>> GetServiceRequestLocationsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetServiceRequestLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingLocationLocation>>("/odata/locations/Service.ForServiceRequest()", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceRequestLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LandlordResponsibilities(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0)
        {
            LandlordResponsibilitiesWithHttpInfo(apiRequest);
        }

        /// <summary>
        /// Update Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LandlordResponsibilitiesWithHttpInfo(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0)
        {
            // verify the required parameter 'apiRequest' is set
            if (apiRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'apiRequest' when calling LocationsApi->LandlordResponsibilities");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiRequest;

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/landlord-responsibilities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LandlordResponsibilitiesAsync(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LandlordResponsibilitiesWithHttpInfoAsync(apiRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LandlordResponsibilitiesWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiRequest' is set
            if (apiRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'apiRequest' when calling LocationsApi->LandlordResponsibilities");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiRequest;

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/landlord-responsibilities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create landlord responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel</returns>
        public SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel LandlordResponsibilities_0(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel> localVarResponse = LandlordResponsibilities_0WithHttpInfo(apiRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create landlord responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel> LandlordResponsibilities_0WithHttpInfo(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0)
        {
            // verify the required parameter 'apiRequest' is set
            if (apiRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'apiRequest' when calling LocationsApi->LandlordResponsibilities_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiRequest;

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilities_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel>("/landlord-responsibilities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilities_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create landlord responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel> LandlordResponsibilities_0Async(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel> localVarResponse = await LandlordResponsibilities_0WithHttpInfoAsync(apiRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create landlord responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel>> LandlordResponsibilities_0WithHttpInfoAsync(SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiRequest' is set
            if (apiRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'apiRequest' when calling LocationsApi->LandlordResponsibilities_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiRequest;

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilities_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel>("/landlord-responsibilities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilities_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LandlordResponsibilitiesresponsibilityId(int responsibilityId, int operationIndex = 0)
        {
            LandlordResponsibilitiesresponsibilityIdWithHttpInfo(responsibilityId);
        }

        /// <summary>
        /// Delete Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LandlordResponsibilitiesresponsibilityIdWithHttpInfo(int responsibilityId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("responsibilityId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(responsibilityId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilitiesresponsibilityId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/landlord-responsibilities/{responsibilityId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilitiesresponsibilityId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LandlordResponsibilitiesresponsibilityIdAsync(int responsibilityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LandlordResponsibilitiesresponsibilityIdWithHttpInfoAsync(responsibilityId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Landlord Responsibility 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responsibilityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LandlordResponsibilitiesresponsibilityIdWithHttpInfoAsync(int responsibilityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("responsibilityId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(responsibilityId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilitiesresponsibilityId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/landlord-responsibilities/{responsibilityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilitiesresponsibilityId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get landlord responsibilities 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse LandlordResponsibilitiesstoreIdstoreId(string? storeId = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse> localVarResponse = LandlordResponsibilitiesstoreIdstoreIdWithHttpInfo(storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get landlord responsibilities 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse> LandlordResponsibilitiesstoreIdstoreIdWithHttpInfo(string? storeId = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilitiesstoreIdstoreId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse>("/landlord-responsibilities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilitiesstoreIdstoreId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get landlord responsibilities 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse> LandlordResponsibilitiesstoreIdstoreIdAsync(string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse> localVarResponse = await LandlordResponsibilitiesstoreIdstoreIdWithHttpInfoAsync(storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get landlord responsibilities 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse>> LandlordResponsibilitiesstoreIdstoreIdWithHttpInfoAsync(string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }

            localVarRequestOptions.Operation = "LocationsApi.LandlordResponsibilitiesstoreIdstoreId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse>("/landlord-responsibilities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LandlordResponsibilitiesstoreIdstoreId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Locations(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0)
        {
            LocationsWithHttpInfo(request);
        }

        /// <summary>
        /// Add a location Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationsWithHttpInfo(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling LocationsApi->Locations");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "LocationsApi.Locations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Locations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationsAsync(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a location Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add a new location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationsWithHttpInfoAsync(SCServiceChannelServicesMessagingLocationCreateLocationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling LocationsApi->Locations");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "LocationsApi.Locations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Locations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids Returns a list of address types (Id, Pattern).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;</returns>
        public List<SCServiceChannelServicesMessagingLocationAddressType> LocationsAddressformatsc0c0c1c1id0id0id1id1(List<string> c, List<int> id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationAddressType>> localVarResponse = LocationsAddressformatsc0c0c1c1id0id0id1id1WithHttpInfo(c, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids Returns a list of address types (Id, Pattern).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationAddressType>> LocationsAddressformatsc0c0c1c1id0id0id1id1WithHttpInfo(List<string> c, List<int> id, int operationIndex = 0)
        {
            // verify the required parameter 'c' is set
            if (c == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'c' when calling LocationsApi->LocationsAddressformatsc0c0c1c1id0id0id1id1");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->LocationsAddressformatsc0c0c1c1id0id0id1id1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "c", c));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));

            localVarRequestOptions.Operation = "LocationsApi.LocationsAddressformatsc0c0c1c1id0id0id1id1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingLocationAddressType>>("/locations/addressformats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsAddressformatsc0c0c1c1id0id0id1id1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids Returns a list of address types (Id, Pattern).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationAddressType>> LocationsAddressformatsc0c0c1c1id0id0id1id1Async(List<string> c, List<int> id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationAddressType>> localVarResponse = await LocationsAddressformatsc0c0c1c1id0id0id1id1WithHttpInfoAsync(c, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids Returns a list of address types (Id, Pattern).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationAddressType&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationAddressType>>> LocationsAddressformatsc0c0c1c1id0id0id1id1WithHttpInfoAsync(List<string> c, List<int> id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'c' is set
            if (c == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'c' when calling LocationsApi->LocationsAddressformatsc0c0c1c1id0id0id1id1");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->LocationsAddressformatsc0c0c1c1id0id0id1id1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "c", c));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));

            localVarRequestOptions.Operation = "LocationsApi.LocationsAddressformatsc0c0c1c1id0id0id1id1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingLocationAddressType>>("/locations/addressformats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsAddressformatsc0c0c1c1id0id0id1id1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether the location is open or closed. Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse</returns>
        public SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse> localVarResponse = LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeWithHttpInfo(locationId, checkTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether the location is open or closed. Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse> LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeWithHttpInfo(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (checkTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkTime", checkTime));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse>("/locations/CheckIfLocationIsOpen", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether the location is open or closed. Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse> LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeAsync(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse> localVarResponse = await LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeWithHttpInfoAsync(locationId, checkTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether the location is open or closed. Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse>> LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeWithHttpInfoAsync(int locationId, DateTime? checkTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (checkTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkTime", checkTime));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse>("/locations/CheckIfLocationIsOpen", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve locations by filters Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationsGetLocationsByFilterColumns(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0)
        {
            LocationsGetLocationsByFilterColumnsWithHttpInfo(locationFilterColumns);
        }

        /// <summary>
        /// Retrieve locations by filters Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationsGetLocationsByFilterColumnsWithHttpInfo(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0)
        {
            // verify the required parameter 'locationFilterColumns' is set
            if (locationFilterColumns == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationFilterColumns' when calling LocationsApi->LocationsGetLocationsByFilterColumns");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = locationFilterColumns;

            localVarRequestOptions.Operation = "LocationsApi.LocationsGetLocationsByFilterColumns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/locations/GetLocationsByFilterColumns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsGetLocationsByFilterColumns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve locations by filters Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationsGetLocationsByFilterColumnsAsync(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationsGetLocationsByFilterColumnsWithHttpInfoAsync(locationFilterColumns, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve locations by filters Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationsGetLocationsByFilterColumnsWithHttpInfoAsync(SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locationFilterColumns' is set
            if (locationFilterColumns == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationFilterColumns' when calling LocationsApi->LocationsGetLocationsByFilterColumns");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = locationFilterColumns;

            localVarRequestOptions.Operation = "LocationsApi.LocationsGetLocationsByFilterColumns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/locations/GetLocationsByFilterColumns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsGetLocationsByFilterColumns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> localVarResponse = LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfo(id, storeIdentifier, name, sort, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfo(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (storeIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeIdentifier", storeIdentifier));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>("/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> localVarResponse = await LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfoAsync(id, storeIdentifier, name, sort, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>> LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfoAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (storeIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeIdentifier", storeIdentifier));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>("/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a location with location notes Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse</returns>
        public SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse LocationsLocationWithNotes(Dictionary<string, Object> locationWithNotes, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse> localVarResponse = LocationsLocationWithNotesWithHttpInfo(locationWithNotes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a location with location notes Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse> LocationsLocationWithNotesWithHttpInfo(Dictionary<string, Object> locationWithNotes, int operationIndex = 0)
        {
            // verify the required parameter 'locationWithNotes' is set
            if (locationWithNotes == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationWithNotes' when calling LocationsApi->LocationsLocationWithNotes");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = locationWithNotes;

            localVarRequestOptions.Operation = "LocationsApi.LocationsLocationWithNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse>("/locations/LocationWithNotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsLocationWithNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a location with location notes Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse> LocationsLocationWithNotesAsync(Dictionary<string, Object> locationWithNotes, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse> localVarResponse = await LocationsLocationWithNotesWithHttpInfoAsync(locationWithNotes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a location with location notes Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse>> LocationsLocationWithNotesWithHttpInfoAsync(Dictionary<string, Object> locationWithNotes, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locationWithNotes' is set
            if (locationWithNotes == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationWithNotes' when calling LocationsApi->LocationsLocationWithNotes");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = locationWithNotes;

            localVarRequestOptions.Operation = "LocationsApi.LocationsLocationWithNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse>("/locations/LocationWithNotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsLocationWithNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unassigned contracts Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse LocationsUnassignedContracts(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse> localVarResponse = LocationsUnassignedContractsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unassigned contracts Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse> LocationsUnassignedContractsWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocationsApi.LocationsUnassignedContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse>("/locations/UnassignedContracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsUnassignedContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unassigned contracts Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse> LocationsUnassignedContractsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse> localVarResponse = await LocationsUnassignedContractsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unassigned contracts Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse>> LocationsUnassignedContractsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocationsApi.LocationsUnassignedContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse>("/locations/UnassignedContracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsUnassignedContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a location Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationLocationWithTimezoneName</returns>
        public SCServiceChannelServicesMessagingLocationLocationWithTimezoneName LocationslocationId(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName> localVarResponse = LocationslocationIdWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a location Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationLocationWithTimezoneName</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName> LocationslocationIdWithHttpInfo(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName>("/locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a location Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationLocationWithTimezoneName</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName> LocationslocationIdAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName> localVarResponse = await LocationslocationIdWithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a location Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationLocationWithTimezoneName)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName>> LocationslocationIdWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName>("/locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an evacuation plan map of a location Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse LocationslocationIdEvacuationmaps(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse> localVarResponse = LocationslocationIdEvacuationmapsWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an evacuation plan map of a location Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse> LocationslocationIdEvacuationmapsWithHttpInfo(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationIdEvacuationmaps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse>("/locations/{locationId}/evacuationmaps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdEvacuationmaps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an evacuation plan map of a location Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse> LocationslocationIdEvacuationmapsAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse> localVarResponse = await LocationslocationIdEvacuationmapsWithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an evacuation plan map of a location Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse>> LocationslocationIdEvacuationmapsWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationIdEvacuationmaps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse>("/locations/{locationId}/evacuationmaps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdEvacuationmaps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location note Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationslocationIdNotes(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0)
        {
            LocationslocationIdNotesWithHttpInfo(locationId, locNoteHeader);
        }

        /// <summary>
        /// Add a location note Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationslocationIdNotesWithHttpInfo(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0)
        {
            // verify the required parameter 'locNoteHeader' is set
            if (locNoteHeader == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locNoteHeader' when calling LocationsApi->LocationslocationIdNotes");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = locNoteHeader;

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationIdNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/locations/{locationId}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location note Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationslocationIdNotesAsync(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationslocationIdNotesWithHttpInfoAsync(locationId, locNoteHeader, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a location note Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationslocationIdNotesWithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locNoteHeader' is set
            if (locNoteHeader == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locNoteHeader' when calling LocationsApi->LocationslocationIdNotes");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = locNoteHeader;

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationIdNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/locations/{locationId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve location notes Returns the location notes for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationNoteLocationNote</returns>
        public SCServiceChannelServicesMessagingLocationNoteLocationNote LocationslocationIdNotesprivateNotesprivateNotes(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationNoteLocationNote> localVarResponse = LocationslocationIdNotesprivateNotesprivateNotesWithHttpInfo(locationId, privateNotes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve location notes Returns the location notes for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationNoteLocationNote</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationNoteLocationNote> LocationslocationIdNotesprivateNotesprivateNotesWithHttpInfo(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (privateNotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "privateNotes", privateNotes));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationIdNotesprivateNotesprivateNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationNoteLocationNote>("/locations/{locationId}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdNotesprivateNotesprivateNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve location notes Returns the location notes for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationNoteLocationNote</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationNoteLocationNote> LocationslocationIdNotesprivateNotesprivateNotesAsync(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationNoteLocationNote> localVarResponse = await LocationslocationIdNotesprivateNotesprivateNotesWithHttpInfoAsync(locationId, privateNotes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve location notes Returns the location notes for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationNoteLocationNote)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationNoteLocationNote>> LocationslocationIdNotesprivateNotesprivateNotesWithHttpInfoAsync(int locationId, bool? privateNotes = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (privateNotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "privateNotes", privateNotes));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationIdNotesprivateNotesprivateNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationNoteLocationNote>("/locations/{locationId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdNotesprivateNotesprivateNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a location Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationslocationId_0(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0)
        {
            LocationslocationId_0WithHttpInfo(locationId, request);
        }

        /// <summary>
        /// Update a location Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationslocationId_0WithHttpInfo(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling LocationsApi->LocationslocationId_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a location Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationslocationId_0Async(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationslocationId_0WithHttpInfoAsync(locationId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a location Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationslocationId_0WithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling LocationsApi->LocationslocationId_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a location Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationslocationId_1(int locationId, int operationIndex = 0)
        {
            LocationslocationId_1WithHttpInfo(locationId);
        }

        /// <summary>
        /// Delete a location Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationslocationId_1WithHttpInfo(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationId_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationId_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a location Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationslocationId_1Async(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationslocationId_1WithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a location Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationslocationId_1WithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationslocationId_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationId_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Location’s Attachments Returns a list of attachments.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingLocationLocationAttachment> LocationsstoreIdAttachments(string storeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationAttachment>> localVarResponse = LocationsstoreIdAttachmentsWithHttpInfo(storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Location’s Attachments Returns a list of attachments.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationAttachment>> LocationsstoreIdAttachmentsWithHttpInfo(string storeId, int operationIndex = 0)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdAttachments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingLocationLocationAttachment>>("/locations/{storeId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Location’s Attachments Returns a list of attachments.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocationAttachment>> LocationsstoreIdAttachmentsAsync(string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationAttachment>> localVarResponse = await LocationsstoreIdAttachmentsWithHttpInfoAsync(storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Location’s Attachments Returns a list of attachments.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocationAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationAttachment>>> LocationsstoreIdAttachmentsWithHttpInfoAsync(string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdAttachments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingLocationLocationAttachment>>("/locations/{storeId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationsstoreIdAttachmentsattachmentId(string storeId, int attachmentId, int operationIndex = 0)
        {
            LocationsstoreIdAttachmentsattachmentIdWithHttpInfo(storeId, attachmentId);
        }

        /// <summary>
        /// Delete a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationsstoreIdAttachmentsattachmentIdWithHttpInfo(string storeId, int attachmentId, int operationIndex = 0)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdAttachmentsattachmentId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdAttachmentsattachmentId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/locations/{storeId}/attachments/{attachmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdAttachmentsattachmentId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationsstoreIdAttachmentsattachmentIdAsync(string storeId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationsstoreIdAttachmentsattachmentIdWithHttpInfoAsync(storeId, attachmentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationsstoreIdAttachmentsattachmentIdWithHttpInfoAsync(string storeId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdAttachmentsattachmentId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdAttachmentsattachmentId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/locations/{storeId}/attachments/{attachmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdAttachmentsattachmentId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationLocationAttachment</returns>
        public SCServiceChannelServicesMessagingLocationLocationAttachment LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationAttachment> localVarResponse = LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanWithHttpInfo(storeId, file, fileDescription, isEvacuationPlan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationLocationAttachment</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationAttachment> LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanWithHttpInfo(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling LocationsApi->LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            if (fileDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "fileDescription", fileDescription));
            }
            if (isEvacuationPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "isEvacuationPlan", isEvacuationPlan));
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingLocationLocationAttachment>("/locations/{storeId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationLocationAttachment</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationLocationAttachment> LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanAsync(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationAttachment> localVarResponse = await LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanWithHttpInfoAsync(storeId, file, fileDescription, isEvacuationPlan, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Location Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"> (optional)</param>
        /// <param name="isEvacuationPlan"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationLocationAttachment)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationLocationAttachment>> LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanWithHttpInfoAsync(string storeId, System.IO.Stream file, string? fileDescription = default(string?), bool? isEvacuationPlan = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling LocationsApi->LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            if (fileDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "fileDescription", fileDescription));
            }
            if (isEvacuationPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "isEvacuationPlan", isEvacuationPlan));
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingLocationLocationAttachment>("/locations/{storeId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add location notes Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationsstoreIdUpdateNotes(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0)
        {
            LocationsstoreIdUpdateNotesWithHttpInfo(storeId, locNoteHeaders);
        }

        /// <summary>
        /// Add location notes Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationsstoreIdUpdateNotesWithHttpInfo(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdUpdateNotes");
            }

            // verify the required parameter 'locNoteHeaders' is set
            if (locNoteHeaders == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locNoteHeaders' when calling LocationsApi->LocationsstoreIdUpdateNotes");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.Data = locNoteHeaders;

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdUpdateNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/locations/{storeId}/updateNotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdUpdateNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add location notes Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationsstoreIdUpdateNotesAsync(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationsstoreIdUpdateNotesWithHttpInfoAsync(storeId, locNoteHeaders, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add location notes Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationsstoreIdUpdateNotesWithHttpInfoAsync(string storeId, SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'storeId' when calling LocationsApi->LocationsstoreIdUpdateNotes");
            }

            // verify the required parameter 'locNoteHeaders' is set
            if (locNoteHeaders == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locNoteHeaders' when calling LocationsApi->LocationsstoreIdUpdateNotes");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("storeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.Data = locNoteHeaders;

            localVarRequestOptions.Operation = "LocationsApi.LocationsstoreIdUpdateNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/locations/{storeId}/updateNotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsstoreIdUpdateNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get provider primary location assignments by Provider Ids 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0)
        {
            ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToWithHttpInfo(providerIds, dateFrom, dateTo);
        }

        /// <summary>
        /// Get provider primary location assignments by Provider Ids 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToWithHttpInfo(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0)
        {
            // verify the required parameter 'providerIds' is set
            if (providerIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'providerIds' when calling LocationsApi->ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "providerIds", providerIds));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));

            localVarRequestOptions.Operation = "LocationsApi.ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/providers/GetPrimaryLocationAssignmentsForProviderIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get provider primary location assignments by Provider Ids 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToAsync(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToWithHttpInfoAsync(providerIds, dateFrom, dateTo, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get provider primary location assignments by Provider Ids 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToWithHttpInfoAsync(List<int> providerIds, DateTime dateFrom, DateTime dateTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerIds' is set
            if (providerIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'providerIds' when calling LocationsApi->ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "providerIds", providerIds));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));

            localVarRequestOptions.Operation = "LocationsApi.ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/providers/GetPrimaryLocationAssignmentsForProviderIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Provider Assignments by locations and trades Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse> ProvidersGetProviderAssignmentsForLocationsAndTrades(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>> localVarResponse = ProvidersGetProviderAssignmentsForLocationsAndTradesWithHttpInfo(assignmentsFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Provider Assignments by locations and trades Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>> ProvidersGetProviderAssignmentsForLocationsAndTradesWithHttpInfo(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0)
        {
            // verify the required parameter 'assignmentsFilter' is set
            if (assignmentsFilter == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assignmentsFilter' when calling LocationsApi->ProvidersGetProviderAssignmentsForLocationsAndTrades");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assignmentsFilter;

            localVarRequestOptions.Operation = "LocationsApi.ProvidersGetProviderAssignmentsForLocationsAndTrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>>("/providers/GetProviderAssignmentsForLocationsAndTrades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersGetProviderAssignmentsForLocationsAndTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Provider Assignments by locations and trades Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>> ProvidersGetProviderAssignmentsForLocationsAndTradesAsync(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>> localVarResponse = await ProvidersGetProviderAssignmentsForLocationsAndTradesWithHttpInfoAsync(assignmentsFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Provider Assignments by locations and trades Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>>> ProvidersGetProviderAssignmentsForLocationsAndTradesWithHttpInfoAsync(SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assignmentsFilter' is set
            if (assignmentsFilter == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assignmentsFilter' when calling LocationsApi->ProvidersGetProviderAssignmentsForLocationsAndTrades");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assignmentsFilter;

            localVarRequestOptions.Operation = "LocationsApi.ProvidersGetProviderAssignmentsForLocationsAndTrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>>("/providers/GetProviderAssignmentsForLocationsAndTrades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersGetProviderAssignmentsForLocationsAndTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get provider location assignments Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProvidersGetProviderLocationAssignments(int operationIndex = 0)
        {
            ProvidersGetProviderLocationAssignmentsWithHttpInfo();
        }

        /// <summary>
        /// Get provider location assignments Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProvidersGetProviderLocationAssignmentsWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocationsApi.ProvidersGetProviderLocationAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/providers/GetProviderLocationAssignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersGetProviderLocationAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get provider location assignments Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProvidersGetProviderLocationAssignmentsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProvidersGetProviderLocationAssignmentsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get provider location assignments Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProvidersGetProviderLocationAssignmentsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocationsApi.ProvidersGetProviderLocationAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/providers/GetProviderLocationAssignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersGetProviderLocationAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        public SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> localVarResponse = StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfo(id, storeIdentifier, name, sort, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfo(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (storeIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeIdentifier", storeIdentifier));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "LocationsApi.StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>("/stores", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse> localVarResponse = await StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfoAsync(id, storeIdentifier, name, sort, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve stores Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique location identifier. (optional)</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="name">Location name. (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>> StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeWithHttpInfoAsync(int? id = default(int?), string? storeIdentifier = default(string?), string? name = default(string?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (storeIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeIdentifier", storeIdentifier));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "LocationsApi.StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>("/stores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get stores Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentUsersCurrentStores(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentUsersCurrentStoresWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stores Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentUsersCurrentStoresWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocationsApi.SubscribersCurrentUsersCurrentStores";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/users/current/stores", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentUsersCurrentStores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get stores Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentUsersCurrentStoresAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentUsersCurrentStoresWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stores Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentUsersCurrentStoresWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocationsApi.SubscribersCurrentUsersCurrentStores";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/users/current/stores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentUsersCurrentStores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve location information Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0)
        {
            SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringWithHttpInfo(subscriberId, filterType, searchString);
        }

        /// <summary>
        /// Retrieve location information Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringWithHttpInfo(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (searchString != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchString", searchString));
            }

            localVarRequestOptions.Operation = "LocationsApi.SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/{subscriberId}/locationsinfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve location information Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringAsync(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringWithHttpInfoAsync(subscriberId, filterType, searchString, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve location information Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type. (optional)</param>
        /// <param name="searchString">Returns resources based on the provided query string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringWithHttpInfoAsync(int subscriberId, string? filterType = default(string?), string? searchString = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (searchString != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchString", searchString));
            }

            localVarRequestOptions.Operation = "LocationsApi.SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/{subscriberId}/locationsinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
