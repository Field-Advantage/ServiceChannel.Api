/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Invoices
        /// </summary>
        /// <remarks>
        /// Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;</returns>
        List<SCServiceChannelServicesMessagingInvoicesInvoice> GetInvoices(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Invoices
        /// </summary>
        /// <remarks>
        /// Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoice>> GetInvoicesWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add an invoice to a work order
        /// </summary>
        /// <remarks>
        /// Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Invoices(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0);

        /// <summary>
        /// Add an invoice to a work order
        /// </summary>
        /// <remarks>
        /// Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvoicesWithHttpInfo(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0);
        /// <summary>
        /// Add payment records to invoices
        /// </summary>
        /// <remarks>
        /// Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse</returns>
        SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse InvoicesPayments(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0);

        /// <summary>
        /// Add payment records to invoices
        /// </summary>
        /// <remarks>
        /// Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse> InvoicesPaymentsWithHttpInfo(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0);
        /// <summary>
        /// Checks state of a service for invoice.
        /// </summary>
        /// <remarks>
        /// The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object InvoicesPingserviceName(string serviceName, int operationIndex = 0);

        /// <summary>
        /// Checks state of a service for invoice.
        /// </summary>
        /// <remarks>
        /// The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> InvoicesPingserviceNameWithHttpInfo(string serviceName, int operationIndex = 0);
        /// <summary>
        /// Retrieve statistics of all invoices
        /// </summary>
        /// <remarks>
        /// Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse</returns>
        SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve statistics of all invoices
        /// </summary>
        /// <remarks>
        /// Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse> InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0);
        /// <summary>
        /// Add a payment record to an invoice by a tracking number
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void InvoicesWorkorderstrackingNumberPayment(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0);

        /// <summary>
        /// Add a payment record to an invoice by a tracking number
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvoicesWorkorderstrackingNumberPaymentWithHttpInfo(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0);
        /// <summary>
        /// Get an invoice
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse</returns>
        SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse InvoicesinvoiceId(int invoiceId, int operationIndex = 0);

        /// <summary>
        /// Get an invoice
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse> InvoicesinvoiceIdWithHttpInfo(int invoiceId, int operationIndex = 0);
        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0);

        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryWithHttpInfo(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0);
        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;</returns>
        List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy> InvoicesinvoiceIdDiscrepancy(int invoiceId, int operationIndex = 0);

        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>> InvoicesinvoiceIdDiscrepancyWithHttpInfo(int invoiceId, int operationIndex = 0);
        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy</returns>
        SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy InvoicesinvoiceIdDiscrepancyExtended(int invoiceId, int operationIndex = 0);

        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy</returns>
        ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy> InvoicesinvoiceIdDiscrepancyExtendedWithHttpInfo(int invoiceId, int operationIndex = 0);
        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void InvoicesinvoiceIdOnholdcommentscomments(int invoiceId, string comments, int operationIndex = 0);

        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvoicesinvoiceIdOnholdcommentscommentsWithHttpInfo(int invoiceId, string comments, int operationIndex = 0);
        /// <summary>
        /// Add a payment to an invoice
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void InvoicesinvoiceIdPayment(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0);

        /// <summary>
        /// Add a payment to an invoice
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvoicesinvoiceIdPaymentWithHttpInfo(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0);
        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void InvoicesinvoiceIdRejectcommentscomments(int invoiceId, string comments, int operationIndex = 0);

        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvoicesinvoiceIdRejectcommentscommentsWithHttpInfo(int invoiceId, string comments, int operationIndex = 0);
        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse> InvoicessubscriberIdInvoiceRejectionReasons(int subscriberId, int operationIndex = 0);

        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>> InvoicessubscriberIdInvoiceRejectionReasonsWithHttpInfo(int subscriberId, int operationIndex = 0);
        /// <summary>
        /// Retrieve general invoice settings for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral</returns>
        SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral InvoicessubscriberIdInvoiceRequirements(int subscriberId, int operationIndex = 0);

        /// <summary>
        /// Retrieve general invoice settings for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral</returns>
        ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral> InvoicessubscriberIdInvoiceRequirementsWithHttpInfo(int subscriberId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdWithHttpInfo(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Invoices
        /// </summary>
        /// <remarks>
        /// Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingInvoicesInvoice>> GetInvoicesAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Invoices
        /// </summary>
        /// <remarks>
        /// Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoice>>> GetInvoicesWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add an invoice to a work order
        /// </summary>
        /// <remarks>
        /// Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvoicesAsync(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an invoice to a work order
        /// </summary>
        /// <remarks>
        /// Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvoicesWithHttpInfoAsync(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add payment records to invoices
        /// </summary>
        /// <remarks>
        /// Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse> InvoicesPaymentsAsync(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add payment records to invoices
        /// </summary>
        /// <remarks>
        /// Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse>> InvoicesPaymentsWithHttpInfoAsync(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checks state of a service for invoice.
        /// </summary>
        /// <remarks>
        /// The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> InvoicesPingserviceNameAsync(string serviceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks state of a service for invoice.
        /// </summary>
        /// <remarks>
        /// The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvoicesPingserviceNameWithHttpInfoAsync(string serviceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve statistics of all invoices
        /// </summary>
        /// <remarks>
        /// Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse> InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodAsync(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve statistics of all invoices
        /// </summary>
        /// <remarks>
        /// Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse>> InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a payment record to an invoice by a tracking number
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvoicesWorkorderstrackingNumberPaymentAsync(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a payment record to an invoice by a tracking number
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvoicesWorkorderstrackingNumberPaymentWithHttpInfoAsync(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an invoice
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse> InvoicesinvoiceIdAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an invoice
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse>> InvoicesinvoiceIdWithHttpInfoAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryAsync(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryWithHttpInfoAsync(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>> InvoicesinvoiceIdDiscrepancyAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>>> InvoicesinvoiceIdDiscrepancyWithHttpInfoAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy> InvoicesinvoiceIdDiscrepancyExtendedAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get rates discrepancy
        /// </summary>
        /// <remarks>
        /// Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy>> InvoicesinvoiceIdDiscrepancyExtendedWithHttpInfoAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvoicesinvoiceIdOnholdcommentscommentsAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvoicesinvoiceIdOnholdcommentscommentsWithHttpInfoAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a payment to an invoice
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvoicesinvoiceIdPaymentAsync(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a payment to an invoice
        /// </summary>
        /// <remarks>
        /// Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvoicesinvoiceIdPaymentWithHttpInfoAsync(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvoicesinvoiceIdRejectcommentscommentsAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvoicesinvoiceIdRejectcommentscommentsWithHttpInfoAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>> InvoicessubscriberIdInvoiceRejectionReasonsAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>>> InvoicessubscriberIdInvoiceRejectionReasonsWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve general invoice settings for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral> InvoicessubscriberIdInvoiceRequirementsAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve general invoice settings for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral>> InvoicessubscriberIdInvoiceRequirementsWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdAsync(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdWithHttpInfoAsync(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApi : IInvoicesApiSync, IInvoicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoicesApi : IInvoicesApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicesApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoicesApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InvoicesApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Invoices Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;</returns>
        public List<SCServiceChannelServicesMessagingInvoicesInvoice> GetInvoices(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoice>> localVarResponse = GetInvoicesWithHttpInfo(expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Invoices Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoice>> GetInvoicesWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "InvoicesApi.GetInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingInvoicesInvoice>>("/odata/invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Invoices Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingInvoicesInvoice>> GetInvoicesAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoice>> localVarResponse = await GetInvoicesWithHttpInfoAsync(expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Invoices Returns a list of invoices posted within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the invoice &#x60;PostedDate&#x60; and the current date is 365 days.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingInvoicesInvoice&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoice>>> GetInvoicesWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "InvoicesApi.GetInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingInvoicesInvoice>>("/odata/invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice to a work order Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Invoices(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0)
        {
            InvoicesWithHttpInfo(request);
        }

        /// <summary>
        /// Add an invoice to a work order Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> InvoicesWithHttpInfo(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling InvoicesApi->Invoices");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "InvoicesApi.Invoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Invoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice to a work order Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvoicesAsync(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InvoicesWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add an invoice to a work order Creates an invoice in the *Open* status for the specified work order.              &lt;br /&gt;Find out more about [creating an invoice](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2205811424/Creating+an+Invoice) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to create an invoice for the specified work order.              &lt;br /&gt;**Required parameters**:               • **InvoiceNumber**. Invoice number created by a user.               • **WoIdentifier**. Unique work order identifier (can be *TrackingNumber* or *WorkOrderNumber* for Contractor and *TrackingNumber* or *PurchaseNumber* for Client).              &lt;br /&gt;If there is no need to specify any details in *Labors*, *Materials*, *Travels*, and *Others* objects, you can send the request without them.               &lt;br /&gt;**Note**: Work Order should be in the *Completed* status to successfully create an invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> InvoicesWithHttpInfoAsync(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling InvoicesApi->Invoices");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "InvoicesApi.Invoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Invoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add payment records to invoices Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse</returns>
        public SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse InvoicesPayments(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse> localVarResponse = InvoicesPaymentsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add payment records to invoices Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse> InvoicesPaymentsWithHttpInfo(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling InvoicesApi->InvoicesPayments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse>("/invoices/Payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add payment records to invoices Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse> InvoicesPaymentsAsync(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse> localVarResponse = await InvoicesPaymentsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add payment records to invoices Creates payment records for the invoices in the *Approved* status in bulk.               &lt;br /&gt;**Note**: Method is available to users with the *SC Admin*, *Master Admin*, or *Invoice Admin* roles and with the *InvoiceChangeToPaid* feature flag enabled.               &lt;br /&gt;**Example Request**                                  POST /invoices/{invoiceId}/Payment                   {                     \&quot;Payments\&quot;: [                       {                         \&quot;InvoiceId\&quot;: 96814318,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;456858\&quot;,                         \&quot;PaymentAmount\&quot;: 756                       },                       {                         \&quot;InvoiceId\&quot;: 4988659,                         \&quot;PaymentDate\&quot;: \&quot;2021-12-13T06:12:22.820Z\&quot;,                         \&quot;PaymentNumber\&quot;: \&quot;97027818\&quot;,                         \&quot;PaymentAmount\&quot;: 1250.55                       }                       ]                   }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to add payment records in bulk.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse>> InvoicesPaymentsWithHttpInfoAsync(SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling InvoicesApi->InvoicesPayments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse>("/invoices/Payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks state of a service for invoice. The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object InvoicesPingserviceName(string serviceName, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = InvoicesPingserviceNameWithHttpInfo(serviceName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks state of a service for invoice. The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> InvoicesPingserviceNameWithHttpInfo(string serviceName, int operationIndex = 0)
        {
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'serviceName' when calling InvoicesApi->InvoicesPingserviceName");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceName", ServiceChannel.Api.Client.ClientUtils.ParameterToString(serviceName)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesPingserviceName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/invoices/ping/{serviceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesPingserviceName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks state of a service for invoice. The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> InvoicesPingserviceNameAsync(string serviceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await InvoicesPingserviceNameWithHttpInfoAsync(serviceName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks state of a service for invoice. The method allow check some service for invoice for availability state.&lt;br /&gt;Responses: &#39;Success&#39; or &#39;Fail&#39;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">Service Name identifier: The value of parameter is &#39;TWUtilityManager&#39; or &#39;TWCalculationManager&#39;  in currently.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> InvoicesPingserviceNameWithHttpInfoAsync(string serviceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'serviceName' when calling InvoicesApi->InvoicesPingserviceName");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceName", ServiceChannel.Api.Client.ClientUtils.ParameterToString(serviceName)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesPingserviceName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/invoices/ping/{serviceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesPingserviceName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve statistics of all invoices Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse</returns>
        public SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse> localVarResponse = InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodWithHttpInfo(daysPeriod, approvedInThePastDaysPeriod);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve statistics of all invoices Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse> InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }
            if (approvedInThePastDaysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "approvedInThePastDaysPeriod", approvedInThePastDaysPeriod));
            }

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse>("/invoices/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve statistics of all invoices Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse> InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodAsync(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse> localVarResponse = await InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodWithHttpInfoAsync(daysPeriod, approvedInThePastDaysPeriod, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve statistics of all invoices Retrieves statistics of all invoices. Returns the statistics of all invoices for successful request.              &lt;br /&gt;&lt;br /&gt;Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Period in days, last X days for which Invoices statistics was collected (30 by Default). (optional)</param>
        /// <param name="approvedInThePastDaysPeriod">Period in days, last X days during which Invoices are approved (3 by Default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse>> InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int? approvedInThePastDaysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }
            if (approvedInThePastDaysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "approvedInThePastDaysPeriod", approvedInThePastDaysPeriod));
            }

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse>("/invoices/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a payment record to an invoice by a tracking number Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void InvoicesWorkorderstrackingNumberPayment(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0)
        {
            InvoicesWorkorderstrackingNumberPaymentWithHttpInfo(trackingNumber, payment);
        }

        /// <summary>
        /// Add a payment record to an invoice by a tracking number Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> InvoicesWorkorderstrackingNumberPaymentWithHttpInfo(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0)
        {
            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'payment' when calling InvoicesApi->InvoicesWorkorderstrackingNumberPayment");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(trackingNumber)); // path parameter
            localVarRequestOptions.Data = payment;

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesWorkorderstrackingNumberPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/invoices/Workorders/{trackingNumber}/Payment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesWorkorderstrackingNumberPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a payment record to an invoice by a tracking number Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvoicesWorkorderstrackingNumberPaymentAsync(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InvoicesWorkorderstrackingNumberPaymentWithHttpInfoAsync(trackingNumber, payment, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a payment record to an invoice by a tracking number Creates a payment record for the invoice in the *Approved* status by specifying the tracking number of the work order the invoice was created for.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">Tracking number of the work order you want to add the invoice payment record for.</param>
        /// <param name="payment">Invoice payment record request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> InvoicesWorkorderstrackingNumberPaymentWithHttpInfoAsync(int trackingNumber, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'payment' when calling InvoicesApi->InvoicesWorkorderstrackingNumberPayment");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(trackingNumber)); // path parameter
            localVarRequestOptions.Data = payment;

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesWorkorderstrackingNumberPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/invoices/Workorders/{trackingNumber}/Payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesWorkorderstrackingNumberPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an invoice Returns the details of the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse</returns>
        public SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse InvoicesinvoiceId(int invoiceId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse> localVarResponse = InvoicesinvoiceIdWithHttpInfo(invoiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an invoice Returns the details of the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse> InvoicesinvoiceIdWithHttpInfo(int invoiceId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse>("/invoices/{invoiceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an invoice Returns the details of the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse> InvoicesinvoiceIdAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse> localVarResponse = await InvoicesinvoiceIdWithHttpInfoAsync(invoiceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an invoice Returns the details of the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Numeric identifier of the invoice to get the details for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse>> InvoicesinvoiceIdWithHttpInfoAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse>("/invoices/{invoiceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0)
        {
            InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryWithHttpInfo(invoiceId, approvalCode, comments, category);
        }

        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryWithHttpInfo(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0)
        {
            // verify the required parameter 'approvalCode' is set
            if (approvalCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'approvalCode' when calling InvoicesApi->InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory");
            }

            // verify the required parameter 'comments' is set
            if (comments == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'comments' when calling InvoicesApi->InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling InvoicesApi->InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "approvalCode", approvalCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/invoices/{invoiceId}/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryAsync(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryWithHttpInfoAsync(invoiceId, approvalCode, comments, category, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Allows approve non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows approve non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="approvalCode">Approval Code</param>
        /// <param name="comments">Comments</param>
        /// <param name="category">Category</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryWithHttpInfoAsync(int invoiceId, string approvalCode, string comments, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'approvalCode' is set
            if (approvalCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'approvalCode' when calling InvoicesApi->InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory");
            }

            // verify the required parameter 'comments' is set
            if (comments == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'comments' when calling InvoicesApi->InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling InvoicesApi->InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "approvalCode", approvalCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/invoices/{invoiceId}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;</returns>
        public List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy> InvoicesinvoiceIdDiscrepancy(int invoiceId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>> localVarResponse = InvoicesinvoiceIdDiscrepancyWithHttpInfo(invoiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>> InvoicesinvoiceIdDiscrepancyWithHttpInfo(int invoiceId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdDiscrepancy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>>("/invoices/{invoiceId}/discrepancy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdDiscrepancy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>> InvoicesinvoiceIdDiscrepancyAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>> localVarResponse = await InvoicesinvoiceIdDiscrepancyWithHttpInfoAsync(invoiceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingInvoicesRateDiscrepancy&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>>> InvoicesinvoiceIdDiscrepancyWithHttpInfoAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdDiscrepancy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>>("/invoices/{invoiceId}/discrepancy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdDiscrepancy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy</returns>
        public SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy InvoicesinvoiceIdDiscrepancyExtended(int invoiceId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy> localVarResponse = InvoicesinvoiceIdDiscrepancyExtendedWithHttpInfo(invoiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy> InvoicesinvoiceIdDiscrepancyExtendedWithHttpInfo(int invoiceId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdDiscrepancyExtended";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy>("/invoices/{invoiceId}/discrepancyExtended", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdDiscrepancyExtended", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy> InvoicesinvoiceIdDiscrepancyExtendedAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy> localVarResponse = await InvoicesinvoiceIdDiscrepancyExtendedWithHttpInfoAsync(invoiceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rates discrepancy Retrieves Invoice rates discrepancy information. Returns the labor list with rates discrepancy for the specified invoice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy>> InvoicesinvoiceIdDiscrepancyExtendedWithHttpInfoAsync(int invoiceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdDiscrepancyExtended";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy>("/invoices/{invoiceId}/discrepancyExtended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdDiscrepancyExtended", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void InvoicesinvoiceIdOnholdcommentscomments(int invoiceId, string comments, int operationIndex = 0)
        {
            InvoicesinvoiceIdOnholdcommentscommentsWithHttpInfo(invoiceId, comments);
        }

        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> InvoicesinvoiceIdOnholdcommentscommentsWithHttpInfo(int invoiceId, string comments, int operationIndex = 0)
        {
            // verify the required parameter 'comments' is set
            if (comments == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'comments' when calling InvoicesApi->InvoicesinvoiceIdOnholdcommentscomments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdOnholdcommentscomments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/invoices/{invoiceId}/onhold", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdOnholdcommentscomments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvoicesinvoiceIdOnholdcommentscommentsAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InvoicesinvoiceIdOnholdcommentscommentsWithHttpInfoAsync(invoiceId, comments, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows put invoice on hold for non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> InvoicesinvoiceIdOnholdcommentscommentsWithHttpInfoAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comments' is set
            if (comments == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'comments' when calling InvoicesApi->InvoicesinvoiceIdOnholdcommentscomments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdOnholdcommentscomments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/invoices/{invoiceId}/onhold", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdOnholdcommentscomments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a payment to an invoice Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void InvoicesinvoiceIdPayment(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0)
        {
            InvoicesinvoiceIdPaymentWithHttpInfo(invoiceId, payment);
        }

        /// <summary>
        /// Add a payment to an invoice Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> InvoicesinvoiceIdPaymentWithHttpInfo(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0)
        {
            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'payment' when calling InvoicesApi->InvoicesinvoiceIdPayment");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.Data = payment;

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/invoices/{invoiceId}/Payment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a payment to an invoice Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvoicesinvoiceIdPaymentAsync(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InvoicesinvoiceIdPaymentWithHttpInfoAsync(invoiceId, payment, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a payment to an invoice Creates a payment record for the specified invoice in the *Approved* status.              &lt;br /&gt;Send this request [GET/odata/invoices](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Invoices/Invoices_GetInvoices) to get the invoice ID.              &lt;br /&gt;Learn [how subscribers can mark invoices as paid](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621936646/Marking+Invoices+as+Paid) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /invoices/{invoiceId}/Payment                  {                   \&quot;PaymentDate\&quot;: \&quot;2021-06-10T07:40:47.881Z\&quot;,                   \&quot;PaymentNumber\&quot;: \&quot;25469833\&quot;,                   \&quot;PaymentAmount\&quot;: 850                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Unique numeric identifier of the invoice to add a payment to.</param>
        /// <param name="payment">Request to add a payment to the specified invoice.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> InvoicesinvoiceIdPaymentWithHttpInfoAsync(int invoiceId, SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'payment' when calling InvoicesApi->InvoicesinvoiceIdPayment");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.Data = payment;

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/invoices/{invoiceId}/Payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void InvoicesinvoiceIdRejectcommentscomments(int invoiceId, string comments, int operationIndex = 0)
        {
            InvoicesinvoiceIdRejectcommentscommentsWithHttpInfo(invoiceId, comments);
        }

        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> InvoicesinvoiceIdRejectcommentscommentsWithHttpInfo(int invoiceId, string comments, int operationIndex = 0)
        {
            // verify the required parameter 'comments' is set
            if (comments == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'comments' when calling InvoicesApi->InvoicesinvoiceIdRejectcommentscomments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdRejectcommentscomments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/invoices/{invoiceId}/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdRejectcommentscomments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvoicesinvoiceIdRejectcommentscommentsAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InvoicesinvoiceIdRejectcommentscommentsWithHttpInfoAsync(invoiceId, comments, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Allows reject non-MLI(Multilevel Invoice Approval) invoice &lt;para&gt;Allows reject non-MLI(Multilevel Invoice Approval) invoice&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice Identifier</param>
        /// <param name="comments">Comments</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> InvoicesinvoiceIdRejectcommentscommentsWithHttpInfoAsync(int invoiceId, string comments, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comments' is set
            if (comments == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'comments' when calling InvoicesApi->InvoicesinvoiceIdRejectcommentscomments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));

            localVarRequestOptions.Operation = "InvoicesApi.InvoicesinvoiceIdRejectcommentscomments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/invoices/{invoiceId}/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesinvoiceIdRejectcommentscomments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse> InvoicessubscriberIdInvoiceRejectionReasons(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>> localVarResponse = InvoicessubscriberIdInvoiceRejectionReasonsWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>> InvoicessubscriberIdInvoiceRejectionReasonsWithHttpInfo(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicessubscriberIdInvoiceRejectionReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>>("/invoices/{subscriberId}/InvoiceRejectionReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicessubscriberIdInvoiceRejectionReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>> InvoicessubscriberIdInvoiceRejectionReasonsAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>> localVarResponse = await InvoicessubscriberIdInvoiceRejectionReasonsWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invoice rejection reasons for a subscriber Returns invoice rejection reasons for a subscriber              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return invoice rejection reasons for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>>> InvoicessubscriberIdInvoiceRejectionReasonsWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicessubscriberIdInvoiceRejectionReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>>("/invoices/{subscriberId}/InvoiceRejectionReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicessubscriberIdInvoiceRejectionReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve general invoice settings for a subscriber Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral</returns>
        public SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral InvoicessubscriberIdInvoiceRequirements(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral> localVarResponse = InvoicessubscriberIdInvoiceRequirementsWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve general invoice settings for a subscriber Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral> InvoicessubscriberIdInvoiceRequirementsWithHttpInfo(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicessubscriberIdInvoiceRequirements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral>("/invoices/{subscriberId}/InvoiceRequirements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicessubscriberIdInvoiceRequirements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve general invoice settings for a subscriber Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral> InvoicessubscriberIdInvoiceRequirementsAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral> localVarResponse = await InvoicessubscriberIdInvoiceRequirementsWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve general invoice settings for a subscriber Returns general invoice settings for the specified subscriber.              &lt;br /&gt;Both subscribers and providers can use this method.               • **Subscribers** should enter their subscriber ID.               • **Providers** need to pass the ID of the subscriber they have a contract with.              &lt;br /&gt;Subscriber users with the *Super Admin* secondary role set up general invoice parameters in **Admin** &amp;gt; **Invoices** &amp;gt; **General**, where they configure when invoices can be created, if providers should enter a resolution before submitting invoices, and whether any restrictions should apply to invoice numbers. Other parameters may be available if the corresponding features are turned on for the subscriber. Learn more about [configuring general invoice settings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557220138/General+Invoice+Configuration) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber to return general invoice settings for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral>> InvoicessubscriberIdInvoiceRequirementsWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "InvoicesApi.InvoicessubscriberIdInvoiceRequirements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral>("/invoices/{subscriberId}/InvoiceRequirements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicessubscriberIdInvoiceRequirements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<string> localVarResponse = SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdWithHttpInfo(orderId, invoiceId, userId, approvalCode, organizationPermissionId, subscriberId, category, comment, overrideUserId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public ServiceChannel.Api.Client.ApiResponse<string> SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdWithHttpInfo(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'approvalCode' is set
            if (approvalCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'approvalCode' when calling InvoicesApi->SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "approvalCode", approvalCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "organizationPermissionId", organizationPermissionId));
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (overrideUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "overrideUserId", overrideUserId));
            }

            localVarRequestOptions.Operation = "InvoicesApi.SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/subscribers/{subscriberId}/invoices/{invoiceId}/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdAsync(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<string> localVarResponse = await SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdWithHttpInfoAsync(orderId, invoiceId, userId, approvalCode, organizationPermissionId, subscriberId, category, comment, overrideUserId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="invoiceId"></param>
        /// <param name="userId"></param>
        /// <param name="approvalCode"></param>
        /// <param name="organizationPermissionId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="overrideUserId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<string>> SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdWithHttpInfoAsync(int orderId, int invoiceId, int userId, string approvalCode, int organizationPermissionId, int subscriberId, string? category = default(string?), string? comment = default(string?), int? overrideUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'approvalCode' is set
            if (approvalCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'approvalCode' when calling InvoicesApi->SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invoiceId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "approvalCode", approvalCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "organizationPermissionId", organizationPermissionId));
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (overrideUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "overrideUserId", overrideUserId));
            }

            localVarRequestOptions.Operation = "InvoicesApi.SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/subscribers/{subscriberId}/invoices/{invoiceId}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
