/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Work Order Note
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        List<SCServiceChannelServicesMessagingNotesNote> GetWorkOrderNote(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Work Order Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNoteWithHttpInfo(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Work Order Notes
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        List<SCServiceChannelServicesMessagingNotesNote> GetWorkOrderNotes(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Work Order Notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNotesWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Create a Work order Note
        /// </summary>
        /// <remarks>
        /// Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdNotes(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Work order Note
        /// </summary>
        /// <remarks>
        /// Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdNotesWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0);
        /// <summary>
        /// Add Followers to Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdNotesFollowers(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0);

        /// <summary>
        /// Add Followers to Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdNotesFollowersWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0);
        /// <summary>
        /// Remove Follower from Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdNotesFollowersemailemail(int workorderId, string email, int operationIndex = 0);

        /// <summary>
        /// Remove Follower from Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdNotesFollowersemailemailWithHttpInfo(int workorderId, string email, int operationIndex = 0);
        /// <summary>
        /// Note email recipients
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0);

        /// <summary>
        /// Note email recipients
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityWithHttpInfo(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0);
        /// <summary>
        /// Work order Notes Collection
        /// </summary>
        /// <remarks>
        /// Returns list of work order notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotesGetNotesResponse</returns>
        SCServiceChannelServicesMessagingNotesGetNotesResponse WorkordersworkorderIdNotespagingpaging(int workorderId, string? paging = default(string?), int operationIndex = 0);

        /// <summary>
        /// Work order Notes Collection
        /// </summary>
        /// <remarks>
        /// Returns list of work order notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotesGetNotesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotesGetNotesResponse> WorkordersworkorderIdNotespagingpagingWithHttpInfo(int workorderId, string? paging = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Work Order Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNoteAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Work Order Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>>> GetWorkOrderNoteWithHttpInfoAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Work Order Notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNotesAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Work Order Notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>>> GetWorkOrderNotesWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Work order Note
        /// </summary>
        /// <remarks>
        /// Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdNotesAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Work order Note
        /// </summary>
        /// <remarks>
        /// Returns Note Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdNotesWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Followers to Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdNotesFollowersAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Followers to Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdNotesFollowersWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Follower from Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdNotesFollowersemailemailAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Follower from Work order notes
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdNotesFollowersemailemailWithHttpInfoAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Note email recipients
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityAsync(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Note email recipients
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityWithHttpInfoAsync(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Work order Notes Collection
        /// </summary>
        /// <remarks>
        /// Returns list of work order notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotesGetNotesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotesGetNotesResponse> WorkordersworkorderIdNotespagingpagingAsync(int workorderId, string? paging = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Work order Notes Collection
        /// </summary>
        /// <remarks>
        /// Returns list of work order notes, sorted descending by creation date.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotesGetNotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotesGetNotesResponse>> WorkordersworkorderIdNotespagingpagingWithHttpInfoAsync(int workorderId, string? paging = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesApi : INotesApiSync, INotesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotesApi : INotesApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotesApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotesApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotesApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Work Order Note 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        public List<SCServiceChannelServicesMessagingNotesNote> GetWorkOrderNote(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> localVarResponse = GetWorkOrderNoteWithHttpInfo(noteId, workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Work Order Note 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNoteWithHttpInfo(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "NotesApi.GetWorkOrderNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingNotesNote>>("/odata/workorders({workorderId})/notes({noteId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Work Order Note 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNoteAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> localVarResponse = await GetWorkOrderNoteWithHttpInfoAsync(noteId, workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Work Order Note 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesNote&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>>> GetWorkOrderNoteWithHttpInfoAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "NotesApi.GetWorkOrderNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingNotesNote>>("/odata/workorders({workorderId})/notes({noteId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Work Order Notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        public List<SCServiceChannelServicesMessagingNotesNote> GetWorkOrderNotes(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> localVarResponse = GetWorkOrderNotesWithHttpInfo(workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Work Order Notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNotesWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "NotesApi.GetWorkOrderNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingNotesNote>>("/odata/workorders({workorderId})/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Work Order Notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesNote>> GetWorkOrderNotesAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>> localVarResponse = await GetWorkOrderNotesWithHttpInfoAsync(workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Work Order Notes 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesNote&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesNote>>> GetWorkOrderNotesWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "NotesApi.GetWorkOrderNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingNotesNote>>("/odata/workorders({workorderId})/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Work order Note Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdNotes(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0)
        {
            WorkordersworkorderIdNotesWithHttpInfo(workorderId, noteRequest);
        }

        /// <summary>
        /// Create a Work order Note Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdNotesWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'noteRequest' is set
            if (noteRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'noteRequest' when calling NotesApi->WorkordersworkorderIdNotes");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = noteRequest;

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Work order Note Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdNotesAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdNotesWithHttpInfoAsync(workorderId, noteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a Work order Note Returns Note Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdNotesWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'noteRequest' is set
            if (noteRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'noteRequest' when calling NotesApi->WorkordersworkorderIdNotes");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = noteRequest;

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Followers to Work order notes &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdNotesFollowers(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0)
        {
            WorkordersworkorderIdNotesFollowersWithHttpInfo(workorderId, request);
        }

        /// <summary>
        /// Add Followers to Work order notes &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdNotesFollowersWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling NotesApi->WorkordersworkorderIdNotesFollowers");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotesFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/notes/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Followers to Work order notes &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdNotesFollowersAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdNotesFollowersWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Followers to Work order notes &lt;para&gt;Add Followers to Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdNotesFollowersWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling NotesApi->WorkordersworkorderIdNotesFollowers");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotesFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/notes/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Follower from Work order notes &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdNotesFollowersemailemail(int workorderId, string email, int operationIndex = 0)
        {
            WorkordersworkorderIdNotesFollowersemailemailWithHttpInfo(workorderId, email);
        }

        /// <summary>
        /// Remove Follower from Work order notes &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdNotesFollowersemailemailWithHttpInfo(int workorderId, string email, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'email' when calling NotesApi->WorkordersworkorderIdNotesFollowersemailemail");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotesFollowersemailemail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/workorders/{workorderId}/notes/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesFollowersemailemail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Follower from Work order notes &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdNotesFollowersemailemailAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdNotesFollowersemailemailWithHttpInfoAsync(workorderId, email, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Follower from Work order notes &lt;para&gt;Remove Follower from Work order.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdNotesFollowersemailemailWithHttpInfoAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'email' when calling NotesApi->WorkordersworkorderIdNotesFollowersemailemail");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotesFollowersemailemail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/workorders/{workorderId}/notes/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesFollowersemailemail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Note email recipients &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> localVarResponse = WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityWithHttpInfo(workorderId, showExcluded, noteVisibility);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Note email recipients &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityWithHttpInfo(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (showExcluded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "showExcluded", showExcluded));
            }
            if (noteVisibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "noteVisibility", noteVisibility));
            }

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>("/workorders/{workorderId}/notes/recipients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Note email recipients &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityAsync(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> localVarResponse = await WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityWithHttpInfoAsync(workorderId, showExcluded, noteVisibility, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Note email recipients &lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default. (optional, default to false)</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityWithHttpInfoAsync(int workorderId, bool? showExcluded = default(bool?), string? noteVisibility = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (showExcluded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "showExcluded", showExcluded));
            }
            if (noteVisibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "noteVisibility", noteVisibility));
            }

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>("/workorders/{workorderId}/notes/recipients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work order Notes Collection Returns list of work order notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotesGetNotesResponse</returns>
        public SCServiceChannelServicesMessagingNotesGetNotesResponse WorkordersworkorderIdNotespagingpaging(int workorderId, string? paging = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotesGetNotesResponse> localVarResponse = WorkordersworkorderIdNotespagingpagingWithHttpInfo(workorderId, paging);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work order Notes Collection Returns list of work order notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotesGetNotesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotesGetNotesResponse> WorkordersworkorderIdNotespagingpagingWithHttpInfo(int workorderId, string? paging = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotespagingpaging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingNotesGetNotesResponse>("/workorders/{workorderId}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotespagingpaging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work order Notes Collection Returns list of work order notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotesGetNotesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotesGetNotesResponse> WorkordersworkorderIdNotespagingpagingAsync(int workorderId, string? paging = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotesGetNotesResponse> localVarResponse = await WorkordersworkorderIdNotespagingpagingWithHttpInfoAsync(workorderId, paging, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work order Notes Collection Returns list of work order notes, sorted descending by creation date.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotesGetNotesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotesGetNotesResponse>> WorkordersworkorderIdNotespagingpagingWithHttpInfoAsync(int workorderId, string? paging = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }

            localVarRequestOptions.Operation = "NotesApi.WorkordersworkorderIdNotespagingpaging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingNotesGetNotesResponse>("/workorders/{workorderId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotespagingpaging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
