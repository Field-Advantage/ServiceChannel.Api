/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRfpsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Rfp
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        List<SCServiceChannelServicesMessagingRfpRfp> GetRfp(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Rfp
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpWithHttpInfo(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Rfps
        /// </summary>
        /// <remarks>
        /// Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        List<SCServiceChannelServicesMessagingRfpRfp> GetRfps(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Rfps
        /// </summary>
        /// <remarks>
        /// Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Create an RFP
        /// </summary>
        /// <remarks>
        /// Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Rfps(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0);

        /// <summary>
        /// Create an RFP
        /// </summary>
        /// <remarks>
        /// Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RfpsWithHttpInfo(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0);
        /// <summary>
        /// Delete an RFP by ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Rfpsid(int id, int operationIndex = 0);

        /// <summary>
        /// Delete an RFP by ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RfpsidWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Delete an RFP by the RFP number and location ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RfpsnumberLocationslocationId(string number, int locationId, int operationIndex = 0);

        /// <summary>
        /// Delete an RFP by the RFP number and location ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RfpsnumberLocationslocationIdWithHttpInfo(string number, int locationId, int operationIndex = 0);
        /// <summary>
        /// Assign an RFP to another provider
        /// </summary>
        /// <remarks>
        /// Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RfpsrfpIdAssign(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0);

        /// <summary>
        /// Assign an RFP to another provider
        /// </summary>
        /// <remarks>
        /// Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RfpsrfpIdAssignWithHttpInfo(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRfpsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Rfp
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Rfp
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>>> GetRfpWithHttpInfoAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Rfps
        /// </summary>
        /// <remarks>
        /// Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Rfps
        /// </summary>
        /// <remarks>
        /// Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>>> GetRfpsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an RFP
        /// </summary>
        /// <remarks>
        /// Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RfpsAsync(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an RFP
        /// </summary>
        /// <remarks>
        /// Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RfpsWithHttpInfoAsync(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an RFP by ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RfpsidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an RFP by ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RfpsidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an RFP by the RFP number and location ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RfpsnumberLocationslocationIdAsync(string number, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an RFP by the RFP number and location ID
        /// </summary>
        /// <remarks>
        /// Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RfpsnumberLocationslocationIdWithHttpInfoAsync(string number, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign an RFP to another provider
        /// </summary>
        /// <remarks>
        /// Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RfpsrfpIdAssignAsync(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign an RFP to another provider
        /// </summary>
        /// <remarks>
        /// Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RfpsrfpIdAssignWithHttpInfoAsync(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRfpsApi : IRfpsApiSync, IRfpsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RfpsApi : IRfpsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RfpsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RfpsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RfpsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RfpsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RfpsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RfpsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RfpsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RfpsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Rfp Retrieve Rfp
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        public List<SCServiceChannelServicesMessagingRfpRfp> GetRfp(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> localVarResponse = GetRfpWithHttpInfo(rfpId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfp Retrieve Rfp
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpWithHttpInfo(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "RfpsApi.GetRfp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingRfpRfp>>("/odata/rfps({rfpId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRfp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Rfp Retrieve Rfp
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> localVarResponse = await GetRfpWithHttpInfoAsync(rfpId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfp Retrieve Rfp
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>>> GetRfpWithHttpInfoAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "RfpsApi.GetRfp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingRfpRfp>>("/odata/rfps({rfpId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRfp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Rfps Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        public List<SCServiceChannelServicesMessagingRfpRfp> GetRfps(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> localVarResponse = GetRfpsWithHttpInfo(expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfps Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "RfpsApi.GetRfps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingRfpRfp>>("/odata/rfps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRfps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Rfps Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingRfpRfp>> GetRfpsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>> localVarResponse = await GetRfpsWithHttpInfoAsync(expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfps Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingRfpRfp&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingRfpRfp>>> GetRfpsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "RfpsApi.GetRfps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingRfpRfp>>("/odata/rfps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRfps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an RFP Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Rfps(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0)
        {
            RfpsWithHttpInfo(request);
        }

        /// <summary>
        /// Create an RFP Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> RfpsWithHttpInfo(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling RfpsApi->Rfps");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "RfpsApi.Rfps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rfps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Rfps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an RFP Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RfpsAsync(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RfpsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create an RFP Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request to create an RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> RfpsWithHttpInfoAsync(SCServiceChannelServicesMessagingRfpCreateRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling RfpsApi->Rfps");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "RfpsApi.Rfps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rfps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Rfps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an RFP by ID Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Rfpsid(int id, int operationIndex = 0)
        {
            RfpsidWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an RFP by ID Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> RfpsidWithHttpInfo(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RfpsApi.Rfpsid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rfps/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Rfpsid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an RFP by ID Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RfpsidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RfpsidWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an RFP by ID Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> RfpsidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RfpsApi.Rfpsid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rfps/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Rfpsid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an RFP by the RFP number and location ID Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RfpsnumberLocationslocationId(string number, int locationId, int operationIndex = 0)
        {
            RfpsnumberLocationslocationIdWithHttpInfo(number, locationId);
        }

        /// <summary>
        /// Delete an RFP by the RFP number and location ID Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> RfpsnumberLocationslocationIdWithHttpInfo(string number, int locationId, int operationIndex = 0)
        {
            // verify the required parameter 'number' is set
            if (number == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'number' when calling RfpsApi->RfpsnumberLocationslocationId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("number", ServiceChannel.Api.Client.ClientUtils.ParameterToString(number)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "RfpsApi.RfpsnumberLocationslocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rfps/{number}/locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RfpsnumberLocationslocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an RFP by the RFP number and location ID Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RfpsnumberLocationslocationIdAsync(string number, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RfpsnumberLocationslocationIdWithHttpInfoAsync(number, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an RFP by the RFP number and location ID Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> RfpsnumberLocationslocationIdWithHttpInfoAsync(string number, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'number' is set
            if (number == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'number' when calling RfpsApi->RfpsnumberLocationslocationId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("number", ServiceChannel.Api.Client.ClientUtils.ParameterToString(number)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "RfpsApi.RfpsnumberLocationslocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rfps/{number}/locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RfpsnumberLocationslocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign an RFP to another provider Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RfpsrfpIdAssign(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0)
        {
            RfpsrfpIdAssignWithHttpInfo(rfpId, request);
        }

        /// <summary>
        /// Assign an RFP to another provider Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> RfpsrfpIdAssignWithHttpInfo(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling RfpsApi->RfpsrfpIdAssign");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "RfpsApi.RfpsrfpIdAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/rfps/{rfpId}/assign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RfpsrfpIdAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign an RFP to another provider Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RfpsrfpIdAssignAsync(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RfpsrfpIdAssignWithHttpInfoAsync(rfpId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign an RFP to another provider Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> RfpsrfpIdAssignWithHttpInfoAsync(int rfpId, SCServiceChannelServicesMessagingRfpAssignRfpRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling RfpsApi->RfpsrfpIdAssign");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "RfpsApi.RfpsrfpIdAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/rfps/{rfpId}/assign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RfpsrfpIdAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
