/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueListApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdIssuelistHeaders(int subscriberId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistHeadersWithHttpInfo(int subscriberId, int operationIndex = 0);
        /// <summary>
        /// The post.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdIssuelists(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0);

        /// <summary>
        /// The post.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistsWithHttpInfo(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0);
        /// <summary>
        /// The get issue list history.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// The get issue list history.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeWithHttpInfo(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// The post.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// The post.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeWithHttpInfo(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// The get.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// The get.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// The get.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist(int subscriberId, int dashboardId, int operationIndex = 0);

        /// <summary>
        /// The get.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistWithHttpInfo(int subscriberId, int dashboardId, int operationIndex = 0);
        /// <summary>
        /// The get items filtered by area type and location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0);

        /// <summary>
        /// The get items filtered by area type and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdWithHttpInfo(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0);
        /// <summary>
        /// The get problems filtered by area type and location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0);

        /// <summary>
        /// The get problems filtered by area type and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemWithHttpInfo(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0);
        /// <summary>
        /// The get problem types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes(int subscriberId, int dashboardId, int areaId, int operationIndex = 0);

        /// <summary>
        /// The get problem types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesWithHttpInfo(int subscriberId, int dashboardId, int areaId, int operationIndex = 0);
        /// <summary>
        /// The get global fields.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields(int subscriberId, int dashboardId, int operationIndex = 0);

        /// <summary>
        /// The get global fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsWithHttpInfo(int subscriberId, int dashboardId, int operationIndex = 0);
        /// <summary>
        /// The get issue choice.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0);

        /// <summary>
        /// The get issue choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceWithHttpInfo(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0);
        /// <summary>
        /// The get issue choice fiels.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0);

        /// <summary>
        /// The get issue choice fiels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemWithHttpInfo(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0);
        /// <summary>
        /// The set issue list for dashboard.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0);

        /// <summary>
        /// The set issue list for dashboard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdWithHttpInfo(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0);
        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse IssuelistAreaslocationIdlocationIdsetupIdsetupId(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> IssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfo(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object IssuelistFieldididsetupIdsetupId(string id, int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IssuelistFieldididsetupIdsetupIdWithHttpInfo(string id, int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdWithHttpInfo(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// The get issue choice info.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object IssuelistIssuechoiceinfotrackingNumber(int trackingNumber, int operationIndex = 0);

        /// <summary>
        /// The get issue choice info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IssuelistIssuechoiceinfotrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfo(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfo(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeWithHttpInfo(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0);
        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId(int subscriberId, int? locationId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdWithHttpInfo(int subscriberId, int? locationId = default(int?), int operationIndex = 0);
        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId(int subscriberId, int? locationId = default(int?), int operationIndex = 0);

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdWithHttpInfo(int subscriberId, int? locationId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0);

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeWithHttpInfo(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0);
        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdWithHttpInfo(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves the issue list for a FTM provider
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves the issue list for a FTM provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdWithHttpInfo(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes(int subscriberId, int locationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesWithHttpInfo(int subscriberId, int locationId, int operationIndex = 0);
        /// <summary>
        /// Get Equipment items not filtered by location.
        /// </summary>
        /// <remarks>
        /// List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType(int setupId, int areaId, string problemType, int operationIndex = 0);

        /// <summary>
        /// Get Equipment items not filtered by location.
        /// </summary>
        /// <remarks>
        /// List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeWithHttpInfo(int setupId, int areaId, string problemType, int operationIndex = 0);
        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfo(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfo(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId(string id, int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdWithHttpInfo(string id, int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfo(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get specific issue choice
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0);

        /// <summary>
        /// Get specific issue choice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryWithHttpInfo(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueListApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistHeadersAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistHeadersWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The post.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistsAsync(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The post.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistsWithHttpInfoAsync(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get issue list history.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get issue list history.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeWithHttpInfoAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The post.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The post.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeWithHttpInfoAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdAsync(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistWithHttpInfoAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get items filtered by area type and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdAsync(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get items filtered by area type and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdWithHttpInfoAsync(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get problems filtered by area type and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemAsync(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get problems filtered by area type and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemWithHttpInfoAsync(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get problem types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesAsync(int subscriberId, int dashboardId, int areaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get problem types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesWithHttpInfoAsync(int subscriberId, int dashboardId, int areaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get global fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get global fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsWithHttpInfoAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get issue choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceAsync(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get issue choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceWithHttpInfoAsync(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get issue choice fiels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemAsync(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get issue choice fiels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemWithHttpInfoAsync(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The set issue list for dashboard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdAsync(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The set issue list for dashboard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdWithHttpInfoAsync(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> IssuelistAreaslocationIdlocationIdsetupIdsetupIdAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>> IssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IssuelistFieldididsetupIdsetupIdAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IssuelistFieldididsetupIdsetupIdWithHttpInfoAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdAsync(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdWithHttpInfoAsync(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get issue choice info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IssuelistIssuechoiceinfotrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get issue choice info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IssuelistIssuechoiceinfotrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfoAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>> IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>> IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>> ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeAsync(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeWithHttpInfoAsync(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdWithHttpInfoAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdWithHttpInfoAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeAsync(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeWithHttpInfoAsync(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdAsync(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdWithHttpInfoAsync(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the issue list for a FTM provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdAsync(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the issue list for a FTM provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdWithHttpInfoAsync(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesWithHttpInfoAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Equipment items not filtered by location.
        /// </summary>
        /// <remarks>
        /// List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeAsync(int setupId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Equipment items not filtered by location.
        /// </summary>
        /// <remarks>
        /// List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeWithHttpInfoAsync(int setupId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>
        /// List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfoAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>
        /// List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>
        /// List Problem types. Returns Problem types for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>
        /// List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdWithHttpInfoAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specific issue choice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryAsync(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specific issue choice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryWithHttpInfoAsync(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueListApi : IIssueListApiSync, IIssueListApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IssueListApi : IIssueListApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssueListApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssueListApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IssueListApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueListApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IssueListApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdIssuelistHeaders(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdIssuelistHeadersWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistHeadersWithHttpInfo(int subscriberId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelistHeaders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/issuelist/headers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelistHeaders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistHeadersAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdIssuelistHeadersWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistHeadersWithHttpInfoAsync(int subscriberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelistHeaders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/issuelist/headers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelistHeaders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdIssuelists(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdIssuelistsWithHttpInfo(subscriberId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistsWithHttpInfo(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling IssueListApi->ApiSubscriberssubscriberIdIssuelists");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling IssueListApi->ApiSubscriberssubscriberIdIssuelists");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/subscribers/{subscriberId}/issuelists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistsAsync(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdIssuelistsWithHttpInfoAsync(subscriberId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistsWithHttpInfoAsync(string subscriberId, SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling IssueListApi->ApiSubscriberssubscriberIdIssuelists");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling IssueListApi->ApiSubscriberssubscriberIdIssuelists");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/subscribers/{subscriberId}/issuelists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue list history. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeWithHttpInfo(subscriberId, pageIndex, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue list history. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeWithHttpInfo(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/issuelists/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue list history. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeWithHttpInfoAsync(subscriberId, pageIndex, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue list history. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeWithHttpInfoAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/issuelists/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeWithHttpInfo(subscriberId, pageIndex, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeWithHttpInfo(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/issuelists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeWithHttpInfoAsync(subscriberId, pageIndex, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The post. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index. (optional)</param>
        /// <param name="pageSize">The page size. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeWithHttpInfoAsync(int subscriberId, int? pageIndex = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/issuelists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(subscriberId, equipmentType, locationId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/issuelist/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdAsync(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(subscriberId, equipmentType, locationId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id. (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int subscriberId, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/issuelist/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist(int subscriberId, int dashboardId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistWithHttpInfo(subscriberId, dashboardId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistWithHttpInfo(int subscriberId, int dashboardId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistWithHttpInfoAsync(subscriberId, dashboardId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistWithHttpInfoAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get items filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdWithHttpInfo(subscriberId, dashboardId, areaId, problemType, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get items filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdWithHttpInfo(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get items filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdAsync(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdWithHttpInfoAsync(subscriberId, dashboardId, areaId, problemType, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get items filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdWithHttpInfoAsync(int subscriberId, int dashboardId, int areaId, string problemType, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get problems filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemWithHttpInfo(subscriberId, dashboardId, areaId, problemType, item);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get problems filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemWithHttpInfo(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'item' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "item", item));

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/problems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get problems filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemAsync(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemWithHttpInfoAsync(subscriberId, dashboardId, areaId, problemType, item, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get problems filtered by area type and location. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemWithHttpInfoAsync(int subscriberId, int dashboardId, int areaId, string problemType, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'item' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "item", item));

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/problems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get problem types. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes(int subscriberId, int dashboardId, int areaId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesWithHttpInfo(subscriberId, dashboardId, areaId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get problem types. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesWithHttpInfo(int subscriberId, int dashboardId, int areaId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/problemtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get problem types. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesAsync(int subscriberId, int dashboardId, int areaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesWithHttpInfoAsync(subscriberId, dashboardId, areaId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get problem types. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesWithHttpInfoAsync(int subscriberId, int dashboardId, int areaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/problemtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get global fields. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields(int subscriberId, int dashboardId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsWithHttpInfo(subscriberId, dashboardId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get global fields. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsWithHttpInfo(int subscriberId, int dashboardId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get global fields. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsWithHttpInfoAsync(subscriberId, dashboardId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get global fields. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsWithHttpInfoAsync(int subscriberId, int dashboardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue choice. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceWithHttpInfo(subscriberId, dashboardId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue choice. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceWithHttpInfo(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice");
            }

            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'dashboardId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/issuechoice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue choice. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceAsync(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceWithHttpInfoAsync(subscriberId, dashboardId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue choice. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceWithHttpInfoAsync(string subscriberId, string dashboardId, SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice");
            }

            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'dashboardId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/issuechoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue choice fiels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemWithHttpInfo(subscriberId, dashboardId, problemType, item, problem);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue choice fiels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemWithHttpInfo(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'item' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem");
            }

            // verify the required parameter 'problem' is set
            if (problem == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problem' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "item", item));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problem", problem));

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/issuechoice/fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue choice fiels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemAsync(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemWithHttpInfoAsync(subscriberId, dashboardId, problemType, item, problem, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue choice fiels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemWithHttpInfoAsync(int subscriberId, int dashboardId, string problemType, string item, string problem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'item' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem");
            }

            // verify the required parameter 'problem' is set
            if (problem == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problem' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "item", item));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problem", problem));

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/issuechoice/fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The set issue list for dashboard. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdWithHttpInfo(subscriberId, dashboardId, issueListId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The set issue list for dashboard. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdWithHttpInfo(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }

            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'dashboardId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }

            // verify the required parameter 'issueListId' is set
            if (issueListId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'issueListId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("issueListId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(issueListId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/{issueListId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The set issue list for dashboard. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdAsync(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdWithHttpInfoAsync(subscriberId, dashboardId, issueListId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The set issue list for dashboard. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdWithHttpInfoAsync(string subscriberId, string dashboardId, string issueListId, SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }

            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'dashboardId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }

            // verify the required parameter 'issueListId' is set
            if (issueListId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'issueListId' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling IssueListApi->ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dashboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("issueListId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(issueListId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "IssueListApi.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/{issueListId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse IssuelistAreaslocationIdlocationIdsetupIdsetupId(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> localVarResponse = IssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfo(locationId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> IssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfo(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistAreaslocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>("/issuelist/areas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistAreaslocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> IssuelistAreaslocationIdlocationIdsetupIdsetupIdAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> localVarResponse = await IssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(locationId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>> IssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistAreaslocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>("/issuelist/areas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistAreaslocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object IssuelistFieldididsetupIdsetupId(string id, int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = IssuelistFieldididsetupIdsetupIdWithHttpInfo(id, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> IssuelistFieldididsetupIdsetupIdWithHttpInfo(string id, int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'id' when calling IssueListApi->IssuelistFieldididsetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistFieldididsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/issuelist/field", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistFieldididsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IssuelistFieldididsetupIdsetupIdAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await IssuelistFieldididsetupIdsetupIdWithHttpInfoAsync(id, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> IssuelistFieldididsetupIdsetupIdWithHttpInfoAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'id' when calling IssueListApi->IssuelistFieldididsetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistFieldididsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/issuelist/field", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistFieldididsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdWithHttpInfo(locationId, subscriberId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdWithHttpInfo(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/issuelist/globalfields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdAsync(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdWithHttpInfoAsync(locationId, subscriberId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdWithHttpInfoAsync(int? locationId = default(int?), int? subscriberId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/issuelist/globalfields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue choice info. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object IssuelistIssuechoiceinfotrackingNumber(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = IssuelistIssuechoiceinfotrackingNumberWithHttpInfo(trackingNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue choice info. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> IssuelistIssuechoiceinfotrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(trackingNumber)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.IssuelistIssuechoiceinfotrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/issuelist/issuechoiceinfo/{trackingNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistIssuechoiceinfotrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get issue choice info. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IssuelistIssuechoiceinfotrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await IssuelistIssuechoiceinfotrackingNumberWithHttpInfoAsync(trackingNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get issue choice info. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> IssuelistIssuechoiceinfotrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(trackingNumber)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.IssuelistIssuechoiceinfotrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/issuelist/issuechoiceinfo/{trackingNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistIssuechoiceinfotrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfo(problemType, equipmentType, problemCode, locationId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfo(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'problemCode' is set
            if (problemCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemCode' when calling IssueListApi->IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/issuelist/issuechoice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(problemType, equipmentType, problemCode, locationId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'problemCode' is set
            if (problemCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemCode' when calling IssueListApi->IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/issuelist/issuechoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfo(locationId, areaId, problemType, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfo(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/issuelist/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = await IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfoAsync(locationId, areaId, problemType, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfoAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/issuelist/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> localVarResponse = IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(areaId, problemType, equipmentType, locationId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>("/issuelist/problems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> localVarResponse = await IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(areaId, problemType, equipmentType, locationId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>> IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>("/issuelist/problems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> localVarResponse = IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(areaId, locationId, setupId, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>("/issuelist/problemtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> localVarResponse = await IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(areaId, locationId, setupId, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>> IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "IssueListApi.IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>("/issuelist/problemtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> localVarResponse = ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(areaId, locationId, setupId, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>("/providers/current/applicationissuelist/areas/{areaId}/problemtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> localVarResponse = await ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(areaId, locationId, setupId, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>> ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>("/providers/current/applicationissuelist/areas/{areaId}/problemtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeWithHttpInfo(subscriberId, locationId, areaId, trade, problemType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeWithHttpInfo(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling IssueListApi->ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType");
            }

            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/providers/current/applicationissuelist/issueitems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeAsync(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeWithHttpInfoAsync(subscriberId, locationId, areaId, trade, problemType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeWithHttpInfoAsync(int subscriberId, int locationId, int areaId, string trade, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling IssueListApi->ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType");
            }

            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/providers/current/applicationissuelist/issueitems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId(int subscriberId, int? locationId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> localVarResponse = ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdWithHttpInfo(subscriberId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdWithHttpInfo(int subscriberId, int? locationId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>("/providers/current/subscribers/{subscriberId}/applicationissuelist/areas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> localVarResponse = await ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdWithHttpInfoAsync(subscriberId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdWithHttpInfoAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>("/providers/current/subscribers/{subscriberId}/applicationissuelist/areas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId(int subscriberId, int? locationId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdWithHttpInfo(subscriberId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdWithHttpInfo(int subscriberId, int? locationId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/providers/current/subscribers/{subscriberId}/applicationissuelist/globalfields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdWithHttpInfoAsync(subscriberId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39; 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdWithHttpInfoAsync(int subscriberId, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/providers/current/subscribers/{subscriberId}/applicationissuelist/globalfields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeWithHttpInfo(subscriberId, locationId, areaId, problemType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeWithHttpInfo(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/providers/current/subscribers/{subscriberId}/applicationissuelist/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeAsync(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = await ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeWithHttpInfoAsync(subscriberId, locationId, areaId, problemType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeWithHttpInfoAsync(int subscriberId, int locationId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/providers/current/subscribers/{subscriberId}/applicationissuelist/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> localVarResponse = ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdWithHttpInfo(subscriberId, areaId, problemType, equipmentType, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdWithHttpInfo(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>("/providers/current/subscribers/{subscriberId}/applicationissuelist/problems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdAsync(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> localVarResponse = await ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdWithHttpInfoAsync(subscriberId, areaId, problemType, equipmentType, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdWithHttpInfoAsync(int subscriberId, int areaId, string problemType, string equipmentType, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>("/providers/current/subscribers/{subscriberId}/applicationissuelist/problems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the issue list for a FTM provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdWithHttpInfo(subscriberId, assetId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the issue list for a FTM provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdWithHttpInfo(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/providers/current/subscribers/{subscriberId}/issuelist", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the issue list for a FTM provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdAsync(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdWithHttpInfoAsync(subscriberId, assetId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the issue list for a FTM provider 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID (optional)</param>
        /// <param name="locationId">Optional location ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdWithHttpInfoAsync(int subscriberId, int? assetId = default(int?), int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/providers/current/subscribers/{subscriberId}/issuelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes(int subscriberId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesWithHttpInfo(subscriberId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesWithHttpInfo(int subscriberId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/providers/current/subscriber/{subscriberId}/location/{locationId}/applicationissuelist/problemtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesWithHttpInfoAsync(subscriberId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesWithHttpInfoAsync(int subscriberId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "IssueListApi.ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/providers/current/subscriber/{subscriberId}/location/{locationId}/applicationissuelist/problemtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items not filtered by location. List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType(int setupId, int areaId, string problemType, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeWithHttpInfo(setupId, areaId, problemType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items not filtered by location. List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeWithHttpInfo(int setupId, int areaId, string problemType, int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/subscribers/current/dashboard/{setupId}/issuelist/equipmenttypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items not filtered by location. List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeAsync(int setupId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = await SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeWithHttpInfoAsync(setupId, areaId, problemType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items not filtered by location. List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeWithHttpInfoAsync(int setupId, int areaId, string problemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/subscribers/current/dashboard/{setupId}/issuelist/equipmenttypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfo(locationId, areaId, problemType, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfo(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/equipmenttypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse> localVarResponse = await SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfoAsync(locationId, areaId, problemType, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Equipment items List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdWithHttpInfoAsync(int locationId, int areaId, string problemType, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>("/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/equipmenttypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> localVarResponse = SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(areaId, problemType, equipmentType, locationId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfo(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>("/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/problemcodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse> localVarResponse = await SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(areaId, problemType, equipmentType, locationId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem codes List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int areaId, string problemType, string equipmentType, int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>("/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/problemcodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> localVarResponse = SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(areaId, locationId, setupId, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfo(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>("/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/problemtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse> localVarResponse = await SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(areaId, locationId, setupId, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem types List Problem types. Returns Problem types for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="subscriberId">Numeric id of subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdWithHttpInfoAsync(int areaId, int? locationId = default(int?), int? setupId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("areaId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(areaId)); // path parameter
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>("/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/problemtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> localVarResponse = SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfo(locationId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfo(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>("/subscribers/current/storedashboards/current/issuelist/areas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse> localVarResponse = await SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(locationId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Areas List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">selected locationId. (optional)</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>> SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(int? locationId = default(int?), int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>("/subscribers/current/storedashboards/current/issuelist/areas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId(string id, int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdWithHttpInfo(id, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdWithHttpInfo(string id, int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'id' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/storedashboards/current/issuelist/field", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdWithHttpInfoAsync(id, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdWithHttpInfoAsync(string id, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'id' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/storedashboards/current/issuelist/field", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfo(problemType, equipmentType, problemCode, locationId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfo(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'problemCode' is set
            if (problemCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemCode' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/storedashboards/current/issuelist/issuechoice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(problemType, equipmentType, problemCode, locationId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdWithHttpInfoAsync(string problemType, string equipmentType, string problemCode, int locationId, int? setupId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'problemType' is set
            if (problemType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'equipmentType' is set
            if (equipmentType == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'equipmentType' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }

            // verify the required parameter 'problemCode' is set
            if (problemCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'problemCode' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipmentType", equipmentType));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/storedashboards/current/issuelist/issuechoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific issue choice 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryWithHttpInfo(subscriberId, dashboardSetupId, trade, priority, category);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific issue choice 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryWithHttpInfo(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory");
            }

            // verify the required parameter 'priority' is set
            if (priority == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'priority' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "dashboardSetupId", dashboardSetupId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/storedashboards/current/issuelist/specific/issuechoice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific issue choice 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryAsync(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryWithHttpInfoAsync(subscriberId, dashboardSetupId, trade, priority, category, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific issue choice 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryWithHttpInfoAsync(int subscriberId, int dashboardSetupId, string trade, string priority, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory");
            }

            // verify the required parameter 'priority' is set
            if (priority == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'priority' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling IssueListApi->SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "dashboardSetupId", dashboardSetupId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "IssueListApi.SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/storedashboards/current/issuelist/specific/issuechoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
