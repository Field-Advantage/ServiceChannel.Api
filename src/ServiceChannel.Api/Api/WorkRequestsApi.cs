/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkRequestsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse</returns>
        SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse Workrequests(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0);

        /// <summary>
        /// Creates a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse> WorkrequestsWithHttpInfo(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0);
        /// <summary>
        /// Get providers available for reassign
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProvidersServiceRequestProvider</returns>
        SCServiceChannelServicesMessagingProvidersServiceRequestProvider WorkrequestsProvidersforreassignmentworkRequestIdworkRequestId(int workRequestId, int operationIndex = 0);

        /// <summary>
        /// Get providers available for reassign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProvidersServiceRequestProvider</returns>
        ApiResponse<SCServiceChannelServicesMessagingProvidersServiceRequestProvider> WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdWithHttpInfo(int workRequestId, int operationIndex = 0);
        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on).
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> WorkrequestsSearch(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0);

        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on).
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> WorkrequestsSearchWithHttpInfo(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0);
        /// <summary>
        /// Retrieve a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkRequestsWorkRequest</returns>
        SCServiceChannelServicesMessagingWorkRequestsWorkRequest Workrequestsid(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkRequestsWorkRequest</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> WorkrequestsidWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Delete a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Workrequestsid_0(int id, int operationIndex = 0);

        /// <summary>
        /// Delete a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Workrequestsid_0WithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestId(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update work request category
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdCategorycategoryIdcategoryId(int workRequestId, int categoryId, int operationIndex = 0);

        /// <summary>
        /// Update work request category
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdCategorycategoryIdcategoryIdWithHttpInfo(int workRequestId, int categoryId, int operationIndex = 0);
        /// <summary>
        /// Update work request description
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdDescription(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update work request description
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdDescriptionWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update work request NTE
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdNte(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update work request NTE
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdNteWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update work request priority
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdPrioritypriorityIdpriorityId(int workRequestId, int priorityId, int operationIndex = 0);

        /// <summary>
        /// Update work request priority
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdWithHttpInfo(int workRequestId, int priorityId, int operationIndex = 0);
        /// <summary>
        /// Reassign work request to another provider
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdReassign(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0);

        /// <summary>
        /// Reassign work request to another provider
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdReassignWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0);
        /// <summary>
        /// Update work request schedule date
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate(int workRequestId, string scheduledDate, int operationIndex = 0);

        /// <summary>
        /// Update work request schedule date
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateWithHttpInfo(int workRequestId, string scheduledDate, int operationIndex = 0);
        /// <summary>
        /// Update a work request status
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdStatus(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update a work request status
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdStatusWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update work request trade
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestsworkRequestIdTradetradeIdtradeId(int workRequestId, int tradeId, int operationIndex = 0);

        /// <summary>
        /// Update work request trade
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestsworkRequestIdTradetradeIdtradeIdWithHttpInfo(int workRequestId, int tradeId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkRequestsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse> WorkrequestsAsync(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse>> WorkrequestsWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get providers available for reassign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProvidersServiceRequestProvider</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProvidersServiceRequestProvider> WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get providers available for reassign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProvidersServiceRequestProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingProvidersServiceRequestProvider>> WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdWithHttpInfoAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on).
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> WorkrequestsSearchAsync(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on).
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>>> WorkrequestsSearchWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkRequestsWorkRequest</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> WorkrequestsidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkRequestsWorkRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> WorkrequestsidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Workrequestsid_0Async(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Workrequestsid_0WithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a work request
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work request category
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdCategorycategoryIdcategoryIdAsync(int workRequestId, int categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work request category
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdCategorycategoryIdcategoryIdWithHttpInfoAsync(int workRequestId, int categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work request description
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdDescriptionAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work request description
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdDescriptionWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work request NTE
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdNteAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work request NTE
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdNteWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work request priority
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdAsync(int workRequestId, int priorityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work request priority
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdWithHttpInfoAsync(int workRequestId, int priorityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reassign work request to another provider
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdReassignAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reassign work request to another provider
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdReassignWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work request schedule date
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateAsync(int workRequestId, string scheduledDate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work request schedule date
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateWithHttpInfoAsync(int workRequestId, string scheduledDate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a work request status
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdStatusAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a work request status
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdStatusWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work request trade
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestsworkRequestIdTradetradeIdtradeIdAsync(int workRequestId, int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work request trade
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestsworkRequestIdTradetradeIdtradeIdWithHttpInfoAsync(int workRequestId, int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkRequestsApi : IWorkRequestsApiSync, IWorkRequestsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkRequestsApi : IWorkRequestsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkRequestsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkRequestsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkRequestsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkRequestsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkRequestsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse</returns>
        public SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse Workrequests(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse> localVarResponse = WorkrequestsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse> WorkrequestsWithHttpInfo(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkRequestsApi->Workrequests");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkRequestsApi.Workrequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse>("/workrequests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workrequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse> WorkrequestsAsync(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse> localVarResponse = await WorkrequestsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse>> WorkrequestsWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkRequestsApi->Workrequests");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkRequestsApi.Workrequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse>("/workrequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workrequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get providers available for reassign 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProvidersServiceRequestProvider</returns>
        public SCServiceChannelServicesMessagingProvidersServiceRequestProvider WorkrequestsProvidersforreassignmentworkRequestIdworkRequestId(int workRequestId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersServiceRequestProvider> localVarResponse = WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdWithHttpInfo(workRequestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get providers available for reassign 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProvidersServiceRequestProvider</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersServiceRequestProvider> WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdWithHttpInfo(int workRequestId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workRequestId", workRequestId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsProvidersforreassignmentworkRequestIdworkRequestId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingProvidersServiceRequestProvider>("/workrequests/providersforreassignment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsProvidersforreassignmentworkRequestIdworkRequestId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get providers available for reassign 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProvidersServiceRequestProvider</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProvidersServiceRequestProvider> WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersServiceRequestProvider> localVarResponse = await WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdWithHttpInfoAsync(workRequestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get providers available for reassign 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Work request id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProvidersServiceRequestProvider)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProvidersServiceRequestProvider>> WorkrequestsProvidersforreassignmentworkRequestIdworkRequestIdWithHttpInfoAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workRequestId", workRequestId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsProvidersforreassignmentworkRequestIdworkRequestId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingProvidersServiceRequestProvider>("/workrequests/providersforreassignment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsProvidersforreassignmentworkRequestIdworkRequestId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on). *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> WorkrequestsSearch(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> localVarResponse = WorkrequestsSearchWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on). *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> WorkrequestsSearchWithHttpInfo(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkRequestsApi->WorkrequestsSearch");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>>("/workrequests/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on). *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> WorkrequestsSearchAsync(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> localVarResponse = await WorkrequestsSearchWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on). *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkRequestsWorkRequest&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>>> WorkrequestsSearchWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkRequestsApi->WorkrequestsSearch");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>>("/workrequests/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkRequestsWorkRequest</returns>
        public SCServiceChannelServicesMessagingWorkRequestsWorkRequest Workrequestsid(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> localVarResponse = WorkrequestsidWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkRequestsWorkRequest</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> WorkrequestsidWithHttpInfo(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WorkRequestsApi.Workrequestsid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>("/workrequests/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workrequestsid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkRequestsWorkRequest</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> WorkrequestsidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsWorkRequest> localVarResponse = await WorkrequestsidWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkRequestsWorkRequest)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>> WorkrequestsidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WorkRequestsApi.Workrequestsid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>("/workrequests/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workrequestsid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Workrequestsid_0(int id, int operationIndex = 0)
        {
            Workrequestsid_0WithHttpInfo(id);
        }

        /// <summary>
        /// Delete a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> Workrequestsid_0WithHttpInfo(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WorkRequestsApi.Workrequestsid_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/workrequests/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workrequestsid_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Workrequestsid_0Async(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await Workrequestsid_0WithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> Workrequestsid_0WithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WorkRequestsApi.Workrequestsid_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/workrequests/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workrequestsid_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestId(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdWithHttpInfo(workRequestId, updateRequest);
        }

        /// <summary>
        /// Update a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdWithHttpInfoAsync(workRequestId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a work request *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request category *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdCategorycategoryIdcategoryId(int workRequestId, int categoryId, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdCategorycategoryIdcategoryIdWithHttpInfo(workRequestId, categoryId);
        }

        /// <summary>
        /// Update work request category *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdCategorycategoryIdcategoryIdWithHttpInfo(int workRequestId, int categoryId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdCategorycategoryIdcategoryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/category", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdCategorycategoryIdcategoryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request category *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdCategorycategoryIdcategoryIdAsync(int workRequestId, int categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdCategorycategoryIdcategoryIdWithHttpInfoAsync(workRequestId, categoryId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update work request category *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdCategorycategoryIdcategoryIdWithHttpInfoAsync(int workRequestId, int categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdCategorycategoryIdcategoryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/category", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdCategorycategoryIdcategoryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request description *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdDescription(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdDescriptionWithHttpInfo(workRequestId, updateRequest);
        }

        /// <summary>
        /// Update work request description *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdDescriptionWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdDescription");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/description", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request description *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdDescriptionAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdDescriptionWithHttpInfoAsync(workRequestId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update work request description *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdDescriptionWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdDescription");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/description", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request NTE *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdNte(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdNteWithHttpInfo(workRequestId, updateRequest);
        }

        /// <summary>
        /// Update work request NTE *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdNteWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdNte");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdNte";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/nte", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdNte", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request NTE *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdNteAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdNteWithHttpInfoAsync(workRequestId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update work request NTE *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdNteWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdNte");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdNte";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/nte", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdNte", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request priority *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdPrioritypriorityIdpriorityId(int workRequestId, int priorityId, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdWithHttpInfo(workRequestId, priorityId);
        }

        /// <summary>
        /// Update work request priority *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdWithHttpInfo(int workRequestId, int priorityId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "priorityId", priorityId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdPrioritypriorityIdpriorityId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/priority", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdPrioritypriorityIdpriorityId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request priority *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdAsync(int workRequestId, int priorityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdWithHttpInfoAsync(workRequestId, priorityId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update work request priority *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdPrioritypriorityIdpriorityIdWithHttpInfoAsync(int workRequestId, int priorityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "priorityId", priorityId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdPrioritypriorityIdpriorityId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdPrioritypriorityIdpriorityId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reassign work request to another provider *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdReassign(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdReassignWithHttpInfo(workRequestId, reassignRequest);
        }

        /// <summary>
        /// Reassign work request to another provider *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdReassignWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0)
        {
            // verify the required parameter 'reassignRequest' is set
            if (reassignRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'reassignRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdReassign");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = reassignRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdReassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/reassign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdReassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reassign work request to another provider *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdReassignAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdReassignWithHttpInfoAsync(workRequestId, reassignRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reassign work request to another provider *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdReassignWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reassignRequest' is set
            if (reassignRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'reassignRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdReassign");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = reassignRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdReassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/reassign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdReassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request schedule date *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate(int workRequestId, string scheduledDate, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateWithHttpInfo(workRequestId, scheduledDate);
        }

        /// <summary>
        /// Update work request schedule date *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateWithHttpInfo(int workRequestId, string scheduledDate, int operationIndex = 0)
        {
            // verify the required parameter 'scheduledDate' is set
            if (scheduledDate == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'scheduledDate' when calling WorkRequestsApi->WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "scheduledDate", scheduledDate));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/scheduledate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request schedule date *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateAsync(int workRequestId, string scheduledDate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateWithHttpInfoAsync(workRequestId, scheduledDate, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update work request schedule date *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDateWithHttpInfoAsync(int workRequestId, string scheduledDate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scheduledDate' is set
            if (scheduledDate == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'scheduledDate' when calling WorkRequestsApi->WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "scheduledDate", scheduledDate));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/scheduledate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a work request status *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdStatus(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdStatusWithHttpInfo(workRequestId, updateRequest);
        }

        /// <summary>
        /// Update a work request status *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdStatusWithHttpInfo(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdStatus");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a work request status *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdStatusAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdStatusWithHttpInfoAsync(workRequestId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a work request status *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdStatusWithHttpInfoAsync(int workRequestId, SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkRequestsApi->WorkrequestsworkRequestIdStatus");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request trade *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestsworkRequestIdTradetradeIdtradeId(int workRequestId, int tradeId, int operationIndex = 0)
        {
            WorkrequestsworkRequestIdTradetradeIdtradeIdWithHttpInfo(workRequestId, tradeId);
        }

        /// <summary>
        /// Update work request trade *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestsworkRequestIdTradetradeIdtradeIdWithHttpInfo(int workRequestId, int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdTradetradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workrequests/{workRequestId}/trade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdTradetradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work request trade *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestsworkRequestIdTradetradeIdtradeIdAsync(int workRequestId, int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestsworkRequestIdTradetradeIdtradeIdWithHttpInfoAsync(workRequestId, tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update work request trade *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestsworkRequestIdTradetradeIdtradeIdWithHttpInfoAsync(int workRequestId, int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));

            localVarRequestOptions.Operation = "WorkRequestsApi.WorkrequestsworkRequestIdTradetradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workrequests/{workRequestId}/trade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestsworkRequestIdTradetradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
