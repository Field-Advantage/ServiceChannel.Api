/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAfterHoursApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Business Hours
        /// </summary>
        /// <remarks>
        /// Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse</returns>
        SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse LocationslocationIdBusinesshours(int locationId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Business Hours
        /// </summary>
        /// <remarks>
        /// Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse> LocationslocationIdBusinesshoursWithHttpInfo(int locationId, int operationIndex = 0);
        /// <summary>
        /// Update business hours
        /// </summary>
        /// <remarks>
        /// Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationslocationIdBusinesshours_0(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0);

        /// <summary>
        /// Update business hours
        /// </summary>
        /// <remarks>
        /// Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationslocationIdBusinesshours_0WithHttpInfo(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0);
        /// <summary>
        /// Retrieve location holidays
        /// </summary>
        /// <remarks>
        /// Returns the details of each holiday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse</returns>
        SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse LocationslocationIdHolidays(int locationId, int operationIndex = 0);

        /// <summary>
        /// Retrieve location holidays
        /// </summary>
        /// <remarks>
        /// Returns the details of each holiday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse> LocationslocationIdHolidaysWithHttpInfo(int locationId, int operationIndex = 0);
        /// <summary>
        /// Add a holiday
        /// </summary>
        /// <remarks>
        /// Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse LocationslocationIdHolidays_0(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0);

        /// <summary>
        /// Add a holiday
        /// </summary>
        /// <remarks>
        /// Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidays_0WithHttpInfo(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0);
        /// <summary>
        /// Delete a holiday
        /// </summary>
        /// <remarks>
        /// Permanently removes a holiday from the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse LocationslocationIdHolidaysholidayNameholidayName(int locationId, string holidayName, int operationIndex = 0);

        /// <summary>
        /// Delete a holiday
        /// </summary>
        /// <remarks>
        /// Permanently removes a holiday from the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidaysholidayNameholidayNameWithHttpInfo(int locationId, string holidayName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAfterHoursApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Business Hours
        /// </summary>
        /// <remarks>
        /// Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse> LocationslocationIdBusinesshoursAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Business Hours
        /// </summary>
        /// <remarks>
        /// Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse>> LocationslocationIdBusinesshoursWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update business hours
        /// </summary>
        /// <remarks>
        /// Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationslocationIdBusinesshours_0Async(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update business hours
        /// </summary>
        /// <remarks>
        /// Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationslocationIdBusinesshours_0WithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve location holidays
        /// </summary>
        /// <remarks>
        /// Returns the details of each holiday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse> LocationslocationIdHolidaysAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve location holidays
        /// </summary>
        /// <remarks>
        /// Returns the details of each holiday for the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse>> LocationslocationIdHolidaysWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a holiday
        /// </summary>
        /// <remarks>
        /// Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidays_0Async(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a holiday
        /// </summary>
        /// <remarks>
        /// Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>> LocationslocationIdHolidays_0WithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a holiday
        /// </summary>
        /// <remarks>
        /// Permanently removes a holiday from the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidaysholidayNameholidayNameAsync(int locationId, string holidayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a holiday
        /// </summary>
        /// <remarks>
        /// Permanently removes a holiday from the specified location.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>> LocationslocationIdHolidaysholidayNameholidayNameWithHttpInfoAsync(int locationId, string holidayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAfterHoursApi : IAfterHoursApiSync, IAfterHoursApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AfterHoursApi : IAfterHoursApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AfterHoursApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AfterHoursApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AfterHoursApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AfterHoursApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AfterHoursApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AfterHoursApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AfterHoursApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AfterHoursApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Business Hours Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse</returns>
        public SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse LocationslocationIdBusinesshours(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse> localVarResponse = LocationslocationIdBusinesshoursWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Business Hours Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse> LocationslocationIdBusinesshoursWithHttpInfo(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdBusinesshours";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse>("/locations/{locationId}/businesshours", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdBusinesshours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Business Hours Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse> LocationslocationIdBusinesshoursAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse> localVarResponse = await LocationslocationIdBusinesshoursWithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Business Hours Returns opening and closing hours from Monday to Sunday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse>> LocationslocationIdBusinesshoursWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdBusinesshours";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse>("/locations/{locationId}/businesshours", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdBusinesshours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update business hours Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationslocationIdBusinesshours_0(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0)
        {
            LocationslocationIdBusinesshours_0WithHttpInfo(locationId, businessHoursModel);
        }

        /// <summary>
        /// Update business hours Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> LocationslocationIdBusinesshours_0WithHttpInfo(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0)
        {
            // verify the required parameter 'businessHoursModel' is set
            if (businessHoursModel == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'businessHoursModel' when calling AfterHoursApi->LocationslocationIdBusinesshours_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = businessHoursModel;

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdBusinesshours_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/locations/{locationId}/businesshours", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdBusinesshours_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update business hours Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationslocationIdBusinesshours_0Async(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationslocationIdBusinesshours_0WithHttpInfoAsync(locationId, businessHoursModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update business hours Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> LocationslocationIdBusinesshours_0WithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessHoursModel' is set
            if (businessHoursModel == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'businessHoursModel' when calling AfterHoursApi->LocationslocationIdBusinesshours_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = businessHoursModel;

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdBusinesshours_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/locations/{locationId}/businesshours", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdBusinesshours_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve location holidays Returns the details of each holiday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse</returns>
        public SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse LocationslocationIdHolidays(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse> localVarResponse = LocationslocationIdHolidaysWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve location holidays Returns the details of each holiday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse> LocationslocationIdHolidaysWithHttpInfo(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdHolidays";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse>("/locations/{locationId}/holidays", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdHolidays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve location holidays Returns the details of each holiday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse> LocationslocationIdHolidaysAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse> localVarResponse = await LocationslocationIdHolidaysWithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve location holidays Returns the details of each holiday for the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse>> LocationslocationIdHolidaysWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdHolidays";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse>("/locations/{locationId}/holidays", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdHolidays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a holiday Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        public SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse LocationslocationIdHolidays_0(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> localVarResponse = LocationslocationIdHolidays_0WithHttpInfo(locationId, holidayModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a holiday Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidays_0WithHttpInfo(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0)
        {
            // verify the required parameter 'holidayModel' is set
            if (holidayModel == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'holidayModel' when calling AfterHoursApi->LocationslocationIdHolidays_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = holidayModel;

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdHolidays_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>("/locations/{locationId}/holidays", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdHolidays_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a holiday Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidays_0Async(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> localVarResponse = await LocationslocationIdHolidays_0WithHttpInfoAsync(locationId, holidayModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a holiday Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>> LocationslocationIdHolidays_0WithHttpInfoAsync(int locationId, SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'holidayModel' is set
            if (holidayModel == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'holidayModel' when calling AfterHoursApi->LocationslocationIdHolidays_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = holidayModel;

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdHolidays_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>("/locations/{locationId}/holidays", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdHolidays_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a holiday Permanently removes a holiday from the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        public SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse LocationslocationIdHolidaysholidayNameholidayName(int locationId, string holidayName, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> localVarResponse = LocationslocationIdHolidaysholidayNameholidayNameWithHttpInfo(locationId, holidayName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a holiday Permanently removes a holiday from the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidaysholidayNameholidayNameWithHttpInfo(int locationId, string holidayName, int operationIndex = 0)
        {
            // verify the required parameter 'holidayName' is set
            if (holidayName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'holidayName' when calling AfterHoursApi->LocationslocationIdHolidaysholidayNameholidayName");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "holidayName", holidayName));

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdHolidaysholidayNameholidayName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>("/locations/{locationId}/holidays", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdHolidaysholidayNameholidayName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a holiday Permanently removes a holiday from the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> LocationslocationIdHolidaysholidayNameholidayNameAsync(int locationId, string holidayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse> localVarResponse = await LocationslocationIdHolidaysholidayNameholidayNameWithHttpInfoAsync(locationId, holidayName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a holiday Permanently removes a holiday from the specified location.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>> LocationslocationIdHolidaysholidayNameholidayNameWithHttpInfoAsync(int locationId, string holidayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'holidayName' is set
            if (holidayName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'holidayName' when calling AfterHoursApi->LocationslocationIdHolidaysholidayNameholidayName");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "holidayName", holidayName));

            localVarRequestOptions.Operation = "AfterHoursApi.LocationslocationIdHolidaysholidayNameholidayName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>("/locations/{locationId}/holidays", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdHolidaysholidayNameholidayName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
