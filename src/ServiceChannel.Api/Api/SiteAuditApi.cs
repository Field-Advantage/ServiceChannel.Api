/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteAuditApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Save completed audit to the database
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse</returns>
        SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse SubscribersCurrentLocationsAuditInfo(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0);

        /// <summary>
        /// Save completed audit to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse> SubscribersCurrentLocationsAuditInfoWithHttpInfo(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0);
        /// <summary>
        /// Get checklist templates by audit template.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;</returns>
        List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId(int templateId, int operationIndex = 0);

        /// <summary>
        /// Get checklist templates by audit template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdWithHttpInfo(int templateId, int operationIndex = 0);
        /// <summary>
        /// Get checklistitem templates by audit template.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;</returns>
        List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get checklistitem templates by audit template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdWithHttpInfo(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get audit data for specified location and audit type without template information
        /// </summary>
        /// <remarks>
        /// Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditGetAuditInfo</returns>
        SCServiceChannelServicesMessagingSiteAuditGetAuditInfo SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId(int locationId, int templateId, int operationIndex = 0);

        /// <summary>
        /// Get audit data for specified location and audit type without template information
        /// </summary>
        /// <remarks>
        /// Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditGetAuditInfo</returns>
        ApiResponse<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo> SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdWithHttpInfo(int locationId, int templateId, int operationIndex = 0);
        /// <summary>
        /// Get available audit types for specified location
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypes(int locationId, int operationIndex = 0);

        /// <summary>
        /// Get available audit types for specified location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypesWithHttpInfo(int locationId, int operationIndex = 0);
        /// <summary>
        /// Get audit data for specified location and audit type
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo(int locationId, int templateTypeId, int operationIndex = 0);

        /// <summary>
        /// Get audit data for specified location and audit type
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWithHttpInfo(int locationId, int templateTypeId, int operationIndex = 0);
        /// <summary>
        /// Get audit data for specified location and audit type for new templates
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted(int locationId, int templateTypeId, int operationIndex = 0);

        /// <summary>
        /// Get audit data for specified location and audit type for new templates
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedWithHttpInfo(int locationId, int templateTypeId, int operationIndex = 0);
        /// <summary>
        /// Post (save) completed audit of new type to the database
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0);

        /// <summary>
        /// Post (save) completed audit of new type to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0WithHttpInfo(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0);
        /// <summary>
        /// Post (save) completed audit to the database
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0);

        /// <summary>
        /// Post (save) completed audit to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0WithHttpInfo(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0);
        /// <summary>
        /// Get list of completed audits for current subscriber
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse</returns>
        SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod(int? daysPeriod = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get list of completed audits for current subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse> SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get details for specified checklist item
        /// </summary>
        /// <remarks>
        /// Details include:              - comments with attachments              - workorders              - quantity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse</returns>
        SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse SubscribersCurrentSiteauditCheckListItemscheckListItemId(int checkListItemId, int operationIndex = 0);

        /// <summary>
        /// Get details for specified checklist item
        /// </summary>
        /// <remarks>
        /// Details include:              - comments with attachments              - workorders              - quantity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse> SubscribersCurrentSiteauditCheckListItemscheckListItemIdWithHttpInfo(int checkListItemId, int operationIndex = 0);
        /// <summary>
        /// Update completed audit info
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse</returns>
        SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse SubscribersCurrentSiteauditCompleted(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0);

        /// <summary>
        /// Update completed audit info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse> SubscribersCurrentSiteauditCompletedWithHttpInfo(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0);
        /// <summary>
        /// Get completed audit info
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal</returns>
        SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal SubscribersCurrentSiteauditCompletedauditId(int auditId, int operationIndex = 0);

        /// <summary>
        /// Get completed audit info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal</returns>
        ApiResponse<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal> SubscribersCurrentSiteauditCompletedauditIdWithHttpInfo(int auditId, int operationIndex = 0);
        /// <summary>
        /// Get site audit reports
        /// </summary>
        /// <remarks>
        /// Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;</returns>
        List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get site audit reports
        /// </summary>
        /// <remarks>
        /// Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaWithHttpInfo(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteAuditApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Save completed audit to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse> SubscribersCurrentLocationsAuditInfoAsync(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save completed audit to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse>> SubscribersCurrentLocationsAuditInfoWithHttpInfoAsync(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get checklist templates by audit template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdAsync(int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get checklist templates by audit template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>>> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdWithHttpInfoAsync(int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get checklistitem templates by audit template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdAsync(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get checklistitem templates by audit template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>>> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdWithHttpInfoAsync(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get audit data for specified location and audit type without template information
        /// </summary>
        /// <remarks>
        /// Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditGetAuditInfo</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo> SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdAsync(int locationId, int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get audit data for specified location and audit type without template information
        /// </summary>
        /// <remarks>
        /// Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditGetAuditInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo>> SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdWithHttpInfoAsync(int locationId, int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get available audit types for specified location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypesAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get available audit types for specified location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypesWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get audit data for specified location and audit type
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get audit data for specified location and audit type
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWithHttpInfoAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get audit data for specified location and audit type for new templates
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get audit data for specified location and audit type for new templates
        /// </summary>
        /// <remarks>
        /// Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedWithHttpInfoAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Post (save) completed audit of new type to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0Async(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Post (save) completed audit of new type to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0WithHttpInfoAsync(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Post (save) completed audit to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0Async(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Post (save) completed audit to the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0WithHttpInfoAsync(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of completed audits for current subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse> SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of completed audits for current subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse>> SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details for specified checklist item
        /// </summary>
        /// <remarks>
        /// Details include:              - comments with attachments              - workorders              - quantity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse> SubscribersCurrentSiteauditCheckListItemscheckListItemIdAsync(int checkListItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details for specified checklist item
        /// </summary>
        /// <remarks>
        /// Details include:              - comments with attachments              - workorders              - quantity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse>> SubscribersCurrentSiteauditCheckListItemscheckListItemIdWithHttpInfoAsync(int checkListItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update completed audit info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse> SubscribersCurrentSiteauditCompletedAsync(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update completed audit info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse>> SubscribersCurrentSiteauditCompletedWithHttpInfoAsync(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get completed audit info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal</returns>
        System.Threading.Tasks.Task<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal> SubscribersCurrentSiteauditCompletedauditIdAsync(int auditId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get completed audit info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal>> SubscribersCurrentSiteauditCompletedauditIdWithHttpInfoAsync(int auditId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get site audit reports
        /// </summary>
        /// <remarks>
        /// Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaAsync(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get site audit reports
        /// </summary>
        /// <remarks>
        /// Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>>> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaWithHttpInfoAsync(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteAuditApi : ISiteAuditApiSync, ISiteAuditApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SiteAuditApi : ISiteAuditApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAuditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteAuditApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAuditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteAuditApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAuditApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SiteAuditApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAuditApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SiteAuditApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Save completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse</returns>
        public SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse SubscribersCurrentLocationsAuditInfo(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse> localVarResponse = SubscribersCurrentLocationsAuditInfoWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse> SubscribersCurrentLocationsAuditInfoWithHttpInfo(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentLocationsAuditInfo");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse>("/subscribers/current/locations/auditInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse> SubscribersCurrentLocationsAuditInfoAsync(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse> localVarResponse = await SubscribersCurrentLocationsAuditInfoWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse>> SubscribersCurrentLocationsAuditInfoWithHttpInfoAsync(SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentLocationsAuditInfo");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse>("/subscribers/current/locations/auditInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklist templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;</returns>
        public List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId(int templateId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>> localVarResponse = SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklist templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdWithHttpInfo(int templateId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>>("/subscribers/current/locations/auditinfo/checklist/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklist templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdAsync(int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>> localVarResponse = await SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklist templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>>> SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdWithHttpInfoAsync(int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>>("/subscribers/current/locations/auditinfo/checklist/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklistitem templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;</returns>
        public List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>> localVarResponse = SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdWithHttpInfo(templateId, checkListTemplateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklistitem templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdWithHttpInfo(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            if (checkListTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkListTemplateId", checkListTemplateId));
            }

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>>("/subscribers/current/locations/auditinfo/checklistitem/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklistitem templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdAsync(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>> localVarResponse = await SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdWithHttpInfoAsync(templateId, checkListTemplateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklistitem templates by audit template. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="checkListTemplateId">Check list template identifier (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>>> SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdWithHttpInfoAsync(int templateId, int? checkListTemplateId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            if (checkListTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "checkListTemplateId", checkListTemplateId));
            }

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>>("/subscribers/current/locations/auditinfo/checklistitem/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit data for specified location and audit type without template information Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditGetAuditInfo</returns>
        public SCServiceChannelServicesMessagingSiteAuditGetAuditInfo SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId(int locationId, int templateId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo> localVarResponse = SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdWithHttpInfo(locationId, templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit data for specified location and audit type without template information Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditGetAuditInfo</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo> SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdWithHttpInfo(int locationId, int templateId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo>("/subscribers/current/locations/auditinfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit data for specified location and audit type without template information Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditGetAuditInfo</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo> SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdAsync(int locationId, int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo> localVarResponse = await SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdWithHttpInfoAsync(locationId, templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit data for specified location and audit type without template information Setup data for areas-checklist-checklistItems relationship data are not provided in this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditGetAuditInfo)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo>> SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdWithHttpInfoAsync(int locationId, int templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo>("/subscribers/current/locations/auditinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available audit types for specified location 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypes(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentLocationslocationIdSiteauditTemplateTypesWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available audit types for specified location 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypesWithHttpInfo(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available audit types for specified location 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypesAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentLocationslocationIdSiteauditTemplateTypesWithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available audit types for specified location 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypesWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit data for specified location and audit type Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo(int locationId, int templateTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWithHttpInfo(locationId, templateTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit data for specified location and audit type Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWithHttpInfo(int locationId, int templateTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit data for specified location and audit type Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWithHttpInfoAsync(locationId, templateTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit data for specified location and audit type Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWithHttpInfoAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit data for specified location and audit type for new templates Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted(int locationId, int templateTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedWithHttpInfo(locationId, templateTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit data for specified location and audit type for new templates Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedWithHttpInfo(int locationId, int templateTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfoWeighted", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit data for specified location and audit type for new templates Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedWithHttpInfoAsync(locationId, templateTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit data for specified location and audit type for new templates Audit can be created from:              - completed audit data              - setup (templates) data              - mixed completed + setup              How audit data is combined depends on the loaded setup file to the system and/or availability               of previous finished audit data.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedWithHttpInfoAsync(int locationId, int templateTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfoWeighted", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post (save) completed audit of new type to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0WithHttpInfo(locationId, templateTypeId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post (save) completed audit of new type to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0WithHttpInfo(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfoWeighted", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post (save) completed audit of new type to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0Async(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0WithHttpInfoAsync(locationId, templateTypeId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post (save) completed audit of new type to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0WithHttpInfoAsync(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfoWeighted", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post (save) completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0WithHttpInfo(locationId, templateTypeId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post (save) completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0WithHttpInfo(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post (save) completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0Async(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0WithHttpInfoAsync(locationId, templateTypeId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post (save) completed audit to the database 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="templateTypeId">Audit type identifier</param>
        /// <param name="request">Completed audit data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0WithHttpInfoAsync(int locationId, int templateTypeId, SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(templateTypeId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/subscribers/current/locations/{locationId}/siteaudit/templateTypes/{templateTypeId}/auditInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of completed audits for current subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse</returns>
        public SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod(int? daysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse> localVarResponse = SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodWithHttpInfo(daysPeriod);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of completed audits for current subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse> SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse>("/subscribers/current/siteaudit/audits/completed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of completed audits for current subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse> SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse> localVarResponse = await SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodWithHttpInfoAsync(daysPeriod, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of completed audits for current subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Number of days in the past from now (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse>> SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse>("/subscribers/current/siteaudit/audits/completed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for specified checklist item Details include:              - comments with attachments              - workorders              - quantity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse</returns>
        public SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse SubscribersCurrentSiteauditCheckListItemscheckListItemId(int checkListItemId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse> localVarResponse = SubscribersCurrentSiteauditCheckListItemscheckListItemIdWithHttpInfo(checkListItemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for specified checklist item Details include:              - comments with attachments              - workorders              - quantity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse> SubscribersCurrentSiteauditCheckListItemscheckListItemIdWithHttpInfo(int checkListItemId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("checkListItemId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListItemId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditCheckListItemscheckListItemId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse>("/subscribers/current/siteaudit/checkListItems/{checkListItemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditCheckListItemscheckListItemId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for specified checklist item Details include:              - comments with attachments              - workorders              - quantity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse> SubscribersCurrentSiteauditCheckListItemscheckListItemIdAsync(int checkListItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse> localVarResponse = await SubscribersCurrentSiteauditCheckListItemscheckListItemIdWithHttpInfoAsync(checkListItemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for specified checklist item Details include:              - comments with attachments              - workorders              - quantity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkListItemId">Identifier of checklist item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse>> SubscribersCurrentSiteauditCheckListItemscheckListItemIdWithHttpInfoAsync(int checkListItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("checkListItemId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(checkListItemId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditCheckListItemscheckListItemId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse>("/subscribers/current/siteaudit/checkListItems/{checkListItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditCheckListItemscheckListItemId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse</returns>
        public SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse SubscribersCurrentSiteauditCompleted(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse> localVarResponse = SubscribersCurrentSiteauditCompletedWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse> SubscribersCurrentSiteauditCompletedWithHttpInfo(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentSiteauditCompleted");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse>("/subscribers/current/siteaudit/completed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse> SubscribersCurrentSiteauditCompletedAsync(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse> localVarResponse = await SubscribersCurrentSiteauditCompletedWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Completed audit info</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse>> SubscribersCurrentSiteauditCompletedWithHttpInfoAsync(SCServiceChannelApiModelSiteAuditCompletedAuditInfo request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling SiteAuditApi->SubscribersCurrentSiteauditCompleted");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse>("/subscribers/current/siteaudit/completed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal</returns>
        public SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal SubscribersCurrentSiteauditCompletedauditId(int auditId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal> localVarResponse = SubscribersCurrentSiteauditCompletedauditIdWithHttpInfo(auditId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal> SubscribersCurrentSiteauditCompletedauditIdWithHttpInfo(int auditId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auditId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(auditId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditCompletedauditId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal>("/subscribers/current/siteaudit/completed/{auditId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditCompletedauditId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal> SubscribersCurrentSiteauditCompletedauditIdAsync(int auditId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal> localVarResponse = await SubscribersCurrentSiteauditCompletedauditIdWithHttpInfoAsync(auditId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get completed audit info 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit info to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal>> SubscribersCurrentSiteauditCompletedauditIdWithHttpInfoAsync(int auditId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auditId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(auditId)); // path parameter

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditCompletedauditId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal>("/subscribers/current/siteaudit/completed/{auditId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditCompletedauditId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get site audit reports Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;</returns>
        public List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>> localVarResponse = SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaWithHttpInfo(auditId, fromDate, toDate, country, locationId, area);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get site audit reports Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaWithHttpInfo(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (auditId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "auditId", auditId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>>("/subscribers/current/siteaudit/report", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get site audit reports Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaAsync(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>> localVarResponse = await SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaWithHttpInfoAsync(auditId, fromDate, toDate, country, locationId, area, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get site audit reports Returns a site audit report, its part, or several reports for the current subscriber.              &lt;br /&gt;**Required parameters:**               • **Option 1**. &#x60;auditId&#x60;. Use to get a site audit report by ID.               • **Option 2**. The combination of &#x60;fromDate&#x60; and &#x60;toDate&#x60;. Use to get site audit reports for a specific period.              &lt;br /&gt;***Note:*** Site audit reports are also known as *site planning reports* or just *audits*. See [Site Planning Manager](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/551059548/Site+Planning+Manager) for more info.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditId">The numeric identifier of the site audit report to return. (optional)</param>
        /// <param name="fromDate">The date from which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="toDate">The date until which you want to return site audit reports. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. (optional)</param>
        /// <param name="country">The two-letter [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the location country. (optional)</param>
        /// <param name="locationId">The numeric identifier of the subscriber&#39;s property. (optional)</param>
        /// <param name="area">The audited area within the location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingSiteAuditAuditReportExternal&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>>> SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaWithHttpInfoAsync(int? auditId = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string? country = default(string?), int? locationId = default(int?), string? area = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (auditId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "auditId", auditId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }

            localVarRequestOptions.Operation = "SiteAuditApi.SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>>("/subscribers/current/siteaudit/report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
