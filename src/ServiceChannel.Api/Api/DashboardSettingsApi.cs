/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardSettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Feedback Setup
        /// </summary>
        /// <remarks>
        /// Returns a Feedback Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse</returns>
        SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse DashboardsettingsFeedbacksetupsetupId(int setupId, int operationIndex = 0);

        /// <summary>
        /// Get Feedback Setup
        /// </summary>
        /// <remarks>
        /// Returns a Feedback Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse> DashboardsettingsFeedbacksetupsetupIdWithHttpInfo(int setupId, int operationIndex = 0);
        /// <summary>
        /// Get Dashboard Note Setup
        /// </summary>
        /// <remarks>
        /// Returns a Note Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse</returns>
        SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse DashboardsettingsNotesetupsetupId(int setupId, int operationIndex = 0);

        /// <summary>
        /// Get Dashboard Note Setup
        /// </summary>
        /// <remarks>
        /// Returns a Note Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse> DashboardsettingsNotesetupsetupIdWithHttpInfo(int setupId, int operationIndex = 0);
        /// <summary>
        /// Get List Of Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;</returns>
        List<SCServiceChannelApiModelDashboardSettingsSetupRequest> DashboardsettingsRequestsetup(List<int> setupIds, int operationIndex = 0);

        /// <summary>
        /// Get List Of Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;</returns>
        ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>> DashboardsettingsRequestsetupWithHttpInfo(List<int> setupIds, int operationIndex = 0);
        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;</returns>
        List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm> DashboardsettingsRequestsetupconfirm(List<int> setupIds, int operationIndex = 0);

        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;</returns>
        ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>> DashboardsettingsRequestsetupconfirmWithHttpInfo(List<int> setupIds, int operationIndex = 0);
        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse</returns>
        SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse DashboardsettingsRequestsetupconfirmsetupId(int setupId, int operationIndex = 0);

        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse> DashboardsettingsRequestsetupconfirmsetupIdWithHttpInfo(int setupId, int operationIndex = 0);
        /// <summary>
        /// Get Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse</returns>
        SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse DashboardsettingsRequestsetupsetupId(int setupId, int operationIndex = 0);

        /// <summary>
        /// Get Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse> DashboardsettingsRequestsetupsetupIdWithHttpInfo(int setupId, int operationIndex = 0);
        /// <summary>
        /// Get Dashboard Setup General
        /// </summary>
        /// <remarks>
        /// Returns Setup General for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelApiModelDashboardSettingsSetupGeneral</returns>
        SCServiceChannelApiModelDashboardSettingsSetupGeneral DashboardsettingsSetupgeneralsubscriberIdsetupId(int subscriberId, int setupId, int operationIndex = 0);

        /// <summary>
        /// Get Dashboard Setup General
        /// </summary>
        /// <remarks>
        /// Returns Setup General for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelApiModelDashboardSettingsSetupGeneral</returns>
        ApiResponse<SCServiceChannelApiModelDashboardSettingsSetupGeneral> DashboardsettingsSetupgeneralsubscriberIdsetupIdWithHttpInfo(int subscriberId, int setupId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardSettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Feedback Setup
        /// </summary>
        /// <remarks>
        /// Returns a Feedback Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse> DashboardsettingsFeedbacksetupsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Feedback Setup
        /// </summary>
        /// <remarks>
        /// Returns a Feedback Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse>> DashboardsettingsFeedbacksetupsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Dashboard Note Setup
        /// </summary>
        /// <remarks>
        /// Returns a Note Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse> DashboardsettingsNotesetupsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Dashboard Note Setup
        /// </summary>
        /// <remarks>
        /// Returns a Note Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse>> DashboardsettingsNotesetupsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Of Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>> DashboardsettingsRequestsetupAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Of Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>>> DashboardsettingsRequestsetupWithHttpInfoAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>> DashboardsettingsRequestsetupconfirmAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a List of Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>>> DashboardsettingsRequestsetupconfirmWithHttpInfoAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse> DashboardsettingsRequestsetupconfirmsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Confirmation Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse>> DashboardsettingsRequestsetupconfirmsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse> DashboardsettingsRequestsetupsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Dashboard Service Request Setup
        /// </summary>
        /// <remarks>
        /// Returns a Service Request Setup for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse>> DashboardsettingsRequestsetupsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Dashboard Setup General
        /// </summary>
        /// <remarks>
        /// Returns Setup General for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelApiModelDashboardSettingsSetupGeneral</returns>
        System.Threading.Tasks.Task<SCServiceChannelApiModelDashboardSettingsSetupGeneral> DashboardsettingsSetupgeneralsubscriberIdsetupIdAsync(int subscriberId, int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Dashboard Setup General
        /// </summary>
        /// <remarks>
        /// Returns Setup General for Dashboard
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelApiModelDashboardSettingsSetupGeneral)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelApiModelDashboardSettingsSetupGeneral>> DashboardsettingsSetupgeneralsubscriberIdsetupIdWithHttpInfoAsync(int subscriberId, int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardSettingsApi : IDashboardSettingsApiSync, IDashboardSettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DashboardSettingsApi : IDashboardSettingsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardSettingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardSettingsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardSettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DashboardSettingsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardSettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DashboardSettingsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Feedback Setup Returns a Feedback Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse</returns>
        public SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse DashboardsettingsFeedbacksetupsetupId(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse> localVarResponse = DashboardsettingsFeedbacksetupsetupIdWithHttpInfo(setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedback Setup Returns a Feedback Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse> DashboardsettingsFeedbacksetupsetupIdWithHttpInfo(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsFeedbacksetupsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse>("/dashboardsettings/feedbacksetup/{setupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsFeedbacksetupsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feedback Setup Returns a Feedback Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse> DashboardsettingsFeedbacksetupsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse> localVarResponse = await DashboardsettingsFeedbacksetupsetupIdWithHttpInfoAsync(setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedback Setup Returns a Feedback Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse>> DashboardsettingsFeedbacksetupsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsFeedbacksetupsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingDashboardSettingsSetupFeedbackResponse>("/dashboardsettings/feedbacksetup/{setupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsFeedbacksetupsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Note Setup Returns a Note Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse</returns>
        public SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse DashboardsettingsNotesetupsetupId(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse> localVarResponse = DashboardsettingsNotesetupsetupIdWithHttpInfo(setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Note Setup Returns a Note Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse> DashboardsettingsNotesetupsetupIdWithHttpInfo(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsNotesetupsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse>("/dashboardsettings/notesetup/{setupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsNotesetupsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Note Setup Returns a Note Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse> DashboardsettingsNotesetupsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse> localVarResponse = await DashboardsettingsNotesetupsetupIdWithHttpInfoAsync(setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Note Setup Returns a Note Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse>> DashboardsettingsNotesetupsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsNotesetupsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse>("/dashboardsettings/notesetup/{setupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsNotesetupsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Setup Returns a List of Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;</returns>
        public List<SCServiceChannelApiModelDashboardSettingsSetupRequest> DashboardsettingsRequestsetup(List<int> setupIds, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>> localVarResponse = DashboardsettingsRequestsetupWithHttpInfo(setupIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Setup Returns a List of Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>> DashboardsettingsRequestsetupWithHttpInfo(List<int> setupIds, int operationIndex = 0)
        {
            // verify the required parameter 'setupIds' is set
            if (setupIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'setupIds' when calling DashboardSettingsApi->DashboardsettingsRequestsetup");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setupIds;

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>>("/dashboardsettings/requestsetup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Setup Returns a List of Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>> DashboardsettingsRequestsetupAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>> localVarResponse = await DashboardsettingsRequestsetupWithHttpInfoAsync(setupIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Setup Returns a List of Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequest&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>>> DashboardsettingsRequestsetupWithHttpInfoAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setupIds' is set
            if (setupIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'setupIds' when calling DashboardSettingsApi->DashboardsettingsRequestsetup");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setupIds;

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelApiModelDashboardSettingsSetupRequest>>("/dashboardsettings/requestsetup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup Returns a List of Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;</returns>
        public List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm> DashboardsettingsRequestsetupconfirm(List<int> setupIds, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>> localVarResponse = DashboardsettingsRequestsetupconfirmWithHttpInfo(setupIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup Returns a List of Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>> DashboardsettingsRequestsetupconfirmWithHttpInfo(List<int> setupIds, int operationIndex = 0)
        {
            // verify the required parameter 'setupIds' is set
            if (setupIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'setupIds' when calling DashboardSettingsApi->DashboardsettingsRequestsetupconfirm");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setupIds;

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetupconfirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>>("/dashboardsettings/requestsetupconfirm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetupconfirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup Returns a List of Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>> DashboardsettingsRequestsetupconfirmAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>> localVarResponse = await DashboardsettingsRequestsetupconfirmWithHttpInfoAsync(setupIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Of Dashboard Service Request Confirmation Setup Returns a List of Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupIds">The list of numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>>> DashboardsettingsRequestsetupconfirmWithHttpInfoAsync(List<int> setupIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setupIds' is set
            if (setupIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'setupIds' when calling DashboardSettingsApi->DashboardsettingsRequestsetupconfirm");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setupIds;

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetupconfirm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>>("/dashboardsettings/requestsetupconfirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetupconfirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup Returns a Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse</returns>
        public SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse DashboardsettingsRequestsetupconfirmsetupId(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse> localVarResponse = DashboardsettingsRequestsetupconfirmsetupIdWithHttpInfo(setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup Returns a Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse> DashboardsettingsRequestsetupconfirmsetupIdWithHttpInfo(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetupconfirmsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse>("/dashboardsettings/requestsetupconfirm/{setupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetupconfirmsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup Returns a Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse> DashboardsettingsRequestsetupconfirmsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse> localVarResponse = await DashboardsettingsRequestsetupconfirmsetupIdWithHttpInfoAsync(setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Service Request Confirmation Setup Returns a Service Request Confirmation Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse>> DashboardsettingsRequestsetupconfirmsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetupconfirmsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestConfirmResponse>("/dashboardsettings/requestsetupconfirm/{setupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetupconfirmsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Service Request Setup Returns a Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse</returns>
        public SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse DashboardsettingsRequestsetupsetupId(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse> localVarResponse = DashboardsettingsRequestsetupsetupIdWithHttpInfo(setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Service Request Setup Returns a Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse> DashboardsettingsRequestsetupsetupIdWithHttpInfo(int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetupsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse>("/dashboardsettings/requestsetup/{setupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetupsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Service Request Setup Returns a Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse> DashboardsettingsRequestsetupsetupIdAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse> localVarResponse = await DashboardsettingsRequestsetupsetupIdWithHttpInfoAsync(setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Service Request Setup Returns a Service Request Setup for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupId">The numeric identifier of the Dashboard Setup Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse>> DashboardsettingsRequestsetupsetupIdWithHttpInfoAsync(int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsRequestsetupsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingDashboardSettingsSetupRequestResponse>("/dashboardsettings/requestsetup/{setupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsRequestsetupsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Setup General Returns Setup General for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelApiModelDashboardSettingsSetupGeneral</returns>
        public SCServiceChannelApiModelDashboardSettingsSetupGeneral DashboardsettingsSetupgeneralsubscriberIdsetupId(int subscriberId, int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelDashboardSettingsSetupGeneral> localVarResponse = DashboardsettingsSetupgeneralsubscriberIdsetupIdWithHttpInfo(subscriberId, setupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Setup General Returns Setup General for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelApiModelDashboardSettingsSetupGeneral</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelDashboardSettingsSetupGeneral> DashboardsettingsSetupgeneralsubscriberIdsetupIdWithHttpInfo(int subscriberId, int setupId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsSetupgeneralsubscriberIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelApiModelDashboardSettingsSetupGeneral>("/dashboardsettings/setupgeneral/{subscriberId}/{setupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsSetupgeneralsubscriberIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dashboard Setup General Returns Setup General for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelApiModelDashboardSettingsSetupGeneral</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelApiModelDashboardSettingsSetupGeneral> DashboardsettingsSetupgeneralsubscriberIdsetupIdAsync(int subscriberId, int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelDashboardSettingsSetupGeneral> localVarResponse = await DashboardsettingsSetupgeneralsubscriberIdsetupIdWithHttpInfoAsync(subscriberId, setupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Setup General Returns Setup General for Dashboard
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber identifier.</param>
        /// <param name="setupId">The identifier of the Dashboard Setup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelApiModelDashboardSettingsSetupGeneral)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelDashboardSettingsSetupGeneral>> DashboardsettingsSetupgeneralsubscriberIdsetupIdWithHttpInfoAsync(int subscriberId, int setupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("setupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(setupId)); // path parameter

            localVarRequestOptions.Operation = "DashboardSettingsApi.DashboardsettingsSetupgeneralsubscriberIdsetupId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelApiModelDashboardSettingsSetupGeneral>("/dashboardsettings/setupgeneral/{subscriberId}/{setupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DashboardsettingsSetupgeneralsubscriberIdsetupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
