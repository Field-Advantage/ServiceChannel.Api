/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResolutionCodesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add or update resolution codes for a work order
        /// </summary>
        /// <remarks>
        /// Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResolutionCodes(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0);

        /// <summary>
        /// Add or update resolution codes for a work order
        /// </summary>
        /// <remarks>
        /// Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResolutionCodesWithHttpInfo(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0);
        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResolutionCodesRootCauses(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0);

        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResolutionCodesRootCausesWithHttpInfo(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0);
        /// <summary>
        /// Get root causes
        /// </summary>
        /// <remarks>
        /// Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;</returns>
        List<SCServiceChannelServicesMessagingResolutionCodesRootCause> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get root causes
        /// </summary>
        /// <remarks>
        /// Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfo(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseText(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextWithHttpInfo(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get resolution codes
        /// </summary>
        /// <remarks>
        /// Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;</returns>
        List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get resolution codes
        /// </summary>
        /// <remarks>
        /// Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfo(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get resolution codes and root causes for a work order
        /// </summary>
        /// <remarks>
        /// Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo</returns>
        SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo ResolutionCodesworkOrderId(int workOrderId, int operationIndex = 0);

        /// <summary>
        /// Get resolution codes and root causes for a work order
        /// </summary>
        /// <remarks>
        /// Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo</returns>
        ApiResponse<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo> ResolutionCodesworkOrderIdWithHttpInfo(int workOrderId, int operationIndex = 0);
        /// <summary>
        /// Retrieve asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        SCServiceChannelServicesMessagingAssetsAssetTypeCategory ResolutionCodesworkOrderIdAssetCategories(int workOrderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> ResolutionCodesworkOrderIdAssetCategoriesWithHttpInfo(int workOrderId, int operationIndex = 0);
        /// <summary>
        /// Add or update asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResolutionCodesworkOrderIdAssetCategories_0(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0);

        /// <summary>
        /// Add or update asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResolutionCodesworkOrderIdAssetCategories_0WithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResolutionCodesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add or update resolution codes for a work order
        /// </summary>
        /// <remarks>
        /// Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResolutionCodesAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update resolution codes for a work order
        /// </summary>
        /// <remarks>
        /// Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResolutionCodesWithHttpInfoAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResolutionCodesRootCausesAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResolutionCodesRootCausesWithHttpInfoAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get root causes
        /// </summary>
        /// <remarks>
        /// Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get root causes
        /// </summary>
        /// <remarks>
        /// Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>>> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextAsync(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update root causes for a work order
        /// </summary>
        /// <remarks>
        /// For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextWithHttpInfoAsync(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get resolution codes
        /// </summary>
        /// <remarks>
        /// Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get resolution codes
        /// </summary>
        /// <remarks>
        /// Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>>> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get resolution codes and root causes for a work order
        /// </summary>
        /// <remarks>
        /// Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo> ResolutionCodesworkOrderIdAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get resolution codes and root causes for a work order
        /// </summary>
        /// <remarks>
        /// Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo>> ResolutionCodesworkOrderIdWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> ResolutionCodesworkOrderIdAssetCategoriesAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> ResolutionCodesworkOrderIdAssetCategoriesWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or update asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResolutionCodesworkOrderIdAssetCategories_0Async(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update asset categories for a work order
        /// </summary>
        /// <remarks>
        /// Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResolutionCodesworkOrderIdAssetCategories_0WithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResolutionCodesApi : IResolutionCodesApiSync, IResolutionCodesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResolutionCodesApi : IResolutionCodesApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolutionCodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResolutionCodesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolutionCodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResolutionCodesApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolutionCodesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResolutionCodesApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolutionCodesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ResolutionCodesApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add or update resolution codes for a work order Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResolutionCodes(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0)
        {
            ResolutionCodesWithHttpInfo(request);
        }

        /// <summary>
        /// Add or update resolution codes for a work order Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ResolutionCodesWithHttpInfo(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ResolutionCodesApi->ResolutionCodes");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/resolutionCodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update resolution codes for a work order Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResolutionCodesAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResolutionCodesWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add or update resolution codes for a work order Associates resolution codes with the specified work order. If resolution codes are already added to a work order, you can change them by sending the request.              &lt;br /&gt;Learn [how providers can add or edit resolution codes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes) in ServiceChannel University.              &lt;br /&gt;**Example Requests**                                  OPTION 1:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [                       2145, 2147                   ],                     \&quot;ResolutionCodes\&quot;: []                  }                                  OPTION 2:                  POST /resolutionCodes                  {                     \&quot;WorkOrderId\&quot;: 158716211,                     \&quot;ResolutionCodeIds\&quot;: [],                     \&quot;ResolutionCodes\&quot;: [                      {                       \&quot;Key\&quot;: 2189,                       \&quot;Text\&quot;: \&quot;Repair wings\&quot;,                       \&quot;AssetCategoryId\&quot;: 5                      },                      {                       \&quot;Key\&quot;: 2146,                       \&quot;Text\&quot;: \&quot;\&quot;,                       \&quot;AssetCategoryId\&quot;: 2                      }                     ]                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update resolution codes for a work order.               &lt;br /&gt;**Required parameters:**               • &#x60;WorkOrderId&#x60;. Unique numeric identifier of the work order to add resolution codes to.               • Use one of the following collections to add resolution codes. To get resolution code IDs, send the [GET /resolutionCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) request, and look for the &#x60;Key&#x60; value of the desired code in the response.                 ◦ &#x60;ResolutionCodeIds&#x60;. Enter resolution code IDs separated by commas.                ◦ &#x60;ResolutionCodes&#x60;. For each resolution code you want to add, pass an object with the following parameters: &#x60;Key&#x60;, &#x60;Text&#x60; — optional comment for resolution codes with the &#x60;HasFreeText&#x60; attribute, and &#x60;AssetCategoryId&#x60; (required if you have access to asset categories).              &lt;br /&gt;Users who have access to asset categories should add 1–3 resolution codes for each asset category associated with a work order. Otherwise, you can specify up to 3 resolution codes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ResolutionCodesWithHttpInfoAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateResolutionCodesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ResolutionCodesApi->ResolutionCodes");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/resolutionCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update root causes for a work order For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResolutionCodesRootCauses(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0)
        {
            ResolutionCodesRootCausesWithHttpInfo(request);
        }

        /// <summary>
        /// Add or update root causes for a work order For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ResolutionCodesRootCausesWithHttpInfo(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ResolutionCodesApi->ResolutionCodesRootCauses");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesRootCauses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/resolutionCodes/rootCauses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesRootCauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update root causes for a work order For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResolutionCodesRootCausesAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResolutionCodesRootCausesWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add or update root causes for a work order For users who have access to asset categories, associates root causes with the specified work order. If root causes are already added to a work order, you can replace them by sending the request. You need to specify one root cause for each asset category of a work order.              &lt;br /&gt;Get root cause IDs using the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method. To retrieve asset category IDs, send the [GET /AssetTypes/GetAssetTypeGroups](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_GetAssetTypeGroups_subscriberId__subscriberId_) request.              &lt;br /&gt;***Note:*** Users who don&#39;t have access to asset categories should pass the [POST /resolutionCodes/rootCauses/{workOrderId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses__workOrderId__rootCauseId__rootCauseId__rootCauseText__rootCauseText_) request to add or update a root cause for a work order.              &lt;br /&gt;Visit ServiceChannel University to find out [how providers can add or edit root causes](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/1688502858/Resolution+and+Root+Causes+Codes+in+Provider+Automation#ResolutionandRootCausesCodesinProviderAutomation-ProcessingRRCsProcessingResolutionandRootCauseCodes).              &lt;br /&gt;**Example Request**                               POST /resolutionCodes/rootCauses                 {                   \&quot;WorkOrderId\&quot;: 175444600,                   \&quot;RootCauses\&quot;: [                    {                      \&quot;Key\&quot;: 419,                      \&quot;Text\&quot;: \&quot;Accidental damage\&quot;,                      \&quot;AssetCategoryId\&quot;: 1                    },                    {                      \&quot;Key\&quot;: 420,                      \&quot;Text\&quot;: \&quot;\&quot;,                      \&quot;AssetCategoryId\&quot;: 2                    }                  ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update root causes for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ResolutionCodesRootCausesWithHttpInfoAsync(SCServiceChannelServicesMessagingResolutionCodesUpdateRootCausesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ResolutionCodesApi->ResolutionCodesRootCauses");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesRootCauses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/resolutionCodes/rootCauses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesRootCauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get root causes Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;</returns>
        public List<SCServiceChannelServicesMessagingResolutionCodesRootCause> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>> localVarResponse = ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfo(subscriberId, trade, category, locationId, providerId, assetCategoryIds, keyword, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get root causes Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfo(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ResolutionCodesApi->ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling ResolutionCodesApi->ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (assetCategoryIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "assetCategoryIds", assetCategoryIds));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>>("/resolutionCodes/rootCauses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get root causes Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>> localVarResponse = await ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(subscriberId, trade, category, locationId, providerId, assetCategoryIds, keyword, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get root causes Returns a list of root causes. Root causes are set up for trades and describe reasons why the problem occurred to begin with.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return root causes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return root causes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return root causes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in root causes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingResolutionCodesRootCause&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>>> ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ResolutionCodesApi->ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling ResolutionCodesApi->ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (assetCategoryIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "assetCategoryIds", assetCategoryIds));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingResolutionCodesRootCause>>("/resolutionCodes/rootCauses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesRootCausessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update root causes for a work order For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseText(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0)
        {
            ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextWithHttpInfo(workOrderId, rootCauseId, rootCauseText);
        }

        /// <summary>
        /// Add or update root causes for a work order For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextWithHttpInfo(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            if (rootCauseId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "rootCauseId", rootCauseId));
            }
            if (rootCauseText != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "rootCauseText", rootCauseText));
            }

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/resolutionCodes/rootCauses/{workOrderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update root causes for a work order For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextAsync(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextWithHttpInfoAsync(workOrderId, rootCauseId, rootCauseText, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add or update root causes for a work order For users who don&#39;t have access to asset categories, associates a root cause with the specified work order. If a root cause is already added to a work order, you can change it by sending the request.              &lt;br /&gt;Before adding a root cause, use the [GET /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/GETv3_resolutionCodes_rootCauses_subscriberId__subscriberId__trade__trade__category__category__locationId__locationId__providerId__providerId__assetCategoryIds_0___assetCategoryIds_0___assetCategoryIds_1___assetCategoryIds_1___keyword__keyword__page__page__pageSize__pageSize_) method to find out if root causes are configured for the work order trade. To get a root cause ID, look for the &#x60;Key&#x60; value of the desired root cause in the response.              &lt;br /&gt; ***Note:*** Users with access to asset categories should send the following request to add or update root causes for a work order: [POST /resolutionCodes/rootCauses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/ResolutionCodes/POSTv3_resolutionCodes_rootCauses).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add, update, or delete a root cause for.</param>
        /// <param name="rootCauseId">ID of the root cause to associate with the work order. Ignore this parameter to remove the current root causes from the work order. (optional)</param>
        /// <param name="rootCauseText">Comment explaining your understanding of the root cause of the work order.&lt;br /&gt;Enabled for root causes with the &#x60;HasFreeText&#x60; attribute. The maximum length is 100 characters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseTextWithHttpInfoAsync(int workOrderId, int? rootCauseId = default(int?), string? rootCauseText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            if (rootCauseId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "rootCauseId", rootCauseId));
            }
            if (rootCauseText != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "rootCauseText", rootCauseText));
            }

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/resolutionCodes/rootCauses/{workOrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesRootCausesworkOrderIdrootCauseIdrootCauseIdrootCauseTextrootCauseText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get resolution codes Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;</returns>
        public List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>> localVarResponse = ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfo(subscriberId, trade, category, locationId, providerId, assetCategoryIds, keyword, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get resolution codes Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfo(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ResolutionCodesApi->ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling ResolutionCodesApi->ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (assetCategoryIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "assetCategoryIds", assetCategoryIds));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>>("/resolutionCodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get resolution codes Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>> localVarResponse = await ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(subscriberId, trade, category, locationId, providerId, assetCategoryIds, keyword, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get resolution codes Returns a list of resolution codes. Resolution codes are set up for trades and describe actions that a technician takes to resolve a problem upon working on a service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="trade">Trade to return resolution codes for. A trade is an area of work for which a service is performed, such as _HVAC_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="category">Category to return resolution codes for. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique identifier of a subscriber’s location.</param>
        /// <param name="providerId">Unique provider identifier. Should be passed by subscriber users. (optional)</param>
        /// <param name="assetCategoryIds">IDs of asset categories to return resolution codes for. You can specify up to 5 asset categories if you have access to this functionality. (optional)</param>
        /// <param name="keyword">Keyword contained in resolution codes to perform the search by. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default is 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingResolutionCodesResolutionCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>>> ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(int subscriberId, string trade, string category, int locationId, int? providerId = default(int?), List<int>? assetCategoryIds = default(List<int>?), string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ResolutionCodesApi->ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling ResolutionCodesApi->ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (assetCategoryIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "assetCategoryIds", assetCategoryIds));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingResolutionCodesResolutionCode>>("/resolutionCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodessubscriberIdsubscriberIdtradetradecategorycategorylocationIdlocationIdproviderIdproviderIdassetCategoryIds0assetCategoryIds0assetCategoryIds1assetCategoryIds1keywordkeywordpagepagepageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get resolution codes and root causes for a work order Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo</returns>
        public SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo ResolutionCodesworkOrderId(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo> localVarResponse = ResolutionCodesworkOrderIdWithHttpInfo(workOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get resolution codes and root causes for a work order Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo> ResolutionCodesworkOrderIdWithHttpInfo(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesworkOrderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo>("/resolutionCodes/{workOrderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesworkOrderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get resolution codes and root causes for a work order Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo> ResolutionCodesworkOrderIdAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo> localVarResponse = await ResolutionCodesworkOrderIdWithHttpInfoAsync(workOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get resolution codes and root causes for a work order Returns resolution codes and root causes for the specified work order.               • A **resolution code** is an action that a technician takes to resolve a problem upon working on a service request.               • A **root cause** is a reason why the problem occurred to begin with.              &lt;br /&gt;Resolution codes and root causes are set up for specific trades and are standardized. If there are resolution codes and root causes configured for a work order trade, a technician is prompted to select these properties upon [checking out of a work order](https://servicechannel.atlassian.net/wiki/spaces/SCUCP/pages/622396960/Checking+In+and+Out+of+Work+Orders+Using+SC+Provider#CheckingInandOutofWorkOrdersUsingSCProvider-CheckingOutwithResolutionandRootCauseCodes) and moving it to the _Completed_ status in ServiceChannel Provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return resolution codes and root causes for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo>> ResolutionCodesworkOrderIdWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesworkOrderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionInfo>("/resolutionCodes/{workOrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesworkOrderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve asset categories for a work order Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public SCServiceChannelServicesMessagingAssetsAssetTypeCategory ResolutionCodesworkOrderIdAssetCategories(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> localVarResponse = ResolutionCodesworkOrderIdAssetCategoriesWithHttpInfo(workOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve asset categories for a work order Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> ResolutionCodesworkOrderIdAssetCategoriesWithHttpInfo(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesworkOrderIdAssetCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>("/resolutionCodes/{workOrderId}/assetCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesworkOrderIdAssetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve asset categories for a work order Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> ResolutionCodesworkOrderIdAssetCategoriesAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> localVarResponse = await ResolutionCodesworkOrderIdAssetCategoriesWithHttpInfoAsync(workOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve asset categories for a work order Returns asset categories associated with the specified work order. Asset categories represent a standardized classification of asset types.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to return asset categories for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeCategory)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> ResolutionCodesworkOrderIdAssetCategoriesWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesworkOrderIdAssetCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>("/resolutionCodes/{workOrderId}/assetCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesworkOrderIdAssetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update asset categories for a work order Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResolutionCodesworkOrderIdAssetCategories_0(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0)
        {
            ResolutionCodesworkOrderIdAssetCategories_0WithHttpInfo(workOrderId, request);
        }

        /// <summary>
        /// Add or update asset categories for a work order Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ResolutionCodesworkOrderIdAssetCategories_0WithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ResolutionCodesApi->ResolutionCodesworkOrderIdAssetCategories_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesworkOrderIdAssetCategories_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/resolutionCodes/{workOrderId}/assetCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesworkOrderIdAssetCategories_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update asset categories for a work order Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResolutionCodesworkOrderIdAssetCategories_0Async(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResolutionCodesworkOrderIdAssetCategories_0WithHttpInfoAsync(workOrderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add or update asset categories for a work order Associates asset categories with the specified work order. Sending this request replaces the current asset categories.              &lt;br /&gt;Asset categories represent a standardized classification of asset types. You can add no more than 5 asset categories to a work order.              &lt;br /&gt;***Note:*** Only users who have access to asset categories can send this request.                  &lt;br /&gt;**Example Request**                               POST /resolutionCodes/{workOrderId}/assetCategories                 {                   \&quot;AssetCategoryIds\&quot;: [                     1, 4, 6                   ]                 }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to add asset categories to.</param>
        /// <param name="request">Request to add or update asset categories for a work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ResolutionCodesworkOrderIdAssetCategories_0WithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingResolutionCodesUpdateAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ResolutionCodesApi->ResolutionCodesworkOrderIdAssetCategories_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ResolutionCodesApi.ResolutionCodesworkOrderIdAssetCategories_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/resolutionCodes/{workOrderId}/assetCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolutionCodesworkOrderIdAssetCategories_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
