/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICtoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get refrigerant certifications
        /// </summary>
        /// <remarks>
        /// Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;</returns>
        List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserId(int providerId, int? authUserId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get refrigerant certifications
        /// </summary>
        /// <remarks>
        /// Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdWithHttpInfo(int providerId, int? authUserId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve technicians who accepted a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto> CtoolsWorkorderworkOrderIdAcceptedtechnicians(int workOrderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve technicians who accepted a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAcceptedtechniciansWithHttpInfo(int workOrderId, int operationIndex = 0);
        /// <summary>
        /// Accept a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CtoolsWorkorderworkOrderIdAcceptuserIduserId(int workOrderId, int userId, int operationIndex = 0);

        /// <summary>
        /// Accept a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CtoolsWorkorderworkOrderIdAcceptuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0);
        /// <summary>
        /// Retrieve technicians assigned to a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto> CtoolsWorkorderworkOrderIdAssignedtechnicians(int workOrderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve technicians assigned to a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAssignedtechniciansWithHttpInfo(int workOrderId, int operationIndex = 0);
        /// <summary>
        /// Assign a technician to a work order
        /// </summary>
        /// <remarks>
        /// Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserId(int workOrderId, int userId, int operationIndex = 0);

        /// <summary>
        /// Assign a technician to a work order
        /// </summary>
        /// <remarks>
        /// Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0);
        /// <summary>
        /// Decline a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CtoolsWorkorderworkOrderIdDeclineuserIduserId(int workOrderId, int userId, int operationIndex = 0);

        /// <summary>
        /// Decline a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CtoolsWorkorderworkOrderIdDeclineuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0);
        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserId(int workOrderId, int userId, int operationIndex = 0);

        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0);
        /// <summary>
        /// Unassign a technician from a work order
        /// </summary>
        /// <remarks>
        /// Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserId(int workOrderId, int userId, int operationIndex = 0);

        /// <summary>
        /// Unassign a technician from a work order
        /// </summary>
        /// <remarks>
        /// Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICtoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get refrigerant certifications
        /// </summary>
        /// <remarks>
        /// Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdAsync(int providerId, int? authUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get refrigerant certifications
        /// </summary>
        /// <remarks>
        /// Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>>> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdWithHttpInfoAsync(int providerId, int? authUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve technicians who accepted a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAcceptedtechniciansAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve technicians who accepted a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>> CtoolsWorkorderworkOrderIdAcceptedtechniciansWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdAcceptuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CtoolsWorkorderworkOrderIdAcceptuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve technicians assigned to a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAssignedtechniciansAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve technicians assigned to a work order
        /// </summary>
        /// <remarks>
        /// Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>> CtoolsWorkorderworkOrderIdAssignedtechniciansWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign a technician to a work order
        /// </summary>
        /// <remarks>
        /// Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign a technician to a work order
        /// </summary>
        /// <remarks>
        /// Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Decline a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdDeclineuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Decline a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CtoolsWorkorderworkOrderIdDeclineuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician
        /// </summary>
        /// <remarks>
        /// Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassign a technician from a work order
        /// </summary>
        /// <remarks>
        /// Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unassign a technician from a work order
        /// </summary>
        /// <remarks>
        /// Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICtoolsApi : ICtoolsApiSync, ICtoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CtoolsApi : ICtoolsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CtoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CtoolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CtoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CtoolsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CtoolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CtoolsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CtoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CtoolsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get refrigerant certifications Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;</returns>
        public List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserId(int providerId, int? authUserId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>> localVarResponse = CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdWithHttpInfo(providerId, authUserId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get refrigerant certifications Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdWithHttpInfo(int providerId, int? authUserId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            if (authUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "authUserId", authUserId));
            }

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>>("/ctools/refrigerantcertifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get refrigerant certifications Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdAsync(int providerId, int? authUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>> localVarResponse = await CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdWithHttpInfoAsync(providerId, authUserId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get refrigerant certifications Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>>> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserIdWithHttpInfoAsync(int providerId, int? authUserId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            if (authUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "authUserId", authUserId));
            }

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>>("/ctools/refrigerantcertifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve technicians who accepted a work order Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        public List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto> CtoolsWorkorderworkOrderIdAcceptedtechnicians(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> localVarResponse = CtoolsWorkorderworkOrderIdAcceptedtechniciansWithHttpInfo(workOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve technicians who accepted a work order Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAcceptedtechniciansWithHttpInfo(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAcceptedtechnicians";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>("/ctools/workorder/{workOrderId}/acceptedtechnicians", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAcceptedtechnicians", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve technicians who accepted a work order Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAcceptedtechniciansAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> localVarResponse = await CtoolsWorkorderworkOrderIdAcceptedtechniciansWithHttpInfoAsync(workOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve technicians who accepted a work order Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>> CtoolsWorkorderworkOrderIdAcceptedtechniciansWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAcceptedtechnicians";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>("/ctools/workorder/{workOrderId}/acceptedtechnicians", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAcceptedtechnicians", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a work order on behalf of a technician Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CtoolsWorkorderworkOrderIdAcceptuserIduserId(int workOrderId, int userId, int operationIndex = 0)
        {
            CtoolsWorkorderworkOrderIdAcceptuserIduserIdWithHttpInfo(workOrderId, userId);
        }

        /// <summary>
        /// Accept a work order on behalf of a technician Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> CtoolsWorkorderworkOrderIdAcceptuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAcceptuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/ctools/workorder/{workOrderId}/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAcceptuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a work order on behalf of a technician Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdAcceptuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CtoolsWorkorderworkOrderIdAcceptuserIduserIdWithHttpInfoAsync(workOrderId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Accept a work order on behalf of a technician Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> CtoolsWorkorderworkOrderIdAcceptuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAcceptuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/ctools/workorder/{workOrderId}/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAcceptuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve technicians assigned to a work order Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        public List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto> CtoolsWorkorderworkOrderIdAssignedtechnicians(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> localVarResponse = CtoolsWorkorderworkOrderIdAssignedtechniciansWithHttpInfo(workOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve technicians assigned to a work order Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAssignedtechniciansWithHttpInfo(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAssignedtechnicians";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>("/ctools/workorder/{workOrderId}/assignedtechnicians", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAssignedtechnicians", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve technicians assigned to a work order Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> CtoolsWorkorderworkOrderIdAssignedtechniciansAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>> localVarResponse = await CtoolsWorkorderworkOrderIdAssignedtechniciansWithHttpInfoAsync(workOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve technicians assigned to a work order Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingContractorToolsTechnicianDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>> CtoolsWorkorderworkOrderIdAssignedtechniciansWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAssignedtechnicians";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>>("/ctools/workorder/{workOrderId}/assignedtechnicians", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAssignedtechnicians", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a technician to a work order Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserId(int workOrderId, int userId, int operationIndex = 0)
        {
            CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdWithHttpInfo(workOrderId, userId);
        }

        /// <summary>
        /// Assign a technician to a work order Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ctools/workorder/{workOrderId}/assigntechnician", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a technician to a work order Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdWithHttpInfoAsync(workOrderId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign a technician to a work order Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ctools/workorder/{workOrderId}/assigntechnician", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decline a work order on behalf of a technician Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CtoolsWorkorderworkOrderIdDeclineuserIduserId(int workOrderId, int userId, int operationIndex = 0)
        {
            CtoolsWorkorderworkOrderIdDeclineuserIduserIdWithHttpInfo(workOrderId, userId);
        }

        /// <summary>
        /// Decline a work order on behalf of a technician Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> CtoolsWorkorderworkOrderIdDeclineuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdDeclineuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/ctools/workorder/{workOrderId}/decline", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdDeclineuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decline a work order on behalf of a technician Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdDeclineuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CtoolsWorkorderworkOrderIdDeclineuserIduserIdWithHttpInfoAsync(workOrderId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Decline a work order on behalf of a technician Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> CtoolsWorkorderworkOrderIdDeclineuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdDeclineuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/ctools/workorder/{workOrderId}/decline", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdDeclineuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserId(int workOrderId, int userId, int operationIndex = 0)
        {
            CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdWithHttpInfo(workOrderId, userId);
        }

        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/ctools/workorder/{workOrderId}/rescindacceptance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdWithHttpInfoAsync(workOrderId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/ctools/workorder/{workOrderId}/rescindacceptance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign a technician from a work order Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserId(int workOrderId, int userId, int operationIndex = 0)
        {
            CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdWithHttpInfo(workOrderId, userId);
        }

        /// <summary>
        /// Unassign a technician from a work order Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdWithHttpInfo(int workOrderId, int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ctools/workorder/{workOrderId}/unassigntechnician", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign a technician from a work order Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdWithHttpInfoAsync(workOrderId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unassign a technician from a work order Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserIdWithHttpInfoAsync(int workOrderId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "CtoolsApi.CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ctools/workorder/{workOrderId}/unassigntechnician", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
