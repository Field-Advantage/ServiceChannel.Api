/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkActivitiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List work activities created by a provider user within the specified time period
        /// </summary>
        /// <remarks>
        /// Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkActivity> ForTimeInterval(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List work activities created by a provider user within the specified time period
        /// </summary>
        /// <remarks>
        /// Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> ForTimeIntervalWithHttpInfo(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List work activities of the specified work order
        /// </summary>
        /// <remarks>
        /// Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkActivity> GetWorkActivities(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List work activities of the specified work order
        /// </summary>
        /// <remarks>
        /// Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> GetWorkActivitiesWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkActivity</returns>
        SCServiceChannelServicesMessagingWorkordersWorkActivity GetWorkActivity(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkActivity</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkActivity> GetWorkActivityWithHttpInfo(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Create a work activity for the specified work order
        /// </summary>
        /// <remarks>
        /// Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdWorkactivities(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0);

        /// <summary>
        /// Create a work activity for the specified work order
        /// </summary>
        /// <remarks>
        /// Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdWorkactivitiesWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0);
        /// <summary>
        /// Update the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdWorkactivitiesworkactivityId(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0);

        /// <summary>
        /// Update the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdWorkactivitiesworkactivityIdWithHttpInfo(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0);
        /// <summary>
        /// Delete the specified work activities of a work order
        /// </summary>
        /// <remarks>
        /// Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1(int workorderId, List<int> workactivityIds, int operationIndex = 0);

        /// <summary>
        /// Delete the specified work activities of a work order
        /// </summary>
        /// <remarks>
        /// Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1WithHttpInfo(int workorderId, List<int> workactivityIds, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkActivitiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List work activities created by a provider user within the specified time period
        /// </summary>
        /// <remarks>
        /// Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> ForTimeIntervalAsync(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List work activities created by a provider user within the specified time period
        /// </summary>
        /// <remarks>
        /// Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>> ForTimeIntervalWithHttpInfoAsync(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List work activities of the specified work order
        /// </summary>
        /// <remarks>
        /// Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> GetWorkActivitiesAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List work activities of the specified work order
        /// </summary>
        /// <remarks>
        /// Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>> GetWorkActivitiesWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkActivity</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkActivity> GetWorkActivityAsync(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkActivity>> GetWorkActivityWithHttpInfoAsync(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a work activity for the specified work order
        /// </summary>
        /// <remarks>
        /// Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdWorkactivitiesAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a work activity for the specified work order
        /// </summary>
        /// <remarks>
        /// Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdWorkactivitiesWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdWorkactivitiesworkactivityIdAsync(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the specified work activity of a work order
        /// </summary>
        /// <remarks>
        /// Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdWorkactivitiesworkactivityIdWithHttpInfoAsync(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the specified work activities of a work order
        /// </summary>
        /// <remarks>
        /// Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1Async(int workorderId, List<int> workactivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the specified work activities of a work order
        /// </summary>
        /// <remarks>
        /// Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1WithHttpInfoAsync(int workorderId, List<int> workactivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkActivitiesApi : IWorkActivitiesApiSync, IWorkActivitiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkActivitiesApi : IWorkActivitiesApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkActivitiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkActivitiesApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkActivitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkActivitiesApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkActivitiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkActivitiesApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List work activities created by a provider user within the specified time period Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkActivity> ForTimeInterval(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> localVarResponse = ForTimeIntervalWithHttpInfo(userId, dtMax, dtMin, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List work activities created by a provider user within the specified time period Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> ForTimeIntervalWithHttpInfo(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dtMax", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dtMax)); // path parameter
            localVarRequestOptions.PathParameters.Add("dtMin", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dtMin)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkActivitiesApi.ForTimeInterval";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>("/odata/workactivities/Service.ForTimeInterval(dtMin={dtMin}, dtMax={dtMax}, userId={userId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForTimeInterval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List work activities created by a provider user within the specified time period Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> ForTimeIntervalAsync(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> localVarResponse = await ForTimeIntervalWithHttpInfoAsync(userId, dtMax, dtMin, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List work activities created by a provider user within the specified time period Returns work activities created by the specified provider user within the set time period.              &lt;br /&gt;A work activity details information about the technician’s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** This method is only available to provider users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">PIN of the provider user who created work activities.</param>
        /// <param name="dtMax">The end date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="dtMin">The start date of the time period for which you want to retrieve work activities. The format is &#x60;YYYY-MM-DD&#x60;.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>> ForTimeIntervalWithHttpInfoAsync(int userId, DateTime dtMax, DateTime dtMin, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dtMax", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dtMax)); // path parameter
            localVarRequestOptions.PathParameters.Add("dtMin", ServiceChannel.Api.Client.ClientUtils.ParameterToString(dtMin)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkActivitiesApi.ForTimeInterval";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>("/odata/workactivities/Service.ForTimeInterval(dtMin={dtMin}, dtMax={dtMax}, userId={userId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForTimeInterval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List work activities of the specified work order Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkActivity> GetWorkActivities(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> localVarResponse = GetWorkActivitiesWithHttpInfo(workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List work activities of the specified work order Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> GetWorkActivitiesWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkActivitiesApi.GetWorkActivities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>("/odata/workorders({workorderId})/workactivities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkActivities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List work activities of the specified work order Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> GetWorkActivitiesAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>> localVarResponse = await GetWorkActivitiesWithHttpInfoAsync(workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List work activities of the specified work order Returns work activities of the specified work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve work activities.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>> GetWorkActivitiesWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkActivitiesApi.GetWorkActivities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>("/odata/workorders({workorderId})/workactivities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkActivities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the specified work activity of a work order Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkActivity</returns>
        public SCServiceChannelServicesMessagingWorkordersWorkActivity GetWorkActivity(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkActivity> localVarResponse = GetWorkActivityWithHttpInfo(workactivityId, workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the specified work activity of a work order Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkActivity</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkActivity> GetWorkActivityWithHttpInfo(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workactivityId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workactivityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkActivitiesApi.GetWorkActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersWorkActivity>("/odata/workorders({workorderId})/workactivities({workactivityId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the specified work activity of a work order Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkActivity</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkActivity> GetWorkActivityAsync(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkActivity> localVarResponse = await GetWorkActivityWithHttpInfoAsync(workactivityId, workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the specified work activity of a work order Returns the specified work activity of a work order.              &lt;br /&gt;A work activity details information about the technician&#39;s work on a service request: the time when the technician started and finished their work, the type of activity they carried out, the number of technicians who rendered the service, and other details related to the labor performed.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to return.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to retrieve a work activity.</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkActivity)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkActivity>> GetWorkActivityWithHttpInfoAsync(int workactivityId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workactivityId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workactivityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkActivitiesApi.GetWorkActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersWorkActivity>("/odata/workorders({workorderId})/workactivities({workactivityId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a work activity for the specified work order Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdWorkactivities(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0)
        {
            WorkordersworkorderIdWorkactivitiesWithHttpInfo(workorderId, activityRequest);
        }

        /// <summary>
        /// Create a work activity for the specified work order Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdWorkactivitiesWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'activityRequest' is set
            if (activityRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'activityRequest' when calling WorkActivitiesApi->WorkordersworkorderIdWorkactivities");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = activityRequest;

            localVarRequestOptions.Operation = "WorkActivitiesApi.WorkordersworkorderIdWorkactivities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/workactivities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWorkactivities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a work activity for the specified work order Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdWorkactivitiesAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdWorkactivitiesWithHttpInfoAsync(workorderId, activityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a work activity for the specified work order Creates a new work activity for the specified work order. The work activity type can be either *Travel* or *Repair*. Note that custom types may be configured for a subscriber.              &lt;br /&gt;Before creating a work activity, please consider the following:               • You can create work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are creating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can specify the technician&#39;s name while creating a work activity. The users with extended permissions are:               • Subscribers that have the *Admin* role.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on).              &lt;br /&gt;Learn more about [creating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/workactivities                  {                     \&quot;WorkTypeId\&quot;: \&quot;1\&quot;,                            \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:15:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to create a work activity.</param>
        /// <param name="activityRequest">Request to create a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdWorkactivitiesWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'activityRequest' is set
            if (activityRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'activityRequest' when calling WorkActivitiesApi->WorkordersworkorderIdWorkactivities");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = activityRequest;

            localVarRequestOptions.Operation = "WorkActivitiesApi.WorkordersworkorderIdWorkactivities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/workactivities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWorkactivities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified work activity of a work order Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdWorkactivitiesworkactivityId(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0)
        {
            WorkordersworkorderIdWorkactivitiesworkactivityIdWithHttpInfo(workorderId, workactivityId, activityRequest);
        }

        /// <summary>
        /// Update the specified work activity of a work order Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdWorkactivitiesworkactivityIdWithHttpInfo(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'activityRequest' is set
            if (activityRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'activityRequest' when calling WorkActivitiesApi->WorkordersworkorderIdWorkactivitiesworkactivityId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workactivityId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workactivityId)); // path parameter
            localVarRequestOptions.Data = activityRequest;

            localVarRequestOptions.Operation = "WorkActivitiesApi.WorkordersworkorderIdWorkactivitiesworkactivityId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workorderId}/workactivities/{workactivityId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWorkactivitiesworkactivityId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified work activity of a work order Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdWorkactivitiesworkactivityIdAsync(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdWorkactivitiesworkactivityIdWithHttpInfoAsync(workorderId, workactivityId, activityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the specified work activity of a work order Updates the specified work activity of a work order by setting the check-in and check-out date and time values passed in the request.              &lt;br /&gt;Before updating a work activity, please consider the following:               • You can update work activities only for work orders in the *In Progress* primary status.               • The check-in date and time cannot be greater than the check-out date and time.               • The check-in date and time cannot be earlier than the scheduled date and time of the work order.               • The time range of the work activity you are updating cannot overlap the time ranges of existing work activities of the work order.               • The name will be set to the API caller name if the &#x60;name&#x60; value is not provided.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.              &lt;br /&gt;***Note:*** Only users with extended permissions can update the work activities created by other users along with updating the &#x60;name&#x60; parameter. The users with certain permissions are:               • Subscribers that have the *Admin* role. These users can update the work activities created both by subscribers and by providers.               • Providers that have the *Admin* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.               • Providers that have the *Business Owner / Management* role (with the *EditLaborItemsOnWoDetailsProvider* feature flag turned on). These users can update the work activities created by providers only.              &lt;br /&gt;Learn more about [updating a work activity](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/576258285/Updating+Service+Provider+Check-In+Out+Information) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/workactivities/{workactivityId}                  {                     \&quot;CheckInDate\&quot;: \&quot;2020-11-19T11:10:36.868Z\&quot;,                     \&quot;CheckOutDate\&quot;: \&quot;2020-11-19T12:30:36.868Z\&quot;,                     \&quot;Name\&quot;: \&quot;John Doe\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to update a work activity.</param>
        /// <param name="workactivityId">The unique numeric identifier of the work activity to update.</param>
        /// <param name="activityRequest">Request to update a work activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdWorkactivitiesworkactivityIdWithHttpInfoAsync(int workorderId, int workactivityId, SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'activityRequest' is set
            if (activityRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'activityRequest' when calling WorkActivitiesApi->WorkordersworkorderIdWorkactivitiesworkactivityId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workactivityId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workactivityId)); // path parameter
            localVarRequestOptions.Data = activityRequest;

            localVarRequestOptions.Operation = "WorkActivitiesApi.WorkordersworkorderIdWorkactivitiesworkactivityId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workorderId}/workactivities/{workactivityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWorkactivitiesworkactivityId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the specified work activities of a work order Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1(int workorderId, List<int> workactivityIds, int operationIndex = 0)
        {
            WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1WithHttpInfo(workorderId, workactivityIds);
        }

        /// <summary>
        /// Delete the specified work activities of a work order Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1WithHttpInfo(int workorderId, List<int> workactivityIds, int operationIndex = 0)
        {
            // verify the required parameter 'workactivityIds' is set
            if (workactivityIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workactivityIds' when calling WorkActivitiesApi->WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "workactivityIds", workactivityIds));

            localVarRequestOptions.Operation = "WorkActivitiesApi.WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/workorders/{workorderId}/workactivities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the specified work activities of a work order Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1Async(int workorderId, List<int> workactivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1WithHttpInfoAsync(workorderId, workactivityIds, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the specified work activities of a work order Delete one or more work activities of the specified work order. When you pass multiple work activity IDs, the request will succeed if at least one ID is valid.              &lt;br /&gt;***Note:*** Both subscribers and providers can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order for which you want to delete work activities.</param>
        /// <param name="workactivityIds">The unique numeric identifiers of the work activities to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1WithHttpInfoAsync(int workorderId, List<int> workactivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workactivityIds' is set
            if (workactivityIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workactivityIds' when calling WorkActivitiesApi->WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "workactivityIds", workactivityIds));

            localVarRequestOptions.Operation = "WorkActivitiesApi.WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/workorders/{workorderId}/workactivities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
