/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMliConfigurationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get MLI levels
        /// </summary>
        /// <remarks>
        /// Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;</returns>
        List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel> MliConfigurationLevels(int operationIndex = 0);

        /// <summary>
        /// Get MLI levels
        /// </summary>
        /// <remarks>
        /// Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>> MliConfigurationLevelsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get MLI level users
        /// </summary>
        /// <remarks>
        /// Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;</returns>
        List<SCServiceChannelServicesMessagingUserApiAssignedUser> MliConfigurationLevelslevelIdUsers(int levelId, int operationIndex = 0);

        /// <summary>
        /// Get MLI level users
        /// </summary>
        /// <remarks>
        /// Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingUserApiAssignedUser>> MliConfigurationLevelslevelIdUsersWithHttpInfo(int levelId, int operationIndex = 0);
        /// <summary>
        /// Add a user to an MLI level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MliConfigurationLevelslevelIdUsersuserId(int levelId, int userId, int operationIndex = 0);

        /// <summary>
        /// Add a user to an MLI level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserIdWithHttpInfo(int levelId, int userId, int operationIndex = 0);
        /// <summary>
        /// Add a location to a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MliConfigurationLevelslevelIdUsersuserIdLocationslocationId(int levelId, int userId, int locationId, int operationIndex = 0);

        /// <summary>
        /// Add a location to a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdWithHttpInfo(int levelId, int userId, int locationId, int operationIndex = 0);
        /// <summary>
        /// Remove a location from a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0(int levelId, int userId, int locationId, int operationIndex = 0);

        /// <summary>
        /// Remove a location from a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0WithHttpInfo(int levelId, int userId, int locationId, int operationIndex = 0);
        /// <summary>
        /// Remove a user from an MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MliConfigurationLevelslevelIdUsersuserId_0(int levelId, int userId, int operationIndex = 0);

        /// <summary>
        /// Remove a user from an MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserId_0WithHttpInfo(int levelId, int userId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMliConfigurationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get MLI levels
        /// </summary>
        /// <remarks>
        /// Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>> MliConfigurationLevelsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get MLI levels
        /// </summary>
        /// <remarks>
        /// Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>>> MliConfigurationLevelsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get MLI level users
        /// </summary>
        /// <remarks>
        /// Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingUserApiAssignedUser>> MliConfigurationLevelslevelIdUsersAsync(int levelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get MLI level users
        /// </summary>
        /// <remarks>
        /// Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingUserApiAssignedUser>>> MliConfigurationLevelslevelIdUsersWithHttpInfoAsync(int levelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a user to an MLI level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserIdAsync(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a user to an MLI level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserIdWithHttpInfoAsync(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a location to a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdAsync(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a location to a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdWithHttpInfoAsync(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a location from a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0Async(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a location from a user’s MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0WithHttpInfoAsync(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a user from an MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserId_0Async(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a user from an MLI level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserId_0WithHttpInfoAsync(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMliConfigurationApi : IMliConfigurationApiSync, IMliConfigurationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MliConfigurationApi : IMliConfigurationApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MliConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MliConfigurationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MliConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MliConfigurationApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MliConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MliConfigurationApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MliConfigurationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MliConfigurationApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get MLI levels Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;</returns>
        public List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel> MliConfigurationLevels(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>> localVarResponse = MliConfigurationLevelsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MLI levels Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>> MliConfigurationLevelsWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>>("/mliConfiguration/Levels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MLI levels Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>> MliConfigurationLevelsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>> localVarResponse = await MliConfigurationLevelsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MLI levels Returns IDs and names of all MLI levels of the current subscriber.              &lt;br /&gt;Learn more about [MLI levels configuration](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/601555312/Configuring+MLI+Levels) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingMliConfigurationApiMLILevel&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>>> MliConfigurationLevelsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingMliConfigurationApiMLILevel>>("/mliConfiguration/Levels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MLI level users Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;</returns>
        public List<SCServiceChannelServicesMessagingUserApiAssignedUser> MliConfigurationLevelslevelIdUsers(int levelId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingUserApiAssignedUser>> localVarResponse = MliConfigurationLevelslevelIdUsersWithHttpInfo(levelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MLI level users Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingUserApiAssignedUser>> MliConfigurationLevelslevelIdUsersWithHttpInfo(int levelId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingUserApiAssignedUser>>("/mliConfiguration/Levels/{levelId}/Users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MLI level users Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingUserApiAssignedUser>> MliConfigurationLevelslevelIdUsersAsync(int levelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingUserApiAssignedUser>> localVarResponse = await MliConfigurationLevelslevelIdUsersWithHttpInfoAsync(levelId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MLI level users Returns the users assigned to the specified level. The response body is empty if no user has been assigned to this level.              &lt;br /&gt;You can use the [GET /mliConfiguration/Levels](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/GETv3_mliConfiguration_Levels) method to get the MLI levels IDs. Send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId_) request to assign users to the MLI level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingUserApiAssignedUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingUserApiAssignedUser>>> MliConfigurationLevelslevelIdUsersWithHttpInfoAsync(int levelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingUserApiAssignedUser>>("/mliConfiguration/Levels/{levelId}/Users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a user to an MLI level Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MliConfigurationLevelslevelIdUsersuserId(int levelId, int userId, int operationIndex = 0)
        {
            MliConfigurationLevelslevelIdUsersuserIdWithHttpInfo(levelId, userId);
        }

        /// <summary>
        /// Add a user to an MLI level Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserIdWithHttpInfo(int levelId, int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/MliConfiguration/Levels/{levelId}/Users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a user to an MLI level Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserIdAsync(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MliConfigurationLevelslevelIdUsersuserIdWithHttpInfoAsync(levelId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a user to an MLI level Assigns a user to an existing MLI level. Get users’ IDs by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;You can assign a user to an existing location by using the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLI level. If a user should be assigned to another MLI level, you first need to [remove this user from the MLI level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_mliConfiguration_Levels__levelId__Users__userId_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserIdWithHttpInfoAsync(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/MliConfiguration/Levels/{levelId}/Users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location to a user’s MLI level Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MliConfigurationLevelslevelIdUsersuserIdLocationslocationId(int levelId, int userId, int locationId, int operationIndex = 0)
        {
            MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdWithHttpInfo(levelId, userId, locationId);
        }

        /// <summary>
        /// Add a location to a user’s MLI level Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdWithHttpInfo(int levelId, int userId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserIdLocationslocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserIdLocationslocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location to a user’s MLI level Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdAsync(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdWithHttpInfoAsync(levelId, userId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a location to a user’s MLI level Assigns the specified location to a particular user and user’s MLI level. A location can be removed from a user by sending the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserIdLocationslocationIdWithHttpInfoAsync(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserIdLocationslocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserIdLocationslocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a location from a user’s MLI level Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0(int levelId, int userId, int locationId, int operationIndex = 0)
        {
            MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0WithHttpInfo(levelId, userId, locationId);
        }

        /// <summary>
        /// Remove a location from a user’s MLI level Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0WithHttpInfo(int levelId, int userId, int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a location from a user’s MLI level Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0Async(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0WithHttpInfoAsync(levelId, userId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a location from a user’s MLI level Removes the specified location from a particular user and MLI level. To assign a location to a user and MLI level, send the [POST /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/POSTv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="locationId">Unique numeric identifier of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0WithHttpInfoAsync(int levelId, int userId, int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserIdLocationslocationId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from an MLI level Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MliConfigurationLevelslevelIdUsersuserId_0(int levelId, int userId, int operationIndex = 0)
        {
            MliConfigurationLevelslevelIdUsersuserId_0WithHttpInfo(levelId, userId);
        }

        /// <summary>
        /// Remove a user from an MLI level Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> MliConfigurationLevelslevelIdUsersuserId_0WithHttpInfo(int levelId, int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/mliConfiguration/Levels/{levelId}/Users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from an MLI level Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MliConfigurationLevelslevelIdUsersuserId_0Async(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MliConfigurationLevelslevelIdUsersuserId_0WithHttpInfoAsync(levelId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a user from an MLI level Removes the specified user from a particular MLI level. To unassign a user from an existing location, send the [DELETE /MliConfiguration/Levels/{levelId}/Users/{userId}/Locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/MliConfiguration/DELETEv3_MliConfiguration_Levels__levelId__Users__userId__Locations__locationId_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelId">Numeric identifier of the MLI level.</param>
        /// <param name="userId">Unique numeric identifier of the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> MliConfigurationLevelslevelIdUsersuserId_0WithHttpInfoAsync(int levelId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("levelId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(levelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "MliConfigurationApi.MliConfigurationLevelslevelIdUsersuserId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/mliConfiguration/Levels/{levelId}/Users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MliConfigurationLevelslevelIdUsersuserId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
