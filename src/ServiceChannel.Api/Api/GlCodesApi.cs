/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlCodesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a GL Code
        /// </summary>
        /// <remarks>
        /// Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add a GL Code
        /// </summary>
        /// <remarks>
        /// Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete a GL Code
        /// </summary>
        /// <remarks>
        /// Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete a GL Code
        /// </summary>
        /// <remarks>
        /// Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Approval codes
        /// </summary>
        /// <remarks>
        /// Gets the list of approval codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse</returns>
        SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory(int locationId, string category, int operationIndex = 0);

        /// <summary>
        /// Get Approval codes
        /// </summary>
        /// <remarks>
        /// Gets the list of approval codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse> GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryWithHttpInfo(int locationId, string category, int operationIndex = 0);
        /// <summary>
        /// Get a GL Code
        /// </summary>
        /// <remarks>
        /// Get a gl code from trade, category, location id.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage</returns>
        SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory(int locationId, string trade, string category, int operationIndex = 0);

        /// <summary>
        /// Get a GL Code
        /// </summary>
        /// <remarks>
        /// Get a gl code from trade, category, location id.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage</returns>
        ApiResponse<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage> GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryWithHttpInfo(int locationId, string trade, string category, int operationIndex = 0);
        /// <summary>
        /// Retrieve Gl Codes
        /// </summary>
        /// <remarks>
        /// Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse</returns>
        SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse GlCodesRetrieveGlCodestradetradecategorycategorylocationlocation(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Gl Codes
        /// </summary>
        /// <remarks>
        /// Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse> GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationWithHttpInfo(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update a GL Code
        /// </summary>
        /// <remarks>
        /// Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update a GL Code
        /// </summary>
        /// <remarks>
        /// Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlCodesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a GL Code
        /// </summary>
        /// <remarks>
        /// Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a GL Code
        /// </summary>
        /// <remarks>
        /// Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a GL Code
        /// </summary>
        /// <remarks>
        /// Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a GL Code
        /// </summary>
        /// <remarks>
        /// Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Approval codes
        /// </summary>
        /// <remarks>
        /// Gets the list of approval codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse> GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryAsync(int locationId, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Approval codes
        /// </summary>
        /// <remarks>
        /// Gets the list of approval codes.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse>> GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryWithHttpInfoAsync(int locationId, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a GL Code
        /// </summary>
        /// <remarks>
        /// Get a gl code from trade, category, location id.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage> GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryAsync(int locationId, string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a GL Code
        /// </summary>
        /// <remarks>
        /// Get a gl code from trade, category, location id.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage>> GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryWithHttpInfoAsync(int locationId, string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Gl Codes
        /// </summary>
        /// <remarks>
        /// Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse> GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationAsync(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Gl Codes
        /// </summary>
        /// <remarks>
        /// Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse>> GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationWithHttpInfoAsync(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a GL Code
        /// </summary>
        /// <remarks>
        /// Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a GL Code
        /// </summary>
        /// <remarks>
        /// Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlCodesApi : IGlCodesApiSync, IGlCodesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlCodesApi : IGlCodesApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlCodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlCodesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlCodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlCodesApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlCodesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlCodesApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlCodesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GlCodesApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a GL Code Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(glCode, trade, category, location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a GL Code Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'glCode' is set
            if (glCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'glCode' when calling GlCodesApi->GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "glCode", glCode));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/GlCodes/CreateGlCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a GL Code Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(glCode, trade, category, location, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a GL Code Creates a GL Code with a new trade, category, or location.              &lt;br /&gt;Send the [GET /GlCodes/RetrieveGlCodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/GETv3_GlCodes_RetrieveGlCodes_trade__trade__category__category__location__location_) request to get the list of GL Codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'glCode' is set
            if (glCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'glCode' when calling GlCodesApi->GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "glCode", glCode));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/GlCodes/CreateGlCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesCreateGlCodeglCodeglCodetradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a GL Code Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(glCode, trade, category, location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a GL Code Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'glCode' is set
            if (glCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'glCode' when calling GlCodesApi->GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "glCode", glCode));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/GlCodes/DeleteGlCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a GL Code Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(glCode, trade, category, location, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a GL Code Removes the specified GL Code from the subscriber’s system. You need to specify all code parameters to delete it.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'glCode' is set
            if (glCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'glCode' when calling GlCodesApi->GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "glCode", glCode));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/GlCodes/DeleteGlCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesDeleteGlCodeglCodeglCodetradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Approval codes Gets the list of approval codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse</returns>
        public SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory(int locationId, string category, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse> localVarResponse = GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryWithHttpInfo(locationId, category);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Approval codes Gets the list of approval codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse> GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryWithHttpInfo(int locationId, string category, int operationIndex = 0)
        {
            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling GlCodesApi->GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse>("/GlCodes/GetApprovalCodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Approval codes Gets the list of approval codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse> GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryAsync(int locationId, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse> localVarResponse = await GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryWithHttpInfoAsync(locationId, category, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Approval codes Gets the list of approval codes.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location Id. Numeric id of location.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse>> GlCodesGetApprovalCodeslocationIdlocationIdcategorycategoryWithHttpInfoAsync(int locationId, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling GlCodesApi->GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingApprovalCodesGetApprovalCodesWithOptionsResponse>("/GlCodes/GetApprovalCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesGetApprovalCodeslocationIdlocationIdcategorycategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a GL Code Get a gl code from trade, category, location id.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage</returns>
        public SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory(int locationId, string trade, string category, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage> localVarResponse = GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryWithHttpInfo(locationId, trade, category);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a GL Code Get a gl code from trade, category, location id.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage> GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryWithHttpInfo(int locationId, string trade, string category, int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling GlCodesApi->GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling GlCodesApi->GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage>("/GlCodes/GetGlCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a GL Code Get a gl code from trade, category, location id.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage> GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryAsync(int locationId, string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage> localVarResponse = await GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryWithHttpInfoAsync(locationId, trade, category, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a GL Code Get a gl code from trade, category, location id.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location ID. Numeric id of location.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters.</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage>> GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategoryWithHttpInfoAsync(int locationId, string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling GlCodesApi->GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling GlCodesApi->GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingGlCodeGetGlCodeResponseMessage>("/GlCodes/GetGlCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesGetGlCodelocationIdlocationIdtradetradecategorycategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Gl Codes Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse</returns>
        public SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse GlCodesRetrieveGlCodestradetradecategorycategorylocationlocation(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse> localVarResponse = GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationWithHttpInfo(trade, category, location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Gl Codes Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse> GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationWithHttpInfo(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesRetrieveGlCodestradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse>("/GlCodes/RetrieveGlCodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesRetrieveGlCodestradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Gl Codes Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse> GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationAsync(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse> localVarResponse = await GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationWithHttpInfoAsync(trade, category, location, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Gl Codes Returns GL Codes for the authorized subscriber.              &lt;br /&gt;You can filter the codes by &#x60;trade&#x60;, &#x60;category&#x60;, and &#x60;location&#x60;.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how to manage GL Codes](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/557645834/Managing+GL+Codes).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse>> GlCodesRetrieveGlCodestradetradecategorycategorylocationlocationWithHttpInfoAsync(string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesRetrieveGlCodestradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingGlCodeRetrieveGlCodesResponse>("/GlCodes/RetrieveGlCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesRetrieveGlCodestradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a GL Code Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(glCode, trade, category, location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a GL Code Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfo(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'glCode' is set
            if (glCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'glCode' when calling GlCodesApi->GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "glCode", glCode));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/GlCodes/UpdateGlCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a GL Code Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(glCode, trade, category, location, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a GL Code Updates a GL Code number leaving the trade, category, and/or location of the code unchanged. You need to specify all code parameters to update it.              &lt;br /&gt;Use the [POST /GlCodes/CreateGlCode](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/GlCodes/POSTv3_GlCodes_CreateGlCode_glCode__glCode__trade__trade__category__category__location__location_) method to create a new GL Code.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glCode">Numeric identifier of a GL Code.</param>
        /// <param name="trade">Trade name. A trade is an area of work for which a service is performed, such as LIGHTING, ALARMS, or ELECTRICAL. Maximum is 80 characters. (optional)</param>
        /// <param name="category">Category name. A category is the overall classification of a work order, such as MAINTENANCE, REPAIR, or WARRANTY. Maximum is 50 characters. (optional)</param>
        /// <param name="location">Store ID. The numeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocationWithHttpInfoAsync(string glCode, string? trade = default(string?), string? category = default(string?), string? location = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'glCode' is set
            if (glCode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'glCode' when calling GlCodesApi->GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "glCode", glCode));
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }

            localVarRequestOptions.Operation = "GlCodesApi.GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/GlCodes/UpdateGlCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlCodesUpdateGlCodeglCodeglCodetradetradecategorycategorylocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
