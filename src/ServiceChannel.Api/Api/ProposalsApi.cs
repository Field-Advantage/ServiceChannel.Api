/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProposalsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Proposal Categories
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Categories
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;</returns>
        List<SCServiceChannelServicesMessagingProposalsProposalCategory> GetProposalCategories(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Proposal Categories
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Categories
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalCategory>> GetProposalCategoriesWithHttpInfo(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        List<SCServiceChannelServicesMessagingProposalsProposalInfo> GetProposals(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Rfp Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        List<SCServiceChannelServicesMessagingProposalsProposalInfo> GetProposalsForRfp(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Rfp Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsForRfpWithHttpInfo(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add a user to an MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName(string userName, string levelName, int operationIndex = 0);

        /// <summary>
        /// Add a user to an MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameWithHttpInfo(string userName, string levelName, int operationIndex = 0);
        /// <summary>
        /// Retrieve proposal approval reasons
        /// </summary>
        /// <remarks>
        /// Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsApprovalReasonsTradeTradeCategoryCategory(string trade, string category, int operationIndex = 0);

        /// <summary>
        /// Retrieve proposal approval reasons
        /// </summary>
        /// <remarks>
        /// Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsApprovalReasonsTradeTradeCategoryCategoryWithHttpInfo(string trade, string category, int operationIndex = 0);
        /// <summary>
        /// Add a location to a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation(string userName, string location, int operationIndex = 0);

        /// <summary>
        /// Add a location to a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationWithHttpInfo(string userName, string location, int operationIndex = 0);
        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId(int proposalId, int projectId, int operationIndex = 0);

        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdWithHttpInfo(int proposalId, int projectId, int operationIndex = 0);
        /// <summary>
        /// Retrieve the reasons for assigning a proposal
        /// </summary>
        /// <remarks>
        /// Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsAssignReasonsTradeTradeCategoryCategory(string trade, string? category = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve the reasons for assigning a proposal
        /// </summary>
        /// <remarks>
        /// Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsAssignReasonsTradeTradeCategoryCategoryWithHttpInfo(string trade, string? category = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get MLP levels for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsGetMlpLevelsForSubscriber(int operationIndex = 0);

        /// <summary>
        /// Get MLP levels for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsGetMlpLevelsForSubscriberWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsGetProposals(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0);

        /// <summary>
        /// Get Proposals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsGetProposalsWithHttpInfo(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber(int trackingNumber, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0);
        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber(int trackingNumber, int operationIndex = 0);

        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0);
        /// <summary>
        /// Retrieve proposals that can be reject
        /// </summary>
        /// <remarks>
        /// Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse> ProposalsGetProposalsToRejecttrackingNumbertrackingNumber(int trackingNumber, int operationIndex = 0);

        /// <summary>
        /// Retrieve proposals that can be reject
        /// </summary>
        /// <remarks>
        /// Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsGetProposalsToRejecttrackingNumbertrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0);
        /// <summary>
        /// Get users by level name
        /// </summary>
        /// <remarks>
        /// Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsGetUsersByLevelNamelevelNamelevelName(string levelName, int operationIndex = 0);

        /// <summary>
        /// Get users by level name
        /// </summary>
        /// <remarks>
        /// Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsGetUsersByLevelNamelevelNamelevelNameWithHttpInfo(string levelName, int operationIndex = 0);
        /// <summary>
        /// Get proposal actions by ID
        /// </summary>
        /// <remarks>
        /// Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1(List<int> proposalIds, int operationIndex = 0);

        /// <summary>
        /// Get proposal actions by ID
        /// </summary>
        /// <remarks>
        /// Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1WithHttpInfo(List<int> proposalIds, int operationIndex = 0);
        /// <summary>
        /// Reject proposals
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsProposalsReject(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0);

        /// <summary>
        /// Reject proposals
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsProposalsRejectWithHttpInfo(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0);
        /// <summary>
        /// Retrieve proposal rejection reasons
        /// </summary>
        /// <remarks>
        /// Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsRejectionReasons(int operationIndex = 0);

        /// <summary>
        /// Retrieve proposal rejection reasons
        /// </summary>
        /// <remarks>
        /// Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsRejectionReasonsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Remove a location from a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation(string userName, string location, int operationIndex = 0);

        /// <summary>
        /// Remove a location from a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationWithHttpInfo(string userName, string location, int operationIndex = 0);
        /// <summary>
        /// Whether the user can be deleted from MLP level.
        /// </summary>
        /// <remarks>
        /// Whether the user can be deleted from MLP level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsRemoveMlpUserValidationAsyncuserIduserId(int userId, int operationIndex = 0);

        /// <summary>
        /// Whether the user can be deleted from MLP level.
        /// </summary>
        /// <remarks>
        /// Whether the user can be deleted from MLP level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsRemoveMlpUserValidationAsyncuserIduserIdWithHttpInfo(int userId, int operationIndex = 0);
        /// <summary>
        /// Remove a user from an MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsRemoveUserFromMlpLeveluserNameuserName(string userName, int operationIndex = 0);

        /// <summary>
        /// Remove a user from an MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsRemoveUserFromMlpLeveluserNameuserNameWithHttpInfo(string userName, int operationIndex = 0);
        /// <summary>
        /// Retrieve statistics on RFPs and proposals
        /// </summary>
        /// <remarks>
        /// Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse ProposalsStatisticsdaysPerioddaysPeriod(int? daysPeriod = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve statistics on RFPs and proposals
        /// </summary>
        /// <remarks>
        /// Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsStatisticsdaysPerioddaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int operationIndex = 0);
        /// <summary>
        /// Approve a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdApprove(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0);

        /// <summary>
        /// Approve a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdApproveWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0);
        /// <summary>
        /// Assign a proposal to a user
        /// </summary>
        /// <remarks>
        /// Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdAssignUser(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0);

        /// <summary>
        /// Assign a proposal to a user
        /// </summary>
        /// <remarks>
        /// Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdAssignUserWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0);
        /// <summary>
        /// Attach a work order to a proposal
        /// </summary>
        /// <remarks>
        /// Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Attach a work order to a proposal
        /// </summary>
        /// <remarks>
        /// Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleWithHttpInfo(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Escalate a proposal
        /// </summary>
        /// <remarks>
        /// Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdEscalate(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0);

        /// <summary>
        /// Escalate a proposal
        /// </summary>
        /// <remarks>
        /// Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdEscalateWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0);
        /// <summary>
        /// Put a proposal on hold
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdOnhold(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0);

        /// <summary>
        /// Put a proposal on hold
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdOnholdWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0);
        /// <summary>
        /// Open a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdOpen(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0);

        /// <summary>
        /// Open a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdOpenWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0);
        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection
        /// </summary>
        /// <remarks>
        /// Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse> ProposalsproposalIdRecipients(int proposalId, int operationIndex = 0);

        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection
        /// </summary>
        /// <remarks>
        /// Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsproposalIdRecipientsWithHttpInfo(int proposalId, int operationIndex = 0);
        /// <summary>
        /// Reject a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Reject a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve users who can be assigned a proposal
        /// </summary>
        /// <remarks>
        /// Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingUsersUserInfo</returns>
        SCServiceChannelServicesMessagingUsersUserInfo ProposalsproposalIdUsers(int proposalId, int operationIndex = 0);

        /// <summary>
        /// Retrieve users who can be assigned a proposal
        /// </summary>
        /// <remarks>
        /// Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingUsersUserInfo</returns>
        ApiResponse<SCServiceChannelServicesMessagingUsersUserInfo> ProposalsproposalIdUsersWithHttpInfo(int proposalId, int operationIndex = 0);
        /// <summary>
        /// Validate a proposal
        /// </summary>
        /// <remarks>
        /// Checks if the specified proposal exists for the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsproposalIdValidate(int proposalId, int operationIndex = 0);

        /// <summary>
        /// Validate a proposal
        /// </summary>
        /// <remarks>
        /// Checks if the specified proposal exists for the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsproposalIdValidateWithHttpInfo(int proposalId, int operationIndex = 0);
        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <remarks>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ProposalsrfpId(int rfpId, int operationIndex = 0);

        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <remarks>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProposalsrfpIdWithHttpInfo(int rfpId, int operationIndex = 0);
        /// <summary>
        /// Retrieve proposals
        /// </summary>
        /// <remarks>
        /// Returns proposals based on the specified input parameters for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse ProposalsstatusesstatusesassignedToassignedToskipskiptoptop(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve proposals
        /// </summary>
        /// <remarks>
        /// Returns proposals based on the specified input parameters for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsstatusesstatusesassignedToassignedToskipskiptoptopWithHttpInfo(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProposalsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Proposal Categories
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Categories
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingProposalsProposalCategory>> GetProposalCategoriesAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Proposal Categories
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Categories
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalCategory>>> GetProposalCategoriesWithHttpInfoAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>> GetProposalsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Rfp Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsForRfpAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Rfp Proposals
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>> GetProposalsForRfpWithHttpInfoAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a user to an MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameAsync(string userName, string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a user to an MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameWithHttpInfoAsync(string userName, string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve proposal approval reasons
        /// </summary>
        /// <remarks>
        /// Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsApprovalReasonsTradeTradeCategoryCategoryAsync(string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve proposal approval reasons
        /// </summary>
        /// <remarks>
        /// Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsApprovalReasonsTradeTradeCategoryCategoryWithHttpInfoAsync(string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a location to a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a location to a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationWithHttpInfoAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdAsync(int proposalId, int projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdWithHttpInfoAsync(int proposalId, int projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the reasons for assigning a proposal
        /// </summary>
        /// <remarks>
        /// Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsAssignReasonsTradeTradeCategoryCategoryAsync(string trade, string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the reasons for assigning a proposal
        /// </summary>
        /// <remarks>
        /// Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsAssignReasonsTradeTradeCategoryCategoryWithHttpInfoAsync(string trade, string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get MLP levels for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsGetMlpLevelsForSubscriberAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get MLP levels for a subscriber
        /// </summary>
        /// <remarks>
        /// Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsGetMlpLevelsForSubscriberWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Proposals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsGetProposalsAsync(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Proposals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsGetProposalsWithHttpInfoAsync(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve proposals that can be reject
        /// </summary>
        /// <remarks>
        /// Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsGetProposalsToRejecttrackingNumbertrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve proposals that can be reject
        /// </summary>
        /// <remarks>
        /// Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>> ProposalsGetProposalsToRejecttrackingNumbertrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get users by level name
        /// </summary>
        /// <remarks>
        /// Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsGetUsersByLevelNamelevelNamelevelNameAsync(string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get users by level name
        /// </summary>
        /// <remarks>
        /// Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsGetUsersByLevelNamelevelNamelevelNameWithHttpInfoAsync(string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get proposal actions by ID
        /// </summary>
        /// <remarks>
        /// Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1Async(List<int> proposalIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get proposal actions by ID
        /// </summary>
        /// <remarks>
        /// Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1WithHttpInfoAsync(List<int> proposalIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject proposals
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsProposalsRejectAsync(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject proposals
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsProposalsRejectWithHttpInfoAsync(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve proposal rejection reasons
        /// </summary>
        /// <remarks>
        /// Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsRejectionReasonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve proposal rejection reasons
        /// </summary>
        /// <remarks>
        /// Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsRejectionReasonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a location from a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a location from a user’s MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationWithHttpInfoAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Whether the user can be deleted from MLP level.
        /// </summary>
        /// <remarks>
        /// Whether the user can be deleted from MLP level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsRemoveMlpUserValidationAsyncuserIduserIdAsync(int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Whether the user can be deleted from MLP level.
        /// </summary>
        /// <remarks>
        /// Whether the user can be deleted from MLP level.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsRemoveMlpUserValidationAsyncuserIduserIdWithHttpInfoAsync(int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a user from an MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsRemoveUserFromMlpLeveluserNameuserNameAsync(string userName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a user from an MLP level
        /// </summary>
        /// <remarks>
        /// Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsRemoveUserFromMlpLeveluserNameuserNameWithHttpInfoAsync(string userName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve statistics on RFPs and proposals
        /// </summary>
        /// <remarks>
        /// Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsStatisticsdaysPerioddaysPeriodAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve statistics on RFPs and proposals
        /// </summary>
        /// <remarks>
        /// Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>> ProposalsStatisticsdaysPerioddaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Approve a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdApproveAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdApproveWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign a proposal to a user
        /// </summary>
        /// <remarks>
        /// Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdAssignUserAsync(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign a proposal to a user
        /// </summary>
        /// <remarks>
        /// Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdAssignUserWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach a work order to a proposal
        /// </summary>
        /// <remarks>
        /// Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleAsync(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach a work order to a proposal
        /// </summary>
        /// <remarks>
        /// Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleWithHttpInfoAsync(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Escalate a proposal
        /// </summary>
        /// <remarks>
        /// Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdEscalateAsync(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Escalate a proposal
        /// </summary>
        /// <remarks>
        /// Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdEscalateWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Put a proposal on hold
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdOnholdAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Put a proposal on hold
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdOnholdWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Open a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdOpenAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Open a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdOpenWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection
        /// </summary>
        /// <remarks>
        /// Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsproposalIdRecipientsAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection
        /// </summary>
        /// <remarks>
        /// Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>> ProposalsproposalIdRecipientsWithHttpInfoAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject a proposal
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve users who can be assigned a proposal
        /// </summary>
        /// <remarks>
        /// Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingUsersUserInfo</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingUsersUserInfo> ProposalsproposalIdUsersAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve users who can be assigned a proposal
        /// </summary>
        /// <remarks>
        /// Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingUsersUserInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingUsersUserInfo>> ProposalsproposalIdUsersWithHttpInfoAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate a proposal
        /// </summary>
        /// <remarks>
        /// Checks if the specified proposal exists for the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsproposalIdValidateAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate a proposal
        /// </summary>
        /// <remarks>
        /// Checks if the specified proposal exists for the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsproposalIdValidateWithHttpInfoAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <remarks>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProposalsrfpIdAsync(int rfpId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <remarks>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProposalsrfpIdWithHttpInfoAsync(int rfpId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve proposals
        /// </summary>
        /// <remarks>
        /// Returns proposals based on the specified input parameters for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsstatusesstatusesassignedToassignedToskipskiptoptopAsync(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve proposals
        /// </summary>
        /// <remarks>
        /// Returns proposals based on the specified input parameters for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>> ProposalsstatusesstatusesassignedToassignedToskipskiptoptopWithHttpInfoAsync(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProposalsApi : IProposalsApiSync, IProposalsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProposalsApi : IProposalsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProposalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProposalsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProposalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProposalsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProposalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProposalsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProposalsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProposalsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Proposal Categories Retrieve Proposal Categories
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;</returns>
        public List<SCServiceChannelServicesMessagingProposalsProposalCategory> GetProposalCategories(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalCategory>> localVarResponse = GetProposalCategoriesWithHttpInfo(proposalId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Proposal Categories Retrieve Proposal Categories
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalCategory>> GetProposalCategoriesWithHttpInfo(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "ProposalsApi.GetProposalCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingProposalsProposalCategory>>("/odata/proposals({proposalId})/Service.Categories()", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Proposal Categories Retrieve Proposal Categories
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingProposalsProposalCategory>> GetProposalCategoriesAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalCategory>> localVarResponse = await GetProposalCategoriesWithHttpInfoAsync(proposalId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Proposal Categories Retrieve Proposal Categories
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingProposalsProposalCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalCategory>>> GetProposalCategoriesWithHttpInfoAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "ProposalsApi.GetProposalCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingProposalsProposalCategory>>("/odata/proposals({proposalId})/Service.Categories()", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Proposals Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        public List<SCServiceChannelServicesMessagingProposalsProposalInfo> GetProposals(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> localVarResponse = GetProposalsWithHttpInfo(expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Proposals Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "ProposalsApi.GetProposals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>("/odata/proposals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Proposals Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> localVarResponse = await GetProposalsWithHttpInfoAsync(expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Proposals Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>> GetProposalsWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "ProposalsApi.GetProposals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>("/odata/proposals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Rfp Proposals Retrieve Rfp Proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        public List<SCServiceChannelServicesMessagingProposalsProposalInfo> GetProposalsForRfp(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> localVarResponse = GetProposalsForRfpWithHttpInfo(rfpId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfp Proposals Retrieve Rfp Proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsForRfpWithHttpInfo(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "ProposalsApi.GetProposalsForRfp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>("/odata/rfps({rfpId})/proposals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalsForRfp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Rfp Proposals Retrieve Rfp Proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> GetProposalsForRfpAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>> localVarResponse = await GetProposalsForRfpWithHttpInfoAsync(rfpId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfp Proposals Retrieve Rfp Proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingProposalsProposalInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>> GetProposalsForRfpWithHttpInfoAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "ProposalsApi.GetProposalsForRfp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>("/odata/rfps({rfpId})/proposals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalsForRfp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a user to an MLP level Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName(string userName, string levelName, int operationIndex = 0)
        {
            ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameWithHttpInfo(userName, levelName);
        }

        /// <summary>
        /// Add a user to an MLP level Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameWithHttpInfo(string userName, string levelName, int operationIndex = 0)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName");
            }

            // verify the required parameter 'levelName' is set
            if (levelName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'levelName' when calling ProposalsApi->ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "levelName", levelName));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/AddUserToMlpLevel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a user to an MLP level Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameAsync(string userName, string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameWithHttpInfoAsync(userName, levelName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a user to an MLP level Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameWithHttpInfoAsync(string userName, string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName");
            }

            // verify the required parameter 'levelName' is set
            if (levelName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'levelName' when calling ProposalsApi->ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "levelName", levelName));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/AddUserToMlpLevel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposal approval reasons Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsApprovalReasonsTradeTradeCategoryCategory(string trade, string category, int operationIndex = 0)
        {
            ProposalsApprovalReasonsTradeTradeCategoryCategoryWithHttpInfo(trade, category);
        }

        /// <summary>
        /// Retrieve proposal approval reasons Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsApprovalReasonsTradeTradeCategoryCategoryWithHttpInfo(string trade, string category, int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ProposalsApi->ProposalsApprovalReasonsTradeTradeCategoryCategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling ProposalsApi->ProposalsApprovalReasonsTradeTradeCategoryCategory");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Category", category));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsApprovalReasonsTradeTradeCategoryCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/ApprovalReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsApprovalReasonsTradeTradeCategoryCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposal approval reasons Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsApprovalReasonsTradeTradeCategoryCategoryAsync(string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsApprovalReasonsTradeTradeCategoryCategoryWithHttpInfoAsync(trade, category, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve proposal approval reasons Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsApprovalReasonsTradeTradeCategoryCategoryWithHttpInfoAsync(string trade, string category, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ProposalsApi->ProposalsApprovalReasonsTradeTradeCategoryCategory");
            }

            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'category' when calling ProposalsApi->ProposalsApprovalReasonsTradeTradeCategoryCategory");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Trade", trade));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Category", category));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsApprovalReasonsTradeTradeCategoryCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/ApprovalReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsApprovalReasonsTradeTradeCategoryCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location to a user’s MLP level Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation(string userName, string location, int operationIndex = 0)
        {
            ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationWithHttpInfo(userName, location);
        }

        /// <summary>
        /// Add a location to a user’s MLP level Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationWithHttpInfo(string userName, string location, int operationIndex = 0)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation");
            }

            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'location' when calling ProposalsApi->ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/AssignLocationToMlpUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a location to a user’s MLP level Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationWithHttpInfoAsync(userName, location, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a location to a user’s MLP level Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationWithHttpInfoAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation");
            }

            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'location' when calling ProposalsApi->ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/AssignLocationToMlpUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId(int proposalId, int projectId, int operationIndex = 0)
        {
            ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdWithHttpInfo(proposalId, projectId);
        }

        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdWithHttpInfo(int proposalId, int projectId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "proposalId", proposalId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "projectId", projectId));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/AssignProjectIdToProposalAndRfp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdAsync(int proposalId, int projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdWithHttpInfoAsync(proposalId, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdWithHttpInfoAsync(int proposalId, int projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "proposalId", proposalId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "projectId", projectId));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/AssignProjectIdToProposalAndRfp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the reasons for assigning a proposal Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsAssignReasonsTradeTradeCategoryCategory(string trade, string? category = default(string?), int operationIndex = 0)
        {
            ProposalsAssignReasonsTradeTradeCategoryCategoryWithHttpInfo(trade, category);
        }

        /// <summary>
        /// Retrieve the reasons for assigning a proposal Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsAssignReasonsTradeTradeCategoryCategoryWithHttpInfo(string trade, string? category = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ProposalsApi->ProposalsAssignReasonsTradeTradeCategoryCategory");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Trade", trade));
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Category", category));
            }

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAssignReasonsTradeTradeCategoryCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/AssignReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAssignReasonsTradeTradeCategoryCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the reasons for assigning a proposal Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsAssignReasonsTradeTradeCategoryCategoryAsync(string trade, string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsAssignReasonsTradeTradeCategoryCategoryWithHttpInfoAsync(trade, category, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve the reasons for assigning a proposal Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsAssignReasonsTradeTradeCategoryCategoryWithHttpInfoAsync(string trade, string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling ProposalsApi->ProposalsAssignReasonsTradeTradeCategoryCategory");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Trade", trade));
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "Category", category));
            }

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsAssignReasonsTradeTradeCategoryCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/AssignReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsAssignReasonsTradeTradeCategoryCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MLP levels for a subscriber Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsGetMlpLevelsForSubscriber(int operationIndex = 0)
        {
            ProposalsGetMlpLevelsForSubscriberWithHttpInfo();
        }

        /// <summary>
        /// Get MLP levels for a subscriber Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsGetMlpLevelsForSubscriberWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetMlpLevelsForSubscriber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/GetMlpLevelsForSubscriber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetMlpLevelsForSubscriber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MLP levels for a subscriber Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsGetMlpLevelsForSubscriberAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsGetMlpLevelsForSubscriberWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get MLP levels for a subscriber Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsGetMlpLevelsForSubscriberWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetMlpLevelsForSubscriber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/GetMlpLevelsForSubscriber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetMlpLevelsForSubscriber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Proposals 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsGetProposals(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0)
        {
            ProposalsGetProposalsWithHttpInfo(proposalModel);
        }

        /// <summary>
        /// Get Proposals 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsGetProposalsWithHttpInfo(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0)
        {
            // verify the required parameter 'proposalModel' is set
            if (proposalModel == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'proposalModel' when calling ProposalsApi->ProposalsGetProposals");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = proposalModel;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/proposals/GetProposals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Proposals 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsGetProposalsAsync(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsGetProposalsWithHttpInfoAsync(proposalModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Proposals 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsGetProposalsWithHttpInfoAsync(SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'proposalModel' is set
            if (proposalModel == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'proposalModel' when calling ProposalsApi->ProposalsGetProposals");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = proposalModel;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/proposals/GetProposals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber(int trackingNumber, int operationIndex = 0)
        {
            ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberWithHttpInfo(trackingNumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/GetProposalsAssociatedWithWorkOderExceptRfp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberWithHttpInfoAsync(trackingNumber, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/GetProposalsAssociatedWithWorkOderExceptRfp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber(int trackingNumber, int operationIndex = 0)
        {
            ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberWithHttpInfo(trackingNumber);
        }

        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/GetProposalsAssociatedWithWorkOrderAsync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberWithHttpInfoAsync(trackingNumber, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/GetProposalsAssociatedWithWorkOrderAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposals that can be reject Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse> ProposalsGetProposalsToRejecttrackingNumbertrackingNumber(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> localVarResponse = ProposalsGetProposalsToRejecttrackingNumbertrackingNumberWithHttpInfo(trackingNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve proposals that can be reject Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsGetProposalsToRejecttrackingNumbertrackingNumberWithHttpInfo(int trackingNumber, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposalsToRejecttrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>("/proposals/GetProposalsToReject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposalsToRejecttrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposals that can be reject Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsGetProposalsToRejecttrackingNumbertrackingNumberAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> localVarResponse = await ProposalsGetProposalsToRejecttrackingNumbertrackingNumberWithHttpInfoAsync(trackingNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve proposals that can be reject Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>> ProposalsGetProposalsToRejecttrackingNumbertrackingNumberWithHttpInfoAsync(int trackingNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetProposalsToRejecttrackingNumbertrackingNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>("/proposals/GetProposalsToReject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetProposalsToRejecttrackingNumbertrackingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get users by level name Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsGetUsersByLevelNamelevelNamelevelName(string levelName, int operationIndex = 0)
        {
            ProposalsGetUsersByLevelNamelevelNamelevelNameWithHttpInfo(levelName);
        }

        /// <summary>
        /// Get users by level name Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsGetUsersByLevelNamelevelNamelevelNameWithHttpInfo(string levelName, int operationIndex = 0)
        {
            // verify the required parameter 'levelName' is set
            if (levelName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'levelName' when calling ProposalsApi->ProposalsGetUsersByLevelNamelevelNamelevelName");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "levelName", levelName));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetUsersByLevelNamelevelNamelevelName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/GetUsersByLevelName", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetUsersByLevelNamelevelNamelevelName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get users by level name Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsGetUsersByLevelNamelevelNamelevelNameAsync(string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsGetUsersByLevelNamelevelNamelevelNameWithHttpInfoAsync(levelName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get users by level name Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelName">MLP level name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsGetUsersByLevelNamelevelNamelevelNameWithHttpInfoAsync(string levelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'levelName' is set
            if (levelName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'levelName' when calling ProposalsApi->ProposalsGetUsersByLevelNamelevelNamelevelName");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "levelName", levelName));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsGetUsersByLevelNamelevelNamelevelName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/GetUsersByLevelName", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsGetUsersByLevelNamelevelNamelevelName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get proposal actions by ID Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1(List<int> proposalIds, int operationIndex = 0)
        {
            ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1WithHttpInfo(proposalIds);
        }

        /// <summary>
        /// Get proposal actions by ID Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1WithHttpInfo(List<int> proposalIds, int operationIndex = 0)
        {
            // verify the required parameter 'proposalIds' is set
            if (proposalIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'proposalIds' when calling ProposalsApi->ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "proposalIds", proposalIds));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/proposalIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get proposal actions by ID Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1Async(List<int> proposalIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1WithHttpInfoAsync(proposalIds, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get proposal actions by ID Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1WithHttpInfoAsync(List<int> proposalIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'proposalIds' is set
            if (proposalIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'proposalIds' when calling ProposalsApi->ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "proposalIds", proposalIds));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/proposalIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject proposals Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsProposalsReject(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0)
        {
            ProposalsProposalsRejectWithHttpInfo(data);
        }

        /// <summary>
        /// Reject proposals Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsProposalsRejectWithHttpInfo(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'data' when calling ProposalsApi->ProposalsProposalsReject");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsProposalsReject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/ProposalsReject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsProposalsReject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject proposals Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsProposalsRejectAsync(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsProposalsRejectWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reject proposals Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsProposalsRejectWithHttpInfoAsync(List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'data' when calling ProposalsApi->ProposalsProposalsReject");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsProposalsReject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/ProposalsReject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsProposalsReject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposal rejection reasons Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsRejectionReasons(int operationIndex = 0)
        {
            ProposalsRejectionReasonsWithHttpInfo();
        }

        /// <summary>
        /// Retrieve proposal rejection reasons Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsRejectionReasonsWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRejectionReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/RejectionReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRejectionReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposal rejection reasons Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsRejectionReasonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsRejectionReasonsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve proposal rejection reasons Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsRejectionReasonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRejectionReasons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/RejectionReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRejectionReasons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a location from a user’s MLP level Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation(string userName, string location, int operationIndex = 0)
        {
            ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationWithHttpInfo(userName, location);
        }

        /// <summary>
        /// Remove a location from a user’s MLP level Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationWithHttpInfo(string userName, string location, int operationIndex = 0)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation");
            }

            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'location' when calling ProposalsApi->ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/RemoveLocationFromMlpUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a location from a user’s MLP level Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationWithHttpInfoAsync(userName, location, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a location from a user’s MLP level Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationWithHttpInfoAsync(string userName, string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation");
            }

            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'location' when calling ProposalsApi->ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/RemoveLocationFromMlpUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Whether the user can be deleted from MLP level. Whether the user can be deleted from MLP level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsRemoveMlpUserValidationAsyncuserIduserId(int userId, int operationIndex = 0)
        {
            ProposalsRemoveMlpUserValidationAsyncuserIduserIdWithHttpInfo(userId);
        }

        /// <summary>
        /// Whether the user can be deleted from MLP level. Whether the user can be deleted from MLP level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsRemoveMlpUserValidationAsyncuserIduserIdWithHttpInfo(int userId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRemoveMlpUserValidationAsyncuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/RemoveMlpUserValidationAsync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRemoveMlpUserValidationAsyncuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Whether the user can be deleted from MLP level. Whether the user can be deleted from MLP level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsRemoveMlpUserValidationAsyncuserIduserIdAsync(int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsRemoveMlpUserValidationAsyncuserIduserIdWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Whether the user can be deleted from MLP level. Whether the user can be deleted from MLP level.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsRemoveMlpUserValidationAsyncuserIduserIdWithHttpInfoAsync(int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRemoveMlpUserValidationAsyncuserIduserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/RemoveMlpUserValidationAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRemoveMlpUserValidationAsyncuserIduserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from an MLP level Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsRemoveUserFromMlpLeveluserNameuserName(string userName, int operationIndex = 0)
        {
            ProposalsRemoveUserFromMlpLeveluserNameuserNameWithHttpInfo(userName);
        }

        /// <summary>
        /// Remove a user from an MLP level Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsRemoveUserFromMlpLeveluserNameuserNameWithHttpInfo(string userName, int operationIndex = 0)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsRemoveUserFromMlpLeveluserNameuserName");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRemoveUserFromMlpLeveluserNameuserName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/RemoveUserFromMlpLevel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRemoveUserFromMlpLeveluserNameuserName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from an MLP level Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsRemoveUserFromMlpLeveluserNameuserNameAsync(string userName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsRemoveUserFromMlpLeveluserNameuserNameWithHttpInfoAsync(userName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a user from an MLP level Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsRemoveUserFromMlpLeveluserNameuserNameWithHttpInfoAsync(string userName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'userName' when calling ProposalsApi->ProposalsRemoveUserFromMlpLeveluserNameuserName");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "userName", userName));

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsRemoveUserFromMlpLeveluserNameuserName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/RemoveUserFromMlpLevel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsRemoveUserFromMlpLeveluserNameuserName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve statistics on RFPs and proposals Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        public SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse ProposalsStatisticsdaysPerioddaysPeriod(int? daysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> localVarResponse = ProposalsStatisticsdaysPerioddaysPeriodWithHttpInfo(daysPeriod);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve statistics on RFPs and proposals Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsStatisticsdaysPerioddaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsStatisticsdaysPerioddaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>("/proposals/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsStatisticsdaysPerioddaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve statistics on RFPs and proposals Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsStatisticsdaysPerioddaysPeriodAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> localVarResponse = await ProposalsStatisticsdaysPerioddaysPeriodWithHttpInfoAsync(daysPeriod, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve statistics on RFPs and proposals Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>> ProposalsStatisticsdaysPerioddaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsStatisticsdaysPerioddaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>("/proposals/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsStatisticsdaysPerioddaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve a proposal Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdApprove(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0)
        {
            ProposalsproposalIdApproveWithHttpInfo(proposalId, request);
        }

        /// <summary>
        /// Approve a proposal Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdApproveWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdApprove");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{proposalId}/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve a proposal Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdApproveAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdApproveWithHttpInfoAsync(proposalId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Approve a proposal Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdApproveWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdApprove");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{proposalId}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a proposal to a user Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdAssignUser(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0)
        {
            ProposalsproposalIdAssignUserWithHttpInfo(proposalId, request);
        }

        /// <summary>
        /// Assign a proposal to a user Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdAssignUserWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdAssignUser");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdAssignUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{proposalId}/assignUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdAssignUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a proposal to a user Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdAssignUserAsync(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdAssignUserWithHttpInfoAsync(proposalId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign a proposal to a user Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdAssignUserWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdAssignUser");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdAssignUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{proposalId}/assignUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdAssignUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a work order to a proposal Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0)
        {
            ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleWithHttpInfo(proposalId, workorderId, isFromProjectsModule);
        }

        /// <summary>
        /// Attach a work order to a proposal Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleWithHttpInfo(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (isFromProjectsModule != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "isFromProjectsModule", isFromProjectsModule));
            }
            localVarRequestOptions.Data = workorderId;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{proposalId}/assignWO", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a work order to a proposal Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleAsync(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleWithHttpInfoAsync(proposalId, workorderId, isFromProjectsModule, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Attach a work order to a proposal Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleWithHttpInfoAsync(int proposalId, int workorderId, bool? isFromProjectsModule = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (isFromProjectsModule != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "isFromProjectsModule", isFromProjectsModule));
            }
            localVarRequestOptions.Data = workorderId;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{proposalId}/assignWO", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Escalate a proposal Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdEscalate(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0)
        {
            ProposalsproposalIdEscalateWithHttpInfo(proposalId, request);
        }

        /// <summary>
        /// Escalate a proposal Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdEscalateWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdEscalate");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdEscalate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{proposalId}/escalate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdEscalate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Escalate a proposal Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdEscalateAsync(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdEscalateWithHttpInfoAsync(proposalId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Escalate a proposal Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdEscalateWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdEscalate");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdEscalate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{proposalId}/escalate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdEscalate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Put a proposal on hold Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdOnhold(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0)
        {
            ProposalsproposalIdOnholdWithHttpInfo(proposalId, request);
        }

        /// <summary>
        /// Put a proposal on hold Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdOnholdWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdOnhold");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdOnhold";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{proposalId}/onhold", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdOnhold", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Put a proposal on hold Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdOnholdAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdOnholdWithHttpInfoAsync(proposalId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Put a proposal on hold Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdOnholdWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdOnhold");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdOnhold";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{proposalId}/onhold", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdOnhold", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Open a proposal Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdOpen(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0)
        {
            ProposalsproposalIdOpenWithHttpInfo(proposalId, request);
        }

        /// <summary>
        /// Open a proposal Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdOpenWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdOpen");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdOpen";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{proposalId}/open", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdOpen", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Open a proposal Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdOpenAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdOpenWithHttpInfoAsync(proposalId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Open a proposal Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdOpenWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdOpen");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdOpen";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{proposalId}/open", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdOpen", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse> ProposalsproposalIdRecipients(int proposalId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> localVarResponse = ProposalsproposalIdRecipientsWithHttpInfo(proposalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsproposalIdRecipientsWithHttpInfo(int proposalId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdRecipients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>("/proposals/{proposalId}/recipients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdRecipients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> ProposalsproposalIdRecipientsAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>> localVarResponse = await ProposalsproposalIdRecipientsWithHttpInfoAsync(proposalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotesEmailRecipientResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>> ProposalsproposalIdRecipientsWithHttpInfoAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdRecipients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>("/proposals/{proposalId}/recipients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdRecipients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a proposal Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0)
        {
            ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsWithHttpInfo(proposalId, request, useProposalAlertEmails);
        }

        /// <summary>
        /// Reject a proposal Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsWithHttpInfo(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (useProposalAlertEmails != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "useProposalAlertEmails", useProposalAlertEmails));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{proposalId}/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a proposal Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsWithHttpInfoAsync(proposalId, request, useProposalAlertEmails, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reject a proposal Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsWithHttpInfoAsync(int proposalId, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, bool? useProposalAlertEmails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling ProposalsApi->ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (useProposalAlertEmails != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "useProposalAlertEmails", useProposalAlertEmails));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{proposalId}/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve users who can be assigned a proposal Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingUsersUserInfo</returns>
        public SCServiceChannelServicesMessagingUsersUserInfo ProposalsproposalIdUsers(int proposalId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingUsersUserInfo> localVarResponse = ProposalsproposalIdUsersWithHttpInfo(proposalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve users who can be assigned a proposal Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingUsersUserInfo</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingUsersUserInfo> ProposalsproposalIdUsersWithHttpInfo(int proposalId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingUsersUserInfo>("/proposals/{proposalId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve users who can be assigned a proposal Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingUsersUserInfo</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingUsersUserInfo> ProposalsproposalIdUsersAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingUsersUserInfo> localVarResponse = await ProposalsproposalIdUsersWithHttpInfoAsync(proposalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve users who can be assigned a proposal Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingUsersUserInfo)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingUsersUserInfo>> ProposalsproposalIdUsersWithHttpInfoAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingUsersUserInfo>("/proposals/{proposalId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a proposal Checks if the specified proposal exists for the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsproposalIdValidate(int proposalId, int operationIndex = 0)
        {
            ProposalsproposalIdValidateWithHttpInfo(proposalId);
        }

        /// <summary>
        /// Validate a proposal Checks if the specified proposal exists for the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsproposalIdValidateWithHttpInfo(int proposalId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdValidate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proposals/{proposalId}/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdValidate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a proposal Checks if the specified proposal exists for the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsproposalIdValidateAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsproposalIdValidateWithHttpInfoAsync(proposalId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate a proposal Checks if the specified proposal exists for the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsproposalIdValidateWithHttpInfoAsync(int proposalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsproposalIdValidate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proposals/{proposalId}/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsproposalIdValidate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ProposalsrfpId(int rfpId, int operationIndex = 0)
        {
            ProposalsrfpIdWithHttpInfo(rfpId);
        }

        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> ProposalsrfpIdWithHttpInfo(int rfpId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsrfpId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/proposals/{rfpId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsrfpId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProposalsrfpIdAsync(int rfpId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProposalsrfpIdWithHttpInfoAsync(rfpId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> ProposalsrfpIdWithHttpInfoAsync(int rfpId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsrfpId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/proposals/{rfpId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsrfpId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposals Returns proposals based on the specified input parameters for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        public SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse ProposalsstatusesstatusesassignedToassignedToskipskiptoptop(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> localVarResponse = ProposalsstatusesstatusesassignedToassignedToskipskiptoptopWithHttpInfo(statuses, assignedTo, skip, top);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve proposals Returns proposals based on the specified input parameters for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsstatusesstatusesassignedToassignedToskipskiptoptopWithHttpInfo(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "statuses", statuses));
            }
            if (assignedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assignedTo", assignedTo));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsstatusesstatusesassignedToassignedToskipskiptoptop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>("/proposals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsstatusesstatusesassignedToassignedToskipskiptoptop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve proposals Returns proposals based on the specified input parameters for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> ProposalsstatusesstatusesassignedToassignedToskipskiptoptopAsync(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse> localVarResponse = await ProposalsstatusesstatusesassignedToassignedToskipskiptoptopWithHttpInfoAsync(statuses, assignedTo, skip, top, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve proposals Returns proposals based on the specified input parameters for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed. (optional)</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals. (optional)</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one). (optional)</param>
        /// <param name="top">The number of entries to return. The default value is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>> ProposalsstatusesstatusesassignedToassignedToskipskiptoptopWithHttpInfoAsync(string? statuses = default(string?), int? assignedTo = default(int?), int? skip = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "statuses", statuses));
            }
            if (assignedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "assignedTo", assignedTo));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }

            localVarRequestOptions.Operation = "ProposalsApi.ProposalsstatusesstatusesassignedToassignedToskipskiptoptop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>("/proposals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProposalsstatusesstatusesassignedToassignedToskipskiptoptop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
