/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationSubscriptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get providers exclusion list
        /// </summary>
        /// <remarks>
        /// List providers who opted out to not receive the notifications
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse</returns>
        SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse GetProvidersExclusionListemailNotificationTypeemailNotificationType(int emailNotificationType, int operationIndex = 0);

        /// <summary>
        /// Get providers exclusion list
        /// </summary>
        /// <remarks>
        /// List providers who opted out to not receive the notifications
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse> GetProvidersExclusionListemailNotificationTypeemailNotificationTypeWithHttpInfo(int emailNotificationType, int operationIndex = 0);
        /// <summary>
        /// Subscribe to Notification
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse NotificationSubscriptions(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0);

        /// <summary>
        /// Subscribe to Notification
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsWithHttpInfo(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0);
        /// <summary>
        /// List existing subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;</returns>
        List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> NotificationSubscriptionsHttp(int operationIndex = 0);

        /// <summary>
        /// List existing subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> NotificationSubscriptionsHttpWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse NotificationSubscriptionsHttp_0(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0);

        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsHttp_0WithHttpInfo(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0);
        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription</returns>
        SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription NotificationSubscriptionsHttpid(int id, int operationIndex = 0);

        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> NotificationSubscriptionsHttpidWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update a subscription
        /// </summary>
        /// <remarks>
        /// Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NotificationSubscriptionsHttpid_0(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0);

        /// <summary>
        /// Update a subscription
        /// </summary>
        /// <remarks>
        /// Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationSubscriptionsHttpid_0WithHttpInfo(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0);
        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NotificationSubscriptionsHttpid_1(int id, int operationIndex = 0);

        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationSubscriptionsHttpid_1WithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get MSTeams Subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse</returns>
        SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse NotificationSubscriptionsMsteamsconversationIdconversationId(string conversationId, int operationIndex = 0);

        /// <summary>
        /// Get MSTeams Subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse> NotificationSubscriptionsMsteamsconversationIdconversationIdWithHttpInfo(string conversationId, int operationIndex = 0);
        /// <summary>
        /// Get a signing key
        /// </summary>
        /// <remarks>
        /// Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        SCServiceChannelServicesMessagingNotificationsSigningKeyResponse NotificationSubscriptionsSigningKey(int operationIndex = 0);

        /// <summary>
        /// Get a signing key
        /// </summary>
        /// <remarks>
        /// Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKeyWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Regenerate a signing key
        /// </summary>
        /// <remarks>
        /// Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        SCServiceChannelServicesMessagingNotificationsSigningKeyResponse NotificationSubscriptionsSigningKey_0(int operationIndex = 0);

        /// <summary>
        /// Regenerate a signing key
        /// </summary>
        /// <remarks>
        /// Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKey_0WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// UnSubscribe
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NotificationSubscriptionsidtypetype(int id, string type, int operationIndex = 0);

        /// <summary>
        /// UnSubscribe
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationSubscriptionsidtypetypeWithHttpInfo(int id, string type, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationSubscriptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get providers exclusion list
        /// </summary>
        /// <remarks>
        /// List providers who opted out to not receive the notifications
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse> GetProvidersExclusionListemailNotificationTypeemailNotificationTypeAsync(int emailNotificationType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get providers exclusion list
        /// </summary>
        /// <remarks>
        /// List providers who opted out to not receive the notifications
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse>> GetProvidersExclusionListemailNotificationTypeemailNotificationTypeWithHttpInfoAsync(int emailNotificationType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Subscribe to Notification
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsAsync(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to Notification
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>> NotificationSubscriptionsWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List existing subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> NotificationSubscriptionsHttpAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List existing subscriptions
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the current subscriber or provider.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>>> NotificationSubscriptionsHttpWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsHttp_0Async(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>> NotificationSubscriptionsHttp_0WithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> NotificationSubscriptionsHttpidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> NotificationSubscriptionsHttpidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a subscription
        /// </summary>
        /// <remarks>
        /// Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationSubscriptionsHttpid_0Async(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a subscription
        /// </summary>
        /// <remarks>
        /// Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationSubscriptionsHttpid_0WithHttpInfoAsync(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationSubscriptionsHttpid_1Async(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationSubscriptionsHttpid_1WithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get MSTeams Subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse> NotificationSubscriptionsMsteamsconversationIdconversationIdAsync(string conversationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get MSTeams Subscription
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the specified subscription.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse>> NotificationSubscriptionsMsteamsconversationIdconversationIdWithHttpInfoAsync(string conversationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a signing key
        /// </summary>
        /// <remarks>
        /// Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKeyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a signing key
        /// </summary>
        /// <remarks>
        /// Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsSigningKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>> NotificationSubscriptionsSigningKeyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Regenerate a signing key
        /// </summary>
        /// <remarks>
        /// Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKey_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Regenerate a signing key
        /// </summary>
        /// <remarks>
        /// Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsSigningKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>> NotificationSubscriptionsSigningKey_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UnSubscribe
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationSubscriptionsidtypetypeAsync(int id, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UnSubscribe
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified subscription. It cannot be undone.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationSubscriptionsidtypetypeWithHttpInfoAsync(int id, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationSubscriptionsApi : INotificationSubscriptionsApiSync, INotificationSubscriptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationSubscriptionsApi : INotificationSubscriptionsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationSubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationSubscriptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationSubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationSubscriptionsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationSubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationSubscriptionsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationSubscriptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotificationSubscriptionsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get providers exclusion list List providers who opted out to not receive the notifications
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse</returns>
        public SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse GetProvidersExclusionListemailNotificationTypeemailNotificationType(int emailNotificationType, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse> localVarResponse = GetProvidersExclusionListemailNotificationTypeemailNotificationTypeWithHttpInfo(emailNotificationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get providers exclusion list List providers who opted out to not receive the notifications
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse> GetProvidersExclusionListemailNotificationTypeemailNotificationTypeWithHttpInfo(int emailNotificationType, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "emailNotificationType", emailNotificationType));

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.GetProvidersExclusionListemailNotificationTypeemailNotificationType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse>("/GetProvidersExclusionList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProvidersExclusionListemailNotificationTypeemailNotificationType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get providers exclusion list List providers who opted out to not receive the notifications
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse> GetProvidersExclusionListemailNotificationTypeemailNotificationTypeAsync(int emailNotificationType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse> localVarResponse = await GetProvidersExclusionListemailNotificationTypeemailNotificationTypeWithHttpInfoAsync(emailNotificationType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get providers exclusion list List providers who opted out to not receive the notifications
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse>> GetProvidersExclusionListemailNotificationTypeemailNotificationTypeWithHttpInfoAsync(int emailNotificationType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "emailNotificationType", emailNotificationType));

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.GetProvidersExclusionListemailNotificationTypeemailNotificationType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse>("/GetProvidersExclusionList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProvidersExclusionListemailNotificationTypeemailNotificationType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to Notification Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        public SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse NotificationSubscriptions(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> localVarResponse = NotificationSubscriptionsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to Notification Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsWithHttpInfo(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling NotificationSubscriptionsApi->NotificationSubscriptions");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>("/NotificationSubscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to Notification Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsAsync(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> localVarResponse = await NotificationSubscriptionsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to Notification Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>> NotificationSubscriptionsWithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling NotificationSubscriptionsApi->NotificationSubscriptions");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>("/NotificationSubscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing subscriptions Returns a list of subscriptions for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;</returns>
        public List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> NotificationSubscriptionsHttp(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> localVarResponse = NotificationSubscriptionsHttpWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing subscriptions Returns a list of subscriptions for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> NotificationSubscriptionsHttpWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>>("/NotificationSubscriptions/Http", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing subscriptions Returns a list of subscriptions for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> NotificationSubscriptionsHttpAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> localVarResponse = await NotificationSubscriptionsHttpWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing subscriptions Returns a list of subscriptions for the current subscriber or provider.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>>> NotificationSubscriptionsHttpWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>>("/NotificationSubscriptions/Http", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a subscription Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        public SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse NotificationSubscriptionsHttp_0(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> localVarResponse = NotificationSubscriptionsHttp_0WithHttpInfo(req);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a subscription Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsHttp_0WithHttpInfo(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0)
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationSubscriptionsApi->NotificationSubscriptionsHttp_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttp_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>("/NotificationSubscriptions/Http", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttp_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a subscription Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> NotificationSubscriptionsHttp_0Async(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse> localVarResponse = await NotificationSubscriptionsHttp_0WithHttpInfoAsync(req, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a subscription Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>> NotificationSubscriptionsHttp_0WithHttpInfoAsync(SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationSubscriptionsApi->NotificationSubscriptionsHttp_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttp_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse>("/NotificationSubscriptions/Http", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttp_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription</returns>
        public SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription NotificationSubscriptionsHttpid(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> localVarResponse = NotificationSubscriptionsHttpidWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> NotificationSubscriptionsHttpidWithHttpInfo(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttpid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>("/NotificationSubscriptions/Http/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttpid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> NotificationSubscriptionsHttpidAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription> localVarResponse = await NotificationSubscriptionsHttpidWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>> NotificationSubscriptionsHttpidWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttpid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>("/NotificationSubscriptions/Http/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttpid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a subscription Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void NotificationSubscriptionsHttpid_0(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0)
        {
            NotificationSubscriptionsHttpid_0WithHttpInfo(id, req);
        }

        /// <summary>
        /// Update a subscription Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> NotificationSubscriptionsHttpid_0WithHttpInfo(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0)
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationSubscriptionsApi->NotificationSubscriptionsHttpid_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttpid_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/NotificationSubscriptions/Http/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttpid_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a subscription Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationSubscriptionsHttpid_0Async(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NotificationSubscriptionsHttpid_0WithHttpInfoAsync(id, req, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a subscription Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> NotificationSubscriptionsHttpid_0WithHttpInfoAsync(int id, SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling NotificationSubscriptionsApi->NotificationSubscriptionsHttpid_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttpid_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/NotificationSubscriptions/Http/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttpid_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a subscription Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void NotificationSubscriptionsHttpid_1(int id, int operationIndex = 0)
        {
            NotificationSubscriptionsHttpid_1WithHttpInfo(id);
        }

        /// <summary>
        /// Delete a subscription Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> NotificationSubscriptionsHttpid_1WithHttpInfo(int id, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttpid_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/NotificationSubscriptions/Http/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttpid_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a subscription Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationSubscriptionsHttpid_1Async(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NotificationSubscriptionsHttpid_1WithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a subscription Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> NotificationSubscriptionsHttpid_1WithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsHttpid_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/NotificationSubscriptions/Http/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsHttpid_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MSTeams Subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse</returns>
        public SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse NotificationSubscriptionsMsteamsconversationIdconversationId(string conversationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse> localVarResponse = NotificationSubscriptionsMsteamsconversationIdconversationIdWithHttpInfo(conversationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MSTeams Subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse> NotificationSubscriptionsMsteamsconversationIdconversationIdWithHttpInfo(string conversationId, int operationIndex = 0)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'conversationId' when calling NotificationSubscriptionsApi->NotificationSubscriptionsMsteamsconversationIdconversationId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "conversationId", conversationId));

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsMsteamsconversationIdconversationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse>("/NotificationSubscriptions/msteams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsMsteamsconversationIdconversationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MSTeams Subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse> NotificationSubscriptionsMsteamsconversationIdconversationIdAsync(string conversationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse> localVarResponse = await NotificationSubscriptionsMsteamsconversationIdconversationIdWithHttpInfoAsync(conversationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MSTeams Subscription Retrieves the details of the specified subscription.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse>> NotificationSubscriptionsMsteamsconversationIdconversationIdWithHttpInfoAsync(string conversationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'conversationId' when calling NotificationSubscriptionsApi->NotificationSubscriptionsMsteamsconversationIdconversationId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "conversationId", conversationId));

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsMsteamsconversationIdconversationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse>("/NotificationSubscriptions/msteams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsMsteamsconversationIdconversationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a signing key Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        public SCServiceChannelServicesMessagingNotificationsSigningKeyResponse NotificationSubscriptionsSigningKey(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> localVarResponse = NotificationSubscriptionsSigningKeyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a signing key Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKeyWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsSigningKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>("/NotificationSubscriptions/SigningKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsSigningKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a signing key Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKeyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> localVarResponse = await NotificationSubscriptionsSigningKeyWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a signing key Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsSigningKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>> NotificationSubscriptionsSigningKeyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsSigningKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>("/NotificationSubscriptions/SigningKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsSigningKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate a signing key Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        public SCServiceChannelServicesMessagingNotificationsSigningKeyResponse NotificationSubscriptionsSigningKey_0(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> localVarResponse = NotificationSubscriptionsSigningKey_0WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate a signing key Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKey_0WithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsSigningKey_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>("/NotificationSubscriptions/SigningKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsSigningKey_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate a signing key Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingNotificationsSigningKeyResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> NotificationSubscriptionsSigningKey_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse> localVarResponse = await NotificationSubscriptionsSigningKey_0WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate a signing key Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingNotificationsSigningKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>> NotificationSubscriptionsSigningKey_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsSigningKey_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingNotificationsSigningKeyResponse>("/NotificationSubscriptions/SigningKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsSigningKey_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UnSubscribe Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void NotificationSubscriptionsidtypetype(int id, string type, int operationIndex = 0)
        {
            NotificationSubscriptionsidtypetypeWithHttpInfo(id, type);
        }

        /// <summary>
        /// UnSubscribe Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> NotificationSubscriptionsidtypetypeWithHttpInfo(int id, string type, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'type' when calling NotificationSubscriptionsApi->NotificationSubscriptionsidtypetype");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsidtypetype";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/NotificationSubscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsidtypetype", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UnSubscribe Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationSubscriptionsidtypetypeAsync(int id, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NotificationSubscriptionsidtypetypeWithHttpInfoAsync(id, type, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// UnSubscribe Permanently deletes the specified subscription. It cannot be undone.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> NotificationSubscriptionsidtypetypeWithHttpInfoAsync(int id, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'type' when calling NotificationSubscriptionsApi->NotificationSubscriptionsidtypetype");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "NotificationSubscriptionsApi.NotificationSubscriptionsidtypetype";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/NotificationSubscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotificationSubscriptionsidtypetype", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
