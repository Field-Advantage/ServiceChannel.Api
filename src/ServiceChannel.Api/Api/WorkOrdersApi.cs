/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Order CheckIn Activity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity> CheckInActivity(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Order CheckIn Activity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>> CheckInActivityWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        SCServiceChannelServicesMessagingWorkordersWorkOrder Get(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Duplicate Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetDuplicateWorkOrders(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a Duplicate Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetDuplicateWorkOrdersWithHttpInfo(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Work Order Recalls
        /// </summary>
        /// <remarks>
        /// Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetRecallWorkOrders(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Work Order Recalls
        /// </summary>
        /// <remarks>
        /// Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetRecallWorkOrdersWithHttpInfo(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWorkOrders(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWorkOrdersForLocation(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersForLocationWithHttpInfo(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Work Orders near by a site.
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWorkOrdersNearBy(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a Work Orders near by a site.
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersNearByWithHttpInfo(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Warning Work Orders for Location
        /// </summary>
        /// <remarks>
        /// Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a Warning Work Orders for Location
        /// </summary>
        /// <remarks>
        /// Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdWithHttpInfo(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse> LocationslocationIdWorkordersPriorities(int locationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> LocationslocationIdWorkordersPrioritiesWithHttpInfo(int locationId, int operationIndex = 0);
        /// <summary>
        /// Search Work Orders for specified location
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> LocationslocationIdWorkordersstoreIdstoreId(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Work Orders for specified location
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationslocationIdWorkordersstoreIdstoreIdWithHttpInfo(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> OdataWorkordersFilter(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0);

        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> OdataWorkordersFilterWithHttpInfo(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SubscriberssubscriberIdWorkordersworkorderIdReassign(int subscriberId, int workorderId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriberssubscriberIdWorkordersworkorderIdReassignWithHttpInfo(int subscriberId, int workorderId, int operationIndex = 0);
        /// <summary>
        /// Create a Work order
        /// </summary>
        /// <remarks>
        /// Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Workorders(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0);

        /// <summary>
        /// Create a Work order
        /// </summary>
        /// <remarks>
        /// Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersWithHttpInfo(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0);
        /// <summary>
        /// Categories Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order categories.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingCategoryCategoryResponse> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0);

        /// <summary>
        /// Categories Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order categories.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprWithHttpInfo(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get work orders feedbacks
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1(List<int> workOrdersIds, int operationIndex = 0);

        /// <summary>
        /// Get work orders feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1WithHttpInfo(List<int> workOrdersIds, int operationIndex = 0);
        /// <summary>
        /// Add Empty Survey for Work Order Completion
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersHandlewocompletionforsurvey(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0);

        /// <summary>
        /// Add Empty Survey for Work Order Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersHandlewocompletionforsurveyWithHttpInfo(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0);
        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId(int certificateId, int operationIndex = 0);

        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdWithHttpInfo(int certificateId, int operationIndex = 0);
        /// <summary>
        /// Get work orders labels.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse> WorkordersLabelkeywordkeywordpagepagepageSizepageSize(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get work orders labels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>> WorkordersLabelkeywordkeywordpagepagepageSizepageSizeWithHttpInfo(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create Priority
        /// </summary>
        /// <remarks>
        /// Creates Priority.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse> WorkordersPriorities(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0);

        /// <summary>
        /// Create Priority
        /// </summary>
        /// <remarks>
        /// Creates Priority.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>> WorkordersPrioritiesWithHttpInfo(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0);
        /// <summary>
        /// Priorities Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order priorities in user settings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse> WorkordersPrioritiessubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Priorities Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order priorities in user settings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> WorkordersPrioritiessubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Provider
        /// </summary>
        /// <remarks>
        /// A single Provider object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Provider
        /// </summary>
        /// <remarks>
        /// A single Provider object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeWithHttpInfo(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0);
        /// <summary>
        /// Work order reassignment reasons
        /// </summary>
        /// <remarks>
        /// List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason> WorkordersReassignReasonssubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Work order reassignment reasons
        /// </summary>
        /// <remarks>
        /// List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>> WorkordersReassignReasonssubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Submit solved issue during troubleshooting
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersSolvedissue(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0);

        /// <summary>
        /// Submit solved issue during troubleshooting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersSolvedissueWithHttpInfo(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0);
        /// <summary>
        /// Starred Work Order Ids Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of work order ids starred by the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> WorkordersStarred(int operationIndex = 0);

        /// <summary>
        /// Starred Work Order Ids Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of work order ids starred by the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> WorkordersStarredWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Statistics Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order Statistics. Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse</returns>
        SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse WorkordersStatisticsdaysPerioddaysPeriod(int? daysPeriod = default(int?), int operationIndex = 0);

        /// <summary>
        /// Statistics Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order Statistics. Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse> WorkordersStatisticsdaysPerioddaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int operationIndex = 0);
        /// <summary>
        /// Statuses Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Statuses Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Work Orders
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersWorkOrder> WorkorderslocationIdlocationIdstoreIdstoreId(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Work Orders
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> WorkorderslocationIdlocationIdstoreIdstoreIdWithHttpInfo(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Accept a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkOrderIdAccept(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0);

        /// <summary>
        /// Accept a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkOrderIdAcceptWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0);
        /// <summary>
        /// Get analytics on a work order
        /// </summary>
        /// <remarks>
        /// Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse</returns>
        SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse WorkordersworkOrderIdAnalytics(int workOrderId, int operationIndex = 0);

        /// <summary>
        /// Get analytics on a work order
        /// </summary>
        /// <remarks>
        /// Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse> WorkordersworkOrderIdAnalyticsWithHttpInfo(int workOrderId, int operationIndex = 0);
        /// <summary>
        /// Get checklist responses for a work order
        /// </summary>
        /// <remarks>
        /// [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse WorkordersworkOrderIdChecklistsResponsesgetAllgetAll(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get checklist responses for a work order
        /// </summary>
        /// <remarks>
        /// [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse> WorkordersworkOrderIdChecklistsResponsesgetAllgetAllWithHttpInfo(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Decline a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkOrderIdDecline(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0);

        /// <summary>
        /// Decline a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkOrderIdDeclineWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0);
        /// <summary>
        /// Retrieve the leak detection result in a Work Order
        /// </summary>
        /// <remarks>
        /// Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool WorkordersworkOrderIdLeakWasDetected(int workOrderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve the leak detection result in a Work Order
        /// </summary>
        /// <remarks>
        /// Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> WorkordersworkOrderIdLeakWasDetectedWithHttpInfo(int workOrderId, int operationIndex = 0);
        /// <summary>
        /// Update Work orders NTE project approval
        /// </summary>
        /// <remarks>
        /// Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkOrderIdProjectApproval(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Work orders NTE project approval
        /// </summary>
        /// <remarks>
        /// Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApprovalWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Create Work orders project approval
        /// </summary>
        /// <remarks>
        /// Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkOrderIdProjectApproval_0(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0);

        /// <summary>
        /// Create Work orders project approval
        /// </summary>
        /// <remarks>
        /// Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApproval_0WithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0);
        /// <summary>
        /// Assign technician certificate to the WO
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkOrderIdTechnicianCertificate(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0);

        /// <summary>
        /// Assign technician certificate to the WO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkOrderIdTechnicianCertificateWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0);
        /// <summary>
        /// Update the leak inspection info on a work order
        /// </summary>
        /// <remarks>
        /// RTMultiLeakFlow FF must be enabled for this operation
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0);

        /// <summary>
        /// Update the leak inspection info on a work order
        /// </summary>
        /// <remarks>
        /// RTMultiLeakFlow FF must be enabled for this operation
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedWithHttpInfo(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0);
        /// <summary>
        /// Get the Weather Event associated to a work order (if set)
        /// </summary>
        /// <remarks>
        /// Retrieves the set Weather Event related to a work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelApiModelWorkordersWeatherEventType</returns>
        SCServiceChannelApiModelWorkordersWeatherEventType WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get the Weather Event associated to a work order (if set)
        /// </summary>
        /// <remarks>
        /// Retrieves the set Weather Event related to a work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelApiModelWorkordersWeatherEventType</returns>
        ApiResponse<SCServiceChannelApiModelWorkordersWeatherEventType> WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdWithHttpInfo(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Work order
        /// </summary>
        /// <remarks>
        /// A single Work order object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        SCServiceChannelServicesMessagingWorkordersWorkOrder WorkordersworkorderId(int workorderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Work order
        /// </summary>
        /// <remarks>
        /// A single Work order object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> WorkordersworkorderIdWithHttpInfo(int workorderId, int operationIndex = 0);
        /// <summary>
        /// Create Stripe charge
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdAddstripecharge(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0);

        /// <summary>
        /// Create Stripe charge
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdAddstripechargeWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0);
        /// <summary>
        /// Update Work order Caller
        /// </summary>
        /// <remarks>
        /// Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdCaller(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Work order Caller
        /// </summary>
        /// <remarks>
        /// Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCallerWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update the work order category
        /// </summary>
        /// <remarks>
        /// Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdCategory(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update the work order category
        /// </summary>
        /// <remarks>
        /// Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCategoryWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update Work order Description
        /// </summary>
        /// <remarks>
        /// Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdDescription(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Work order Description
        /// </summary>
        /// <remarks>
        /// Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdDescriptionWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Checks features of Work order subscriber
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingApplicationAccessFeatureResponse</returns>
        SCServiceChannelServicesMessagingApplicationAccessFeatureResponse WorkordersworkorderIdFeaturesfeatures0features0features1features1(int workorderId, List<string> features, int operationIndex = 0);

        /// <summary>
        /// Checks features of Work order subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingApplicationAccessFeatureResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse> WorkordersworkorderIdFeaturesfeatures0features0features1features1WithHttpInfo(int workorderId, List<string> features, int operationIndex = 0);
        /// <summary>
        /// Leave feedback for a work order
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdFeedback(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0);

        /// <summary>
        /// Leave feedback for a work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdFeedbackWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0);
        /// <summary>
        /// Add Followers to Work order
        /// </summary>
        /// <remarks>
        /// Add Followers to Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdFollowers(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0);

        /// <summary>
        /// Add Followers to Work order
        /// </summary>
        /// <remarks>
        /// Add Followers to Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdFollowersWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0);
        /// <summary>
        /// Remove Follower from Work order
        /// </summary>
        /// <remarks>
        /// Remove Follower from Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdFollowersemailemail(int workorderId, string email, int operationIndex = 0);

        /// <summary>
        /// Remove Follower from Work order
        /// </summary>
        /// <remarks>
        /// Remove Follower from Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdFollowersemailemailWithHttpInfo(int workorderId, string email, int operationIndex = 0);
        /// <summary>
        /// Get GPS Radius for a WO
        /// </summary>
        /// <remarks>
        /// Get GPS Radius for a WO
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse</returns>
        SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse WorkordersworkorderIdGPSRadius(int workorderId, int operationIndex = 0);

        /// <summary>
        /// Get GPS Radius for a WO
        /// </summary>
        /// <remarks>
        /// Get GPS Radius for a WO
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse> WorkordersworkorderIdGPSRadiusWithHttpInfo(int workorderId, int operationIndex = 0);
        /// <summary>
        /// Update issue choice on WO
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Update issue choice on WO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdWithHttpInfo(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update work order label
        /// </summary>
        /// <remarks>
        /// Update work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersworkorderIdLabel(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0);

        /// <summary>
        /// Update work order label
        /// </summary>
        /// <remarks>
        /// Update work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabelWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0);
        /// <summary>
        /// Delete work order label
        /// </summary>
        /// <remarks>
        /// Delete work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersworkorderIdLabel_0(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0);

        /// <summary>
        /// Delete work order label
        /// </summary>
        /// <remarks>
        /// Delete work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabel_0WithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0);
        /// <summary>
        /// Creates link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0);

        /// <summary>
        /// Creates link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorWithHttpInfo(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update Work order NTE
        /// </summary>
        /// <remarks>
        /// Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdNte(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Work order NTE
        /// </summary>
        /// <remarks>
        /// Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdNteWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update Work order Purchase Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdPonumber(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Work order Purchase Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPonumberWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update Work order Priority
        /// </summary>
        /// <remarks>
        /// Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdPriority(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Work order Priority
        /// </summary>
        /// <remarks>
        /// Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPriorityWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Update ProjectId
        /// </summary>
        /// <remarks>
        /// Updates ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdProjectid(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update ProjectId
        /// </summary>
        /// <remarks>
        /// Updates ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Unlink ProjectId
        /// </summary>
        /// <remarks>
        /// Unlink ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdProjectidUnlink(int workorderId, int operationIndex = 0);

        /// <summary>
        /// Unlink ProjectId
        /// </summary>
        /// <remarks>
        /// Unlink ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidUnlinkWithHttpInfo(int workorderId, int operationIndex = 0);
        /// <summary>
        /// Reassign Work Order
        /// </summary>
        /// <remarks>
        /// Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdReassign(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0);

        /// <summary>
        /// Reassign Work Order
        /// </summary>
        /// <remarks>
        /// Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdReassignWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0);
        /// <summary>
        /// Retrieve the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool WorkordersworkorderIdRefrigerantUseStatus(int workorderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> WorkordersworkorderIdRefrigerantUseStatusWithHttpInfo(int workorderId, int operationIndex = 0);
        /// <summary>
        /// Add Work order Resolution
        /// </summary>
        /// <remarks>
        /// Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdResolution(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0);

        /// <summary>
        /// Add Work order Resolution
        /// </summary>
        /// <remarks>
        /// Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdResolutionWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0);
        /// <summary>
        /// Update Work order Scheduled Date
        /// </summary>
        /// <remarks>
        /// Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0);

        /// <summary>
        /// Update Work order Scheduled Date
        /// </summary>
        /// <remarks>
        /// Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update work order servicenowid
        /// </summary>
        /// <remarks>
        /// Update work order servicenowid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdServicenowid(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0);

        /// <summary>
        /// Update work order servicenowid
        /// </summary>
        /// <remarks>
        /// Update work order servicenowid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdServicenowidWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0);
        /// <summary>
        /// Mark if refrigerant was used
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber(int workorderId, string moeNumber, int operationIndex = 0);

        /// <summary>
        /// Mark if refrigerant was used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberWithHttpInfo(int workorderId, string moeNumber, int operationIndex = 0);
        /// <summary>
        /// Update a Work order Status
        /// </summary>
        /// <remarks>
        /// Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse WorkordersworkorderIdStatus(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0);

        /// <summary>
        /// Update a Work order Status
        /// </summary>
        /// <remarks>
        /// Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse> WorkordersworkorderIdStatusWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0);
        /// <summary>
        /// Statuses Collection that relates to the state of work order
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Statuses Collection that relates to the state of work order
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdTechniciansAssigned(int workorderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdTechniciansAssignedWithHttpInfo(int workorderId, int operationIndex = 0);
        /// <summary>
        /// Change Work order Trade
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdTrade(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Change Work order Trade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdTradeWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Perform a check-in
        /// </summary>
        /// <remarks>
        /// Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse WorkordersworkorderIdUniversalCheckIn(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0);

        /// <summary>
        /// Perform a check-in
        /// </summary>
        /// <remarks>
        /// Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckInWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0);
        /// <summary>
        /// Perform a check-out
        /// </summary>
        /// <remarks>
        /// Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse WorkordersworkorderIdUniversalCheckOut(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0);

        /// <summary>
        /// Perform a check-out
        /// </summary>
        /// <remarks>
        /// Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckOutWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0);
        /// <summary>
        /// Removes link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Removes link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Validate Check-In action
        /// </summary>
        /// <remarks>
        /// Validate Check-In action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Validate Check-In action
        /// </summary>
        /// <remarks>
        /// Validate Check-In action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfo(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Validate Check-Out action
        /// </summary>
        /// <remarks>
        /// Validate Check-Out action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Validate Check-Out action
        /// </summary>
        /// <remarks>
        /// Validate Check-Out action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfo(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update weather type
        /// </summary>
        /// <remarks>
        /// Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Update weather type
        /// </summary>
        /// <remarks>
        /// Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update Work order Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdWonumber(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Work order Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWonumberWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0);
        /// <summary>
        /// Work types Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of Work types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse> WorktypessubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Work types Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of Work types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>> WorktypessubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Order CheckIn Activity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>> CheckInActivityAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Order CheckIn Activity
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>>> CheckInActivityWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Duplicate Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetDuplicateWorkOrdersAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Duplicate Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetDuplicateWorkOrdersWithHttpInfoAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Work Order Recalls
        /// </summary>
        /// <remarks>
        /// Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetRecallWorkOrdersAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Work Order Recalls
        /// </summary>
        /// <remarks>
        /// Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetRecallWorkOrdersWithHttpInfoAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetWorkOrdersWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersForLocationAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetWorkOrdersForLocationWithHttpInfoAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Work Orders near by a site.
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersNearByAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Work Orders near by a site.
        /// </summary>
        /// <remarks>
        /// Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetWorkOrdersNearByWithHttpInfoAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Warning Work Orders for Location
        /// </summary>
        /// <remarks>
        /// Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdAsync(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Warning Work Orders for Location
        /// </summary>
        /// <remarks>
        /// Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdWithHttpInfoAsync(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> LocationslocationIdWorkordersPrioritiesAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>> LocationslocationIdWorkordersPrioritiesWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Work Orders for specified location
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationslocationIdWorkordersstoreIdstoreIdAsync(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Work Orders for specified location
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> LocationslocationIdWorkordersstoreIdstoreIdWithHttpInfoAsync(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> OdataWorkordersFilterAsync(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> OdataWorkordersFilterWithHttpInfoAsync(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriberssubscriberIdWorkordersworkorderIdReassignAsync(int subscriberId, int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriberssubscriberIdWorkordersworkorderIdReassignWithHttpInfoAsync(int subscriberId, int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Work order
        /// </summary>
        /// <remarks>
        /// Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersAsync(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Work order
        /// </summary>
        /// <remarks>
        /// Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Categories Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order categories.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprAsync(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Categories Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order categories.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>>> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprWithHttpInfoAsync(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get work orders feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1Async(List<int> workOrdersIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get work orders feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1WithHttpInfoAsync(List<int> workOrdersIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Empty Survey for Work Order Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersHandlewocompletionforsurveyAsync(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Empty Survey for Work Order Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersHandlewocompletionforsurveyWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdAsync(int certificateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdWithHttpInfoAsync(int certificateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get work orders labels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>> WorkordersLabelkeywordkeywordpagepagepageSizepageSizeAsync(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get work orders labels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>>> WorkordersLabelkeywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Priority
        /// </summary>
        /// <remarks>
        /// Creates Priority.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>> WorkordersPrioritiesAsync(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Priority
        /// </summary>
        /// <remarks>
        /// Creates Priority.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>>> WorkordersPrioritiesWithHttpInfoAsync(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Priorities Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order priorities in user settings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> WorkordersPrioritiessubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Priorities Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order priorities in user settings.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>> WorkordersPrioritiessubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Provider
        /// </summary>
        /// <remarks>
        /// A single Provider object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeAsync(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Provider
        /// </summary>
        /// <remarks>
        /// A single Provider object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeWithHttpInfoAsync(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Work order reassignment reasons
        /// </summary>
        /// <remarks>
        /// List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>> WorkordersReassignReasonssubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Work order reassignment reasons
        /// </summary>
        /// <remarks>
        /// List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>>> WorkordersReassignReasonssubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit solved issue during troubleshooting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersSolvedissueAsync(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit solved issue during troubleshooting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersSolvedissueWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starred Work Order Ids Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of work order ids starred by the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> WorkordersStarredAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starred Work Order Ids Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of work order ids starred by the current user.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> WorkordersStarredWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Statistics Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order Statistics. Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse> WorkordersStatisticsdaysPerioddaysPeriodAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Statistics Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of all Work order Statistics. Only for providers usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse>> WorkordersStatisticsdaysPerioddaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Statuses Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdAsync(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Statuses Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Work Orders
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> WorkorderslocationIdlocationIdstoreIdstoreIdAsync(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Work Orders
        /// </summary>
        /// <remarks>
        /// Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> WorkorderslocationIdlocationIdstoreIdstoreIdWithHttpInfoAsync(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkOrderIdAcceptAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkOrderIdAcceptWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get analytics on a work order
        /// </summary>
        /// <remarks>
        /// Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse> WorkordersworkOrderIdAnalyticsAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get analytics on a work order
        /// </summary>
        /// <remarks>
        /// Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse>> WorkordersworkOrderIdAnalyticsWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get checklist responses for a work order
        /// </summary>
        /// <remarks>
        /// [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse> WorkordersworkOrderIdChecklistsResponsesgetAllgetAllAsync(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get checklist responses for a work order
        /// </summary>
        /// <remarks>
        /// [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse>> WorkordersworkOrderIdChecklistsResponsesgetAllgetAllWithHttpInfoAsync(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Decline a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkOrderIdDeclineAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Decline a work order
        /// </summary>
        /// <remarks>
        /// Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkOrderIdDeclineWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the leak detection result in a Work Order
        /// </summary>
        /// <remarks>
        /// Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> WorkordersworkOrderIdLeakWasDetectedAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the leak detection result in a Work Order
        /// </summary>
        /// <remarks>
        /// Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> WorkordersworkOrderIdLeakWasDetectedWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work orders NTE project approval
        /// </summary>
        /// <remarks>
        /// Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApprovalAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work orders NTE project approval
        /// </summary>
        /// <remarks>
        /// Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkOrderIdProjectApprovalWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Work orders project approval
        /// </summary>
        /// <remarks>
        /// Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApproval_0Async(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Work orders project approval
        /// </summary>
        /// <remarks>
        /// Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkOrderIdProjectApproval_0WithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign technician certificate to the WO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkOrderIdTechnicianCertificateAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign technician certificate to the WO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkOrderIdTechnicianCertificateWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the leak inspection info on a work order
        /// </summary>
        /// <remarks>
        /// RTMultiLeakFlow FF must be enabled for this operation
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedAsync(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the leak inspection info on a work order
        /// </summary>
        /// <remarks>
        /// RTMultiLeakFlow FF must be enabled for this operation
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedWithHttpInfoAsync(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Weather Event associated to a work order (if set)
        /// </summary>
        /// <remarks>
        /// Retrieves the set Weather Event related to a work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelApiModelWorkordersWeatherEventType</returns>
        System.Threading.Tasks.Task<SCServiceChannelApiModelWorkordersWeatherEventType> WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdAsync(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Weather Event associated to a work order (if set)
        /// </summary>
        /// <remarks>
        /// Retrieves the set Weather Event related to a work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelApiModelWorkordersWeatherEventType)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelApiModelWorkordersWeatherEventType>> WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdWithHttpInfoAsync(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Work order
        /// </summary>
        /// <remarks>
        /// A single Work order object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrder> WorkordersworkorderIdAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Work order
        /// </summary>
        /// <remarks>
        /// A single Work order object with all its details.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder>> WorkordersworkorderIdWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Stripe charge
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdAddstripechargeAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Stripe charge
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdAddstripechargeWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work order Caller
        /// </summary>
        /// <remarks>
        /// Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCallerAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work order Caller
        /// </summary>
        /// <remarks>
        /// Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdCallerWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the work order category
        /// </summary>
        /// <remarks>
        /// Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCategoryAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the work order category
        /// </summary>
        /// <remarks>
        /// Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdCategoryWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work order Description
        /// </summary>
        /// <remarks>
        /// Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdDescriptionAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work order Description
        /// </summary>
        /// <remarks>
        /// Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdDescriptionWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checks features of Work order subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingApplicationAccessFeatureResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse> WorkordersworkorderIdFeaturesfeatures0features0features1features1Async(int workorderId, List<string> features, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks features of Work order subscriber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingApplicationAccessFeatureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse>> WorkordersworkorderIdFeaturesfeatures0features0features1features1WithHttpInfoAsync(int workorderId, List<string> features, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Leave feedback for a work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdFeedbackAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Leave feedback for a work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdFeedbackWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Followers to Work order
        /// </summary>
        /// <remarks>
        /// Add Followers to Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdFollowersAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Followers to Work order
        /// </summary>
        /// <remarks>
        /// Add Followers to Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdFollowersWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Follower from Work order
        /// </summary>
        /// <remarks>
        /// Remove Follower from Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdFollowersemailemailAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Follower from Work order
        /// </summary>
        /// <remarks>
        /// Remove Follower from Work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdFollowersemailemailWithHttpInfoAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get GPS Radius for a WO
        /// </summary>
        /// <remarks>
        /// Get GPS Radius for a WO
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse> WorkordersworkorderIdGPSRadiusAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get GPS Radius for a WO
        /// </summary>
        /// <remarks>
        /// Get GPS Radius for a WO
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse>> WorkordersworkorderIdGPSRadiusWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update issue choice on WO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdAsync(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update issue choice on WO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdWithHttpInfoAsync(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work order label
        /// </summary>
        /// <remarks>
        /// Update work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabelAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work order label
        /// </summary>
        /// <remarks>
        /// Update work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersworkorderIdLabelWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete work order label
        /// </summary>
        /// <remarks>
        /// Delete work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabel_0Async(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete work order label
        /// </summary>
        /// <remarks>
        /// Delete work order label.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersworkorderIdLabel_0WithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorAsync(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorWithHttpInfoAsync(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work order NTE
        /// </summary>
        /// <remarks>
        /// Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdNteAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work order NTE
        /// </summary>
        /// <remarks>
        /// Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdNteWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work order Purchase Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPonumberAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work order Purchase Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdPonumberWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work order Priority
        /// </summary>
        /// <remarks>
        /// Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPriorityAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work order Priority
        /// </summary>
        /// <remarks>
        /// Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdPriorityWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update ProjectId
        /// </summary>
        /// <remarks>
        /// Updates ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update ProjectId
        /// </summary>
        /// <remarks>
        /// Updates ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdProjectidWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlink ProjectId
        /// </summary>
        /// <remarks>
        /// Unlink ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidUnlinkAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlink ProjectId
        /// </summary>
        /// <remarks>
        /// Unlink ProjectId.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdProjectidUnlinkWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reassign Work Order
        /// </summary>
        /// <remarks>
        /// Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdReassignAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reassign Work Order
        /// </summary>
        /// <remarks>
        /// Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdReassignWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> WorkordersworkorderIdRefrigerantUseStatusAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>
        /// Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> WorkordersworkorderIdRefrigerantUseStatusWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Work order Resolution
        /// </summary>
        /// <remarks>
        /// Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdResolutionAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Work order Resolution
        /// </summary>
        /// <remarks>
        /// Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdResolutionWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work order Scheduled Date
        /// </summary>
        /// <remarks>
        /// Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work order Scheduled Date
        /// </summary>
        /// <remarks>
        /// Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update work order servicenowid
        /// </summary>
        /// <remarks>
        /// Update work order servicenowid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdServicenowidAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update work order servicenowid
        /// </summary>
        /// <remarks>
        /// Update work order servicenowid.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdServicenowidWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark if refrigerant was used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberAsync(int workorderId, string moeNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark if refrigerant was used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberWithHttpInfoAsync(int workorderId, string moeNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Work order Status
        /// </summary>
        /// <remarks>
        /// Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse> WorkordersworkorderIdStatusAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Work order Status
        /// </summary>
        /// <remarks>
        /// Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse>> WorkordersworkorderIdStatusWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Statuses Collection that relates to the state of work order
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdAsync(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Statuses Collection that relates to the state of work order
        /// </summary>
        /// <remarks>
        /// Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdTechniciansAssignedAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdTechniciansAssignedWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change Work order Trade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdTradeAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change Work order Trade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdTradeWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Perform a check-in
        /// </summary>
        /// <remarks>
        /// Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckInAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Perform a check-in
        /// </summary>
        /// <remarks>
        /// Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>> WorkordersworkorderIdUniversalCheckInWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Perform a check-out
        /// </summary>
        /// <remarks>
        /// Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckOutAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Perform a check-out
        /// </summary>
        /// <remarks>
        /// Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>> WorkordersworkorderIdUniversalCheckOutWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes link between two Work Orders
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Check-In action
        /// </summary>
        /// <remarks>
        /// Validate Check-In action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Check-In action
        /// </summary>
        /// <remarks>
        /// Validate Check-In action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>> WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfoAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Check-Out action
        /// </summary>
        /// <remarks>
        /// Validate Check-Out action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Check-Out action
        /// </summary>
        /// <remarks>
        /// Validate Check-Out action
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>> WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfoAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update weather type
        /// </summary>
        /// <remarks>
        /// Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update weather type
        /// </summary>
        /// <remarks>
        /// Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work order Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWonumberAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work order Number
        /// </summary>
        /// <remarks>
        /// Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdWonumberWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Work types Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of Work types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>> WorktypessubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Work types Collection
        /// </summary>
        /// <remarks>
        /// Retrieves list of Work types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>>> WorktypessubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkOrdersApi : IWorkOrdersApiSync, IWorkOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkOrdersApi : IWorkOrdersApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkOrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkOrdersApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkOrdersApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkOrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkOrdersApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve a Work Order CheckIn Activity Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity> CheckInActivity(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>> localVarResponse = CheckInActivityWithHttpInfo(workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Order CheckIn Activity Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>> CheckInActivityWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.CheckInActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>>("/odata/workorders({workorderId})/Service.CheckInActivity()", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckInActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work Order CheckIn Activity Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>> CheckInActivityAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>> localVarResponse = await CheckInActivityWithHttpInfoAsync(workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Order CheckIn Activity Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersCheckInIActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>>> CheckInActivityWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.CheckInActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>>("/odata/workorders({workorderId})/Service.CheckInActivity()", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckInActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        public SCServiceChannelServicesMessagingWorkordersWorkOrder Get(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> localVarResponse = GetWithHttpInfo(workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersWorkOrder>("/odata/workorders({workorderId})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> localVarResponse = await GetWithHttpInfoAsync(workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrder)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersWorkOrder>("/odata/workorders({workorderId})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Duplicate Work Orders Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetDuplicateWorkOrders(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = GetDuplicateWorkOrdersWithHttpInfo(locationId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Duplicate Work Orders Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetDuplicateWorkOrdersWithHttpInfo(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetDuplicateWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/locations({locationId})/workorders/Service.GetDuplicates()", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDuplicateWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Duplicate Work Orders Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetDuplicateWorkOrdersAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await GetDuplicateWorkOrdersWithHttpInfoAsync(locationId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Duplicate Work Orders Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetDuplicateWorkOrdersWithHttpInfoAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetDuplicateWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/locations({locationId})/workorders/Service.GetDuplicates()", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDuplicateWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Work Order Recalls Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetRecallWorkOrders(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = GetRecallWorkOrdersWithHttpInfo(locationId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Work Order Recalls Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetRecallWorkOrdersWithHttpInfo(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetRecallWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/locations({locationId})/workorders/Service.GetRecalls()", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecallWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Work Order Recalls Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetRecallWorkOrdersAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await GetRecallWorkOrdersWithHttpInfoAsync(locationId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Work Order Recalls Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetRecallWorkOrdersWithHttpInfoAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetRecallWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/locations({locationId})/workorders/Service.GetRecalls()", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecallWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWorkOrders(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = GetWorkOrdersWithHttpInfo(expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersWithHttpInfo(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/workorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await GetWorkOrdersWithHttpInfoAsync(expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetWorkOrdersWithHttpInfoAsync(string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetWorkOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/workorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWorkOrdersForLocation(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = GetWorkOrdersForLocationWithHttpInfo(locationId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersForLocationWithHttpInfo(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetWorkOrdersForLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/locations({locationId})/workorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrdersForLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersForLocationAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await GetWorkOrdersForLocationWithHttpInfoAsync(locationId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Orders Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetWorkOrdersForLocationWithHttpInfoAsync(int locationId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetWorkOrdersForLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/locations({locationId})/workorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrdersForLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work Orders near by a site. Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> GetWorkOrdersNearBy(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = GetWorkOrdersNearByWithHttpInfo(longitude, latitude, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Orders near by a site. Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersNearByWithHttpInfo(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("longitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("latitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetWorkOrdersNearBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/workorders/Service.NearBy(latitude={latitude},longitude={longitude})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrdersNearBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work Orders near by a site. Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> GetWorkOrdersNearByAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await GetWorkOrdersNearByWithHttpInfoAsync(longitude, latitude, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work Orders near by a site. Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> GetWorkOrdersNearByWithHttpInfoAsync(double longitude, double latitude, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("longitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("latitude", ServiceChannel.Api.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.GetWorkOrdersNearBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/workorders/Service.NearBy(latitude={latitude},longitude={longitude})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrdersNearBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Warning Work Orders for Location Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdWithHttpInfo(locationId, locationId2, problemCode, equipment, problemType, trade, completed, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Warning Work Orders for Location Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdWithHttpInfo(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationId' when calling WorkOrdersApi->LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (locationId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId2));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/locations/{LocationId}/warningworkorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Warning Work Orders for Location Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdAsync(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdWithHttpInfoAsync(locationId, locationId2, problemCode, equipment, problemType, trade, completed, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Warning Work Orders for Location Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationId2"> (optional)</param>
        /// <param name="problemCode"> (optional)</param>
        /// <param name="equipment"> (optional)</param>
        /// <param name="problemType"> (optional)</param>
        /// <param name="trade"> (optional)</param>
        /// <param name="completed"> (optional, default to false)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdWithHttpInfoAsync(string locationId, int? locationId2 = default(int?), string? problemCode = default(string?), string? equipment = default(string?), string? problemType = default(string?), string? trade = default(string?), bool? completed = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'locationId' when calling WorkOrdersApi->LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            if (locationId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId2));
            }
            if (problemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemCode", problemCode));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (problemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "problemType", problemType));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/locations/{LocationId}/warningworkorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse> LocationslocationIdWorkordersPriorities(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> localVarResponse = LocationslocationIdWorkordersPrioritiesWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> LocationslocationIdWorkordersPrioritiesWithHttpInfo(int locationId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.LocationslocationIdWorkordersPriorities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>("/locations/{locationId}/workorders/priorities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdWorkordersPriorities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> LocationslocationIdWorkordersPrioritiesAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> localVarResponse = await LocationslocationIdWorkordersPrioritiesWithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>> LocationslocationIdWorkordersPrioritiesWithHttpInfoAsync(int locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.LocationslocationIdWorkordersPriorities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>("/locations/{locationId}/workorders/priorities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdWorkordersPriorities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Work Orders for specified location Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> LocationslocationIdWorkordersstoreIdstoreId(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = LocationslocationIdWorkordersstoreIdstoreIdWithHttpInfo(locationId, storeId, id, category, status, extendedStatus, number, serviceId, priority, purchaseNumber, trade, scheduledDate, expirationDate, callDate, sort, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Work Orders for specified location Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationslocationIdWorkordersstoreIdstoreIdWithHttpInfo(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "category", category));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (extendedStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "extendedStatus", extendedStatus));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "number", number));
            }
            if (serviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "serviceId", serviceId));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "priority", priority));
            }
            if (purchaseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "purchaseNumber", purchaseNumber));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "trade", trade));
            }
            if (scheduledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "scheduledDate", scheduledDate));
            }
            if (expirationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "expirationDate", expirationDate));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "callDate", callDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.LocationslocationIdWorkordersstoreIdstoreId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/locations/{locationId}/workorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdWorkordersstoreIdstoreId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Work Orders for specified location Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> LocationslocationIdWorkordersstoreIdstoreIdAsync(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await LocationslocationIdWorkordersstoreIdstoreIdWithHttpInfoAsync(locationId, storeId, id, category, status, extendedStatus, number, serviceId, priority, purchaseNumber, trade, scheduledDate, expirationDate, callDate, sort, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Work Orders for specified location Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> LocationslocationIdWorkordersstoreIdstoreIdWithHttpInfoAsync(int locationId, string? storeId = default(string?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "category", category));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (extendedStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "extendedStatus", extendedStatus));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "number", number));
            }
            if (serviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "serviceId", serviceId));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "priority", priority));
            }
            if (purchaseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "purchaseNumber", purchaseNumber));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "trade", trade));
            }
            if (scheduledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "scheduledDate", scheduledDate));
            }
            if (expirationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "expirationDate", expirationDate));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "callDate", callDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.LocationslocationIdWorkordersstoreIdstoreId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/locations/{locationId}/workorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationslocationIdWorkordersstoreIdstoreId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> OdataWorkordersFilter(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = OdataWorkordersFilterWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> OdataWorkordersFilterWithHttpInfo(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->OdataWorkordersFilter");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.OdataWorkordersFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/workorders/filter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OdataWorkordersFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> OdataWorkordersFilterAsync(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await OdataWorkordersFilterWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve work orders Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> OdataWorkordersFilterWithHttpInfoAsync(SCServiceChannelServicesMessagingODataRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->OdataWorkordersFilter");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.OdataWorkordersFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/odata/workorders/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OdataWorkordersFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SubscriberssubscriberIdWorkordersworkorderIdReassign(int subscriberId, int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SubscriberssubscriberIdWorkordersworkorderIdReassignWithHttpInfo(subscriberId, workorderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SubscriberssubscriberIdWorkordersworkorderIdReassignWithHttpInfo(int subscriberId, int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.SubscriberssubscriberIdWorkordersworkorderIdReassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/subscribers/{subscriberId}/workorders/{workorderId}/reassign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriberssubscriberIdWorkordersworkorderIdReassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriberssubscriberIdWorkordersworkorderIdReassignAsync(int subscriberId, int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SubscriberssubscriberIdWorkordersworkorderIdReassignWithHttpInfoAsync(subscriberId, workorderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SubscriberssubscriberIdWorkordersworkorderIdReassignWithHttpInfoAsync(int subscriberId, int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.SubscriberssubscriberIdWorkordersworkorderIdReassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/subscribers/{subscriberId}/workorders/{workorderId}/reassign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriberssubscriberIdWorkordersworkorderIdReassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Work order Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Workorders(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0)
        {
            WorkordersWithHttpInfo(request);
        }

        /// <summary>
        /// Create a Work order Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersWithHttpInfo(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->Workorders");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.Workorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Work order Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersAsync(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a Work order Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A new Work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkordersCreateWoRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->Workorders");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.Workorders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Workorders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Categories Collection Retrieves list of all Work order categories.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingCategoryCategoryResponse> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>> localVarResponse = WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprWithHttpInfo(subscriberId, sortExpr);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Categories Collection Retrieves list of all Work order categories.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprWithHttpInfo(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (sortExpr != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sortExpr", sortExpr));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>>("/workorders/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Categories Collection Retrieves list of all Work order categories.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprAsync(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>> localVarResponse = await WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprWithHttpInfoAsync(subscriberId, sortExpr, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Categories Collection Retrieves list of all Work order categories.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="sortExpr">Gets or sets sort expression. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingCategoryCategoryResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>>> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprWithHttpInfoAsync(int? subscriberId = default(int?), string? sortExpr = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (sortExpr != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sortExpr", sortExpr));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>>("/workorders/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get work orders feedbacks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1(List<int> workOrdersIds, int operationIndex = 0)
        {
            WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1WithHttpInfo(workOrdersIds);
        }

        /// <summary>
        /// Get work orders feedbacks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1WithHttpInfo(List<int> workOrdersIds, int operationIndex = 0)
        {
            // verify the required parameter 'workOrdersIds' is set
            if (workOrdersIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrdersIds' when calling WorkOrdersApi->WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "workOrdersIds", workOrdersIds));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/workorders/feedback/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get work orders feedbacks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1Async(List<int> workOrdersIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1WithHttpInfoAsync(workOrdersIds, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get work orders feedbacks 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1WithHttpInfoAsync(List<int> workOrdersIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workOrdersIds' is set
            if (workOrdersIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrdersIds' when calling WorkOrdersApi->WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "workOrdersIds", workOrdersIds));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/workorders/feedback/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Empty Survey for Work Order Completion 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersHandlewocompletionforsurvey(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0)
        {
            WorkordersHandlewocompletionforsurveyWithHttpInfo(request);
        }

        /// <summary>
        /// Add Empty Survey for Work Order Completion 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersHandlewocompletionforsurveyWithHttpInfo(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersHandlewocompletionforsurvey");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersHandlewocompletionforsurvey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/handlewocompletionforsurvey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersHandlewocompletionforsurvey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Empty Survey for Work Order Completion 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersHandlewocompletionforsurveyAsync(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersHandlewocompletionforsurveyWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Empty Survey for Work Order Completion 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersHandlewocompletionforsurveyWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersHandlewocompletionforsurvey");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersHandlewocompletionforsurvey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/handlewocompletionforsurvey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersHandlewocompletionforsurvey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId(int certificateId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdWithHttpInfo(certificateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ServiceChannel.Api.Client.ApiResponse<bool> WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdWithHttpInfo(int certificateId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "certificateId", certificateId));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/workorders/isTechnicianCertificateUsedOnWorkOrders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdAsync(int certificateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = await WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdWithHttpInfoAsync(certificateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<bool>> WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdWithHttpInfoAsync(int certificateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "certificateId", certificateId));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/workorders/isTechnicianCertificateUsedOnWorkOrders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get work orders labels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse> WorkordersLabelkeywordkeywordpagepagepageSizepageSize(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>> localVarResponse = WorkordersLabelkeywordkeywordpagepagepageSizepageSizeWithHttpInfo(keyword, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get work orders labels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>> WorkordersLabelkeywordkeywordpagepagepageSizepageSizeWithHttpInfo(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersLabelkeywordkeywordpagepagepageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>>("/workorders/label", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersLabelkeywordkeywordpagepagepageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get work orders labels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>> WorkordersLabelkeywordkeywordpagepagepageSizepageSizeAsync(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>> localVarResponse = await WorkordersLabelkeywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(keyword, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get work orders labels. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword contained in labels to perform the search by. (optional)</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based. (optional)</param>
        /// <param name="pageSize">Number of labels on the results page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>>> WorkordersLabelkeywordkeywordpagepagepageSizepageSizeWithHttpInfoAsync(string? keyword = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersLabelkeywordkeywordpagepagepageSizepageSize";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>>("/workorders/label", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersLabelkeywordkeywordpagepagepageSizepageSize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Priority Creates Priority.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse> WorkordersPriorities(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>> localVarResponse = WorkordersPrioritiesWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Priority Creates Priority.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>> WorkordersPrioritiesWithHttpInfo(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersPriorities");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersPriorities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>>("/workorders/priorities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersPriorities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Priority Creates Priority.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>> WorkordersPrioritiesAsync(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>> localVarResponse = await WorkordersPrioritiesWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Priority Creates Priority.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>>> WorkordersPrioritiesWithHttpInfoAsync(SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersPriorities");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersPriorities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>>("/workorders/priorities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersPriorities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Priorities Collection Retrieves list of all Work order priorities in user settings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse> WorkordersPrioritiessubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> localVarResponse = WorkordersPrioritiessubscriberIdsubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Priorities Collection Retrieves list of all Work order priorities in user settings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> WorkordersPrioritiessubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersPrioritiessubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>("/workorders/priorities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersPrioritiessubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Priorities Collection Retrieves list of all Work order priorities in user settings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> WorkordersPrioritiessubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>> localVarResponse = await WorkordersPrioritiessubscriberIdsubscriberIdWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Priorities Collection Retrieves list of all Work order priorities in user settings.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingPrioritiesPriorityResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>> WorkordersPrioritiessubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersPrioritiessubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>("/workorders/priorities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersPrioritiessubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Provider A single Provider object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0)
        {
            WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeWithHttpInfo(workorderId, providerId, locationId, trade);
        }

        /// <summary>
        /// Retrieve a Provider A single Provider object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeWithHttpInfo(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0)
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling WorkOrdersApi->WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workorderId", workorderId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/workorders/providerforreassignment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Provider A single Provider object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeAsync(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeWithHttpInfoAsync(workorderId, providerId, locationId, trade, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve a Provider A single Provider object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeWithHttpInfoAsync(int workorderId, int providerId, int locationId, string trade, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trade' is set
            if (trade == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'trade' when calling WorkOrdersApi->WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workorderId", workorderId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "trade", trade));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/workorders/providerforreassignment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work order reassignment reasons List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason> WorkordersReassignReasonssubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>> localVarResponse = WorkordersReassignReasonssubscriberIdsubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work order reassignment reasons List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>> WorkordersReassignReasonssubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersReassignReasonssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>>("/workorders/reassign/reasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersReassignReasonssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work order reassignment reasons List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>> WorkordersReassignReasonssubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>> localVarResponse = await WorkordersReassignReasonssubscriberIdsubscriberIdWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work order reassignment reasons List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>>> WorkordersReassignReasonssubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersReassignReasonssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>>("/workorders/reassign/reasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersReassignReasonssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit solved issue during troubleshooting 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersSolvedissue(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0)
        {
            WorkordersSolvedissueWithHttpInfo(model);
        }

        /// <summary>
        /// Submit solved issue during troubleshooting 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersSolvedissueWithHttpInfo(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling WorkOrdersApi->WorkordersSolvedissue");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersSolvedissue";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/solvedissue", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersSolvedissue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit solved issue during troubleshooting 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersSolvedissueAsync(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersSolvedissueWithHttpInfoAsync(model, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Submit solved issue during troubleshooting 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersSolvedissueWithHttpInfoAsync(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'model' when calling WorkOrdersApi->WorkordersSolvedissue");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersSolvedissue";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/solvedissue", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersSolvedissue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starred Work Order Ids Collection Retrieves list of work order ids starred by the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> WorkordersStarred(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<int>> localVarResponse = WorkordersStarredWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starred Work Order Ids Collection Retrieves list of work order ids starred by the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<int>> WorkordersStarredWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersStarred";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<int>>("/workorders/starred", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersStarred", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starred Work Order Ids Collection Retrieves list of work order ids starred by the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> WorkordersStarredAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<int>> localVarResponse = await WorkordersStarredWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starred Work Order Ids Collection Retrieves list of work order ids starred by the current user.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<int>>> WorkordersStarredWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersStarred";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/workorders/starred", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersStarred", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Statistics Collection Retrieves list of all Work order Statistics. Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse WorkordersStatisticsdaysPerioddaysPeriod(int? daysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse> localVarResponse = WorkordersStatisticsdaysPerioddaysPeriodWithHttpInfo(daysPeriod);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Statistics Collection Retrieves list of all Work order Statistics. Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse> WorkordersStatisticsdaysPerioddaysPeriodWithHttpInfo(int? daysPeriod = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersStatisticsdaysPerioddaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse>("/workorders/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersStatisticsdaysPerioddaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Statistics Collection Retrieves list of all Work order Statistics. Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse> WorkordersStatisticsdaysPerioddaysPeriodAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse> localVarResponse = await WorkordersStatisticsdaysPerioddaysPeriodWithHttpInfoAsync(daysPeriod, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Statistics Collection Retrieves list of all Work order Statistics. Only for providers usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse>> WorkordersStatisticsdaysPerioddaysPeriodWithHttpInfoAsync(int? daysPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (daysPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "daysPeriod", daysPeriod));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersStatisticsdaysPerioddaysPeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse>("/workorders/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersStatisticsdaysPerioddaysPeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Statuses Collection Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(subscriberId, tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Statuses Collection Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/statuses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Statuses Collection Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdAsync(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = await WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(subscriberId, tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Statuses Collection Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/statuses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Work Orders Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersWorkOrder> WorkorderslocationIdlocationIdstoreIdstoreId(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = WorkorderslocationIdlocationIdstoreIdstoreIdWithHttpInfo(locationId, storeId, otherLocationId, id, category, status, extendedStatus, number, serviceId, priority, purchaseNumber, trade, scheduledDate, expirationDate, callDate, sort, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Work Orders Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> WorkorderslocationIdlocationIdstoreIdstoreIdWithHttpInfo(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (otherLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "otherLocationId", otherLocationId));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "category", category));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (extendedStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "extendedStatus", extendedStatus));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "number", number));
            }
            if (serviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "serviceId", serviceId));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "priority", priority));
            }
            if (purchaseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "purchaseNumber", purchaseNumber));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "trade", trade));
            }
            if (scheduledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "scheduledDate", scheduledDate));
            }
            if (expirationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "expirationDate", expirationDate));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "callDate", callDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkorderslocationIdlocationIdstoreIdstoreId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/workorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkorderslocationIdlocationIdstoreIdstoreId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Work Orders Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> WorkorderslocationIdlocationIdstoreIdstoreIdAsync(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>> localVarResponse = await WorkorderslocationIdlocationIdstoreIdstoreIdWithHttpInfoAsync(locationId, storeId, otherLocationId, id, category, status, extendedStatus, number, serviceId, priority, purchaseNumber, trade, scheduledDate, expirationDate, callDate, sort, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Work Orders Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">UID of location. (optional)</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed. (optional)</param>
        /// <param name="otherLocationId">UID of location, exact search by default (optional)</param>
        /// <param name="id">UID of work order, exact search by default (optional)</param>
        /// <param name="category">Category of work order, exact search by default (optional)</param>
        /// <param name="status">Status of work order, exact search by default (optional)</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default (optional)</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="priority">Priority of work order, exact search by default (optional)</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default (optional)</param>
        /// <param name="scheduledDate">Scheduled date (optional)</param>
        /// <param name="expirationDate">Expiration date (optional)</param>
        /// <param name="callDate">Call date (optional)</param>
        /// <param name="sort">Sort resources by the specified property in the response. (optional)</param>
        /// <param name="page">Results page number. (optional)</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersWorkOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>> WorkorderslocationIdlocationIdstoreIdstoreIdWithHttpInfoAsync(int? locationId = default(int?), string? storeId = default(string?), List<Object>? otherLocationId = default(List<Object>?), List<Object>? id = default(List<Object>?), List<Object>? category = default(List<Object>?), List<Object>? status = default(List<Object>?), List<Object>? extendedStatus = default(List<Object>?), List<Object>? number = default(List<Object>?), List<Object>? serviceId = default(List<Object>?), List<Object>? priority = default(List<Object>?), List<Object>? purchaseNumber = default(List<Object>?), List<Object>? trade = default(List<Object>?), List<Object>? scheduledDate = default(List<Object>?), List<Object>? expirationDate = default(List<Object>?), List<Object>? callDate = default(List<Object>?), string? sort = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }
            if (otherLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "otherLocationId", otherLocationId));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "category", category));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (extendedStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "extendedStatus", extendedStatus));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "number", number));
            }
            if (serviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "serviceId", serviceId));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "priority", priority));
            }
            if (purchaseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "purchaseNumber", purchaseNumber));
            }
            if (trade != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "trade", trade));
            }
            if (scheduledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "scheduledDate", scheduledDate));
            }
            if (expirationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "expirationDate", expirationDate));
            }
            if (callDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("csv", "callDate", callDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkorderslocationIdlocationIdstoreIdstoreId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>("/workorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkorderslocationIdlocationIdstoreIdstoreId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a work order Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkOrderIdAccept(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0)
        {
            WorkordersworkOrderIdAcceptWithHttpInfo(workOrderId, request);
        }

        /// <summary>
        /// Accept a work order Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkOrderIdAcceptWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkOrderIdAccept");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdAccept";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workOrderId}/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdAccept", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a work order Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkOrderIdAcceptAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkOrderIdAcceptWithHttpInfoAsync(workOrderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Accept a work order Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkOrderIdAcceptWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkOrderIdAccept");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdAccept";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workOrderId}/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdAccept", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics on a work order Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse WorkordersworkOrderIdAnalytics(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse> localVarResponse = WorkordersworkOrderIdAnalyticsWithHttpInfo(workOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytics on a work order Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse> WorkordersworkOrderIdAnalyticsWithHttpInfo(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdAnalytics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse>("/workorders/{workOrderId}/analytics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdAnalytics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics on a work order Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse> WorkordersworkOrderIdAnalyticsAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse> localVarResponse = await WorkordersworkOrderIdAnalyticsWithHttpInfoAsync(workOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytics on a work order Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse>> WorkordersworkOrderIdAnalyticsWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdAnalytics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse>("/workorders/{workOrderId}/analytics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdAnalytics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklist responses for a work order [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse WorkordersworkOrderIdChecklistsResponsesgetAllgetAll(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse> localVarResponse = WorkordersworkOrderIdChecklistsResponsesgetAllgetAllWithHttpInfo(workOrderId, getAll);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklist responses for a work order [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse> WorkordersworkOrderIdChecklistsResponsesgetAllgetAllWithHttpInfo(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            if (getAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "getAll", getAll));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdChecklistsResponsesgetAllgetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse>("/workorders/{workOrderId}/checklists-responses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdChecklistsResponsesgetAllgetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get checklist responses for a work order [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse> WorkordersworkOrderIdChecklistsResponsesgetAllgetAllAsync(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse> localVarResponse = await WorkordersworkOrderIdChecklistsResponsesgetAllgetAllWithHttpInfoAsync(workOrderId, getAll, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get checklist responses for a work order [Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse>> WorkordersworkOrderIdChecklistsResponsesgetAllgetAllWithHttpInfoAsync(int workOrderId, bool? getAll = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            if (getAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "getAll", getAll));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdChecklistsResponsesgetAllgetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse>("/workorders/{workOrderId}/checklists-responses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdChecklistsResponsesgetAllgetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decline a work order Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkOrderIdDecline(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0)
        {
            WorkordersworkOrderIdDeclineWithHttpInfo(workOrderId, request);
        }

        /// <summary>
        /// Decline a work order Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkOrderIdDeclineWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkOrderIdDecline");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdDecline";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workOrderId}/decline", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdDecline", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decline a work order Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkOrderIdDeclineAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkOrderIdDeclineWithHttpInfoAsync(workOrderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Decline a work order Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkOrderIdDeclineWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkOrderIdDecline");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdDecline";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workOrderId}/decline", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdDecline", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the leak detection result in a Work Order Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool WorkordersworkOrderIdLeakWasDetected(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = WorkordersworkOrderIdLeakWasDetectedWithHttpInfo(workOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the leak detection result in a Work Order Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ServiceChannel.Api.Client.ApiResponse<bool> WorkordersworkOrderIdLeakWasDetectedWithHttpInfo(int workOrderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdLeakWasDetected";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/workorders/{workOrderId}/leakWasDetected", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdLeakWasDetected", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the leak detection result in a Work Order Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> WorkordersworkOrderIdLeakWasDetectedAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = await WorkordersworkOrderIdLeakWasDetectedWithHttpInfoAsync(workOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the leak detection result in a Work Order Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<bool>> WorkordersworkOrderIdLeakWasDetectedWithHttpInfoAsync(int workOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdLeakWasDetected";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/workorders/{workOrderId}/leakWasDetected", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdLeakWasDetected", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work orders NTE project approval Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkOrderIdProjectApproval(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkOrderIdProjectApprovalWithHttpInfo(workOrderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work orders NTE project approval Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApprovalWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkOrderIdProjectApproval");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdProjectApproval";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workOrderId}/projectApproval", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdProjectApproval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work orders NTE project approval Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApprovalAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkOrderIdProjectApprovalWithHttpInfoAsync(workOrderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work orders NTE project approval Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkOrderIdProjectApprovalWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkOrderIdProjectApproval");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdProjectApproval";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workOrderId}/projectApproval", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdProjectApproval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Work orders project approval Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkOrderIdProjectApproval_0(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkOrderIdProjectApproval_0WithHttpInfo(workOrderId, createRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work orders project approval Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApproval_0WithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createRequest' is set
            if (createRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'createRequest' when calling WorkOrdersApi->WorkordersworkOrderIdProjectApproval_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = createRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdProjectApproval_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workOrderId}/projectApproval", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdProjectApproval_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Work orders project approval Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkOrderIdProjectApproval_0Async(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkOrderIdProjectApproval_0WithHttpInfoAsync(workOrderId, createRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work orders project approval Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkOrderIdProjectApproval_0WithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createRequest' is set
            if (createRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'createRequest' when calling WorkOrdersApi->WorkordersworkOrderIdProjectApproval_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = createRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdProjectApproval_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workOrderId}/projectApproval", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdProjectApproval_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign technician certificate to the WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkOrderIdTechnicianCertificate(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0)
        {
            WorkordersworkOrderIdTechnicianCertificateWithHttpInfo(workOrderId, request);
        }

        /// <summary>
        /// Assign technician certificate to the WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkOrderIdTechnicianCertificateWithHttpInfo(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkOrderIdTechnicianCertificate");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdTechnicianCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workOrderId}/technicianCertificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdTechnicianCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign technician certificate to the WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkOrderIdTechnicianCertificateAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkOrderIdTechnicianCertificateWithHttpInfoAsync(workOrderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign technician certificate to the WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkOrderIdTechnicianCertificateWithHttpInfoAsync(int workOrderId, SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkOrderIdTechnicianCertificate");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdTechnicianCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workOrderId}/technicianCertificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdTechnicianCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the leak inspection info on a work order RTMultiLeakFlow FF must be enabled for this operation
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0)
        {
            WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedWithHttpInfo(workOrderId, refrigerantWasUsed, leakWasDetected);
        }

        /// <summary>
        /// Update the leak inspection info on a work order RTMultiLeakFlow FF must be enabled for this operation
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedWithHttpInfo(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "refrigerantWasUsed", refrigerantWasUsed));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "leakWasDetected", leakWasDetected));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workOrderId}/UpdateWorkOrderLeakInspectionInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the leak inspection info on a work order RTMultiLeakFlow FF must be enabled for this operation
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedAsync(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedWithHttpInfoAsync(workOrderId, refrigerantWasUsed, leakWasDetected, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the leak inspection info on a work order RTMultiLeakFlow FF must be enabled for this operation
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedWithHttpInfoAsync(int workOrderId, bool refrigerantWasUsed, bool leakWasDetected, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "refrigerantWasUsed", refrigerantWasUsed));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "leakWasDetected", leakWasDetected));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workOrderId}/UpdateWorkOrderLeakInspectionInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Weather Event associated to a work order (if set) Retrieves the set Weather Event related to a work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelApiModelWorkordersWeatherEventType</returns>
        public SCServiceChannelApiModelWorkordersWeatherEventType WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelWorkordersWeatherEventType> localVarResponse = WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdWithHttpInfo(workOrderId, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Weather Event associated to a work order (if set) Retrieves the set Weather Event related to a work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelApiModelWorkordersWeatherEventType</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelWorkordersWeatherEventType> WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdWithHttpInfo(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelApiModelWorkordersWeatherEventType>("/workorders/{workOrderId}/weatherEvent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Weather Event associated to a work order (if set) Retrieves the set Weather Event related to a work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelApiModelWorkordersWeatherEventType</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelApiModelWorkordersWeatherEventType> WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdAsync(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelWorkordersWeatherEventType> localVarResponse = await WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdWithHttpInfoAsync(workOrderId, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Weather Event associated to a work order (if set) Retrieves the set Weather Event related to a work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelApiModelWorkordersWeatherEventType)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelApiModelWorkordersWeatherEventType>> WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdWithHttpInfoAsync(int workOrderId, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workOrderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workOrderId)); // path parameter
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelApiModelWorkordersWeatherEventType>("/workorders/{workOrderId}/weatherEvent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work order A single Work order object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        public SCServiceChannelServicesMessagingWorkordersWorkOrder WorkordersworkorderId(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> localVarResponse = WorkordersworkorderIdWithHttpInfo(workorderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work order A single Work order object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> WorkordersworkorderIdWithHttpInfo(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersWorkOrder>("/workorders/{workorderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Work order A single Work order object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersWorkOrder</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersWorkOrder> WorkordersworkorderIdAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder> localVarResponse = await WorkordersworkorderIdWithHttpInfoAsync(workorderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Work order A single Work order object with all its details.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersWorkOrder)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersWorkOrder>> WorkordersworkorderIdWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersWorkOrder>("/workorders/{workorderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Stripe charge &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdAddstripecharge(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0)
        {
            WorkordersworkorderIdAddstripechargeWithHttpInfo(workorderId, request);
        }

        /// <summary>
        /// Create Stripe charge &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdAddstripechargeWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdAddstripecharge");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdAddstripecharge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/addstripecharge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdAddstripecharge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Stripe charge &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdAddstripechargeAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdAddstripechargeWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Stripe charge &lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdAddstripechargeWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdAddstripecharge");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdAddstripecharge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/addstripecharge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdAddstripecharge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Caller Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdCaller(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdCallerWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Caller Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCallerWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdCaller");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdCaller";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/caller", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdCaller", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Caller Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCallerAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdCallerWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Caller Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdCallerWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdCaller");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdCaller";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/caller", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdCaller", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the work order category Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdCategory(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdCategoryWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the work order category Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCategoryWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdCategory");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/category", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the work order category Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdCategoryAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdCategoryWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the work order category Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdCategoryWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdCategory");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/category", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Description Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdDescription(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdDescriptionWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Description Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdDescriptionWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdDescription");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/description", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Description Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdDescriptionAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdDescriptionWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Description Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdDescriptionWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdDescription");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/description", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks features of Work order subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingApplicationAccessFeatureResponse</returns>
        public SCServiceChannelServicesMessagingApplicationAccessFeatureResponse WorkordersworkorderIdFeaturesfeatures0features0features1features1(int workorderId, List<string> features, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse> localVarResponse = WorkordersworkorderIdFeaturesfeatures0features0features1features1WithHttpInfo(workorderId, features);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks features of Work order subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingApplicationAccessFeatureResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse> WorkordersworkorderIdFeaturesfeatures0features0features1features1WithHttpInfo(int workorderId, List<string> features, int operationIndex = 0)
        {
            // verify the required parameter 'features' is set
            if (features == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'features' when calling WorkOrdersApi->WorkordersworkorderIdFeaturesfeatures0features0features1features1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "features", features));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFeaturesfeatures0features0features1features1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse>("/workorders/{workorderId}/features", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFeaturesfeatures0features0features1features1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks features of Work order subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingApplicationAccessFeatureResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse> WorkordersworkorderIdFeaturesfeatures0features0features1features1Async(int workorderId, List<string> features, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse> localVarResponse = await WorkordersworkorderIdFeaturesfeatures0features0features1features1WithHttpInfoAsync(workorderId, features, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks features of Work order subscriber 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingApplicationAccessFeatureResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse>> WorkordersworkorderIdFeaturesfeatures0features0features1features1WithHttpInfoAsync(int workorderId, List<string> features, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'features' is set
            if (features == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'features' when calling WorkOrdersApi->WorkordersworkorderIdFeaturesfeatures0features0features1features1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "features", features));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFeaturesfeatures0features0features1features1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse>("/workorders/{workorderId}/features", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFeaturesfeatures0features0features1features1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave feedback for a work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdFeedback(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0)
        {
            WorkordersworkorderIdFeedbackWithHttpInfo(workorderId, leaveFeedbackRequest);
        }

        /// <summary>
        /// Leave feedback for a work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdFeedbackWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0)
        {
            // verify the required parameter 'leaveFeedbackRequest' is set
            if (leaveFeedbackRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'leaveFeedbackRequest' when calling WorkOrdersApi->WorkordersworkorderIdFeedback");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = leaveFeedbackRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/feedback", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave feedback for a work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdFeedbackAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdFeedbackWithHttpInfoAsync(workorderId, leaveFeedbackRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Leave feedback for a work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdFeedbackWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaveFeedbackRequest' is set
            if (leaveFeedbackRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'leaveFeedbackRequest' when calling WorkOrdersApi->WorkordersworkorderIdFeedback");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = leaveFeedbackRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/feedback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Followers to Work order Add Followers to Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdFollowers(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0)
        {
            WorkordersworkorderIdFollowersWithHttpInfo(workorderId, request);
        }

        /// <summary>
        /// Add Followers to Work order Add Followers to Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdFollowersWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdFollowers");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Followers to Work order Add Followers to Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdFollowersAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdFollowersWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Followers to Work order Add Followers to Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdFollowersWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdFollowers");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Follower from Work order Remove Follower from Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdFollowersemailemail(int workorderId, string email, int operationIndex = 0)
        {
            WorkordersworkorderIdFollowersemailemailWithHttpInfo(workorderId, email);
        }

        /// <summary>
        /// Remove Follower from Work order Remove Follower from Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdFollowersemailemailWithHttpInfo(int workorderId, string email, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'email' when calling WorkOrdersApi->WorkordersworkorderIdFollowersemailemail");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFollowersemailemail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/workorders/{workorderId}/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFollowersemailemail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Follower from Work order Remove Follower from Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdFollowersemailemailAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdFollowersemailemailWithHttpInfoAsync(workorderId, email, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Follower from Work order Remove Follower from Work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdFollowersemailemailWithHttpInfoAsync(int workorderId, string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'email' when calling WorkOrdersApi->WorkordersworkorderIdFollowersemailemail");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdFollowersemailemail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/workorders/{workorderId}/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdFollowersemailemail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get GPS Radius for a WO Get GPS Radius for a WO
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse WorkordersworkorderIdGPSRadius(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse> localVarResponse = WorkordersworkorderIdGPSRadiusWithHttpInfo(workorderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get GPS Radius for a WO Get GPS Radius for a WO
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse> WorkordersworkorderIdGPSRadiusWithHttpInfo(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdGPSRadius";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse>("/workorders/{workorderId}/GPSRadius", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdGPSRadius", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get GPS Radius for a WO Get GPS Radius for a WO
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse> WorkordersworkorderIdGPSRadiusAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse> localVarResponse = await WorkordersworkorderIdGPSRadiusWithHttpInfoAsync(workorderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get GPS Radius for a WO Get GPS Radius for a WO
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse>> WorkordersworkorderIdGPSRadiusWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdGPSRadius";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse>("/workorders/{workorderId}/GPSRadius", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdGPSRadius", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update issue choice on WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0)
        {
            WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdWithHttpInfo(workorderId, subscriberId, issueChoice, locationId);
        }

        /// <summary>
        /// Update issue choice on WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdWithHttpInfo(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'issueChoice' is set
            if (issueChoice == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'issueChoice' when calling WorkOrdersApi->WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            localVarRequestOptions.Data = issueChoice;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workorderId}/issueChoice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update issue choice on WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdAsync(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdWithHttpInfoAsync(workorderId, subscriberId, issueChoice, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update issue choice on WO 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdWithHttpInfoAsync(int workorderId, int subscriberId, SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, int? locationId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'issueChoice' is set
            if (issueChoice == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'issueChoice' when calling WorkOrdersApi->WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            localVarRequestOptions.Data = issueChoice;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workorderId}/issueChoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work order label Update work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersworkorderIdLabel(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = WorkordersworkorderIdLabelWithHttpInfo(workorderId, workOrderLabelRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update work order label Update work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabelWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0)
        {
            // verify the required parameter 'workOrderLabelRequest' is set
            if (workOrderLabelRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrderLabelRequest' when calling WorkOrdersApi->WorkordersworkorderIdLabel");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = workOrderLabelRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdLabel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/{workorderId}/label", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdLabel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work order label Update work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabelAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = await WorkordersworkorderIdLabelWithHttpInfoAsync(workorderId, workOrderLabelRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update work order label Update work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersworkorderIdLabelWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workOrderLabelRequest' is set
            if (workOrderLabelRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrderLabelRequest' when calling WorkOrdersApi->WorkordersworkorderIdLabel");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = workOrderLabelRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdLabel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/{workorderId}/label", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdLabel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete work order label Delete work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersworkorderIdLabel_0(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = WorkordersworkorderIdLabel_0WithHttpInfo(workorderId, workOrderLabelRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete work order label Delete work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabel_0WithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0)
        {
            // verify the required parameter 'workOrderLabelRequest' is set
            if (workOrderLabelRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrderLabelRequest' when calling WorkOrdersApi->WorkordersworkorderIdLabel_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = workOrderLabelRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdLabel_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/{workorderId}/label", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdLabel_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete work order label Delete work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdLabel_0Async(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = await WorkordersworkorderIdLabel_0WithHttpInfoAsync(workorderId, workOrderLabelRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete work order label Delete work order label.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersworkorderIdLabel_0WithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workOrderLabelRequest' is set
            if (workOrderLabelRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrderLabelRequest' when calling WorkOrdersApi->WorkordersworkorderIdLabel_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = workOrderLabelRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdLabel_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/{workorderId}/label", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdLabel_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates link between two Work Orders &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0)
        {
            WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkWithHttpInfo(workorderId, request, workorderIdToLink);
        }

        /// <summary>
        /// Creates link between two Work Orders &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (workorderIdToLink != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workorderIdToLink", workorderIdToLink));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workorderId}/link", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates link between two Work Orders &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkWithHttpInfoAsync(workorderId, request, workorderIdToLink, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates link between two Work Orders &lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, int? workorderIdToLink = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (workorderIdToLink != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workorderIdToLink", workorderIdToLink));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workorderId}/link", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the status of refrigerant use on a work order Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0)
        {
            WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorWithHttpInfo(workorderId, refrigerantWasUsed, actor);
        }

        /// <summary>
        /// Update the status of refrigerant use on a work order Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorWithHttpInfo(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (refrigerantWasUsed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "refrigerantWasUsed", refrigerantWasUsed));
            }
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workorderId}/markRefrigerantUse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the status of refrigerant use on a work order Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorAsync(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorWithHttpInfoAsync(workorderId, refrigerantWasUsed, actor, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the status of refrigerant use on a work order Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order. (optional, default to false)</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorWithHttpInfoAsync(int workorderId, bool? refrigerantWasUsed = default(bool?), string? actor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (refrigerantWasUsed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "refrigerantWasUsed", refrigerantWasUsed));
            }
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workorderId}/markRefrigerantUse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order NTE Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdNte(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdNteWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order NTE Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdNteWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdNte");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdNte";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/nte", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNte", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order NTE Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdNteAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdNteWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order NTE Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdNteWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdNte");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdNte";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/nte", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNte", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Purchase Number Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdPonumber(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdPonumberWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Purchase Number Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPonumberWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdPonumber");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdPonumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/ponumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdPonumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Purchase Number Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPonumberAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdPonumberWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Purchase Number Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdPonumberWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdPonumber");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdPonumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/ponumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdPonumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Priority Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdPriority(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdPriorityWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Priority Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPriorityWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdPriority");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdPriority";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/priority", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdPriority", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Priority Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdPriorityAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdPriorityWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Priority Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdPriorityWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdPriority");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdPriority";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdPriority", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update ProjectId Updates ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdProjectid(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdProjectidWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update ProjectId Updates ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdProjectid");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdProjectid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/projectid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdProjectid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update ProjectId Updates ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdProjectidWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update ProjectId Updates ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdProjectidWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdProjectid");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdProjectid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/projectid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdProjectid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink ProjectId Unlink ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdProjectidUnlink(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdProjectidUnlinkWithHttpInfo(workorderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlink ProjectId Unlink ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidUnlinkWithHttpInfo(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdProjectidUnlink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/projectid/unlink", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdProjectidUnlink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink ProjectId Unlink ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdProjectidUnlinkAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdProjectidUnlinkWithHttpInfoAsync(workorderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlink ProjectId Unlink ProjectId.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdProjectidUnlinkWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdProjectidUnlink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/projectid/unlink", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdProjectidUnlink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reassign Work Order Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdReassign(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdReassignWithHttpInfo(workorderId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reassign Work Order Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdReassignWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdReassign");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdReassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/reassign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdReassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reassign Work Order Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdReassignAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdReassignWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reassign Work Order Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdReassignWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersReassignWORequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdReassign");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdReassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/reassign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdReassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the status of refrigerant use on a work order Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool WorkordersworkorderIdRefrigerantUseStatus(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = WorkordersworkorderIdRefrigerantUseStatusWithHttpInfo(workorderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the status of refrigerant use on a work order Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ServiceChannel.Api.Client.ApiResponse<bool> WorkordersworkorderIdRefrigerantUseStatusWithHttpInfo(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdRefrigerantUseStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/workorders/{workorderId}/refrigerantUseStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdRefrigerantUseStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the status of refrigerant use on a work order Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> WorkordersworkorderIdRefrigerantUseStatusAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<bool> localVarResponse = await WorkordersworkorderIdRefrigerantUseStatusWithHttpInfoAsync(workorderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the status of refrigerant use on a work order Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<bool>> WorkordersworkorderIdRefrigerantUseStatusWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdRefrigerantUseStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/workorders/{workorderId}/refrigerantUseStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdRefrigerantUseStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Work order Resolution Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdResolution(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdResolutionWithHttpInfo(workorderId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Work order Resolution Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdResolutionWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdResolution");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdResolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/resolution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdResolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Work order Resolution Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdResolutionAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdResolutionWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Work order Resolution Adds Resolution to Work order. Returns Resolution Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdResolutionWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdResolution");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdResolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/resolution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdResolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Scheduled Date Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeWithHttpInfo(workorderId, updateRequest, rescheduleReasonCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Scheduled Date Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (rescheduleReasonCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "rescheduleReasonCode", rescheduleReasonCode));
            }
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/scheduledate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Scheduled Date Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeWithHttpInfoAsync(workorderId, updateRequest, rescheduleReasonCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Scheduled Date Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int? rescheduleReasonCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (rescheduleReasonCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "rescheduleReasonCode", rescheduleReasonCode));
            }
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/scheduledate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work order servicenowid Update work order servicenowid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdServicenowid(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdServicenowidWithHttpInfo(workorderId, workOrderServiceNowIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update work order servicenowid Update work order servicenowid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdServicenowidWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'workOrderServiceNowIdRequest' is set
            if (workOrderServiceNowIdRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrderServiceNowIdRequest' when calling WorkOrdersApi->WorkordersworkorderIdServicenowid");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = workOrderServiceNowIdRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdServicenowid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/servicenowid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdServicenowid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update work order servicenowid Update work order servicenowid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdServicenowidAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdServicenowidWithHttpInfoAsync(workorderId, workOrderServiceNowIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update work order servicenowid Update work order servicenowid.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdServicenowidWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workOrderServiceNowIdRequest' is set
            if (workOrderServiceNowIdRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrderServiceNowIdRequest' when calling WorkOrdersApi->WorkordersworkorderIdServicenowid");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = workOrderServiceNowIdRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdServicenowid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/servicenowid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdServicenowid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark if refrigerant was used 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber(int workorderId, string moeNumber, int operationIndex = 0)
        {
            WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberWithHttpInfo(workorderId, moeNumber);
        }

        /// <summary>
        /// Mark if refrigerant was used 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberWithHttpInfo(int workorderId, string moeNumber, int operationIndex = 0)
        {
            // verify the required parameter 'moeNumber' is set
            if (moeNumber == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'moeNumber' when calling WorkOrdersApi->WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "moeNumber", moeNumber));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workorderId}/SetMoeNumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark if refrigerant was used 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberAsync(int workorderId, string moeNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberWithHttpInfoAsync(workorderId, moeNumber, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Mark if refrigerant was used 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberWithHttpInfoAsync(int workorderId, string moeNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'moeNumber' is set
            if (moeNumber == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'moeNumber' when calling WorkOrdersApi->WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "moeNumber", moeNumber));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workorderId}/SetMoeNumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Work order Status Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse WorkordersworkorderIdStatus(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse> localVarResponse = WorkordersworkorderIdStatusWithHttpInfo(workorderId, updateRequestExt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Work order Status Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse> WorkordersworkorderIdStatusWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequestExt' is set
            if (updateRequestExt == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequestExt' when calling WorkOrdersApi->WorkordersworkorderIdStatus");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequestExt;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse>("/workorders/{workorderId}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Work order Status Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse> WorkordersworkorderIdStatusAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse> localVarResponse = await WorkordersworkorderIdStatusWithHttpInfoAsync(workorderId, updateRequestExt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Work order Status Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse>> WorkordersworkorderIdStatusWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequestExt' is set
            if (updateRequestExt == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequestExt' when calling WorkOrdersApi->WorkordersworkorderIdStatus");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequestExt;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse>("/workorders/{workorderId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Statuses Collection that relates to the state of work order Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(workorderId, subscriberId, tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Statuses Collection that relates to the state of work order Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/{workorderId}/statuses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Statuses Collection that relates to the state of work order Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdAsync(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>> localVarResponse = await WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(workorderId, subscriberId, tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Statuses Collection that relates to the state of work order Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingWorkordersGetStatusResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(int workorderId, int? subscriberId = default(int?), int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>("/workorders/{workorderId}/statuses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdTechniciansAssigned(int workorderId, int operationIndex = 0)
        {
            WorkordersworkorderIdTechniciansAssignedWithHttpInfo(workorderId);
        }

        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdTechniciansAssignedWithHttpInfo(int workorderId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdTechniciansAssigned";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/workorders/{workorderId}/techniciansAssigned", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdTechniciansAssigned", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdTechniciansAssignedAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdTechniciansAssignedWithHttpInfoAsync(workorderId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdTechniciansAssignedWithHttpInfoAsync(int workorderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdTechniciansAssigned";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/workorders/{workorderId}/techniciansAssigned", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdTechniciansAssigned", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Work order Trade 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdTrade(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdTradeWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Work order Trade 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdTradeWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdTrade");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdTrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/trade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Work order Trade 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdTradeAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdTradeWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Work order Trade 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdTradeWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdTrade");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdTrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/trade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform a check-in Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        public SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse WorkordersworkorderIdUniversalCheckIn(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> localVarResponse = WorkordersworkorderIdUniversalCheckInWithHttpInfo(workorderId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a check-in Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckInWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdUniversalCheckIn");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdUniversalCheckIn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>("/workorders/{workorderId}/universalCheckIn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdUniversalCheckIn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform a check-in Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckInAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> localVarResponse = await WorkordersworkorderIdUniversalCheckInWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a check-in Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>> WorkordersworkorderIdUniversalCheckInWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckInRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdUniversalCheckIn");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdUniversalCheckIn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>("/workorders/{workorderId}/universalCheckIn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdUniversalCheckIn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform a check-out Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        public SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse WorkordersworkorderIdUniversalCheckOut(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> localVarResponse = WorkordersworkorderIdUniversalCheckOutWithHttpInfo(workorderId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a check-out Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckOutWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdUniversalCheckOut");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdUniversalCheckOut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>("/workorders/{workorderId}/universalCheckOut", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdUniversalCheckOut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform a check-out Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> WorkordersworkorderIdUniversalCheckOutAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse> localVarResponse = await WorkordersworkorderIdUniversalCheckOutWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a check-out Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>> WorkordersworkorderIdUniversalCheckOutWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersCheckOutRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdUniversalCheckOut");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdUniversalCheckOut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>("/workorders/{workorderId}/universalCheckOut", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdUniversalCheckOut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes link between two Work Orders &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0)
        {
            WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdWithHttpInfo(workorderId, request, linkedWorkorderId);
        }

        /// <summary>
        /// Removes link between two Work Orders &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (linkedWorkorderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "linkedWorkorderId", linkedWorkorderId));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/workorders/{workorderId}/unlink", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes link between two Work Orders &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdWithHttpInfoAsync(workorderId, request, linkedWorkorderId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes link between two Work Orders &lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, int? linkedWorkorderId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling WorkOrdersApi->WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (linkedWorkorderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "linkedWorkorderId", linkedWorkorderId));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/workorders/{workorderId}/unlink", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Check-In action Validate Check-In action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        public SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> localVarResponse = WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfo(workorderId, latitude, longitude, workTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Check-In action Validate Check-In action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfo(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (workTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workTypeId", workTypeId));
            }
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>("/workorders/{workorderId}/validateCheckIn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Check-In action Validate Check-In action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> localVarResponse = await WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfoAsync(workorderId, latitude, longitude, workTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Check-In action Validate Check-In action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>> WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfoAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (workTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workTypeId", workTypeId));
            }
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>("/workorders/{workorderId}/validateCheckIn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Check-Out action Validate Check-Out action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        public SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> localVarResponse = WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfo(workorderId, latitude, longitude, workTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Check-Out action Validate Check-Out action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfo(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (workTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workTypeId", workTypeId));
            }
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>("/workorders/{workorderId}/validateCheckOut", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Check-Out action Validate Check-Out action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse> localVarResponse = await WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfoAsync(workorderId, latitude, longitude, workTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Check-Out action Validate Check-Out action
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>> WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeWithHttpInfoAsync(int workorderId, double latitude, double longitude, int? workTypeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (workTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "workTypeId", workTypeId));
            }
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>("/workorders/{workorderId}/validateCheckOut", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update weather type Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdWithHttpInfo(workorderId, updateRequest, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update weather type Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/weatherTypeId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update weather type Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdWithHttpInfoAsync(workorderId, updateRequest, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update weather type Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/weatherTypeId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Number Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse WorkordersworkorderIdWonumber(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = WorkordersworkorderIdWonumberWithHttpInfo(workorderId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Number Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWonumberWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdWonumber");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdWonumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/wonumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWonumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work order Number Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> WorkordersworkorderIdWonumberAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse> localVarResponse = await WorkordersworkorderIdWonumberWithHttpInfoAsync(workorderId, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work order Number Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>> WorkordersworkorderIdWonumberWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling WorkOrdersApi->WorkordersworkorderIdWonumber");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "WorkOrdersApi.WorkordersworkorderIdWonumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>("/workorders/{workorderId}/wonumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdWonumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work types Collection Retrieves list of Work types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse> WorktypessubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>> localVarResponse = WorktypessubscriberIdsubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work types Collection Retrieves list of Work types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>> WorktypessubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorktypessubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>>("/worktypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorktypessubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work types Collection Retrieves list of Work types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>> WorktypessubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>> localVarResponse = await WorktypessubscriberIdsubscriberIdWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work types Collection Retrieves list of Work types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">This parameter is required only for provider. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>>> WorktypessubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "WorkOrdersApi.WorktypessubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>>("/worktypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorktypessubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
