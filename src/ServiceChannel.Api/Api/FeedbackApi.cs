/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeedbackApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse</returns>
        SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse> FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdWithHttpInfo(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingFeedbackReviewProviderRequest</returns>
        SCServiceChannelServicesMessagingFeedbackReviewProviderRequest FeedbacksReviews(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingFeedbackReviewProviderRequest</returns>
        ApiResponse<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest> FeedbacksReviewsWithHttpInfo(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberId(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdWithHttpInfo(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse</returns>
        SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberId(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse> FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdWithHttpInfo(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        int FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberId(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdWithHttpInfo(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;</returns>
        List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberId(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdWithHttpInfo(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FeedbacksWorkordersworkorderId(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FeedbacksWorkordersworkorderIdWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeedbackApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse> FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdAsync(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse>> FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdWithHttpInfoAsync(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingFeedbackReviewProviderRequest</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest> FeedbacksReviewsAsync(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingFeedbackReviewProviderRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest>> FeedbacksReviewsWithHttpInfoAsync(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdAsync(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdWithHttpInfoAsync(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse> FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdAsync(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse>> FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdWithHttpInfoAsync(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdAsync(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdWithHttpInfoAsync(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdAsync(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>>> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdWithHttpInfoAsync(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FeedbacksWorkordersworkorderIdAsync(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FeedbacksWorkordersworkorderIdWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeedbackApi : IFeedbackApiSync, IFeedbackApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeedbackApi : IFeedbackApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeedbackApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeedbackApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeedbackApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FeedbackApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse</returns>
        public SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse> localVarResponse = FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdWithHttpInfo(workOrdersIds, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse> FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdWithHttpInfo(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'workOrdersIds' is set
            if (workOrdersIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrdersIds' when calling FeedbackApi->FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "workOrdersIds", workOrdersIds));
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse>("/feedbacks/byWorkorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse> FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdAsync(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse> localVarResponse = await FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdWithHttpInfoAsync(workOrdersIds, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse>> FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberIdWithHttpInfoAsync(List<int> workOrdersIds, int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workOrdersIds' is set
            if (workOrdersIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'workOrdersIds' when calling FeedbackApi->FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "workOrdersIds", workOrdersIds));
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse>("/feedbacks/byWorkorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingFeedbackReviewProviderRequest</returns>
        public SCServiceChannelServicesMessagingFeedbackReviewProviderRequest FeedbacksReviews(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest> localVarResponse = FeedbacksReviewsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingFeedbackReviewProviderRequest</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest> FeedbacksReviewsWithHttpInfo(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling FeedbackApi->FeedbacksReviews");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksReviews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest>("/feedbacks/reviews", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksReviews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingFeedbackReviewProviderRequest</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest> FeedbacksReviewsAsync(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest> localVarResponse = await FeedbacksReviewsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingFeedbackReviewProviderRequest)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest>> FeedbacksReviewsWithHttpInfoAsync(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling FeedbackApi->FeedbacksReviews");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksReviews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingFeedbackReviewProviderRequest>("/feedbacks/reviews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksReviews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberId(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdWithHttpInfo(providerId, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdWithHttpInfo(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/feedbacks/reviews/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdAsync(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdWithHttpInfoAsync(providerId, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberIdWithHttpInfoAsync(int? providerId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/feedbacks/reviews/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse</returns>
        public SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberId(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse> localVarResponse = FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdWithHttpInfo(providerId, searchWithin, pageSize, pageOffset, sortBy, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse> FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdWithHttpInfo(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (searchWithin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchWithin", searchWithin));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageOffset", pageOffset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse>("/feedbacks/reviews", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse> FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdAsync(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse> localVarResponse = await FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdWithHttpInfoAsync(providerId, searchWithin, pageSize, pageOffset, sortBy, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id (optional)</param>
        /// <param name="searchWithin">Search within reviews comment (optional)</param>
        /// <param name="pageSize">Response page size (default 10) (optional)</param>
        /// <param name="pageOffset">Response page offset (default 0) (optional)</param>
        /// <param name="sortBy">Sort by field (default by Recent) (optional)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse>> FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberIdWithHttpInfoAsync(int? providerId = default(int?), string? searchWithin = default(string?), int? pageSize = default(int?), int? pageOffset = default(int?), string? sortBy = default(string?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (searchWithin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "searchWithin", searchWithin));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "pageOffset", pageOffset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse>("/feedbacks/reviews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        public int FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberId(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<int> localVarResponse = FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdWithHttpInfo(locationId, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        public ServiceChannel.Api.Client.ApiResponse<int> FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdWithHttpInfo(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/feedbacks/workorders/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdAsync(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<int> localVarResponse = await FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdWithHttpInfoAsync(locationId, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"> (optional)</param>
        /// <param name="subscriberId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<int>> FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberIdWithHttpInfoAsync(int? locationId = default(int?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/feedbacks/workorders/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;</returns>
        public List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberId(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>> localVarResponse = FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdWithHttpInfo(locationId, setupId, orderByField, orderDirection, showMyWorkOrders, subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdWithHttpInfo(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (orderByField != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "orderByField", orderByField));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "orderDirection", orderDirection));
            }
            if (showMyWorkOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "showMyWorkOrders", showMyWorkOrders));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>>("/feedbacks/workorders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdAsync(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>> localVarResponse = await FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdWithHttpInfoAsync(locationId, setupId, orderByField, orderDirection, showMyWorkOrders, subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">LocationId (optional)</param>
        /// <param name="setupId">Dashboard setupId (optional) (optional)</param>
        /// <param name="orderByField">Order by field (optional)</param>
        /// <param name="orderDirection">Order direction (optional)</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id (optional, default to false)</param>
        /// <param name="subscriberId">Subscriber Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingFeedbackWorkorderFeedback&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>>> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberIdWithHttpInfoAsync(int? locationId = default(int?), int? setupId = default(int?), string? orderByField = default(string?), string? orderDirection = default(string?), bool? showMyWorkOrders = default(bool?), int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (setupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "setupId", setupId));
            }
            if (orderByField != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "orderByField", orderByField));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "orderDirection", orderDirection));
            }
            if (showMyWorkOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "showMyWorkOrders", showMyWorkOrders));
            }
            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>>("/feedbacks/workorders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FeedbacksWorkordersworkorderId(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0)
        {
            FeedbacksWorkordersworkorderIdWithHttpInfo(workorderId, request);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> FeedbacksWorkordersworkorderIdWithHttpInfo(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling FeedbackApi->FeedbacksWorkordersworkorderId");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksWorkordersworkorderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/feedbacks/workorders/{workorderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksWorkordersworkorderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FeedbacksWorkordersworkorderIdAsync(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FeedbacksWorkordersworkorderIdWithHttpInfoAsync(workorderId, request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> FeedbacksWorkordersworkorderIdWithHttpInfoAsync(int workorderId, SCServiceChannelServicesMessagingFeedbackFeedbackRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling FeedbackApi->FeedbacksWorkordersworkorderId");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "FeedbackApi.FeedbacksWorkordersworkorderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/feedbacks/workorders/{workorderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeedbacksWorkordersworkorderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
