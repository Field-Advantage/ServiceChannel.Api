/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsGetattachmentsbyassetids(List<int> assetIds, int operationIndex = 0);

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsWithHttpInfo(List<int> assetIds, int operationIndex = 0);
        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsGetattachmentsbyassetidsV1(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0);

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsV1WithHttpInfo(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0);
        /// <summary>
        /// Update asset attachment by id
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update asset attachment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionWithHttpInfo(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete Asset Attachment
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetsassetAttachmentIdDeleteAttachment(int assetAttachmentId, int operationIndex = 0);

        /// <summary>
        /// Delete Asset Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetsassetAttachmentIdDeleteAttachmentWithHttpInfo(int assetAttachmentId, int operationIndex = 0);
        /// <summary>
        /// Add Attachments to Asset
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse> AssetsassetIdAttachmentsisDefaultisDefault(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Add Attachments to Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>> AssetsassetIdAttachmentsisDefaultisDefaultWithHttpInfo(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetAttachment> AssetsassetIdAttachmentsproviderIdproviderId(int assetId, int? providerId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsassetIdAttachmentsproviderIdproviderIdWithHttpInfo(int assetId, int? providerId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCSystemNetHttpByteArrayContent</returns>
        SCSystemNetHttpByteArrayContent GetProposalAttachmentThumbnail(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCSystemNetHttpByteArrayContent</returns>
        ApiResponse<SCSystemNetHttpByteArrayContent> GetProposalAttachmentThumbnailWithHttpInfo(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Proposal Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetProposalAttachments(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Proposal Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetProposalAttachmentsWithHttpInfo(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Rfp Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetRFPAttachments(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Rfp Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetRFPAttachmentsWithHttpInfo(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Workorders Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorders Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetWorkOrderAttachments(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Workorders Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorders Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderAttachmentsWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Workorder Note Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorder Note Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetWorkOrderNotesAttachments(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Workorder Note Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorder Note Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderNotesAttachmentsWithHttpInfo(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCSystemNetHttpByteArrayContent</returns>
        SCSystemNetHttpByteArrayContent GetWorkorderAttachmentThumbnail(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCSystemNetHttpByteArrayContent</returns>
        ApiResponse<SCSystemNetHttpByteArrayContent> GetWorkorderAttachmentThumbnailWithHttpInfo(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add attchment to RFP
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RfpsidAttachments(int id, System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Add attchment to RFP
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RfpsidAttachmentsWithHttpInfo(int id, System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Returns list of attachment ids and urls.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;</returns>
        List<SCServiceChannelApiModelSiteAuditAttachmentInComment> SiteauditCommentscommentIdAttachments(int commentId, int operationIndex = 0);

        /// <summary>
        /// Returns list of attachment ids and urls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;</returns>
        ApiResponse<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>> SiteauditCommentscommentIdAttachmentsWithHttpInfo(int commentId, int operationIndex = 0);
        /// <summary>
        /// Add attchment to Comment
        /// </summary>
        /// <remarks>
        /// Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SiteauditCommentscommentIdAttachments_0(int commentId, System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Add attchment to Comment
        /// </summary>
        /// <remarks>
        /// Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SiteauditCommentscommentIdAttachments_0WithHttpInfo(int commentId, System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Retrieve original attchment from Comment
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SiteauditCommentscommentIdAttachmentsattachmentId(int commentId, int attachmentId, int operationIndex = 0);

        /// <summary>
        /// Retrieve original attchment from Comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SiteauditCommentscommentIdAttachmentsattachmentIdWithHttpInfo(int commentId, int attachmentId, int operationIndex = 0);
        /// <summary>
        /// Retrieve resized attchment from Comment
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve resized attchment from Comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfo(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersAttachmentAsBase64(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersAttachmentAsBase64WithHttpInfo(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0);
        /// <summary>
        /// Add attachments to a work order by PO number
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkorderspoNumberAttachmentsByPoNumberactoractor(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Add attachments to a work order by PO number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkorderspoNumberAttachmentsByPoNumberactoractorWithHttpInfo(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        /// <summary>
        /// Add attachments to a work order
        /// </summary>
        /// <remarks>
        /// Adds attachments to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdAttachmentsactoractor(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Add attachments to a work order
        /// </summary>
        /// <remarks>
        /// Adds attachments to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdAttachmentsactoractorWithHttpInfo(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfo(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0);
        /// <summary>
        /// Add Attachments to Work Order Note
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkordersworkorderIdNotesnoteIdAttachments(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Add Attachments to Work Order Note
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkordersworkorderIdNotesnoteIdAttachmentsWithHttpInfo(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Get WorkRequest Note Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAttachmentsAttachment> WorkrequestWorkRequestIdNotesNoteIdAttachments(int workRequestId, int noteId, int operationIndex = 0);

        /// <summary>
        /// Get WorkRequest Note Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestWorkRequestIdNotesNoteIdAttachmentsWithHttpInfo(int workRequestId, int noteId, int operationIndex = 0);
        /// <summary>
        /// Get WorkRequest Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        List<SCServiceChannelServicesMessagingAttachmentsAttachment> WorkrequestworkRequestIdAttachments(int workRequestId, int operationIndex = 0);

        /// <summary>
        /// Get WorkRequest Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestworkRequestIdAttachmentsWithHttpInfo(int workRequestId, int operationIndex = 0);
        /// <summary>
        /// Add attachments to a WorkRequest
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestworkRequestIdAttachmentsactoractor(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Add attachments to a WorkRequest
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestworkRequestIdAttachmentsactoractorWithHttpInfo(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Add Attachments to Work Request Note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkrequestworkRequestIdNotesnoteIdAttachments(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Add Attachments to Work Request Note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkrequestworkRequestIdNotesnoteIdAttachmentsWithHttpInfo(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsAsync(List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>> AssetsGetattachmentsbyassetidsWithHttpInfoAsync(List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsV1Async(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>> AssetsGetattachmentsbyassetidsV1WithHttpInfoAsync(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update asset attachment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionAsync(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update asset attachment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionWithHttpInfoAsync(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Asset Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetsassetAttachmentIdDeleteAttachmentAsync(int assetAttachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Asset Attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsassetAttachmentIdDeleteAttachmentWithHttpInfoAsync(int assetAttachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Attachments to Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>> AssetsassetIdAttachmentsisDefaultisDefaultAsync(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Attachments to Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>>> AssetsassetIdAttachmentsisDefaultisDefaultWithHttpInfoAsync(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsassetIdAttachmentsproviderIdproviderIdAsync(int assetId, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsassetIdAttachmentsproviderIdproviderIdWithHttpInfoAsync(int assetId, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCSystemNetHttpByteArrayContent</returns>
        System.Threading.Tasks.Task<SCSystemNetHttpByteArrayContent> GetProposalAttachmentThumbnailAsync(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCSystemNetHttpByteArrayContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCSystemNetHttpByteArrayContent>> GetProposalAttachmentThumbnailWithHttpInfoAsync(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Proposal Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetProposalAttachmentsAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Proposal Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Proposal Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetProposalAttachmentsWithHttpInfoAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Rfp Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetRFPAttachmentsAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Rfp Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Rfp Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetRFPAttachmentsWithHttpInfoAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Workorders Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorders Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderAttachmentsAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Workorders Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorders Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetWorkOrderAttachmentsWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Workorder Note Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorder Note Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderNotesAttachmentsAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Workorder Note Attachments
        /// </summary>
        /// <remarks>
        /// Retrieve Workorder Note Attachments
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetWorkOrderNotesAttachmentsWithHttpInfoAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCSystemNetHttpByteArrayContent</returns>
        System.Threading.Tasks.Task<SCSystemNetHttpByteArrayContent> GetWorkorderAttachmentThumbnailAsync(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>
        /// Retrieve Attachment Thumbnail
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCSystemNetHttpByteArrayContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCSystemNetHttpByteArrayContent>> GetWorkorderAttachmentThumbnailWithHttpInfoAsync(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add attchment to RFP
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RfpsidAttachmentsAsync(int id, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add attchment to RFP
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RfpsidAttachmentsWithHttpInfoAsync(int id, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns list of attachment ids and urls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>> SiteauditCommentscommentIdAttachmentsAsync(int commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns list of attachment ids and urls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>>> SiteauditCommentscommentIdAttachmentsWithHttpInfoAsync(int commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add attchment to Comment
        /// </summary>
        /// <remarks>
        /// Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SiteauditCommentscommentIdAttachments_0Async(int commentId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add attchment to Comment
        /// </summary>
        /// <remarks>
        /// Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SiteauditCommentscommentIdAttachments_0WithHttpInfoAsync(int commentId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve original attchment from Comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SiteauditCommentscommentIdAttachmentsattachmentIdAsync(int commentId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve original attchment from Comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SiteauditCommentscommentIdAttachmentsattachmentIdWithHttpInfoAsync(int commentId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve resized attchment from Comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatAsync(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve resized attchment from Comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfoAsync(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersAttachmentAsBase64Async(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersAttachmentAsBase64WithHttpInfoAsync(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add attachments to a work order by PO number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkorderspoNumberAttachmentsByPoNumberactoractorAsync(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add attachments to a work order by PO number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkorderspoNumberAttachmentsByPoNumberactoractorWithHttpInfoAsync(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add attachments to a work order
        /// </summary>
        /// <remarks>
        /// Adds attachments to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdAttachmentsactoractorAsync(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add attachments to a work order
        /// </summary>
        /// <remarks>
        /// Adds attachments to the specified work order.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdAttachmentsactoractorWithHttpInfoAsync(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatAsync(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfoAsync(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Attachments to Work Order Note
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkordersworkorderIdNotesnoteIdAttachmentsAsync(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Attachments to Work Order Note
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkordersworkorderIdNotesnoteIdAttachmentsWithHttpInfoAsync(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get WorkRequest Note Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestWorkRequestIdNotesNoteIdAttachmentsAsync(int workRequestId, int noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get WorkRequest Note Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> WorkrequestWorkRequestIdNotesNoteIdAttachmentsWithHttpInfoAsync(int workRequestId, int noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get WorkRequest Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestworkRequestIdAttachmentsAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get WorkRequest Attachments
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> WorkrequestworkRequestIdAttachmentsWithHttpInfoAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add attachments to a WorkRequest
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestworkRequestIdAttachmentsactoractorAsync(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add attachments to a WorkRequest
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestworkRequestIdAttachmentsactoractorWithHttpInfoAsync(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Attachments to Work Request Note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkrequestworkRequestIdNotesnoteIdAttachmentsAsync(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Attachments to Work Request Note
        /// </summary>
        /// <remarks>
        /// *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkrequestworkRequestIdNotesnoteIdAttachmentsWithHttpInfoAsync(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApi : IAttachmentsApiSync, IAttachmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttachmentsApi : IAttachmentsApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentsApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AttachmentsApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        public Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsGetattachmentsbyassetids(List<int> assetIds, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> localVarResponse = AssetsGetattachmentsbyassetidsWithHttpInfo(assetIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsWithHttpInfo(List<int> assetIds, int operationIndex = 0)
        {
            // verify the required parameter 'assetIds' is set
            if (assetIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetIds' when calling AttachmentsApi->AssetsGetattachmentsbyassetids");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetIds;

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsGetattachmentsbyassetids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>("/assets/getattachmentsbyassetids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetattachmentsbyassetids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsAsync(List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> localVarResponse = await AssetsGetattachmentsbyassetidsWithHttpInfoAsync(assetIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>> AssetsGetattachmentsbyassetidsWithHttpInfoAsync(List<int> assetIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetIds' is set
            if (assetIds == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetIds' when calling AttachmentsApi->AssetsGetattachmentsbyassetids");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetIds;

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsGetattachmentsbyassetids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>("/assets/getattachmentsbyassetids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetattachmentsbyassetids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        public Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsGetattachmentsbyassetidsV1(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> localVarResponse = AssetsGetattachmentsbyassetidsV1WithHttpInfo(assetAttachmentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsV1WithHttpInfo(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetAttachmentsRequest' is set
            if (assetAttachmentsRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetAttachmentsRequest' when calling AttachmentsApi->AssetsGetattachmentsbyassetidsV1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetAttachmentsRequest;

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsGetattachmentsbyassetidsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>("/assets/getattachmentsbyassetids_v1", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetattachmentsbyassetidsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsGetattachmentsbyassetidsV1Async(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> localVarResponse = await AssetsGetattachmentsbyassetidsV1WithHttpInfoAsync(assetAttachmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>> AssetsGetattachmentsbyassetidsV1WithHttpInfoAsync(SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAttachmentsRequest' is set
            if (assetAttachmentsRequest == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'assetAttachmentsRequest' when calling AttachmentsApi->AssetsGetattachmentsbyassetidsV1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetAttachmentsRequest;

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsGetattachmentsbyassetidsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>("/assets/getattachmentsbyassetids_v1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsGetattachmentsbyassetidsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset attachment by id 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionWithHttpInfo(attachmentId, fileName, description);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset attachment by id 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionWithHttpInfo(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "attachmentId", attachmentId));
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/assets/updateAssetAttachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset attachment by id 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionAsync(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionWithHttpInfoAsync(attachmentId, fileName, description, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset attachment by id 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name (optional)</param>
        /// <param name="description">New file description(comment) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionWithHttpInfoAsync(int attachmentId, string? fileName = default(string?), string? description = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "attachmentId", attachmentId));
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/assets/updateAssetAttachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Asset Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetsassetAttachmentIdDeleteAttachment(int assetAttachmentId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetsassetAttachmentIdDeleteAttachmentWithHttpInfo(assetAttachmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Asset Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetsassetAttachmentIdDeleteAttachmentWithHttpInfo(int assetAttachmentId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetAttachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetAttachmentId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsassetAttachmentIdDeleteAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assets/{assetAttachmentId}/deleteAttachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetAttachmentIdDeleteAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Asset Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetsassetAttachmentIdDeleteAttachmentAsync(int assetAttachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetsassetAttachmentIdDeleteAttachmentWithHttpInfoAsync(assetAttachmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Asset Attachment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAttachmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetsassetAttachmentIdDeleteAttachmentWithHttpInfoAsync(int assetAttachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetAttachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetAttachmentId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsassetAttachmentIdDeleteAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/assets/{assetAttachmentId}/deleteAttachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetAttachmentIdDeleteAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Attachments to Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse> AssetsassetIdAttachmentsisDefaultisDefault(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>> localVarResponse = AssetsassetIdAttachmentsisDefaultisDefaultWithHttpInfo(assetId, file, isDefault, addAttachmentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Attachments to Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>> AssetsassetIdAttachmentsisDefaultisDefaultWithHttpInfo(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->AssetsassetIdAttachmentsisDefaultisDefault");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (isDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "isDefault", isDefault));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsassetIdAttachmentsisDefaultisDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>>("/assets/{assetId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetIdAttachmentsisDefaultisDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Attachments to Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>> AssetsassetIdAttachmentsisDefaultisDefaultAsync(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>> localVarResponse = await AssetsassetIdAttachmentsisDefaultisDefaultWithHttpInfoAsync(assetId, file, isDefault, addAttachmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Attachments to Asset 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"> (optional, default to false)</param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>>> AssetsassetIdAttachmentsisDefaultisDefaultWithHttpInfoAsync(int assetId, System.IO.Stream file, bool? isDefault = default(bool?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->AssetsassetIdAttachmentsisDefaultisDefault");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (isDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "isDefault", isDefault));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsassetIdAttachmentsisDefaultisDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>>("/assets/{assetId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetIdAttachmentsisDefaultisDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetAttachment> AssetsassetIdAttachmentsproviderIdproviderId(int assetId, int? providerId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> localVarResponse = AssetsassetIdAttachmentsproviderIdproviderIdWithHttpInfo(assetId, providerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsassetIdAttachmentsproviderIdproviderIdWithHttpInfo(int assetId, int? providerId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsassetIdAttachmentsproviderIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>("/assets/{assetId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetIdAttachmentsproviderIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> AssetsassetIdAttachmentsproviderIdproviderIdAsync(int assetId, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>> localVarResponse = await AssetsassetIdAttachmentsproviderIdproviderIdWithHttpInfoAsync(assetId, providerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>> AssetsassetIdAttachmentsproviderIdproviderIdWithHttpInfoAsync(int assetId, int? providerId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.AssetsassetIdAttachmentsproviderIdproviderId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>("/assets/{assetId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetsassetIdAttachmentsproviderIdproviderId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCSystemNetHttpByteArrayContent</returns>
        public SCSystemNetHttpByteArrayContent GetProposalAttachmentThumbnail(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent> localVarResponse = GetProposalAttachmentThumbnailWithHttpInfo(imageFormat, mode, height, width, attachmentId, proposalId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCSystemNetHttpByteArrayContent</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent> GetProposalAttachmentThumbnailWithHttpInfo(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'imageFormat' is set
            if (imageFormat == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'imageFormat' when calling AttachmentsApi->GetProposalAttachmentThumbnail");
            }

            // verify the required parameter 'mode' is set
            if (mode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'mode' when calling AttachmentsApi->GetProposalAttachmentThumbnail");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageFormat", ServiceChannel.Api.Client.ClientUtils.ParameterToString(imageFormat)); // path parameter
            localVarRequestOptions.PathParameters.Add("mode", ServiceChannel.Api.Client.ClientUtils.ParameterToString(mode)); // path parameter
            localVarRequestOptions.PathParameters.Add("height", ServiceChannel.Api.Client.ClientUtils.ParameterToString(height)); // path parameter
            localVarRequestOptions.PathParameters.Add("width", ServiceChannel.Api.Client.ClientUtils.ParameterToString(width)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetProposalAttachmentThumbnail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCSystemNetHttpByteArrayContent>("/odata/proposals({proposalId})/attachments({attachmentId})/Service.GetThumbnail(width={width},height={height},mode={mode},imageFormat={imageFormat})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalAttachmentThumbnail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCSystemNetHttpByteArrayContent</returns>
        public async System.Threading.Tasks.Task<SCSystemNetHttpByteArrayContent> GetProposalAttachmentThumbnailAsync(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent> localVarResponse = await GetProposalAttachmentThumbnailWithHttpInfoAsync(imageFormat, mode, height, width, attachmentId, proposalId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCSystemNetHttpByteArrayContent)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent>> GetProposalAttachmentThumbnailWithHttpInfoAsync(string imageFormat, string mode, int height, int width, int attachmentId, int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageFormat' is set
            if (imageFormat == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'imageFormat' when calling AttachmentsApi->GetProposalAttachmentThumbnail");
            }

            // verify the required parameter 'mode' is set
            if (mode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'mode' when calling AttachmentsApi->GetProposalAttachmentThumbnail");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageFormat", ServiceChannel.Api.Client.ClientUtils.ParameterToString(imageFormat)); // path parameter
            localVarRequestOptions.PathParameters.Add("mode", ServiceChannel.Api.Client.ClientUtils.ParameterToString(mode)); // path parameter
            localVarRequestOptions.PathParameters.Add("height", ServiceChannel.Api.Client.ClientUtils.ParameterToString(height)); // path parameter
            localVarRequestOptions.PathParameters.Add("width", ServiceChannel.Api.Client.ClientUtils.ParameterToString(width)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetProposalAttachmentThumbnail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCSystemNetHttpByteArrayContent>("/odata/proposals({proposalId})/attachments({attachmentId})/Service.GetThumbnail(width={width},height={height},mode={mode},imageFormat={imageFormat})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalAttachmentThumbnail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Proposal Attachments Retrieve Proposal Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetProposalAttachments(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = GetProposalAttachmentsWithHttpInfo(proposalId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Proposal Attachments Retrieve Proposal Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetProposalAttachmentsWithHttpInfo(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetProposalAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/proposals({proposalId})/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Proposal Attachments Retrieve Proposal Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetProposalAttachmentsAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = await GetProposalAttachmentsWithHttpInfoAsync(proposalId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Proposal Attachments Retrieve Proposal Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetProposalAttachmentsWithHttpInfoAsync(int proposalId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("proposalId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetProposalAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/proposals({proposalId})/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposalAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Rfp Attachments Retrieve Rfp Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetRFPAttachments(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = GetRFPAttachmentsWithHttpInfo(rfpId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfp Attachments Retrieve Rfp Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetRFPAttachmentsWithHttpInfo(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetRFPAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/rfps({rfpId})/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRFPAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Rfp Attachments Retrieve Rfp Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetRFPAttachmentsAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = await GetRFPAttachmentsWithHttpInfoAsync(rfpId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Rfp Attachments Retrieve Rfp Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetRFPAttachmentsWithHttpInfoAsync(int rfpId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rfpId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(rfpId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetRFPAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/rfps({rfpId})/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRFPAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Workorders Attachments Retrieve Workorders Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetWorkOrderAttachments(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = GetWorkOrderAttachmentsWithHttpInfo(workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Workorders Attachments Retrieve Workorders Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderAttachmentsWithHttpInfo(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetWorkOrderAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/workorders({workorderId})/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Workorders Attachments Retrieve Workorders Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderAttachmentsAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = await GetWorkOrderAttachmentsWithHttpInfoAsync(workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Workorders Attachments Retrieve Workorders Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetWorkOrderAttachmentsWithHttpInfoAsync(int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetWorkOrderAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/workorders({workorderId})/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Workorder Note Attachments Retrieve Workorder Note Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> GetWorkOrderNotesAttachments(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = GetWorkOrderNotesAttachmentsWithHttpInfo(noteId, workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Workorder Note Attachments Retrieve Workorder Note Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderNotesAttachmentsWithHttpInfo(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetWorkOrderNotesAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/workorders({workorderId})/notes({noteId})/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderNotesAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Workorder Note Attachments Retrieve Workorder Note Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> GetWorkOrderNotesAttachmentsAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = await GetWorkOrderNotesAttachmentsWithHttpInfoAsync(noteId, workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Workorder Note Attachments Retrieve Workorder Note Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> GetWorkOrderNotesAttachmentsWithHttpInfoAsync(int noteId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetWorkOrderNotesAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/odata/workorders({workorderId})/notes({noteId})/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkOrderNotesAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCSystemNetHttpByteArrayContent</returns>
        public SCSystemNetHttpByteArrayContent GetWorkorderAttachmentThumbnail(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent> localVarResponse = GetWorkorderAttachmentThumbnailWithHttpInfo(imageFormat, mode, height, width, attachmentId, workorderId, expand, select, filter, orderby, top, skip, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCSystemNetHttpByteArrayContent</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent> GetWorkorderAttachmentThumbnailWithHttpInfo(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'imageFormat' is set
            if (imageFormat == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'imageFormat' when calling AttachmentsApi->GetWorkorderAttachmentThumbnail");
            }

            // verify the required parameter 'mode' is set
            if (mode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'mode' when calling AttachmentsApi->GetWorkorderAttachmentThumbnail");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageFormat", ServiceChannel.Api.Client.ClientUtils.ParameterToString(imageFormat)); // path parameter
            localVarRequestOptions.PathParameters.Add("mode", ServiceChannel.Api.Client.ClientUtils.ParameterToString(mode)); // path parameter
            localVarRequestOptions.PathParameters.Add("height", ServiceChannel.Api.Client.ClientUtils.ParameterToString(height)); // path parameter
            localVarRequestOptions.PathParameters.Add("width", ServiceChannel.Api.Client.ClientUtils.ParameterToString(width)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetWorkorderAttachmentThumbnail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCSystemNetHttpByteArrayContent>("/odata/workorders({workorderId})/attachments({attachmentId})/Service.GetThumbnail(width={width},height={height},mode={mode},imageFormat={imageFormat})", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkorderAttachmentThumbnail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCSystemNetHttpByteArrayContent</returns>
        public async System.Threading.Tasks.Task<SCSystemNetHttpByteArrayContent> GetWorkorderAttachmentThumbnailAsync(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent> localVarResponse = await GetWorkorderAttachmentThumbnailWithHttpInfoAsync(imageFormat, mode, height, width, attachmentId, workorderId, expand, select, filter, orderby, top, skip, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Attachment Thumbnail Retrieve Attachment Thumbnail
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property. (optional)</param>
        /// <param name="select">Select a set of properties to return. (optional)</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL. (optional)</param>
        /// <param name="orderby">Order resources by the specified property in the response. (optional)</param>
        /// <param name="top">Return the specified number of items in the response. (optional)</param>
        /// <param name="skip">Skip the specified number of items in the response. (optional)</param>
        /// <param name="count">Include the count of the matching resources in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCSystemNetHttpByteArrayContent)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCSystemNetHttpByteArrayContent>> GetWorkorderAttachmentThumbnailWithHttpInfoAsync(string imageFormat, string mode, int height, int width, int attachmentId, int workorderId, string? expand = default(string?), string? select = default(string?), string? filter = default(string?), string? orderby = default(string?), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageFormat' is set
            if (imageFormat == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'imageFormat' when calling AttachmentsApi->GetWorkorderAttachmentThumbnail");
            }

            // verify the required parameter 'mode' is set
            if (mode == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'mode' when calling AttachmentsApi->GetWorkorderAttachmentThumbnail");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageFormat", ServiceChannel.Api.Client.ClientUtils.ParameterToString(imageFormat)); // path parameter
            localVarRequestOptions.PathParameters.Add("mode", ServiceChannel.Api.Client.ClientUtils.ParameterToString(mode)); // path parameter
            localVarRequestOptions.PathParameters.Add("height", ServiceChannel.Api.Client.ClientUtils.ParameterToString(height)); // path parameter
            localVarRequestOptions.PathParameters.Add("width", ServiceChannel.Api.Client.ClientUtils.ParameterToString(width)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$expand", expand));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$select", select));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$orderby", orderby));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "$count", count));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.GetWorkorderAttachmentThumbnail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCSystemNetHttpByteArrayContent>("/odata/workorders({workorderId})/attachments({attachmentId})/Service.GetThumbnail(width={width},height={height},mode={mode},imageFormat={imageFormat})", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkorderAttachmentThumbnail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attchment to RFP &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RfpsidAttachments(int id, System.IO.Stream file, int operationIndex = 0)
        {
            RfpsidAttachmentsWithHttpInfo(id, file);
        }

        /// <summary>
        /// Add attchment to RFP &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> RfpsidAttachmentsWithHttpInfo(int id, System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->RfpsidAttachments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.RfpsidAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rfps/{id}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RfpsidAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attchment to RFP &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RfpsidAttachmentsAsync(int id, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RfpsidAttachmentsWithHttpInfoAsync(id, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add attchment to RFP &lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> RfpsidAttachmentsWithHttpInfoAsync(int id, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->RfpsidAttachments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ServiceChannel.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.RfpsidAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rfps/{id}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RfpsidAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns list of attachment ids and urls. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;</returns>
        public List<SCServiceChannelApiModelSiteAuditAttachmentInComment> SiteauditCommentscommentIdAttachments(int commentId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>> localVarResponse = SiteauditCommentscommentIdAttachmentsWithHttpInfo(commentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns list of attachment ids and urls. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>> SiteauditCommentscommentIdAttachmentsWithHttpInfo(int commentId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>>("/siteaudit/comments/{commentId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns list of attachment ids and urls. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>> SiteauditCommentscommentIdAttachmentsAsync(int commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>> localVarResponse = await SiteauditCommentscommentIdAttachmentsWithHttpInfoAsync(commentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns list of attachment ids and urls. 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelApiModelSiteAuditAttachmentInComment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>>> SiteauditCommentscommentIdAttachmentsWithHttpInfoAsync(int commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>>("/siteaudit/comments/{commentId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attchment to Comment Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SiteauditCommentscommentIdAttachments_0(int commentId, System.IO.Stream file, int operationIndex = 0)
        {
            SiteauditCommentscommentIdAttachments_0WithHttpInfo(commentId, file);
        }

        /// <summary>
        /// Add attchment to Comment Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SiteauditCommentscommentIdAttachments_0WithHttpInfo(int commentId, System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->SiteauditCommentscommentIdAttachments_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachments_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/siteaudit/comments/{commentId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachments_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attchment to Comment Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SiteauditCommentscommentIdAttachments_0Async(int commentId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SiteauditCommentscommentIdAttachments_0WithHttpInfoAsync(commentId, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add attchment to Comment Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SiteauditCommentscommentIdAttachments_0WithHttpInfoAsync(int commentId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->SiteauditCommentscommentIdAttachments_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachments_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/siteaudit/comments/{commentId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachments_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve original attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SiteauditCommentscommentIdAttachmentsattachmentId(int commentId, int attachmentId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SiteauditCommentscommentIdAttachmentsattachmentIdWithHttpInfo(commentId, attachmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve original attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SiteauditCommentscommentIdAttachmentsattachmentIdWithHttpInfo(int commentId, int attachmentId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachmentsattachmentId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/siteaudit/comments/{commentId}/attachments/{attachmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachmentsattachmentId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve original attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SiteauditCommentscommentIdAttachmentsattachmentIdAsync(int commentId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SiteauditCommentscommentIdAttachmentsattachmentIdWithHttpInfoAsync(commentId, attachmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve original attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SiteauditCommentscommentIdAttachmentsattachmentIdWithHttpInfoAsync(int commentId, int attachmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachmentsattachmentId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/siteaudit/comments/{commentId}/attachments/{attachmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachmentsattachmentId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve resized attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfo(commentId, attachmentId, width, height, mode, imageFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve resized attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfo(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            if (imageFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "imageFormat", imageFormat));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/siteaudit/comments/{commentId}/attachments/{attachmentId}/thumbnail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve resized attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatAsync(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfoAsync(commentId, attachmentId, width, height, mode, imageFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve resized attchment from Comment 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file. (optional)</param>
        /// <param name="height">Height of the output file. (optional)</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5. (optional)</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfoAsync(int commentId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            if (imageFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "imageFormat", imageFormat));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/siteaudit/comments/{commentId}/attachments/{attachmentId}/thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersAttachmentAsBase64(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0)
        {
            WorkordersAttachmentAsBase64WithHttpInfo(request);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersAttachmentAsBase64WithHttpInfo(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AttachmentsApi->WorkordersAttachmentAsBase64");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersAttachmentAsBase64";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/attachmentAsBase64", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersAttachmentAsBase64", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersAttachmentAsBase64Async(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersAttachmentAsBase64WithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersAttachmentAsBase64WithHttpInfoAsync(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AttachmentsApi->WorkordersAttachmentAsBase64");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersAttachmentAsBase64";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/attachmentAsBase64", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersAttachmentAsBase64", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attachments to a work order by PO number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkorderspoNumberAttachmentsByPoNumberactoractor(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            WorkorderspoNumberAttachmentsByPoNumberactoractorWithHttpInfo(poNumber, actor, addAttachmentsRequest, file);
        }

        /// <summary>
        /// Add attachments to a work order by PO number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkorderspoNumberAttachmentsByPoNumberactoractorWithHttpInfo(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            // verify the required parameter 'poNumber' is set
            if (poNumber == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'poNumber' when calling AttachmentsApi->WorkorderspoNumberAttachmentsByPoNumberactoractor");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(poNumber)); // path parameter
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "AttachmentsApi.WorkorderspoNumberAttachmentsByPoNumberactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{poNumber}/attachmentsByPoNumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkorderspoNumberAttachmentsByPoNumberactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attachments to a work order by PO number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkorderspoNumberAttachmentsByPoNumberactoractorAsync(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkorderspoNumberAttachmentsByPoNumberactoractorWithHttpInfoAsync(poNumber, actor, addAttachmentsRequest, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add attachments to a work order by PO number 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkorderspoNumberAttachmentsByPoNumberactoractorWithHttpInfoAsync(string poNumber, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poNumber' is set
            if (poNumber == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'poNumber' when calling AttachmentsApi->WorkorderspoNumberAttachmentsByPoNumberactoractor");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poNumber", ServiceChannel.Api.Client.ClientUtils.ParameterToString(poNumber)); // path parameter
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "AttachmentsApi.WorkorderspoNumberAttachmentsByPoNumberactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{poNumber}/attachmentsByPoNumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkorderspoNumberAttachmentsByPoNumberactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attachments to a work order Adds attachments to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdAttachmentsactoractor(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            WorkordersworkorderIdAttachmentsactoractorWithHttpInfo(workorderId, actor, addAttachmentsRequest, file);
        }

        /// <summary>
        /// Add attachments to a work order Adds attachments to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdAttachmentsactoractorWithHttpInfo(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersworkorderIdAttachmentsactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdAttachmentsactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attachments to a work order Adds attachments to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdAttachmentsactoractorAsync(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdAttachmentsactoractorWithHttpInfoAsync(workorderId, actor, addAttachmentsRequest, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add attachments to a work order Adds attachments to the specified work order.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"> (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="file">File to attach to the work order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdAttachmentsactoractorWithHttpInfoAsync(int workorderId, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersworkorderIdAttachmentsactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdAttachmentsactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfo(workorderId, attachmentId, width, height, mode, imageFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfo(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            if (imageFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "imageFormat", imageFormat));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/workorders/{workorderId}/attachments/{attachmentId}/thumbnail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatAsync(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfoAsync(workorderId, attachmentId, width, height, mode, imageFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="imageFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatWithHttpInfoAsync(int workorderId, int attachmentId, int? width = default(int?), int? height = default(int?), string? mode = default(string?), string? imageFormat = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            if (imageFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "imageFormat", imageFormat));
            }

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/workorders/{workorderId}/attachments/{attachmentId}/thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Attachments to Work Order Note &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkordersworkorderIdNotesnoteIdAttachments(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            WorkordersworkorderIdNotesnoteIdAttachmentsWithHttpInfo(workorderId, noteId, file, addAttachmentsRequest);
        }

        /// <summary>
        /// Add Attachments to Work Order Note &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkordersworkorderIdNotesnoteIdAttachmentsWithHttpInfo(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->WorkordersworkorderIdNotesnoteIdAttachments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersworkorderIdNotesnoteIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workorders/{workorderId}/notes/{noteId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesnoteIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Attachments to Work Order Note &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkordersworkorderIdNotesnoteIdAttachmentsAsync(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkordersworkorderIdNotesnoteIdAttachmentsWithHttpInfoAsync(workorderId, noteId, file, addAttachmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Attachments to Work Order Note &lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkordersworkorderIdNotesnoteIdAttachmentsWithHttpInfoAsync(int workorderId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->WorkordersworkorderIdNotesnoteIdAttachments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workorderId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workorderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.WorkordersworkorderIdNotesnoteIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workorders/{workorderId}/notes/{noteId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkordersworkorderIdNotesnoteIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get WorkRequest Note Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> WorkrequestWorkRequestIdNotesNoteIdAttachments(int workRequestId, int noteId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = WorkrequestWorkRequestIdNotesNoteIdAttachmentsWithHttpInfo(workRequestId, noteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get WorkRequest Note Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestWorkRequestIdNotesNoteIdAttachmentsWithHttpInfo(int workRequestId, int noteId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestWorkRequestIdNotesNoteIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/workrequest({workRequestId})/notes({noteId})/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestWorkRequestIdNotesNoteIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get WorkRequest Note Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestWorkRequestIdNotesNoteIdAttachmentsAsync(int workRequestId, int noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = await WorkrequestWorkRequestIdNotesNoteIdAttachmentsWithHttpInfoAsync(workRequestId, noteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get WorkRequest Note Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> WorkrequestWorkRequestIdNotesNoteIdAttachmentsWithHttpInfoAsync(int workRequestId, int noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestWorkRequestIdNotesNoteIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/workrequest({workRequestId})/notes({noteId})/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestWorkRequestIdNotesNoteIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get WorkRequest Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> WorkrequestworkRequestIdAttachments(int workRequestId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = WorkrequestworkRequestIdAttachmentsWithHttpInfo(workRequestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get WorkRequest Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestworkRequestIdAttachmentsWithHttpInfo(int workRequestId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestworkRequestIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/workrequest/{workRequestId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestworkRequestIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get WorkRequest Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> WorkrequestworkRequestIdAttachmentsAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>> localVarResponse = await WorkrequestworkRequestIdAttachmentsWithHttpInfoAsync(workRequestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get WorkRequest Attachments *In limited availability phase.*
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAttachmentsAttachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>> WorkrequestworkRequestIdAttachmentsWithHttpInfoAsync(int workRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestworkRequestIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>("/workrequest/{workRequestId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestworkRequestIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attachments to a WorkRequest *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestworkRequestIdAttachmentsactoractor(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            WorkrequestworkRequestIdAttachmentsactoractorWithHttpInfo(workRequestId, file, actor, addAttachmentsRequest);
        }

        /// <summary>
        /// Add attachments to a WorkRequest *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestworkRequestIdAttachmentsactoractorWithHttpInfo(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->WorkrequestworkRequestIdAttachmentsactoractor");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestworkRequestIdAttachmentsactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workrequest/{workRequestId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestworkRequestIdAttachmentsactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attachments to a WorkRequest *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestworkRequestIdAttachmentsactoractorAsync(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestworkRequestIdAttachmentsactoractorWithHttpInfoAsync(workRequestId, file, actor, addAttachmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add attachments to a WorkRequest *In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action (optional)</param>
        /// <param name="addAttachmentsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestworkRequestIdAttachmentsactoractorWithHttpInfoAsync(int workRequestId, System.IO.Stream file, string? actor = default(string?), Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->WorkrequestworkRequestIdAttachmentsactoractor");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            if (actor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            }
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestworkRequestIdAttachmentsactoractor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workrequest/{workRequestId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestworkRequestIdAttachmentsactoractor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Attachments to Work Request Note *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkrequestworkRequestIdNotesnoteIdAttachments(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            WorkrequestworkRequestIdNotesnoteIdAttachmentsWithHttpInfo(workRequestId, noteId, file, addAttachmentsRequest);
        }

        /// <summary>
        /// Add Attachments to Work Request Note *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> WorkrequestworkRequestIdNotesnoteIdAttachmentsWithHttpInfo(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->WorkrequestworkRequestIdNotesnoteIdAttachments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestworkRequestIdNotesnoteIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workrequest/{workRequestId}/notes/{noteId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestworkRequestIdNotesnoteIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Attachments to Work Request Note *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkrequestworkRequestIdNotesnoteIdAttachmentsAsync(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkrequestworkRequestIdNotesnoteIdAttachmentsWithHttpInfoAsync(workRequestId, noteId, file, addAttachmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Attachments to Work Request Note *In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> WorkrequestworkRequestIdNotesnoteIdAttachmentsWithHttpInfoAsync(int workRequestId, int noteId, System.IO.Stream file, Object? addAttachmentsRequest = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentsApi->WorkrequestworkRequestIdNotesnoteIdAttachments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workRequestId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(workRequestId)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            if (addAttachmentsRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("AddAttachmentsRequest", ServiceChannel.Api.Client.ClientUtils.ParameterToString(addAttachmentsRequest)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AttachmentsApi.WorkrequestworkRequestIdNotesnoteIdAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workrequest/{workRequestId}/notes/{noteId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkrequestworkRequestIdNotesnoteIdAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
