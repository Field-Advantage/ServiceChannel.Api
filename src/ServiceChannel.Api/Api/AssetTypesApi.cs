/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ServiceChannel.Api.Client;
using ServiceChannel.Api.Client.Auth;
using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetTypesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypes(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Asset Types For Create By TradeId
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetTypesAsettypesAssetTypesForCreatetradeIdtradeId(int tradeId, int operationIndex = 0);

        /// <summary>
        /// Get Asset Types For Create By TradeId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdWithHttpInfo(int tradeId, int operationIndex = 0);
        /// <summary>
        /// Get Asset Type Brands
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeId(int assetTypeId, int operationIndex = 0);

        /// <summary>
        /// Get Asset Type Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0);
        /// <summary>
        /// Get Asset Types With Create Permission
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeId(int subscriberId, int? tradeId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Asset Types With Create Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(int subscriberId, int? tradeId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Primary Asset Type Brands
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeId(int primaryAssetTypeId, int operationIndex = 0);

        /// <summary>
        /// Get Primary Asset Type Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdWithHttpInfo(int primaryAssetTypeId, int operationIndex = 0);
        /// <summary>
        /// Get Primary Asset Types
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetTypesAsettypesGetPrimaryAssetTypesAsync(int operationIndex = 0);

        /// <summary>
        /// Get Primary Asset Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetTypesAsettypesGetPrimaryAssetTypesAsyncWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update an asset type meter
        /// </summary>
        /// <remarks>
        /// Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetTypesAssetTypeMeter(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0);

        /// <summary>
        /// Update an asset type meter
        /// </summary>
        /// <remarks>
        /// Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetTypesAssetTypeMeterWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0);
        /// <summary>
        /// Add an asset type meter
        /// </summary>
        /// <remarks>
        /// Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetTypesAssetTypeMeter_0(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0);

        /// <summary>
        /// Add an asset type meter
        /// </summary>
        /// <remarks>
        /// Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetTypesAssetTypeMeter_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0);
        /// <summary>
        /// Get an asset type meter details
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset type meter for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem</returns>
        SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem AssetTypesAssetTypeMeterassetTypeMeterId(int assetTypeMeterId, int operationIndex = 0);

        /// <summary>
        /// Get an asset type meter details
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset type meter for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> AssetTypesAssetTypeMeterassetTypeMeterIdWithHttpInfo(int assetTypeMeterId, int operationIndex = 0);
        /// <summary>
        /// Get asset type meters
        /// </summary>
        /// <remarks>
        /// Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> AssetTypesAssetTypeMetersassetTypeId(int assetTypeId, int operationIndex = 0);

        /// <summary>
        /// Get asset type meters
        /// </summary>
        /// <remarks>
        /// Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> AssetTypesAssetTypeMetersassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0);
        /// <summary>
        /// Get asset categories by tradeId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeId(int tradeId, int operationIndex = 0);

        /// <summary>
        /// Get asset categories by tradeId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdWithHttpInfo(int tradeId, int operationIndex = 0);
        /// <summary>
        /// Add AssetTypeGroup Attachments
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse</returns>
        SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse AssetTypesAssetsassetGroupIdGroupattachments(int assetGroupId, System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Add AssetTypeGroup Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse> AssetTypesAssetsassetGroupIdGroupattachmentsWithHttpInfo(int assetGroupId, System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetType</returns>
        SCServiceChannelServicesMessagingAssetsAssetType AssetTypesByidsids0ids0ids1ids1(List<int> ids, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesByidsids0ids0ids1ids1WithHttpInfo(List<int> ids, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal> AssetTypesGetAssetTypeAttributesassetTypeId(int assetTypeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>> AssetTypesGetAssetTypeAttributesassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0);
        /// <summary>
        /// Get asset categories by AssetIds
        /// </summary>
        /// <remarks>
        /// Returns an asset category that contains the specified asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetAssetTypeCategoriesByAssetIds(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0);

        /// <summary>
        /// Get asset categories by AssetIds
        /// </summary>
        /// <remarks>
        /// Returns an asset category that contains the specified asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetAssetTypeCategoriesByAssetIdsWithHttpInfo(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0);
        /// <summary>
        /// Get asset categories by Ids
        /// </summary>
        /// <remarks>
        /// Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        SCServiceChannelServicesMessagingAssetsAssetTypeCategory AssetTypesGetAssetTypeCategoriesByIds(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0);

        /// <summary>
        /// Get asset categories by Ids
        /// </summary>
        /// <remarks>
        /// Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetAssetTypeCategoriesByIdsWithHttpInfo(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0);
        /// <summary>
        /// Get asset type groups by SubscriberId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset type groups for the specified subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get asset type groups by SubscriberId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset type groups for the specified subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetTypesGetAssetTypeTradesassetTypeId(int assetTypeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetTypesGetAssetTypeTradesassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        List<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeId(int subscriberId, int? tradeId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdWithHttpInfo(int subscriberId, int? tradeId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AssetTypesGetAssetTypesByLocation(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssetTypesGetAssetTypesByLocationWithHttpInfo(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0);
        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames
        /// </summary>
        /// <remarks>
        /// Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        SCServiceChannelServicesMessagingAssetsAssetTypeCategory AssetTypesGetSubscriberAssetTypeCategories(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0);

        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames
        /// </summary>
        /// <remarks>
        /// Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetSubscriberAssetTypeCategoriesWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse</returns>
        SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse AssetTypes_0(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse> AssetTypes_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetType</returns>
        SCServiceChannelServicesMessagingAssetsAssetType AssetTypesassetTypeId(int assetTypeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetTypesassetTypeId_0(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetTypesassetTypeId_0WithHttpInfo(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssetTypesassetTypeId_1(int assetTypeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetTypesassetTypeId_1WithHttpInfo(int assetTypeId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetTypesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>>> AssetTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset Types For Create By TradeId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Types For Create By TradeId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset Type Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Type Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset Types With Create Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset Types With Create Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Primary Asset Type Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdAsync(int primaryAssetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Primary Asset Type Brands
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdWithHttpInfoAsync(int primaryAssetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Primary Asset Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetPrimaryAssetTypesAsyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Primary Asset Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesAsettypesGetPrimaryAssetTypesAsyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an asset type meter
        /// </summary>
        /// <remarks>
        /// Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetTypesAssetTypeMeterAsync(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an asset type meter
        /// </summary>
        /// <remarks>
        /// Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesAssetTypeMeterWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add an asset type meter
        /// </summary>
        /// <remarks>
        /// Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetTypesAssetTypeMeter_0Async(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an asset type meter
        /// </summary>
        /// <remarks>
        /// Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesAssetTypeMeter_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an asset type meter details
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset type meter for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> AssetTypesAssetTypeMeterassetTypeMeterIdAsync(int assetTypeMeterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an asset type meter details
        /// </summary>
        /// <remarks>
        /// Returns the details of the specified asset type meter for the current subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> AssetTypesAssetTypeMeterassetTypeMeterIdWithHttpInfoAsync(int assetTypeMeterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset type meters
        /// </summary>
        /// <remarks>
        /// Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> AssetTypesAssetTypeMetersassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset type meters
        /// </summary>
        /// <remarks>
        /// Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>>> AssetTypesAssetTypeMetersassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset categories by tradeId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset categories by tradeId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add AssetTypeGroup Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse> AssetTypesAssetsassetGroupIdGroupattachmentsAsync(int assetGroupId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add AssetTypeGroup Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse>> AssetTypesAssetsassetGroupIdGroupattachmentsWithHttpInfoAsync(int assetGroupId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesByidsids0ids0ids1ids1Async(List<int> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetType)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesByidsids0ids0ids1ids1WithHttpInfoAsync(List<int> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>> AssetTypesGetAssetTypeAttributesassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>>> AssetTypesGetAssetTypeAttributesassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset categories by AssetIds
        /// </summary>
        /// <remarks>
        /// Returns an asset category that contains the specified asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetAssetTypeCategoriesByAssetIdsAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset categories by AssetIds
        /// </summary>
        /// <remarks>
        /// Returns an asset category that contains the specified asset.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>> AssetTypesGetAssetTypeCategoriesByAssetIdsWithHttpInfoAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset categories by Ids
        /// </summary>
        /// <remarks>
        /// Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetAssetTypeCategoriesByIdsAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset categories by Ids
        /// </summary>
        /// <remarks>
        /// Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetAssetTypeCategoriesByIdsWithHttpInfoAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset type groups by SubscriberId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset type groups for the specified subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset type groups by SubscriberId
        /// </summary>
        /// <remarks>
        /// Returns a list of asset type groups for the specified subscriber.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetTypesGetAssetTypeTradesassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesGetAssetTypeTradesassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>>> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdWithHttpInfoAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssetTypesGetAssetTypesByLocationAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesGetAssetTypesByLocationWithHttpInfoAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames
        /// </summary>
        /// <remarks>
        /// Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetSubscriberAssetTypeCategoriesAsync(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames
        /// </summary>
        /// <remarks>
        /// Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetSubscriberAssetTypeCategoriesWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse> AssetTypes_0Async(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse>> AssetTypes_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetType)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetTypesassetTypeId_0Async(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesassetTypeId_0WithHttpInfoAsync(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetTypesassetTypeId_1Async(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetTypesassetTypeId_1WithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetTypesApi : IAssetTypesApiSync, IAssetTypesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetTypesApi : IAssetTypesApi
    {
        private ServiceChannel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetTypesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetTypesApi(string basePath)
        {
            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                new ServiceChannel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetTypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetTypesApi(ServiceChannel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ServiceChannel.Api.Client.Configuration.MergeConfigurations(
                ServiceChannel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ServiceChannel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetTypesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetTypesApi(ServiceChannel.Api.Client.ISynchronousClient client, ServiceChannel.Api.Client.IAsynchronousClient asyncClient, ServiceChannel.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ServiceChannel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ServiceChannel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ServiceChannel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ServiceChannel.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ServiceChannel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypes(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> localVarResponse = AssetTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetType>>("/AssetTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> localVarResponse = await AssetTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>>> AssetTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetType>>("/AssetTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Types For Create By TradeId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetTypesAsettypesAssetTypesForCreatetradeIdtradeId(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdWithHttpInfo(tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Types For Create By TradeId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdWithHttpInfo(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesAssetTypesForCreatetradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/AssetTypes/asettypes/AssetTypesForCreate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesAssetTypesForCreatetradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Types For Create By TradeId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdWithHttpInfoAsync(tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Types For Create By TradeId 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesAsettypesAssetTypesForCreatetradeIdtradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesAssetTypesForCreatetradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/AssetTypes/asettypes/AssetTypesForCreate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesAssetTypesForCreatetradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeId(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdWithHttpInfo(assetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/AssetTypes/asettypes/GetAssetTypeBrandsAsync/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdWithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/AssetTypes/asettypes/GetAssetTypeBrandsAsync/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetAssetTypeBrandsAsyncassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Types With Create Permission 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeId(int subscriberId, int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(subscriberId, tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Types With Create Permission 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfo(int subscriberId, int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/AssetTypes/asettypes/GetAssetTypesWithCreatePermission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset Types With Create Permission 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(subscriberId, tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset Types With Create Permission 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeIdWithHttpInfoAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/AssetTypes/asettypes/GetAssetTypesWithCreatePermission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetAssetTypesWithCreatePermissionsubscriberIdsubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Primary Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeId(int primaryAssetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdWithHttpInfo(primaryAssetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Primary Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdWithHttpInfo(int primaryAssetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("primaryAssetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(primaryAssetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/AssetTypes/asettypes/GetPrimaryAssetTypeBrandsAsync/{primaryAssetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Primary Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdAsync(int primaryAssetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdWithHttpInfoAsync(primaryAssetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Primary Asset Type Brands 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryAssetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeIdWithHttpInfoAsync(int primaryAssetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("primaryAssetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(primaryAssetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/AssetTypes/asettypes/GetPrimaryAssetTypeBrandsAsync/{primaryAssetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetPrimaryAssetTypeBrandsAsyncprimaryAssetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Primary Asset Types 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetTypesAsettypesGetPrimaryAssetTypesAsync(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetTypesAsettypesGetPrimaryAssetTypesAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Primary Asset Types 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesAsettypesGetPrimaryAssetTypesAsyncWithHttpInfo(int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetPrimaryAssetTypesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/AssetTypes/asettypes/GetPrimaryAssetTypesAsync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetPrimaryAssetTypesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Primary Asset Types 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetTypesAsettypesGetPrimaryAssetTypesAsyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetTypesAsettypesGetPrimaryAssetTypesAsyncWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Primary Asset Types 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesAsettypesGetPrimaryAssetTypesAsyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAsettypesGetPrimaryAssetTypesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/AssetTypes/asettypes/GetPrimaryAssetTypesAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAsettypesGetPrimaryAssetTypesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an asset type meter Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetTypesAssetTypeMeter(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0)
        {
            AssetTypesAssetTypeMeterWithHttpInfo(request);
        }

        /// <summary>
        /// Update an asset type meter Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesAssetTypeMeterWithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesAssetTypeMeter");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/AssetTypes/AssetTypeMeter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an asset type meter Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetTypesAssetTypeMeterAsync(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetTypesAssetTypeMeterWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an asset type meter Modifies information of an already existing asset type meter.              &lt;br /&gt;**Note**. All request parameters should be filled out: those you want to add or edit along with the parameters you want to leave unchanged.              &lt;br /&gt;**Example Request**                                   PUT /AssetTypes/AssetTypeMeter                     {                         \&quot;Id\&quot;: 16,                         \&quot;Name\&quot;: \&quot;Music System\&quot;,                         \&quot;MaxValue\&quot;: \&quot;500.00\&quot;,                         \&quot;Notes\&quot;: ,                         \&quot;Inactive\&quot;: false,                         \&quot;EditOnWO\&quot;: true,                         \&quot;AssetTypeId\&quot;: 7632,                         \&quot;UnitOfMeasure\&quot;: 250                     }
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add or update the asset type meter details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesAssetTypeMeterWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesAssetTypeMeter");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/AssetTypes/AssetTypeMeter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an asset type meter Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetTypesAssetTypeMeter_0(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0)
        {
            AssetTypesAssetTypeMeter_0WithHttpInfo(request);
        }

        /// <summary>
        /// Add an asset type meter Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesAssetTypeMeter_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesAssetTypeMeter_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMeter_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/AssetTypes/AssetTypeMeter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMeter_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an asset type meter Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetTypesAssetTypeMeter_0Async(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetTypesAssetTypeMeter_0WithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add an asset type meter Creates a new asset type meter for a particular asset type for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request to add an asset type meter.               &lt;br /&gt;Pass the following parameters in the request:              &lt;br /&gt; • **Id** (*Required*). Enter 0 or null so that when the asset type meter is created the system can assign a unique numeric ID to it.              &lt;br /&gt; • **Name** (*Required*). Name of an asset type meter.              &lt;br /&gt; • **Notes**. Comments provided by a user who added the asset type meter.              &lt;br /&gt; • **Inactive**. Set the asset type meter to the active on inactive status. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **EditOnWO**. Define whether technicians are allowed to enter data on work orders for the asset. Valid values: *true*, *false* or 1 - true, 0 - false.              &lt;br /&gt; • **AssetTypeId** (*Required*). ID of an asset type to assign the meter to.              &lt;br /&gt; • **UnitOfMeasure** (*Required*). Unique numeric identifier of a unit of measurement in the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesAssetTypeMeter_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesAssetTypeMeter_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMeter_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/AssetTypes/AssetTypeMeter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMeter_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an asset type meter details Returns the details of the specified asset type meter for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem</returns>
        public SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem AssetTypesAssetTypeMeterassetTypeMeterId(int assetTypeMeterId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> localVarResponse = AssetTypesAssetTypeMeterassetTypeMeterIdWithHttpInfo(assetTypeMeterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an asset type meter details Returns the details of the specified asset type meter for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> AssetTypesAssetTypeMeterassetTypeMeterIdWithHttpInfo(int assetTypeMeterId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeMeterId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeMeterId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMeterassetTypeMeterId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>("/AssetTypes/AssetTypeMeter/{assetTypeMeterId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMeterassetTypeMeterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an asset type meter details Returns the details of the specified asset type meter for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> AssetTypesAssetTypeMeterassetTypeMeterIdAsync(int assetTypeMeterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> localVarResponse = await AssetTypesAssetTypeMeterassetTypeMeterIdWithHttpInfoAsync(assetTypeMeterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an asset type meter details Returns the details of the specified asset type meter for the current subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter you want to get the details of.              &lt;br /&gt;Pass the [GET /AssetTypes/AssetTypeMeters/{assetTypeId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeters__assetTypeId_) method to acquire an ID of an asset type meter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> AssetTypesAssetTypeMeterassetTypeMeterIdWithHttpInfoAsync(int assetTypeMeterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeMeterId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeMeterId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMeterassetTypeMeterId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>("/AssetTypes/AssetTypeMeter/{assetTypeMeterId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMeterassetTypeMeterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type meters Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem> AssetTypesAssetTypeMetersassetTypeId(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> localVarResponse = AssetTypesAssetTypeMetersassetTypeIdWithHttpInfo(assetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type meters Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> AssetTypesAssetTypeMetersassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMetersassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>>("/AssetTypes/AssetTypeMeters/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMetersassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type meters Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> AssetTypesAssetTypeMetersassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>> localVarResponse = await AssetTypesAssetTypeMetersassetTypeIdWithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type meters Returns a list of meters and their parameters associated with an asset type and created by the current subscriber.              &lt;br /&gt;You can get the details for a particular level by using the [GET/AssetTypes/AssetTypeMeter/{assetTypeMeterId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes_AssetTypeMeter__assetTypeMeterId_) method.              &lt;br /&gt;Learn more about [asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId">Unique numeric identifier of the asset type you want to get information on. Send the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) request to get an asset type ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>>> AssetTypesAssetTypeMetersassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypeMetersassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetTypeMeterResponseItem>>("/AssetTypes/AssetTypeMeters/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypeMetersassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by tradeId Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeId(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> localVarResponse = AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdWithHttpInfo(tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by tradeId Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdWithHttpInfo(int tradeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(tradeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypesAssetCategoriesByTradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>("/AssetTypes/AssetTypes/AssetCategoriesByTradeId/{tradeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypesAssetCategoriesByTradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by tradeId Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> localVarResponse = await AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdWithHttpInfoAsync(tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by tradeId Returns a list of asset categories associated with the specified trade.              &lt;br /&gt;              ***Note***:  This method retrieves asset categories from the standardized list, that is why asset categories may contain asset types and may not. To get asset categories containing asset types that belong to the certain trade, pass the [POST /AssetTypes/GetSubscriberAssetTypeCategories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes_GetSubscriberAssetTypeCategories) method.              &lt;br /&gt;              For more information, refer to [Adding Asset Category and Asset Types](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/2523693743/Adding+Asset+Category+and+Asset+Types) in ServiceChannel University.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeId">Unique numeric identifier of the trade.               Pass the [GET / AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) or [GET /assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to retrieve &#x60;tradeId&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>> AssetTypesAssetTypesAssetCategoriesByTradeIdtradeIdWithHttpInfoAsync(int tradeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(tradeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetTypesAssetCategoriesByTradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>("/AssetTypes/AssetTypes/AssetCategoriesByTradeId/{tradeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetTypesAssetCategoriesByTradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add AssetTypeGroup Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse</returns>
        public SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse AssetTypesAssetsassetGroupIdGroupattachments(int assetGroupId, System.IO.Stream file, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse> localVarResponse = AssetTypesAssetsassetGroupIdGroupattachmentsWithHttpInfo(assetGroupId, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add AssetTypeGroup Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse> AssetTypesAssetsassetGroupIdGroupattachmentsWithHttpInfo(int assetGroupId, System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AssetTypesApi->AssetTypesAssetsassetGroupIdGroupattachments");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetGroupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetGroupId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetsassetGroupIdGroupattachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse>("/AssetTypes/assets/{assetGroupId}/groupattachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetsassetGroupIdGroupattachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add AssetTypeGroup Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse> AssetTypesAssetsassetGroupIdGroupattachmentsAsync(int assetGroupId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse> localVarResponse = await AssetTypesAssetsassetGroupIdGroupattachmentsWithHttpInfoAsync(assetGroupId, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add AssetTypeGroup Attachments 
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetGroupId"></param>
        /// <param name="file">File to attach to AssetTypeGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse>> AssetTypesAssetsassetGroupIdGroupattachmentsWithHttpInfoAsync(int assetGroupId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'file' when calling AssetTypesApi->AssetTypesAssetsassetGroupIdGroupattachments");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetGroupId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetGroupId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesAssetsassetGroupIdGroupattachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsAddAssetTypeGroupAttachmentResponse>("/AssetTypes/assets/{assetGroupId}/groupattachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesAssetsassetGroupIdGroupattachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetType</returns>
        public SCServiceChannelServicesMessagingAssetsAssetType AssetTypesByidsids0ids0ids1ids1(List<int> ids, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> localVarResponse = AssetTypesByidsids0ids0ids1ids1WithHttpInfo(ids);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesByidsids0ids0ids1ids1WithHttpInfo(List<int> ids, int operationIndex = 0)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'ids' when calling AssetTypesApi->AssetTypesByidsids0ids0ids1ids1");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesByidsids0ids0ids1ids1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetType>("/AssetTypes/byids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesByidsids0ids0ids1ids1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesByidsids0ids0ids1ids1Async(List<int> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> localVarResponse = await AssetTypesByidsids0ids0ids1ids1WithHttpInfoAsync(ids, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetType)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesByidsids0ids0ids1ids1WithHttpInfoAsync(List<int> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'ids' when calling AssetTypesApi->AssetTypesByidsids0ids0ids1ids1");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesByidsids0ids0ids1ids1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetType>("/AssetTypes/byids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesByidsids0ids0ids1ids1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal> AssetTypesGetAssetTypeAttributesassetTypeId(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>> localVarResponse = AssetTypesGetAssetTypeAttributesassetTypeIdWithHttpInfo(assetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>> AssetTypesGetAssetTypeAttributesassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeAttributesassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>>("/AssetTypes/GetAssetTypeAttributes/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeAttributesassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>> AssetTypesGetAssetTypeAttributesassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>> localVarResponse = await AssetTypesGetAssetTypeAttributesassetTypeIdWithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>>> AssetTypesGetAssetTypeAttributesassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeAttributesassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetTypeAttributeExternal>>("/AssetTypes/GetAssetTypeAttributes/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeAttributesassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by AssetIds Returns an asset category that contains the specified asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        public Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetAssetTypeCategoriesByAssetIds(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> localVarResponse = AssetTypesGetAssetTypeCategoriesByAssetIdsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by AssetIds Returns an asset category that contains the specified asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetAssetTypeCategoriesByAssetIdsWithHttpInfo(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetAssetTypeCategoriesByAssetIds");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeCategoriesByAssetIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>("/AssetTypes/GetAssetTypeCategoriesByAssetIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeCategoriesByAssetIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by AssetIds Returns an asset category that contains the specified asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetAssetTypeCategoriesByAssetIdsAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> localVarResponse = await AssetTypesGetAssetTypeCategoriesByAssetIdsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by AssetIds Returns an asset category that contains the specified asset.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>> AssetTypesGetAssetTypeCategoriesByAssetIdsWithHttpInfoAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetAssetTypeCategoriesByAssetIds");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeCategoriesByAssetIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, SCServiceChannelServicesMessagingAssetsAssetTypeCategory>>("/AssetTypes/GetAssetTypeCategoriesByAssetIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeCategoriesByAssetIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by Ids Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public SCServiceChannelServicesMessagingAssetsAssetTypeCategory AssetTypesGetAssetTypeCategoriesByIds(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> localVarResponse = AssetTypesGetAssetTypeCategoriesByIdsWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by Ids Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetAssetTypeCategoriesByIdsWithHttpInfo(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetAssetTypeCategoriesByIds");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeCategoriesByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>("/AssetTypes/GetAssetTypeCategoriesByIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeCategoriesByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by Ids Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetAssetTypeCategoriesByIdsAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> localVarResponse = await AssetTypesGetAssetTypeCategoriesByIdsWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by Ids Returns asset categories names based on their numeric identifiers.              &lt;br /&gt;              ***Note***: To get all asset categories, send the request without specifying any Id. Asset categories from the list may contain asset types or may be empty, as this method retrieves asset categories from the standardized list.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve asset categories names.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeCategory)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetAssetTypeCategoriesByIdsWithHttpInfoAsync(SCServiceChannelServicesMessagingGetByIdsRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetAssetTypeCategoriesByIds");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeCategoriesByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>("/AssetTypes/GetAssetTypeCategoriesByIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeCategoriesByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type groups by SubscriberId Returns a list of asset type groups for the specified subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberId(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> localVarResponse = AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type groups by SubscriberId Returns a list of asset type groups for the specified subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdWithHttpInfo(int? subscriberId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeGroupssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>("/AssetTypes/GetAssetTypeGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeGroupssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset type groups by SubscriberId Returns a list of asset type groups for the specified subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>> localVarResponse = await AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdWithHttpInfoAsync(subscriberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset type groups by SubscriberId Returns a list of asset type groups for the specified subscriber.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>> AssetTypesGetAssetTypeGroupssubscriberIdsubscriberIdWithHttpInfoAsync(int? subscriberId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "subscriberId", subscriberId));
            }

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeGroupssubscriberIdsubscriberId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>("/AssetTypes/GetAssetTypeGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeGroupssubscriberIdsubscriberId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetTypesGetAssetTypeTradesassetTypeId(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetTypesGetAssetTypeTradesassetTypeIdWithHttpInfo(assetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesGetAssetTypeTradesassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeTradesassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/AssetTypes/GetAssetTypeTrades/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeTradesassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetTypesGetAssetTypeTradesassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetTypesGetAssetTypeTradesassetTypeIdWithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesGetAssetTypeTradesassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypeTradesassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/AssetTypes/GetAssetTypeTrades/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypeTradesassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        public List<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeId(int subscriberId, int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> localVarResponse = AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdWithHttpInfo(subscriberId, tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        public ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdWithHttpInfo(int subscriberId, int? tradeId = default(int?), int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCServiceChannelServicesMessagingAssetsAssetType>>("/AssetTypes/GetAssetTypesAvailableForSubscriber/{subscriberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>> localVarResponse = await AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdWithHttpInfoAsync(subscriberId, tradeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId"></param>
        /// <param name="tradeId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCServiceChannelServicesMessagingAssetsAssetType&gt;)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<List<SCServiceChannelServicesMessagingAssetsAssetType>>> AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeIdWithHttpInfoAsync(int subscriberId, int? tradeId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriberId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            if (tradeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ServiceChannel.Api.Client.ClientUtils.ParameterToMultiMap("", "tradeId", tradeId));
            }

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCServiceChannelServicesMessagingAssetsAssetType>>("/AssetTypes/GetAssetTypesAvailableForSubscriber/{subscriberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypesAvailableForSubscribersubscriberIdtradeIdtradeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AssetTypesGetAssetTypesByLocation(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = AssetTypesGetAssetTypesByLocationWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesGetAssetTypesByLocationWithHttpInfo(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetAssetTypesByLocation");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypesByLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/AssetTypes/GetAssetTypesByLocation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypesByLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssetTypesGetAssetTypesByLocationAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<Object> localVarResponse = await AssetTypesGetAssetTypesByLocationWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesGetAssetTypesByLocationWithHttpInfoAsync(SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetTypesByLocationRequestInternal request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetAssetTypesByLocation");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetAssetTypesByLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/AssetTypes/GetAssetTypesByLocation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetAssetTypesByLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public SCServiceChannelServicesMessagingAssetsAssetTypeCategory AssetTypesGetSubscriberAssetTypeCategories(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> localVarResponse = AssetTypesGetSubscriberAssetTypeCategoriesWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetSubscriberAssetTypeCategoriesWithHttpInfo(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetSubscriberAssetTypeCategories");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetSubscriberAssetTypeCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>("/AssetTypes/GetSubscriberAssetTypeCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetSubscriberAssetTypeCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetTypeCategory</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> AssetTypesGetSubscriberAssetTypeCategoriesAsync(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory> localVarResponse = await AssetTypesGetSubscriberAssetTypeCategoriesWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset categories by SubscriberId and TradeNames Returns an asset category containing asset types that belong to the specified trade for the specified subscriber.              &lt;br /&gt;              ***Note***: &#x60;TradeNames&#x60; is an optional parameter. When you skip it, the response shows all asset categories containing asset types.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request model to retrieve a list of asset categories.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetTypeCategory)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>> AssetTypesGetSubscriberAssetTypeCategoriesWithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsGetSubscriberAssetCategoriesRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'request' when calling AssetTypesApi->AssetTypesGetSubscriberAssetTypeCategories");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesGetSubscriberAssetTypeCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsAssetTypeCategory>("/AssetTypes/GetSubscriberAssetTypeCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesGetSubscriberAssetTypeCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse</returns>
        public SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse AssetTypes_0(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse> localVarResponse = AssetTypes_0WithHttpInfo(req);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse> AssetTypes_0WithHttpInfo(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0)
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling AssetTypesApi->AssetTypes_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypes_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse>("/AssetTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypes_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse> AssetTypes_0Async(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse> localVarResponse = await AssetTypes_0WithHttpInfoAsync(req, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse>> AssetTypes_0WithHttpInfoAsync(SCServiceChannelServicesMessagingAssetsAddAssetTypeRequest req, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'req' is set
            if (req == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'req' when calling AssetTypesApi->AssetTypes_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = req;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypes_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SCServiceChannelServicesMessagingAssetsAddAssetTypeResponse>("/AssetTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypes_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SCServiceChannelServicesMessagingAssetsAssetType</returns>
        public SCServiceChannelServicesMessagingAssetsAssetType AssetTypesassetTypeId(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> localVarResponse = AssetTypesassetTypeIdWithHttpInfo(assetTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        public ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesassetTypeIdWithHttpInfo(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCServiceChannelServicesMessagingAssetsAssetType>("/AssetTypes/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCServiceChannelServicesMessagingAssetsAssetType</returns>
        public async System.Threading.Tasks.Task<SCServiceChannelServicesMessagingAssetsAssetType> AssetTypesassetTypeIdAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType> localVarResponse = await AssetTypesassetTypeIdWithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCServiceChannelServicesMessagingAssetsAssetType)</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<SCServiceChannelServicesMessagingAssetsAssetType>> AssetTypesassetTypeIdWithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesassetTypeId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SCServiceChannelServicesMessagingAssetsAssetType>("/AssetTypes/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesassetTypeId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetTypesassetTypeId_0(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0)
        {
            AssetTypesassetTypeId_0WithHttpInfo(assetTypeId, type);
        }

        /// <summary>
        ///  Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesassetTypeId_0WithHttpInfo(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'type' when calling AssetTypesApi->AssetTypesassetTypeId_0");
            }

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter
            localVarRequestOptions.Data = type;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesassetTypeId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/AssetTypes/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesassetTypeId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetTypesassetTypeId_0Async(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetTypesassetTypeId_0WithHttpInfoAsync(assetTypeId, type, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Update Asset Type              Don&#39;t specify AdditiolanTrades if no changes in Additiolan Trades needed              Set AdditiolanTrades &#x3D; [] to delete existing Additiolan Trades for asset type              If AdditiolanTrades contains records then these trades will be set as Additional Trades to asset type.
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesassetTypeId_0WithHttpInfoAsync(int assetTypeId, SCServiceChannelServicesMessagingAssetsAssetType type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ServiceChannel.Api.Client.ApiException(400, "Missing required parameter 'type' when calling AssetTypesApi->AssetTypesassetTypeId_0");
            }


            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter
            localVarRequestOptions.Data = type;

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesassetTypeId_0";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/AssetTypes/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesassetTypeId_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssetTypesassetTypeId_1(int assetTypeId, int operationIndex = 0)
        {
            AssetTypesassetTypeId_1WithHttpInfo(assetTypeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ServiceChannel.Api.Client.ApiResponse<Object> AssetTypesassetTypeId_1WithHttpInfo(int assetTypeId, int operationIndex = 0)
        {
            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesassetTypeId_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/AssetTypes/{assetTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesassetTypeId_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetTypesassetTypeId_1Async(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssetTypesassetTypeId_1WithHttpInfoAsync(assetTypeId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ServiceChannel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetTypeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ServiceChannel.Api.Client.ApiResponse<Object>> AssetTypesassetTypeId_1WithHttpInfoAsync(int assetTypeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ServiceChannel.Api.Client.RequestOptions localVarRequestOptions = new ServiceChannel.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = ServiceChannel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ServiceChannel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetTypeId", ServiceChannel.Api.Client.ClientUtils.ParameterToString(assetTypeId)); // path parameter

            localVarRequestOptions.Operation = "AssetTypesApi.AssetTypesassetTypeId_1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/AssetTypes/{assetTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetTypesassetTypeId_1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
