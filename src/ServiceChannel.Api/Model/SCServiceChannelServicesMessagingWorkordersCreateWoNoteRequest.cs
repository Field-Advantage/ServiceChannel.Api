/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.CreateWoNoteRequest")]
    public partial class SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest : IEquatable<SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest" /> class.
        /// </summary>
        /// <param name="note">Required, Note text (required).</param>
        /// <param name="mailedTo">E-mail address(es).</param>
        /// <param name="actionRequired">Action requred flag (default to false).</param>
        /// <param name="scheduledDate">Scheduled Date and Time.</param>
        /// <param name="followUpDate">followUpDate.</param>
        /// <param name="isFollowUpDateChanged">isFollowUpDateChanged (default to false).</param>
        /// <param name="attachmentsIds">attachmentsIds.</param>
        /// <param name="visibility">Defines which parties can view the note. Visibility also works in Universal Connector where there are three primary parties: Subscriber, External Subscriber, and Provider.               Possible values:              &#x60;0&#x60; — Visible to everyone (Subscriber, External Subscriber, Provider),              &#x60;1&#x60; — Not visible to External Subscriber. Visible to Subscriber and Provider,              &#x60;2&#x60; — Not visible to Provider. Visible to Subscriber and External Subscriber.              &#x60;3&#x60; — Visible to Subscriber only..</param>
        /// <param name="actor">Actor.</param>
        /// <param name="notifyFollowers">If true email alert will be sent to WO Followers (default to false).</param>
        /// <param name="doNotSendEmail">doNotSendEmail (default to false).</param>
        public SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest(string note = default(string), string mailedTo = default(string), bool actionRequired = false, DateTime scheduledDate = default(DateTime), DateTime followUpDate = default(DateTime), bool isFollowUpDateChanged = false, List<int> attachmentsIds = default(List<int>), int visibility = default(int), string actor = default(string), bool notifyFollowers = false, bool doNotSendEmail = false)
        {
            // to ensure "note" is required (not null)
            if (note == null)
            {
                throw new ArgumentNullException("note is a required property for SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest and cannot be null");
            }
            this.Note = note;
            this.MailedTo = mailedTo;
            this.ActionRequired = actionRequired;
            this.ScheduledDate = scheduledDate;
            this.FollowUpDate = followUpDate;
            this.IsFollowUpDateChanged = isFollowUpDateChanged;
            this.AttachmentsIds = attachmentsIds;
            this.Visibility = visibility;
            this.Actor = actor;
            this.NotifyFollowers = notifyFollowers;
            this.DoNotSendEmail = doNotSendEmail;
        }

        /// <summary>
        /// Required, Note text
        /// </summary>
        /// <value>Required, Note text</value>
        [DataMember(Name = "Note", IsRequired = true, EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// E-mail address(es)
        /// </summary>
        /// <value>E-mail address(es)</value>
        [DataMember(Name = "MailedTo", EmitDefaultValue = false)]
        public string MailedTo { get; set; }

        /// <summary>
        /// Action requred flag
        /// </summary>
        /// <value>Action requred flag</value>
        [DataMember(Name = "ActionRequired", EmitDefaultValue = true)]
        public bool ActionRequired { get; set; }

        /// <summary>
        /// Scheduled Date and Time
        /// </summary>
        /// <value>Scheduled Date and Time</value>
        [DataMember(Name = "ScheduledDate", EmitDefaultValue = false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Gets or Sets FollowUpDate
        /// </summary>
        [DataMember(Name = "FollowUpDate", EmitDefaultValue = false)]
        public DateTime FollowUpDate { get; set; }

        /// <summary>
        /// Gets or Sets IsFollowUpDateChanged
        /// </summary>
        [DataMember(Name = "IsFollowUpDateChanged", EmitDefaultValue = true)]
        public bool IsFollowUpDateChanged { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentsIds
        /// </summary>
        [DataMember(Name = "AttachmentsIds", EmitDefaultValue = false)]
        public List<int> AttachmentsIds { get; set; }

        /// <summary>
        /// Defines which parties can view the note. Visibility also works in Universal Connector where there are three primary parties: Subscriber, External Subscriber, and Provider.               Possible values:              &#x60;0&#x60; — Visible to everyone (Subscriber, External Subscriber, Provider),              &#x60;1&#x60; — Not visible to External Subscriber. Visible to Subscriber and Provider,              &#x60;2&#x60; — Not visible to Provider. Visible to Subscriber and External Subscriber.              &#x60;3&#x60; — Visible to Subscriber only.
        /// </summary>
        /// <value>Defines which parties can view the note. Visibility also works in Universal Connector where there are three primary parties: Subscriber, External Subscriber, and Provider.               Possible values:              &#x60;0&#x60; — Visible to everyone (Subscriber, External Subscriber, Provider),              &#x60;1&#x60; — Not visible to External Subscriber. Visible to Subscriber and Provider,              &#x60;2&#x60; — Not visible to Provider. Visible to Subscriber and External Subscriber.              &#x60;3&#x60; — Visible to Subscriber only.</value>
        [DataMember(Name = "Visibility", EmitDefaultValue = false)]
        public int Visibility { get; set; }

        /// <summary>
        /// Actor
        /// </summary>
        /// <value>Actor</value>
        [DataMember(Name = "Actor", EmitDefaultValue = false)]
        public string Actor { get; set; }

        /// <summary>
        /// If true email alert will be sent to WO Followers
        /// </summary>
        /// <value>If true email alert will be sent to WO Followers</value>
        [DataMember(Name = "NotifyFollowers", EmitDefaultValue = true)]
        public bool NotifyFollowers { get; set; }

        /// <summary>
        /// Gets or Sets DoNotSendEmail
        /// </summary>
        [DataMember(Name = "DoNotSendEmail", EmitDefaultValue = true)]
        public bool DoNotSendEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest {\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  MailedTo: ").Append(MailedTo).Append("\n");
            sb.Append("  ActionRequired: ").Append(ActionRequired).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  FollowUpDate: ").Append(FollowUpDate).Append("\n");
            sb.Append("  IsFollowUpDateChanged: ").Append(IsFollowUpDateChanged).Append("\n");
            sb.Append("  AttachmentsIds: ").Append(AttachmentsIds).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  NotifyFollowers: ").Append(NotifyFollowers).Append("\n");
            sb.Append("  DoNotSendEmail: ").Append(DoNotSendEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.MailedTo == input.MailedTo ||
                    (this.MailedTo != null &&
                    this.MailedTo.Equals(input.MailedTo))
                ) && 
                (
                    this.ActionRequired == input.ActionRequired ||
                    this.ActionRequired.Equals(input.ActionRequired)
                ) && 
                (
                    this.ScheduledDate == input.ScheduledDate ||
                    (this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(input.ScheduledDate))
                ) && 
                (
                    this.FollowUpDate == input.FollowUpDate ||
                    (this.FollowUpDate != null &&
                    this.FollowUpDate.Equals(input.FollowUpDate))
                ) && 
                (
                    this.IsFollowUpDateChanged == input.IsFollowUpDateChanged ||
                    this.IsFollowUpDateChanged.Equals(input.IsFollowUpDateChanged)
                ) && 
                (
                    this.AttachmentsIds == input.AttachmentsIds ||
                    this.AttachmentsIds != null &&
                    input.AttachmentsIds != null &&
                    this.AttachmentsIds.SequenceEqual(input.AttachmentsIds)
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    this.Visibility.Equals(input.Visibility)
                ) && 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                ) && 
                (
                    this.NotifyFollowers == input.NotifyFollowers ||
                    this.NotifyFollowers.Equals(input.NotifyFollowers)
                ) && 
                (
                    this.DoNotSendEmail == input.DoNotSendEmail ||
                    this.DoNotSendEmail.Equals(input.DoNotSendEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.MailedTo != null)
                {
                    hashCode = (hashCode * 59) + this.MailedTo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActionRequired.GetHashCode();
                if (this.ScheduledDate != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDate.GetHashCode();
                }
                if (this.FollowUpDate != null)
                {
                    hashCode = (hashCode * 59) + this.FollowUpDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFollowUpDateChanged.GetHashCode();
                if (this.AttachmentsIds != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentsIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                if (this.Actor != null)
                {
                    hashCode = (hashCode * 59) + this.Actor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotifyFollowers.GetHashCode();
                hashCode = (hashCode * 59) + this.DoNotSendEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
