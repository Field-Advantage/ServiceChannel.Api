/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingPrioritiesPriorityResponse
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Priorities.PriorityResponse")]
    public partial class SCServiceChannelServicesMessagingPrioritiesPriorityResponse : IEquatable<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingPrioritiesPriorityResponse" /> class.
        /// </summary>
        /// <param name="id">UID of priority. Can be null.</param>
        /// <param name="name">Priority name.</param>
        /// <param name="subscriberId">UID of subscriber. Can be null.</param>
        /// <param name="eta">ETA.</param>
        /// <param name="skipNights">Skip nights while calculating scheduled date (default to false).</param>
        /// <param name="skipWeekends">Skip weekends while calculating scheduled date (default to false).</param>
        /// <param name="locationId">If priority is associated with location - assiciated location.</param>
        /// <param name="trade">If priority is associated with trade - assiciated trade.</param>
        /// <param name="scheduledDate">Calculated WO Scheduled Date.</param>
        /// <param name="scheduledDateDTO">Calculated WO Scheduled Date with time zone offset.</param>
        /// <param name="isSelectable">IsSelectable (default to false).</param>
        public SCServiceChannelServicesMessagingPrioritiesPriorityResponse(int id = default(int), string name = default(string), int subscriberId = default(int), string eta = default(string), bool skipNights = false, bool skipWeekends = false, int locationId = default(int), string trade = default(string), DateTime scheduledDate = default(DateTime), DateTime scheduledDateDTO = default(DateTime), bool isSelectable = false)
        {
            this.Id = id;
            this.Name = name;
            this.SubscriberId = subscriberId;
            this.Eta = eta;
            this.SkipNights = skipNights;
            this.SkipWeekends = skipWeekends;
            this.LocationId = locationId;
            this.Trade = trade;
            this.ScheduledDate = scheduledDate;
            this.ScheduledDateDTO = scheduledDateDTO;
            this.IsSelectable = isSelectable;
        }

        /// <summary>
        /// UID of priority. Can be null
        /// </summary>
        /// <value>UID of priority. Can be null</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Priority name
        /// </summary>
        /// <value>Priority name</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// UID of subscriber. Can be null
        /// </summary>
        /// <value>UID of subscriber. Can be null</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// ETA
        /// </summary>
        /// <value>ETA</value>
        [DataMember(Name = "Eta", EmitDefaultValue = false)]
        public string Eta { get; set; }

        /// <summary>
        /// Skip nights while calculating scheduled date
        /// </summary>
        /// <value>Skip nights while calculating scheduled date</value>
        [DataMember(Name = "SkipNights", EmitDefaultValue = true)]
        public bool SkipNights { get; set; }

        /// <summary>
        /// Skip weekends while calculating scheduled date
        /// </summary>
        /// <value>Skip weekends while calculating scheduled date</value>
        [DataMember(Name = "SkipWeekends", EmitDefaultValue = true)]
        public bool SkipWeekends { get; set; }

        /// <summary>
        /// If priority is associated with location - assiciated location
        /// </summary>
        /// <value>If priority is associated with location - assiciated location</value>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// If priority is associated with trade - assiciated trade
        /// </summary>
        /// <value>If priority is associated with trade - assiciated trade</value>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Calculated WO Scheduled Date
        /// </summary>
        /// <value>Calculated WO Scheduled Date</value>
        [DataMember(Name = "ScheduledDate", EmitDefaultValue = false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Calculated WO Scheduled Date with time zone offset
        /// </summary>
        /// <value>Calculated WO Scheduled Date with time zone offset</value>
        [DataMember(Name = "ScheduledDate_DTO", EmitDefaultValue = false)]
        public DateTime ScheduledDateDTO { get; set; }

        /// <summary>
        /// IsSelectable
        /// </summary>
        /// <value>IsSelectable</value>
        [DataMember(Name = "IsSelectable", EmitDefaultValue = true)]
        public bool IsSelectable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingPrioritiesPriorityResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  SkipNights: ").Append(SkipNights).Append("\n");
            sb.Append("  SkipWeekends: ").Append(SkipWeekends).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  ScheduledDateDTO: ").Append(ScheduledDateDTO).Append("\n");
            sb.Append("  IsSelectable: ").Append(IsSelectable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingPrioritiesPriorityResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingPrioritiesPriorityResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingPrioritiesPriorityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingPrioritiesPriorityResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.Eta == input.Eta ||
                    (this.Eta != null &&
                    this.Eta.Equals(input.Eta))
                ) && 
                (
                    this.SkipNights == input.SkipNights ||
                    this.SkipNights.Equals(input.SkipNights)
                ) && 
                (
                    this.SkipWeekends == input.SkipWeekends ||
                    this.SkipWeekends.Equals(input.SkipWeekends)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.ScheduledDate == input.ScheduledDate ||
                    (this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(input.ScheduledDate))
                ) && 
                (
                    this.ScheduledDateDTO == input.ScheduledDateDTO ||
                    (this.ScheduledDateDTO != null &&
                    this.ScheduledDateDTO.Equals(input.ScheduledDateDTO))
                ) && 
                (
                    this.IsSelectable == input.IsSelectable ||
                    this.IsSelectable.Equals(input.IsSelectable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                if (this.Eta != null)
                {
                    hashCode = (hashCode * 59) + this.Eta.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkipNights.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipWeekends.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                if (this.ScheduledDate != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDate.GetHashCode();
                }
                if (this.ScheduledDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDateDTO.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSelectable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
