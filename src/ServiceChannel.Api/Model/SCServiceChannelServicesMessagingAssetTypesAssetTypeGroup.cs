/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Asset type group object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.AssetTypes.AssetTypeGroup")]
    public partial class SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup : IEquatable<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup" /> class.
        /// </summary>
        /// <param name="id">Unique numeric identifier of the asset type group..</param>
        /// <param name="subscriberId">Unique numeric identifier of the subscriber..</param>
        /// <param name="name">The name of the asset type group..</param>
        /// <param name="fileName">The file name of the image attached to the asset type group. For example, *audioequipment.png* or *AEE323FF8091.jpeg*..</param>
        /// <param name="filePath">Path snippet to the full-size image version attached to the asset type group. For example, *#assets/6cb4f87b-3d5f-49ba-9971-11442dcf3d1e*..</param>
        /// <param name="thumbnailPath">Path snippet to the reduced-size image version attached to the asset type group. For example, *#assets/7bc49564-5ac4-4002-9ffc-2282483e6df8*..</param>
        /// <param name="assetTypeIds">A list of unique numeric identifiers of the asset types..</param>
        /// <param name="uri">The URI of the full-size image version attached to the asset type group..</param>
        /// <param name="thumbnailUri">The URI of the reduced-size image version attached to the asset type group..</param>
        /// <param name="assetTypeCategoryId">Unique numeric identifier of the asset category..</param>
        public SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup(int id = default(int), int subscriberId = default(int), string name = default(string), string fileName = default(string), string filePath = default(string), string thumbnailPath = default(string), List<int> assetTypeIds = default(List<int>), string uri = default(string), string thumbnailUri = default(string), int assetTypeCategoryId = default(int))
        {
            this.Id = id;
            this.SubscriberId = subscriberId;
            this.Name = name;
            this.FileName = fileName;
            this.FilePath = filePath;
            this.ThumbnailPath = thumbnailPath;
            this.AssetTypeIds = assetTypeIds;
            this.Uri = uri;
            this.ThumbnailUri = thumbnailUri;
            this.AssetTypeCategoryId = assetTypeCategoryId;
        }

        /// <summary>
        /// Unique numeric identifier of the asset type group.
        /// </summary>
        /// <value>Unique numeric identifier of the asset type group.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique numeric identifier of the subscriber.
        /// </summary>
        /// <value>Unique numeric identifier of the subscriber.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// The name of the asset type group.
        /// </summary>
        /// <value>The name of the asset type group.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The file name of the image attached to the asset type group. For example, *audioequipment.png* or *AEE323FF8091.jpeg*.
        /// </summary>
        /// <value>The file name of the image attached to the asset type group. For example, *audioequipment.png* or *AEE323FF8091.jpeg*.</value>
        [DataMember(Name = "FileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Path snippet to the full-size image version attached to the asset type group. For example, *#assets/6cb4f87b-3d5f-49ba-9971-11442dcf3d1e*.
        /// </summary>
        /// <value>Path snippet to the full-size image version attached to the asset type group. For example, *#assets/6cb4f87b-3d5f-49ba-9971-11442dcf3d1e*.</value>
        [DataMember(Name = "FilePath", EmitDefaultValue = false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Path snippet to the reduced-size image version attached to the asset type group. For example, *#assets/7bc49564-5ac4-4002-9ffc-2282483e6df8*.
        /// </summary>
        /// <value>Path snippet to the reduced-size image version attached to the asset type group. For example, *#assets/7bc49564-5ac4-4002-9ffc-2282483e6df8*.</value>
        [DataMember(Name = "ThumbnailPath", EmitDefaultValue = false)]
        public string ThumbnailPath { get; set; }

        /// <summary>
        /// A list of unique numeric identifiers of the asset types.
        /// </summary>
        /// <value>A list of unique numeric identifiers of the asset types.</value>
        [DataMember(Name = "AssetTypeIds", EmitDefaultValue = false)]
        public List<int> AssetTypeIds { get; set; }

        /// <summary>
        /// Path to the cloud location of the full-size image version attached to the asset type group.
        /// </summary>
        /// <value>Path to the cloud location of the full-size image version attached to the asset type group.</value>
        [DataMember(Name = "ImgPath", EmitDefaultValue = false)]
        public string ImgPath { get; private set; }

        /// <summary>
        /// Returns false as ImgPath should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImgPath()
        {
            return false;
        }
        /// <summary>
        /// The URI of the full-size image version attached to the asset type group.
        /// </summary>
        /// <value>The URI of the full-size image version attached to the asset type group.</value>
        [DataMember(Name = "Uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The URI of the reduced-size image version attached to the asset type group.
        /// </summary>
        /// <value>The URI of the reduced-size image version attached to the asset type group.</value>
        [DataMember(Name = "ThumbnailUri", EmitDefaultValue = false)]
        public string ThumbnailUri { get; set; }

        /// <summary>
        /// Unique numeric identifier of the asset category.
        /// </summary>
        /// <value>Unique numeric identifier of the asset category.</value>
        [DataMember(Name = "AssetTypeCategoryId", EmitDefaultValue = false)]
        public int AssetTypeCategoryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  ThumbnailPath: ").Append(ThumbnailPath).Append("\n");
            sb.Append("  AssetTypeIds: ").Append(AssetTypeIds).Append("\n");
            sb.Append("  ImgPath: ").Append(ImgPath).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  ThumbnailUri: ").Append(ThumbnailUri).Append("\n");
            sb.Append("  AssetTypeCategoryId: ").Append(AssetTypeCategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.ThumbnailPath == input.ThumbnailPath ||
                    (this.ThumbnailPath != null &&
                    this.ThumbnailPath.Equals(input.ThumbnailPath))
                ) && 
                (
                    this.AssetTypeIds == input.AssetTypeIds ||
                    this.AssetTypeIds != null &&
                    input.AssetTypeIds != null &&
                    this.AssetTypeIds.SequenceEqual(input.AssetTypeIds)
                ) && 
                (
                    this.ImgPath == input.ImgPath ||
                    (this.ImgPath != null &&
                    this.ImgPath.Equals(input.ImgPath))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.ThumbnailUri == input.ThumbnailUri ||
                    (this.ThumbnailUri != null &&
                    this.ThumbnailUri.Equals(input.ThumbnailUri))
                ) && 
                (
                    this.AssetTypeCategoryId == input.AssetTypeCategoryId ||
                    this.AssetTypeCategoryId.Equals(input.AssetTypeCategoryId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.FilePath != null)
                {
                    hashCode = (hashCode * 59) + this.FilePath.GetHashCode();
                }
                if (this.ThumbnailPath != null)
                {
                    hashCode = (hashCode * 59) + this.ThumbnailPath.GetHashCode();
                }
                if (this.AssetTypeIds != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTypeIds.GetHashCode();
                }
                if (this.ImgPath != null)
                {
                    hashCode = (hashCode * 59) + this.ImgPath.GetHashCode();
                }
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                if (this.ThumbnailUri != null)
                {
                    hashCode = (hashCode * 59) + this.ThumbnailUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetTypeCategoryId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
