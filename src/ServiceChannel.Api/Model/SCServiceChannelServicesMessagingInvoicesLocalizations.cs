/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The object for UI labels that appear in the \&quot;Invoice Number\&quot; section on the \&quot;General\&quot; tab of the \&quot;Admin - Invoices\&quot; page in Service Automation. Note that only subscriber users with the Super Admin secondary role can access this page.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.Localizations")]
    public partial class SCServiceChannelServicesMessagingInvoicesLocalizations : IEquatable<SCServiceChannelServicesMessagingInvoicesLocalizations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesLocalizations" /> class.
        /// </summary>
        /// <param name="invoiceNumberLabel">Label for the \&quot;Invoice Number\&quot; section name..</param>
        /// <param name="lastModifiedLabel">The \&quot;Last modified\&quot; label for details about who last updated the invoice requirements and when..</param>
        /// <param name="restrictionLabel">Label for the \&quot;Restrictions\&quot; drop-down list where a subscriber admin selects which restriction should apply to the numbers of manually created invoices..</param>
        /// <param name="generationRuleLabel">Label for the \&quot;Generation uniqueness rule\&quot; drop-down list where a subscriber admin selects which rule should apply to the numbers of automatically generated invoices..</param>
        /// <param name="helpStringLabel">The \&quot;Help string (to show vendors)\&quot; label for the field containing comments shown to a provider when they try to submit an invoice whose number does not meet the restrictions specified by a subscriber..</param>
        /// <param name="patternPlaceHolder">A placeholder text shown in the field where a subscriber admin enters a regular expression pattern to set restrictions for the numbers of manually created invoices..</param>
        /// <param name="commentPlaceHolder">A placeholder text shown in the field where a subscriber admin enters a comment for the restriction applied to the numbers of manually created invoices based on the selected restriction type..</param>
        public SCServiceChannelServicesMessagingInvoicesLocalizations(string invoiceNumberLabel = default(string), string lastModifiedLabel = default(string), string restrictionLabel = default(string), string generationRuleLabel = default(string), string helpStringLabel = default(string), string patternPlaceHolder = default(string), string commentPlaceHolder = default(string))
        {
            this.InvoiceNumberLabel = invoiceNumberLabel;
            this.LastModifiedLabel = lastModifiedLabel;
            this.RestrictionLabel = restrictionLabel;
            this.GenerationRuleLabel = generationRuleLabel;
            this.HelpStringLabel = helpStringLabel;
            this.PatternPlaceHolder = patternPlaceHolder;
            this.CommentPlaceHolder = commentPlaceHolder;
        }

        /// <summary>
        /// Label for the \&quot;Invoice Number\&quot; section name.
        /// </summary>
        /// <value>Label for the \&quot;Invoice Number\&quot; section name.</value>
        [DataMember(Name = "InvoiceNumberLabel", EmitDefaultValue = false)]
        public string InvoiceNumberLabel { get; set; }

        /// <summary>
        /// The \&quot;Last modified\&quot; label for details about who last updated the invoice requirements and when.
        /// </summary>
        /// <value>The \&quot;Last modified\&quot; label for details about who last updated the invoice requirements and when.</value>
        [DataMember(Name = "LastModifiedLabel", EmitDefaultValue = false)]
        public string LastModifiedLabel { get; set; }

        /// <summary>
        /// Label for the \&quot;Restrictions\&quot; drop-down list where a subscriber admin selects which restriction should apply to the numbers of manually created invoices.
        /// </summary>
        /// <value>Label for the \&quot;Restrictions\&quot; drop-down list where a subscriber admin selects which restriction should apply to the numbers of manually created invoices.</value>
        [DataMember(Name = "RestrictionLabel", EmitDefaultValue = false)]
        public string RestrictionLabel { get; set; }

        /// <summary>
        /// Label for the \&quot;Generation uniqueness rule\&quot; drop-down list where a subscriber admin selects which rule should apply to the numbers of automatically generated invoices.
        /// </summary>
        /// <value>Label for the \&quot;Generation uniqueness rule\&quot; drop-down list where a subscriber admin selects which rule should apply to the numbers of automatically generated invoices.</value>
        [DataMember(Name = "GenerationRuleLabel", EmitDefaultValue = false)]
        public string GenerationRuleLabel { get; set; }

        /// <summary>
        /// The \&quot;Help string (to show vendors)\&quot; label for the field containing comments shown to a provider when they try to submit an invoice whose number does not meet the restrictions specified by a subscriber.
        /// </summary>
        /// <value>The \&quot;Help string (to show vendors)\&quot; label for the field containing comments shown to a provider when they try to submit an invoice whose number does not meet the restrictions specified by a subscriber.</value>
        [DataMember(Name = "HelpStringLabel", EmitDefaultValue = false)]
        public string HelpStringLabel { get; set; }

        /// <summary>
        /// A placeholder text shown in the field where a subscriber admin enters a regular expression pattern to set restrictions for the numbers of manually created invoices.
        /// </summary>
        /// <value>A placeholder text shown in the field where a subscriber admin enters a regular expression pattern to set restrictions for the numbers of manually created invoices.</value>
        [DataMember(Name = "PatternPlaceHolder", EmitDefaultValue = false)]
        public string PatternPlaceHolder { get; set; }

        /// <summary>
        /// A placeholder text shown in the field where a subscriber admin enters a comment for the restriction applied to the numbers of manually created invoices based on the selected restriction type.
        /// </summary>
        /// <value>A placeholder text shown in the field where a subscriber admin enters a comment for the restriction applied to the numbers of manually created invoices based on the selected restriction type.</value>
        [DataMember(Name = "CommentPlaceHolder", EmitDefaultValue = false)]
        public string CommentPlaceHolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesLocalizations {\n");
            sb.Append("  InvoiceNumberLabel: ").Append(InvoiceNumberLabel).Append("\n");
            sb.Append("  LastModifiedLabel: ").Append(LastModifiedLabel).Append("\n");
            sb.Append("  RestrictionLabel: ").Append(RestrictionLabel).Append("\n");
            sb.Append("  GenerationRuleLabel: ").Append(GenerationRuleLabel).Append("\n");
            sb.Append("  HelpStringLabel: ").Append(HelpStringLabel).Append("\n");
            sb.Append("  PatternPlaceHolder: ").Append(PatternPlaceHolder).Append("\n");
            sb.Append("  CommentPlaceHolder: ").Append(CommentPlaceHolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesLocalizations);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesLocalizations instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesLocalizations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesLocalizations input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvoiceNumberLabel == input.InvoiceNumberLabel ||
                    (this.InvoiceNumberLabel != null &&
                    this.InvoiceNumberLabel.Equals(input.InvoiceNumberLabel))
                ) && 
                (
                    this.LastModifiedLabel == input.LastModifiedLabel ||
                    (this.LastModifiedLabel != null &&
                    this.LastModifiedLabel.Equals(input.LastModifiedLabel))
                ) && 
                (
                    this.RestrictionLabel == input.RestrictionLabel ||
                    (this.RestrictionLabel != null &&
                    this.RestrictionLabel.Equals(input.RestrictionLabel))
                ) && 
                (
                    this.GenerationRuleLabel == input.GenerationRuleLabel ||
                    (this.GenerationRuleLabel != null &&
                    this.GenerationRuleLabel.Equals(input.GenerationRuleLabel))
                ) && 
                (
                    this.HelpStringLabel == input.HelpStringLabel ||
                    (this.HelpStringLabel != null &&
                    this.HelpStringLabel.Equals(input.HelpStringLabel))
                ) && 
                (
                    this.PatternPlaceHolder == input.PatternPlaceHolder ||
                    (this.PatternPlaceHolder != null &&
                    this.PatternPlaceHolder.Equals(input.PatternPlaceHolder))
                ) && 
                (
                    this.CommentPlaceHolder == input.CommentPlaceHolder ||
                    (this.CommentPlaceHolder != null &&
                    this.CommentPlaceHolder.Equals(input.CommentPlaceHolder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceNumberLabel != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceNumberLabel.GetHashCode();
                }
                if (this.LastModifiedLabel != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedLabel.GetHashCode();
                }
                if (this.RestrictionLabel != null)
                {
                    hashCode = (hashCode * 59) + this.RestrictionLabel.GetHashCode();
                }
                if (this.GenerationRuleLabel != null)
                {
                    hashCode = (hashCode * 59) + this.GenerationRuleLabel.GetHashCode();
                }
                if (this.HelpStringLabel != null)
                {
                    hashCode = (hashCode * 59) + this.HelpStringLabel.GetHashCode();
                }
                if (this.PatternPlaceHolder != null)
                {
                    hashCode = (hashCode * 59) + this.PatternPlaceHolder.GetHashCode();
                }
                if (this.CommentPlaceHolder != null)
                {
                    hashCode = (hashCode * 59) + this.CommentPlaceHolder.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
