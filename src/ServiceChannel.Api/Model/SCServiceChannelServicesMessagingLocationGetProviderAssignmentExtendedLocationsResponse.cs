/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Location.GetProviderAssignmentExtendedLocationsResponse")]
    public partial class SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse : IEquatable<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse" /> class.
        /// </summary>
        /// <param name="locations">Response details object.</param>
        /// <param name="allLocationsCount">Total number of all locations displayed in the response..</param>
        /// <param name="trucksCount">Number of mobile units that move around locations to fix the broken equipment..</param>
        /// <param name="locationsCount">Number of retail locations that have inventory..</param>
        /// <param name="warehousesCount">Number of company-owned locations that supply other locations with parts..</param>
        /// <param name="supplyHousesCount">Number of non-company-owned locations where goods are purchased from..</param>
        public SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse(List<SCServiceChannelServicesMessagingLocationProviderAssignmentExtendedLocation> locations = default(List<SCServiceChannelServicesMessagingLocationProviderAssignmentExtendedLocation>), int allLocationsCount = default(int), int trucksCount = default(int), int locationsCount = default(int), int warehousesCount = default(int), int supplyHousesCount = default(int))
        {
            this.Locations = locations;
            this.AllLocationsCount = allLocationsCount;
            this.TrucksCount = trucksCount;
            this.LocationsCount = locationsCount;
            this.WarehousesCount = warehousesCount;
            this.SupplyHousesCount = supplyHousesCount;
        }

        /// <summary>
        /// Response details object
        /// </summary>
        /// <value>Response details object</value>
        [DataMember(Name = "Locations", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingLocationProviderAssignmentExtendedLocation> Locations { get; set; }

        /// <summary>
        /// Total number of all locations displayed in the response.
        /// </summary>
        /// <value>Total number of all locations displayed in the response.</value>
        [DataMember(Name = "AllLocationsCount", EmitDefaultValue = false)]
        public int AllLocationsCount { get; set; }

        /// <summary>
        /// Number of mobile units that move around locations to fix the broken equipment.
        /// </summary>
        /// <value>Number of mobile units that move around locations to fix the broken equipment.</value>
        [DataMember(Name = "TrucksCount", EmitDefaultValue = false)]
        public int TrucksCount { get; set; }

        /// <summary>
        /// Number of retail locations that have inventory.
        /// </summary>
        /// <value>Number of retail locations that have inventory.</value>
        [DataMember(Name = "LocationsCount", EmitDefaultValue = false)]
        public int LocationsCount { get; set; }

        /// <summary>
        /// Number of company-owned locations that supply other locations with parts.
        /// </summary>
        /// <value>Number of company-owned locations that supply other locations with parts.</value>
        [DataMember(Name = "WarehousesCount", EmitDefaultValue = false)]
        public int WarehousesCount { get; set; }

        /// <summary>
        /// Number of non-company-owned locations where goods are purchased from.
        /// </summary>
        /// <value>Number of non-company-owned locations where goods are purchased from.</value>
        [DataMember(Name = "SupplyHousesCount", EmitDefaultValue = false)]
        public int SupplyHousesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse {\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  AllLocationsCount: ").Append(AllLocationsCount).Append("\n");
            sb.Append("  TrucksCount: ").Append(TrucksCount).Append("\n");
            sb.Append("  LocationsCount: ").Append(LocationsCount).Append("\n");
            sb.Append("  WarehousesCount: ").Append(WarehousesCount).Append("\n");
            sb.Append("  SupplyHousesCount: ").Append(SupplyHousesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    input.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && 
                (
                    this.AllLocationsCount == input.AllLocationsCount ||
                    this.AllLocationsCount.Equals(input.AllLocationsCount)
                ) && 
                (
                    this.TrucksCount == input.TrucksCount ||
                    this.TrucksCount.Equals(input.TrucksCount)
                ) && 
                (
                    this.LocationsCount == input.LocationsCount ||
                    this.LocationsCount.Equals(input.LocationsCount)
                ) && 
                (
                    this.WarehousesCount == input.WarehousesCount ||
                    this.WarehousesCount.Equals(input.WarehousesCount)
                ) && 
                (
                    this.SupplyHousesCount == input.SupplyHousesCount ||
                    this.SupplyHousesCount.Equals(input.SupplyHousesCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Locations != null)
                {
                    hashCode = (hashCode * 59) + this.Locations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllLocationsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TrucksCount.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.WarehousesCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SupplyHousesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
