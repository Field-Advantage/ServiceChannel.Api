/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingTrucksTruckRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Trucks.TruckRequest")]
    public partial class SCServiceChannelServicesMessagingTrucksTruckRequest : IEquatable<SCServiceChannelServicesMessagingTrucksTruckRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingTrucksTruckRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingTrucksTruckRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingTrucksTruckRequest" /> class.
        /// </summary>
        /// <param name="truckId">truckId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="region">region.</param>
        /// <param name="district">district.</param>
        /// <param name="make">make.</param>
        /// <param name="model">model.</param>
        /// <param name="year">year.</param>
        /// <param name="license">license.</param>
        /// <param name="vin">vin.</param>
        /// <param name="homestoreLocationId">homestoreLocationId.</param>
        /// <param name="mainContact">mainContact.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="faxNumber">faxNumber.</param>
        /// <param name="email">email.</param>
        /// <param name="managerAuthId">managerAuthId.</param>
        /// <param name="inventoryProviderId">inventoryProviderId.</param>
        public SCServiceChannelServicesMessagingTrucksTruckRequest(string truckId = default(string), string name = default(string), string region = default(string), string district = default(string), string make = default(string), string model = default(string), string year = default(string), string license = default(string), string vin = default(string), int homestoreLocationId = default(int), string mainContact = default(string), string phoneNumber = default(string), string faxNumber = default(string), string email = default(string), long managerAuthId = default(long), int inventoryProviderId = default(int))
        {
            // to ensure "truckId" is required (not null)
            if (truckId == null)
            {
                throw new ArgumentNullException("truckId is a required property for SCServiceChannelServicesMessagingTrucksTruckRequest and cannot be null");
            }
            this.TruckId = truckId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SCServiceChannelServicesMessagingTrucksTruckRequest and cannot be null");
            }
            this.Name = name;
            this.Region = region;
            this.District = district;
            this.Make = make;
            this.Model = model;
            this.Year = year;
            this.License = license;
            this.Vin = vin;
            this.HomestoreLocationId = homestoreLocationId;
            this.MainContact = mainContact;
            this.PhoneNumber = phoneNumber;
            this.FaxNumber = faxNumber;
            this.Email = email;
            this.ManagerAuthId = managerAuthId;
            this.InventoryProviderId = inventoryProviderId;
        }

        /// <summary>
        /// Gets or Sets TruckId
        /// </summary>
        [DataMember(Name = "TruckId", IsRequired = true, EmitDefaultValue = true)]
        public string TruckId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name = "District", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name = "Make", EmitDefaultValue = false)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "Model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "Year", EmitDefaultValue = false)]
        public string Year { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [DataMember(Name = "License", EmitDefaultValue = false)]
        public string License { get; set; }

        /// <summary>
        /// Gets or Sets Vin
        /// </summary>
        [DataMember(Name = "Vin", EmitDefaultValue = false)]
        public string Vin { get; set; }

        /// <summary>
        /// Gets or Sets HomestoreLocationId
        /// </summary>
        [DataMember(Name = "HomestoreLocationId", EmitDefaultValue = false)]
        public int HomestoreLocationId { get; set; }

        /// <summary>
        /// Gets or Sets MainContact
        /// </summary>
        [DataMember(Name = "MainContact", EmitDefaultValue = false)]
        public string MainContact { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxNumber
        /// </summary>
        [DataMember(Name = "FaxNumber", EmitDefaultValue = false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets ManagerAuthId
        /// </summary>
        [DataMember(Name = "ManagerAuthId", EmitDefaultValue = false)]
        public long ManagerAuthId { get; set; }

        /// <summary>
        /// Gets or Sets InventoryProviderId
        /// </summary>
        [DataMember(Name = "InventoryProviderId", EmitDefaultValue = false)]
        public int InventoryProviderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingTrucksTruckRequest {\n");
            sb.Append("  TruckId: ").Append(TruckId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Vin: ").Append(Vin).Append("\n");
            sb.Append("  HomestoreLocationId: ").Append(HomestoreLocationId).Append("\n");
            sb.Append("  MainContact: ").Append(MainContact).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ManagerAuthId: ").Append(ManagerAuthId).Append("\n");
            sb.Append("  InventoryProviderId: ").Append(InventoryProviderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingTrucksTruckRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingTrucksTruckRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingTrucksTruckRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingTrucksTruckRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TruckId == input.TruckId ||
                    (this.TruckId != null &&
                    this.TruckId.Equals(input.TruckId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.Vin == input.Vin ||
                    (this.Vin != null &&
                    this.Vin.Equals(input.Vin))
                ) && 
                (
                    this.HomestoreLocationId == input.HomestoreLocationId ||
                    this.HomestoreLocationId.Equals(input.HomestoreLocationId)
                ) && 
                (
                    this.MainContact == input.MainContact ||
                    (this.MainContact != null &&
                    this.MainContact.Equals(input.MainContact))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ManagerAuthId == input.ManagerAuthId ||
                    this.ManagerAuthId.Equals(input.ManagerAuthId)
                ) && 
                (
                    this.InventoryProviderId == input.InventoryProviderId ||
                    this.InventoryProviderId.Equals(input.InventoryProviderId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TruckId != null)
                {
                    hashCode = (hashCode * 59) + this.TruckId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.District != null)
                {
                    hashCode = (hashCode * 59) + this.District.GetHashCode();
                }
                if (this.Make != null)
                {
                    hashCode = (hashCode * 59) + this.Make.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.Year != null)
                {
                    hashCode = (hashCode * 59) + this.Year.GetHashCode();
                }
                if (this.License != null)
                {
                    hashCode = (hashCode * 59) + this.License.GetHashCode();
                }
                if (this.Vin != null)
                {
                    hashCode = (hashCode * 59) + this.Vin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HomestoreLocationId.GetHashCode();
                if (this.MainContact != null)
                {
                    hashCode = (hashCode * 59) + this.MainContact.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.FaxNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FaxNumber.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ManagerAuthId.GetHashCode();
                hashCode = (hashCode * 59) + this.InventoryProviderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
