/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Get Issue Choice request
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.IssueLists.GetIssueChoiceRequest")]
    public partial class SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest : IEquatable<SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest" /> class.
        /// </summary>
        /// <param name="subscriberId">The subsriber id..</param>
        /// <param name="setupId">The dashboard Id..</param>
        /// <param name="problemType">The problem type..</param>
        /// <param name="equipmentType">The equipment type..</param>
        /// <param name="problemCode">The problem code.</param>
        /// <param name="locationId">Location Id.</param>
        /// <param name="areaName">Name of the area.</param>
        /// <param name="userFeatures">User&#39;s features.</param>
        public SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest(int subscriberId = default(int), int setupId = default(int), string problemType = default(string), string equipmentType = default(string), string problemCode = default(string), int locationId = default(int), string areaName = default(string), List<string> userFeatures = default(List<string>))
        {
            this.SubscriberId = subscriberId;
            this.SetupId = setupId;
            this.ProblemType = problemType;
            this.EquipmentType = equipmentType;
            this.ProblemCode = problemCode;
            this.LocationId = locationId;
            this.AreaName = areaName;
            this.UserFeatures = userFeatures;
        }

        /// <summary>
        /// The subsriber id.
        /// </summary>
        /// <value>The subsriber id.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// The dashboard Id.
        /// </summary>
        /// <value>The dashboard Id.</value>
        [DataMember(Name = "SetupId", EmitDefaultValue = false)]
        public int SetupId { get; set; }

        /// <summary>
        /// The problem type.
        /// </summary>
        /// <value>The problem type.</value>
        [DataMember(Name = "ProblemType", EmitDefaultValue = false)]
        public string ProblemType { get; set; }

        /// <summary>
        /// The equipment type.
        /// </summary>
        /// <value>The equipment type.</value>
        [DataMember(Name = "EquipmentType", EmitDefaultValue = false)]
        public string EquipmentType { get; set; }

        /// <summary>
        /// The problem code
        /// </summary>
        /// <value>The problem code</value>
        [DataMember(Name = "ProblemCode", EmitDefaultValue = false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Location Id
        /// </summary>
        /// <value>Location Id</value>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Name of the area
        /// </summary>
        /// <value>Name of the area</value>
        [DataMember(Name = "AreaName", EmitDefaultValue = false)]
        public string AreaName { get; set; }

        /// <summary>
        /// User&#39;s features
        /// </summary>
        /// <value>User&#39;s features</value>
        [DataMember(Name = "UserFeatures", EmitDefaultValue = false)]
        public List<string> UserFeatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest {\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  SetupId: ").Append(SetupId).Append("\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  EquipmentType: ").Append(EquipmentType).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  AreaName: ").Append(AreaName).Append("\n");
            sb.Append("  UserFeatures: ").Append(UserFeatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.SetupId == input.SetupId ||
                    this.SetupId.Equals(input.SetupId)
                ) && 
                (
                    this.ProblemType == input.ProblemType ||
                    (this.ProblemType != null &&
                    this.ProblemType.Equals(input.ProblemType))
                ) && 
                (
                    this.EquipmentType == input.EquipmentType ||
                    (this.EquipmentType != null &&
                    this.EquipmentType.Equals(input.EquipmentType))
                ) && 
                (
                    this.ProblemCode == input.ProblemCode ||
                    (this.ProblemCode != null &&
                    this.ProblemCode.Equals(input.ProblemCode))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.AreaName == input.AreaName ||
                    (this.AreaName != null &&
                    this.AreaName.Equals(input.AreaName))
                ) && 
                (
                    this.UserFeatures == input.UserFeatures ||
                    this.UserFeatures != null &&
                    input.UserFeatures != null &&
                    this.UserFeatures.SequenceEqual(input.UserFeatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.SetupId.GetHashCode();
                if (this.ProblemType != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemType.GetHashCode();
                }
                if (this.EquipmentType != null)
                {
                    hashCode = (hashCode * 59) + this.EquipmentType.GetHashCode();
                }
                if (this.ProblemCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.AreaName != null)
                {
                    hashCode = (hashCode * 59) + this.AreaName.GetHashCode();
                }
                if (this.UserFeatures != null)
                {
                    hashCode = (hashCode * 59) + this.UserFeatures.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
