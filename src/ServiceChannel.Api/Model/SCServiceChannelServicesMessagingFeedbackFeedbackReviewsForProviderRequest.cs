/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Feedback.FeedbackReviewsForProviderRequest")]
    public partial class SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest : IEquatable<SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest>, IValidatableObject
    {
        /// <summary>
        /// Sort by field (default by Recent)
        /// </summary>
        /// <value>Sort by field (default by Recent)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortByEnum
        {
            /// <summary>
            /// Enum Recent for value: Recent
            /// </summary>
            [EnumMember(Value = "Recent")]
            Recent = 1,

            /// <summary>
            /// Enum HighestScoreFirst for value: HighestScoreFirst
            /// </summary>
            [EnumMember(Value = "HighestScoreFirst")]
            HighestScoreFirst = 2,

            /// <summary>
            /// Enum LowestScoreFirst for value: LowestScoreFirst
            /// </summary>
            [EnumMember(Value = "LowestScoreFirst")]
            LowestScoreFirst = 3

        }


        /// <summary>
        /// Sort by field (default by Recent)
        /// </summary>
        /// <value>Sort by field (default by Recent)</value>
        [DataMember(Name = "SortBy", EmitDefaultValue = false)]
        public SortByEnum? SortBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest" /> class.
        /// </summary>
        /// <param name="providerId">Provider Id.</param>
        /// <param name="searchWithin">Search within reviews comment.</param>
        /// <param name="pageSize">Response page size (default 10).</param>
        /// <param name="pageOffset">Response page offset (default 0).</param>
        /// <param name="sortBy">Sort by field (default by Recent).</param>
        /// <param name="subscriberId">Subscriber Id.</param>
        public SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest(int providerId = default(int), string searchWithin = default(string), int pageSize = default(int), int pageOffset = default(int), SortByEnum? sortBy = default(SortByEnum?), int subscriberId = default(int))
        {
            this.ProviderId = providerId;
            this.SearchWithin = searchWithin;
            this.PageSize = pageSize;
            this.PageOffset = pageOffset;
            this.SortBy = sortBy;
            this.SubscriberId = subscriberId;
        }

        /// <summary>
        /// Provider Id
        /// </summary>
        /// <value>Provider Id</value>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Search within reviews comment
        /// </summary>
        /// <value>Search within reviews comment</value>
        [DataMember(Name = "SearchWithin", EmitDefaultValue = false)]
        public string SearchWithin { get; set; }

        /// <summary>
        /// Response page size (default 10)
        /// </summary>
        /// <value>Response page size (default 10)</value>
        [DataMember(Name = "PageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Response page offset (default 0)
        /// </summary>
        /// <value>Response page offset (default 0)</value>
        [DataMember(Name = "PageOffset", EmitDefaultValue = false)]
        public int PageOffset { get; set; }

        /// <summary>
        /// Subscriber Id
        /// </summary>
        /// <value>Subscriber Id</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest {\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  SearchWithin: ").Append(SearchWithin).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageOffset: ").Append(PageOffset).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.SearchWithin == input.SearchWithin ||
                    (this.SearchWithin != null &&
                    this.SearchWithin.Equals(input.SearchWithin))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.PageOffset == input.PageOffset ||
                    this.PageOffset.Equals(input.PageOffset)
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    this.SortBy.Equals(input.SortBy)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                if (this.SearchWithin != null)
                {
                    hashCode = (hashCode * 59) + this.SearchWithin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                hashCode = (hashCode * 59) + this.PageOffset.GetHashCode();
                hashCode = (hashCode * 59) + this.SortBy.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
