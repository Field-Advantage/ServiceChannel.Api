/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// LocationWithTimezoneName
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Location.LocationWithTimezoneName")]
    public partial class SCServiceChannelServicesMessagingLocationLocationWithTimezoneName : IEquatable<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingLocationLocationWithTimezoneName" /> class.
        /// </summary>
        /// <param name="timezoneName">The time zone identifier.</param>
        /// <param name="id">Unique location identifier..</param>
        /// <param name="subscriberId">Unique subscriber identifier..</param>
        /// <param name="subscriberName">subscriberName.</param>
        /// <param name="storeId">Alphanumeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber..</param>
        /// <param name="name">Location name..</param>
        /// <param name="shortName">Shortened location name..</param>
        /// <param name="latitude">Global position. Latitude..</param>
        /// <param name="longitude">Global position. Longitude..</param>
        /// <param name="distance">Distance from GPS coordinate to this location.</param>
        /// <param name="radius">GPS radius for the location..</param>
        /// <param name="locationTypeId">Numeric identifier of the location type..</param>
        /// <param name="address1">Additional location address..</param>
        /// <param name="address2">Main location address..</param>
        /// <param name="city">Location city..</param>
        /// <param name="state">State where the location is situated..</param>
        /// <param name="stateId">Numeric identifier of the location’s state..</param>
        /// <param name="region">Part of the country where the location is situated..</param>
        /// <param name="district">Abbreviation of the town or country area where the location is situated..</param>
        /// <param name="zip">Location ZIP or postal code..</param>
        /// <param name="country">Abbreviation of the country name where the location is situated..</param>
        /// <param name="countryId">Numeric identifier of the country of the location..</param>
        /// <param name="closedDate">Last day when the location is open for business..</param>
        /// <param name="openDate">First day when the location is open for business..</param>
        /// <param name="status">Status of the location. Possible values: *open*, *closed*..</param>
        /// <param name="email">Email the location can be contacted at..</param>
        /// <param name="faxNumber">Fax number the location can be contacted at..</param>
        /// <param name="phone">Contact phone number of the location..</param>
        /// <param name="contact">Name of the main person to contact at the location..</param>
        /// <param name="hasInventory">Indicates whether it’s an inventory location or not. Possible values: *true*, *false*. (default to false).</param>
        /// <param name="squareValue">Square value of the facility..</param>
        /// <param name="squareMeasure">Unit or system of units for measuring location area..</param>
        /// <param name="timeZoneInfoId">Numeric identifier of the location time zone..</param>
        /// <param name="timeZoneShortDescription">Location time zone abbreviation..</param>
        /// <param name="timeZoneMsName">Location time zone Microsoft Name. e.g \&quot;Eastern Standard Time\&quot;.</param>
        /// <param name="timeZoneIanaName">Location time zone Iana Name. e.g. \&quot;America/New_York\&quot;.</param>
        /// <param name="typeLabel">[Inventory location type](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations?preview&#x3D;%2F1209106525%2F1205830388%2FSupply-House-Type.png). Possible values: *Location*, *Warehouse*, *Supply House*, *Truck*..</param>
        /// <param name="supplier">Supplier’s location name..</param>
        /// <param name="countyId">County numeric identifier..</param>
        /// <param name="notes">notes.</param>
        /// <param name="timeShiftToEST">timeShiftToEST.</param>
        /// <param name="addressTypeId">Address format pattern Id.</param>
        /// <param name="formattedAddress">formattedAddress.</param>
        /// <param name="locationFormattedAddressTail">locationFormattedAddressTail.</param>
        public SCServiceChannelServicesMessagingLocationLocationWithTimezoneName(string timezoneName = default(string), int id = default(int), int subscriberId = default(int), string subscriberName = default(string), string storeId = default(string), string name = default(string), string shortName = default(string), double latitude = default(double), double longitude = default(double), double distance = default(double), double radius = default(double), int locationTypeId = default(int), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), int stateId = default(int), string region = default(string), string district = default(string), string zip = default(string), string country = default(string), int countryId = default(int), DateTime closedDate = default(DateTime), DateTime openDate = default(DateTime), string status = default(string), string email = default(string), string faxNumber = default(string), string phone = default(string), string contact = default(string), bool hasInventory = false, double squareValue = default(double), string squareMeasure = default(string), int timeZoneInfoId = default(int), string timeZoneShortDescription = default(string), string timeZoneMsName = default(string), string timeZoneIanaName = default(string), string typeLabel = default(string), string supplier = default(string), int countyId = default(int), List<SCServiceChannelServicesMessagingLocationNoteLocationNote> notes = default(List<SCServiceChannelServicesMessagingLocationNoteLocationNote>), int timeShiftToEST = default(int), int addressTypeId = default(int), string formattedAddress = default(string), string locationFormattedAddressTail = default(string))
        {
            this.TimezoneName = timezoneName;
            this.Id = id;
            this.SubscriberId = subscriberId;
            this.SubscriberName = subscriberName;
            this.StoreId = storeId;
            this.Name = name;
            this.ShortName = shortName;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Distance = distance;
            this.Radius = radius;
            this.LocationTypeId = locationTypeId;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.StateId = stateId;
            this.Region = region;
            this.District = district;
            this.Zip = zip;
            this.Country = country;
            this.CountryId = countryId;
            this.ClosedDate = closedDate;
            this.OpenDate = openDate;
            this.Status = status;
            this.Email = email;
            this.FaxNumber = faxNumber;
            this.Phone = phone;
            this.Contact = contact;
            this.HasInventory = hasInventory;
            this.SquareValue = squareValue;
            this.SquareMeasure = squareMeasure;
            this.TimeZoneInfoId = timeZoneInfoId;
            this.TimeZoneShortDescription = timeZoneShortDescription;
            this.TimeZoneMsName = timeZoneMsName;
            this.TimeZoneIanaName = timeZoneIanaName;
            this.TypeLabel = typeLabel;
            this.Supplier = supplier;
            this.CountyId = countyId;
            this.Notes = notes;
            this.TimeShiftToEST = timeShiftToEST;
            this.AddressTypeId = addressTypeId;
            this.FormattedAddress = formattedAddress;
            this.LocationFormattedAddressTail = locationFormattedAddressTail;
        }

        /// <summary>
        /// The time zone identifier
        /// </summary>
        /// <value>The time zone identifier</value>
        [DataMember(Name = "TimezoneName", EmitDefaultValue = false)]
        public string TimezoneName { get; set; }

        /// <summary>
        /// Unique location identifier.
        /// </summary>
        /// <value>Unique location identifier.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique subscriber identifier.
        /// </summary>
        /// <value>Unique subscriber identifier.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberName
        /// </summary>
        [DataMember(Name = "SubscriberName", EmitDefaultValue = false)]
        public string SubscriberName { get; set; }

        /// <summary>
        /// Alphanumeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber.
        /// </summary>
        /// <value>Alphanumeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber.</value>
        [DataMember(Name = "StoreId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Location name.
        /// </summary>
        /// <value>Location name.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Shortened location name.
        /// </summary>
        /// <value>Shortened location name.</value>
        [DataMember(Name = "ShortName", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Global position. Latitude.
        /// </summary>
        /// <value>Global position. Latitude.</value>
        [DataMember(Name = "Latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Global position. Longitude.
        /// </summary>
        /// <value>Global position. Longitude.</value>
        [DataMember(Name = "Longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Distance from GPS coordinate to this location
        /// </summary>
        /// <value>Distance from GPS coordinate to this location</value>
        [DataMember(Name = "Distance", EmitDefaultValue = false)]
        public double Distance { get; set; }

        /// <summary>
        /// GPS radius for the location.
        /// </summary>
        /// <value>GPS radius for the location.</value>
        [DataMember(Name = "Radius", EmitDefaultValue = false)]
        public double Radius { get; set; }

        /// <summary>
        /// Numeric identifier of the location type.
        /// </summary>
        /// <value>Numeric identifier of the location type.</value>
        [DataMember(Name = "LocationTypeId", EmitDefaultValue = false)]
        public int LocationTypeId { get; set; }

        /// <summary>
        /// Additional location address.
        /// </summary>
        /// <value>Additional location address.</value>
        [DataMember(Name = "Address1", EmitDefaultValue = false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Main location address.
        /// </summary>
        /// <value>Main location address.</value>
        [DataMember(Name = "Address2", EmitDefaultValue = false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Location city.
        /// </summary>
        /// <value>Location city.</value>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// State where the location is situated.
        /// </summary>
        /// <value>State where the location is situated.</value>
        [DataMember(Name = "State", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Numeric identifier of the location’s state.
        /// </summary>
        /// <value>Numeric identifier of the location’s state.</value>
        [DataMember(Name = "StateId", EmitDefaultValue = false)]
        public int StateId { get; set; }

        /// <summary>
        /// Part of the country where the location is situated.
        /// </summary>
        /// <value>Part of the country where the location is situated.</value>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Abbreviation of the town or country area where the location is situated.
        /// </summary>
        /// <value>Abbreviation of the town or country area where the location is situated.</value>
        [DataMember(Name = "District", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        /// Location ZIP or postal code.
        /// </summary>
        /// <value>Location ZIP or postal code.</value>
        [DataMember(Name = "Zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Abbreviation of the country name where the location is situated.
        /// </summary>
        /// <value>Abbreviation of the country name where the location is situated.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Numeric identifier of the country of the location.
        /// </summary>
        /// <value>Numeric identifier of the country of the location.</value>
        [DataMember(Name = "CountryId", EmitDefaultValue = false)]
        public int CountryId { get; set; }

        /// <summary>
        /// Last day when the location is open for business.
        /// </summary>
        /// <value>Last day when the location is open for business.</value>
        [DataMember(Name = "ClosedDate", EmitDefaultValue = false)]
        public DateTime ClosedDate { get; set; }

        /// <summary>
        /// First day when the location is open for business.
        /// </summary>
        /// <value>First day when the location is open for business.</value>
        [DataMember(Name = "OpenDate", EmitDefaultValue = false)]
        public DateTime OpenDate { get; set; }

        /// <summary>
        /// Status of the location. Possible values: *open*, *closed*.
        /// </summary>
        /// <value>Status of the location. Possible values: *open*, *closed*.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Email the location can be contacted at.
        /// </summary>
        /// <value>Email the location can be contacted at.</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Fax number the location can be contacted at.
        /// </summary>
        /// <value>Fax number the location can be contacted at.</value>
        [DataMember(Name = "FaxNumber", EmitDefaultValue = false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Contact phone number of the location.
        /// </summary>
        /// <value>Contact phone number of the location.</value>
        [DataMember(Name = "Phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Name of the main person to contact at the location.
        /// </summary>
        /// <value>Name of the main person to contact at the location.</value>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public string Contact { get; set; }

        /// <summary>
        /// Indicates whether it’s an inventory location or not. Possible values: *true*, *false*.
        /// </summary>
        /// <value>Indicates whether it’s an inventory location or not. Possible values: *true*, *false*.</value>
        [DataMember(Name = "HasInventory", EmitDefaultValue = true)]
        public bool HasInventory { get; set; }

        /// <summary>
        /// Square value of the facility.
        /// </summary>
        /// <value>Square value of the facility.</value>
        [DataMember(Name = "SquareValue", EmitDefaultValue = false)]
        public double SquareValue { get; set; }

        /// <summary>
        /// Unit or system of units for measuring location area.
        /// </summary>
        /// <value>Unit or system of units for measuring location area.</value>
        [DataMember(Name = "SquareMeasure", EmitDefaultValue = false)]
        public string SquareMeasure { get; set; }

        /// <summary>
        /// Numeric identifier of the location time zone.
        /// </summary>
        /// <value>Numeric identifier of the location time zone.</value>
        [DataMember(Name = "TimeZoneInfoId", EmitDefaultValue = false)]
        public int TimeZoneInfoId { get; set; }

        /// <summary>
        /// Location time zone abbreviation.
        /// </summary>
        /// <value>Location time zone abbreviation.</value>
        [DataMember(Name = "TimeZoneShortDescription", EmitDefaultValue = false)]
        public string TimeZoneShortDescription { get; set; }

        /// <summary>
        /// Location time zone Microsoft Name. e.g \&quot;Eastern Standard Time\&quot;
        /// </summary>
        /// <value>Location time zone Microsoft Name. e.g \&quot;Eastern Standard Time\&quot;</value>
        [DataMember(Name = "TimeZoneMsName", EmitDefaultValue = false)]
        public string TimeZoneMsName { get; set; }

        /// <summary>
        /// Location time zone Iana Name. e.g. \&quot;America/New_York\&quot;
        /// </summary>
        /// <value>Location time zone Iana Name. e.g. \&quot;America/New_York\&quot;</value>
        [DataMember(Name = "TimeZoneIanaName", EmitDefaultValue = false)]
        public string TimeZoneIanaName { get; set; }

        /// <summary>
        /// [Inventory location type](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations?preview&#x3D;%2F1209106525%2F1205830388%2FSupply-House-Type.png). Possible values: *Location*, *Warehouse*, *Supply House*, *Truck*.
        /// </summary>
        /// <value>[Inventory location type](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations?preview&#x3D;%2F1209106525%2F1205830388%2FSupply-House-Type.png). Possible values: *Location*, *Warehouse*, *Supply House*, *Truck*.</value>
        [DataMember(Name = "TypeLabel", EmitDefaultValue = false)]
        public string TypeLabel { get; set; }

        /// <summary>
        /// Supplier’s location name.
        /// </summary>
        /// <value>Supplier’s location name.</value>
        [DataMember(Name = "Supplier", EmitDefaultValue = false)]
        public string Supplier { get; set; }

        /// <summary>
        /// County numeric identifier.
        /// </summary>
        /// <value>County numeric identifier.</value>
        [DataMember(Name = "CountyId", EmitDefaultValue = false)]
        public int CountyId { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "Notes", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingLocationNoteLocationNote> Notes { get; set; }

        /// <summary>
        /// Gets or Sets TimeShiftToEST
        /// </summary>
        [DataMember(Name = "TimeShiftToEST", EmitDefaultValue = false)]
        public int TimeShiftToEST { get; set; }

        /// <summary>
        /// Address format pattern Id
        /// </summary>
        /// <value>Address format pattern Id</value>
        [DataMember(Name = "AddressTypeId", EmitDefaultValue = false)]
        public int AddressTypeId { get; set; }

        /// <summary>
        /// Gets or Sets FormattedAddress
        /// </summary>
        [DataMember(Name = "FormattedAddress", EmitDefaultValue = false)]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// Gets or Sets LocationFormattedAddressTail
        /// </summary>
        [DataMember(Name = "LocationFormattedAddressTail", EmitDefaultValue = false)]
        public string LocationFormattedAddressTail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingLocationLocationWithTimezoneName {\n");
            sb.Append("  TimezoneName: ").Append(TimezoneName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  SubscriberName: ").Append(SubscriberName).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  LocationTypeId: ").Append(LocationTypeId).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  OpenDate: ").Append(OpenDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  HasInventory: ").Append(HasInventory).Append("\n");
            sb.Append("  SquareValue: ").Append(SquareValue).Append("\n");
            sb.Append("  SquareMeasure: ").Append(SquareMeasure).Append("\n");
            sb.Append("  TimeZoneInfoId: ").Append(TimeZoneInfoId).Append("\n");
            sb.Append("  TimeZoneShortDescription: ").Append(TimeZoneShortDescription).Append("\n");
            sb.Append("  TimeZoneMsName: ").Append(TimeZoneMsName).Append("\n");
            sb.Append("  TimeZoneIanaName: ").Append(TimeZoneIanaName).Append("\n");
            sb.Append("  TypeLabel: ").Append(TypeLabel).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  CountyId: ").Append(CountyId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  TimeShiftToEST: ").Append(TimeShiftToEST).Append("\n");
            sb.Append("  AddressTypeId: ").Append(AddressTypeId).Append("\n");
            sb.Append("  FormattedAddress: ").Append(FormattedAddress).Append("\n");
            sb.Append("  LocationFormattedAddressTail: ").Append(LocationFormattedAddressTail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingLocationLocationWithTimezoneName);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingLocationLocationWithTimezoneName instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingLocationLocationWithTimezoneName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingLocationLocationWithTimezoneName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TimezoneName == input.TimezoneName ||
                    (this.TimezoneName != null &&
                    this.TimezoneName.Equals(input.TimezoneName))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.SubscriberName == input.SubscriberName ||
                    (this.SubscriberName != null &&
                    this.SubscriberName.Equals(input.SubscriberName))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Distance == input.Distance ||
                    this.Distance.Equals(input.Distance)
                ) && 
                (
                    this.Radius == input.Radius ||
                    this.Radius.Equals(input.Radius)
                ) && 
                (
                    this.LocationTypeId == input.LocationTypeId ||
                    this.LocationTypeId.Equals(input.LocationTypeId)
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateId == input.StateId ||
                    this.StateId.Equals(input.StateId)
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    this.CountryId.Equals(input.CountryId)
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.OpenDate == input.OpenDate ||
                    (this.OpenDate != null &&
                    this.OpenDate.Equals(input.OpenDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.HasInventory == input.HasInventory ||
                    this.HasInventory.Equals(input.HasInventory)
                ) && 
                (
                    this.SquareValue == input.SquareValue ||
                    this.SquareValue.Equals(input.SquareValue)
                ) && 
                (
                    this.SquareMeasure == input.SquareMeasure ||
                    (this.SquareMeasure != null &&
                    this.SquareMeasure.Equals(input.SquareMeasure))
                ) && 
                (
                    this.TimeZoneInfoId == input.TimeZoneInfoId ||
                    this.TimeZoneInfoId.Equals(input.TimeZoneInfoId)
                ) && 
                (
                    this.TimeZoneShortDescription == input.TimeZoneShortDescription ||
                    (this.TimeZoneShortDescription != null &&
                    this.TimeZoneShortDescription.Equals(input.TimeZoneShortDescription))
                ) && 
                (
                    this.TimeZoneMsName == input.TimeZoneMsName ||
                    (this.TimeZoneMsName != null &&
                    this.TimeZoneMsName.Equals(input.TimeZoneMsName))
                ) && 
                (
                    this.TimeZoneIanaName == input.TimeZoneIanaName ||
                    (this.TimeZoneIanaName != null &&
                    this.TimeZoneIanaName.Equals(input.TimeZoneIanaName))
                ) && 
                (
                    this.TypeLabel == input.TypeLabel ||
                    (this.TypeLabel != null &&
                    this.TypeLabel.Equals(input.TypeLabel))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.CountyId == input.CountyId ||
                    this.CountyId.Equals(input.CountyId)
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.TimeShiftToEST == input.TimeShiftToEST ||
                    this.TimeShiftToEST.Equals(input.TimeShiftToEST)
                ) && 
                (
                    this.AddressTypeId == input.AddressTypeId ||
                    this.AddressTypeId.Equals(input.AddressTypeId)
                ) && 
                (
                    this.FormattedAddress == input.FormattedAddress ||
                    (this.FormattedAddress != null &&
                    this.FormattedAddress.Equals(input.FormattedAddress))
                ) && 
                (
                    this.LocationFormattedAddressTail == input.LocationFormattedAddressTail ||
                    (this.LocationFormattedAddressTail != null &&
                    this.LocationFormattedAddressTail.Equals(input.LocationFormattedAddressTail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimezoneName != null)
                {
                    hashCode = (hashCode * 59) + this.TimezoneName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                if (this.SubscriberName != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriberName.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                hashCode = (hashCode * 59) + this.Radius.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationTypeId.GetHashCode();
                if (this.Address1 != null)
                {
                    hashCode = (hashCode * 59) + this.Address1.GetHashCode();
                }
                if (this.Address2 != null)
                {
                    hashCode = (hashCode * 59) + this.Address2.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StateId.GetHashCode();
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.District != null)
                {
                    hashCode = (hashCode * 59) + this.District.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                if (this.ClosedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedDate.GetHashCode();
                }
                if (this.OpenDate != null)
                {
                    hashCode = (hashCode * 59) + this.OpenDate.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.FaxNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FaxNumber.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Contact != null)
                {
                    hashCode = (hashCode * 59) + this.Contact.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasInventory.GetHashCode();
                hashCode = (hashCode * 59) + this.SquareValue.GetHashCode();
                if (this.SquareMeasure != null)
                {
                    hashCode = (hashCode * 59) + this.SquareMeasure.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeZoneInfoId.GetHashCode();
                if (this.TimeZoneShortDescription != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneShortDescription.GetHashCode();
                }
                if (this.TimeZoneMsName != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneMsName.GetHashCode();
                }
                if (this.TimeZoneIanaName != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneIanaName.GetHashCode();
                }
                if (this.TypeLabel != null)
                {
                    hashCode = (hashCode * 59) + this.TypeLabel.GetHashCode();
                }
                if (this.Supplier != null)
                {
                    hashCode = (hashCode * 59) + this.Supplier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountyId.GetHashCode();
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeShiftToEST.GetHashCode();
                hashCode = (hashCode * 59) + this.AddressTypeId.GetHashCode();
                if (this.FormattedAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FormattedAddress.GetHashCode();
                }
                if (this.LocationFormattedAddressTail != null)
                {
                    hashCode = (hashCode * 59) + this.LocationFormattedAddressTail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
