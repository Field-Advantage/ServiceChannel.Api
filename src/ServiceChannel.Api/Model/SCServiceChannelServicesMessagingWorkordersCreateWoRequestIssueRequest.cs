/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.CreateWoRequest.IssueRequest")]
    public partial class SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest : IEquatable<SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest" /> class.
        /// </summary>
        /// <param name="areaId">Required, UID of problem area.               Must be bigger then zero and belong and belong to existing area (required).</param>
        /// <param name="extendedAreaName">Optional, area name. Must be not empty.</param>
        /// <param name="problemType">Optional, Type of problem. Must be not empty.</param>
        /// <param name="assetType">Optional, type of asset, has predefined values in [IssueList]              Must be not empty.</param>
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest(int areaId = default(int), string extendedAreaName = default(string), string problemType = default(string), string assetType = default(string))
        {
            this.AreaId = areaId;
            this.ExtendedAreaName = extendedAreaName;
            this.ProblemType = problemType;
            this.AssetType = assetType;
        }

        /// <summary>
        /// Required, UID of problem area.               Must be bigger then zero and belong and belong to existing area
        /// </summary>
        /// <value>Required, UID of problem area.               Must be bigger then zero and belong and belong to existing area</value>
        [DataMember(Name = "AreaId", IsRequired = true, EmitDefaultValue = true)]
        public int AreaId { get; set; }

        /// <summary>
        /// Optional, area name. Must be not empty
        /// </summary>
        /// <value>Optional, area name. Must be not empty</value>
        [DataMember(Name = "ExtendedAreaName", EmitDefaultValue = false)]
        public string ExtendedAreaName { get; set; }

        /// <summary>
        /// Optional, Type of problem. Must be not empty
        /// </summary>
        /// <value>Optional, Type of problem. Must be not empty</value>
        [DataMember(Name = "ProblemType", EmitDefaultValue = false)]
        public string ProblemType { get; set; }

        /// <summary>
        /// Optional, type of asset, has predefined values in [IssueList]              Must be not empty
        /// </summary>
        /// <value>Optional, type of asset, has predefined values in [IssueList]              Must be not empty</value>
        [DataMember(Name = "AssetType", EmitDefaultValue = false)]
        public string AssetType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest {\n");
            sb.Append("  AreaId: ").Append(AreaId).Append("\n");
            sb.Append("  ExtendedAreaName: ").Append(ExtendedAreaName).Append("\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AreaId == input.AreaId ||
                    this.AreaId.Equals(input.AreaId)
                ) && 
                (
                    this.ExtendedAreaName == input.ExtendedAreaName ||
                    (this.ExtendedAreaName != null &&
                    this.ExtendedAreaName.Equals(input.ExtendedAreaName))
                ) && 
                (
                    this.ProblemType == input.ProblemType ||
                    (this.ProblemType != null &&
                    this.ProblemType.Equals(input.ProblemType))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    (this.AssetType != null &&
                    this.AssetType.Equals(input.AssetType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AreaId.GetHashCode();
                if (this.ExtendedAreaName != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedAreaName.GetHashCode();
                }
                if (this.ProblemType != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemType.GetHashCode();
                }
                if (this.AssetType != null)
                {
                    hashCode = (hashCode * 59) + this.AssetType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
