/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Object request to add a holiday to a location.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.AfterHours.AddHolidayApiModelRequest")]
    public partial class SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest : IEquatable<SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines how often the holiday occurs. Valid values: Singular, Weekly, Monthly, Yearly.
        /// </summary>
        /// <value>Defines how often the holiday occurs. Valid values: Singular, Weekly, Monthly, Yearly.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum Weekly for value: Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            Weekly = 1,

            /// <summary>
            /// Enum Monthly for value: Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            Monthly = 2,

            /// <summary>
            /// Enum Yearly for value: Yearly
            /// </summary>
            [EnumMember(Value = "Yearly")]
            Yearly = 3,

            /// <summary>
            /// Enum Singular for value: Singular
            /// </summary>
            [EnumMember(Value = "Singular")]
            Singular = 4

        }


        /// <summary>
        /// Defines how often the holiday occurs. Valid values: Singular, Weekly, Monthly, Yearly.
        /// </summary>
        /// <value>Defines how often the holiday occurs. Valid values: Singular, Weekly, Monthly, Yearly.</value>
        [DataMember(Name = "Frequency", EmitDefaultValue = false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Defines whether the holiday repeats on days of the month or week. Valid values: DaysOfWeek, DaysOfMonth
        /// </summary>
        /// <value>Defines whether the holiday repeats on days of the month or week. Valid values: DaysOfWeek, DaysOfMonth</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RepeatByEnum
        {
            /// <summary>
            /// Enum DayOfWeek for value: DayOfWeek
            /// </summary>
            [EnumMember(Value = "DayOfWeek")]
            DayOfWeek = 1,

            /// <summary>
            /// Enum DayOfMonth for value: DayOfMonth
            /// </summary>
            [EnumMember(Value = "DayOfMonth")]
            DayOfMonth = 2

        }


        /// <summary>
        /// Defines whether the holiday repeats on days of the month or week. Valid values: DaysOfWeek, DaysOfMonth
        /// </summary>
        /// <value>Defines whether the holiday repeats on days of the month or week. Valid values: DaysOfWeek, DaysOfMonth</value>
        [DataMember(Name = "RepeatBy", EmitDefaultValue = false)]
        public RepeatByEnum? RepeatBy { get; set; }
        /// <summary>
        /// Defines RepeatOnDays
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RepeatOnDaysEnum
        {
            /// <summary>
            /// Enum Sunday for value: Sunday
            /// </summary>
            [EnumMember(Value = "Sunday")]
            Sunday = 1,

            /// <summary>
            /// Enum Monday for value: Monday
            /// </summary>
            [EnumMember(Value = "Monday")]
            Monday = 2,

            /// <summary>
            /// Enum Tuesday for value: Tuesday
            /// </summary>
            [EnumMember(Value = "Tuesday")]
            Tuesday = 3,

            /// <summary>
            /// Enum Wednesday for value: Wednesday
            /// </summary>
            [EnumMember(Value = "Wednesday")]
            Wednesday = 4,

            /// <summary>
            /// Enum Thursday for value: Thursday
            /// </summary>
            [EnumMember(Value = "Thursday")]
            Thursday = 5,

            /// <summary>
            /// Enum Friday for value: Friday
            /// </summary>
            [EnumMember(Value = "Friday")]
            Friday = 6,

            /// <summary>
            /// Enum Saturday for value: Saturday
            /// </summary>
            [EnumMember(Value = "Saturday")]
            Saturday = 7

        }

        /// <summary>
        /// Defines RepeatOnMonths
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RepeatOnMonthsEnum
        {
            /// <summary>
            /// Enum January for value: January
            /// </summary>
            [EnumMember(Value = "January")]
            January = 1,

            /// <summary>
            /// Enum February for value: February
            /// </summary>
            [EnumMember(Value = "February")]
            February = 2,

            /// <summary>
            /// Enum March for value: March
            /// </summary>
            [EnumMember(Value = "March")]
            March = 3,

            /// <summary>
            /// Enum April for value: April
            /// </summary>
            [EnumMember(Value = "April")]
            April = 4,

            /// <summary>
            /// Enum May for value: May
            /// </summary>
            [EnumMember(Value = "May")]
            May = 5,

            /// <summary>
            /// Enum June for value: June
            /// </summary>
            [EnumMember(Value = "June")]
            June = 6,

            /// <summary>
            /// Enum July for value: July
            /// </summary>
            [EnumMember(Value = "July")]
            July = 7,

            /// <summary>
            /// Enum August for value: August
            /// </summary>
            [EnumMember(Value = "August")]
            August = 8,

            /// <summary>
            /// Enum September for value: September
            /// </summary>
            [EnumMember(Value = "September")]
            September = 9,

            /// <summary>
            /// Enum October for value: October
            /// </summary>
            [EnumMember(Value = "October")]
            October = 10,

            /// <summary>
            /// Enum November for value: November
            /// </summary>
            [EnumMember(Value = "November")]
            November = 11,

            /// <summary>
            /// Enum December for value: December
            /// </summary>
            [EnumMember(Value = "December")]
            December = 12

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest" /> class.
        /// </summary>
        /// <param name="holidayName">Holiday name..</param>
        /// <param name="openTime">Location opening hours..</param>
        /// <param name="closeTime">Location closing hours..</param>
        /// <param name="closedAllDay">Defines whether the location is closed on the specified day. (default to false).</param>
        /// <param name="frequency">Defines how often the holiday occurs. Valid values: Singular, Weekly, Monthly, Yearly..</param>
        /// <param name="startDate">Holiday date..</param>
        /// <param name="repeatEvery">Defines intervals for the holiday to repeat. Valid values: a number from 1 to 60. Used in combination with the &#x60;Frequency&#x60; values: Yearly, Monthly, Weekly..</param>
        /// <param name="repeatBy">Defines whether the holiday repeats on days of the month or week. Valid values: DaysOfWeek, DaysOfMonth.</param>
        /// <param name="repeatOnDays">Days when the holiday occurs. Used in combination with the &#x60;Frequency&#x60; value  ‘Weekly’..</param>
        /// <param name="repeatOnMonths">Months when the holiday occurs. Used in combination with the &#x60;Frequency&#x60; value  ‘Yearly’..</param>
        public SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest(string holidayName = default(string), string openTime = default(string), string closeTime = default(string), bool closedAllDay = false, FrequencyEnum? frequency = default(FrequencyEnum?), DateTime startDate = default(DateTime), byte[] repeatEvery = default(byte[]), RepeatByEnum? repeatBy = default(RepeatByEnum?), List<RepeatOnDaysEnum> repeatOnDays = default(List<RepeatOnDaysEnum>), List<RepeatOnMonthsEnum> repeatOnMonths = default(List<RepeatOnMonthsEnum>))
        {
            this.HolidayName = holidayName;
            this.OpenTime = openTime;
            this.CloseTime = closeTime;
            this.ClosedAllDay = closedAllDay;
            this.Frequency = frequency;
            this.StartDate = startDate;
            this.RepeatEvery = repeatEvery;
            this.RepeatBy = repeatBy;
            this.RepeatOnDays = repeatOnDays;
            this.RepeatOnMonths = repeatOnMonths;
        }

        /// <summary>
        /// Holiday name.
        /// </summary>
        /// <value>Holiday name.</value>
        [DataMember(Name = "HolidayName", EmitDefaultValue = false)]
        public string HolidayName { get; set; }

        /// <summary>
        /// Location opening hours.
        /// </summary>
        /// <value>Location opening hours.</value>
        [DataMember(Name = "OpenTime", EmitDefaultValue = false)]
        public string OpenTime { get; set; }

        /// <summary>
        /// Location closing hours.
        /// </summary>
        /// <value>Location closing hours.</value>
        [DataMember(Name = "CloseTime", EmitDefaultValue = false)]
        public string CloseTime { get; set; }

        /// <summary>
        /// Defines whether the location is closed on the specified day.
        /// </summary>
        /// <value>Defines whether the location is closed on the specified day.</value>
        [DataMember(Name = "ClosedAllDay", EmitDefaultValue = true)]
        public bool ClosedAllDay { get; set; }

        /// <summary>
        /// Holiday date.
        /// </summary>
        /// <value>Holiday date.</value>
        [DataMember(Name = "StartDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Defines intervals for the holiday to repeat. Valid values: a number from 1 to 60. Used in combination with the &#x60;Frequency&#x60; values: Yearly, Monthly, Weekly.
        /// </summary>
        /// <value>Defines intervals for the holiday to repeat. Valid values: a number from 1 to 60. Used in combination with the &#x60;Frequency&#x60; values: Yearly, Monthly, Weekly.</value>
        [DataMember(Name = "RepeatEvery", EmitDefaultValue = false)]
        public byte[] RepeatEvery { get; set; }

        /// <summary>
        /// Days when the holiday occurs. Used in combination with the &#x60;Frequency&#x60; value  ‘Weekly’.
        /// </summary>
        /// <value>Days when the holiday occurs. Used in combination with the &#x60;Frequency&#x60; value  ‘Weekly’.</value>
        [DataMember(Name = "RepeatOnDays", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest.RepeatOnDaysEnum> RepeatOnDays { get; set; }

        /// <summary>
        /// Months when the holiday occurs. Used in combination with the &#x60;Frequency&#x60; value  ‘Yearly’.
        /// </summary>
        /// <value>Months when the holiday occurs. Used in combination with the &#x60;Frequency&#x60; value  ‘Yearly’.</value>
        [DataMember(Name = "RepeatOnMonths", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest.RepeatOnMonthsEnum> RepeatOnMonths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest {\n");
            sb.Append("  HolidayName: ").Append(HolidayName).Append("\n");
            sb.Append("  OpenTime: ").Append(OpenTime).Append("\n");
            sb.Append("  CloseTime: ").Append(CloseTime).Append("\n");
            sb.Append("  ClosedAllDay: ").Append(ClosedAllDay).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  RepeatEvery: ").Append(RepeatEvery).Append("\n");
            sb.Append("  RepeatBy: ").Append(RepeatBy).Append("\n");
            sb.Append("  RepeatOnDays: ").Append(RepeatOnDays).Append("\n");
            sb.Append("  RepeatOnMonths: ").Append(RepeatOnMonths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HolidayName == input.HolidayName ||
                    (this.HolidayName != null &&
                    this.HolidayName.Equals(input.HolidayName))
                ) && 
                (
                    this.OpenTime == input.OpenTime ||
                    (this.OpenTime != null &&
                    this.OpenTime.Equals(input.OpenTime))
                ) && 
                (
                    this.CloseTime == input.CloseTime ||
                    (this.CloseTime != null &&
                    this.CloseTime.Equals(input.CloseTime))
                ) && 
                (
                    this.ClosedAllDay == input.ClosedAllDay ||
                    this.ClosedAllDay.Equals(input.ClosedAllDay)
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    this.Frequency.Equals(input.Frequency)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.RepeatEvery == input.RepeatEvery ||
                    (this.RepeatEvery != null &&
                    this.RepeatEvery.Equals(input.RepeatEvery))
                ) && 
                (
                    this.RepeatBy == input.RepeatBy ||
                    this.RepeatBy.Equals(input.RepeatBy)
                ) && 
                (
                    this.RepeatOnDays == input.RepeatOnDays ||
                    this.RepeatOnDays != null &&
                    input.RepeatOnDays != null &&
                    this.RepeatOnDays.SequenceEqual(input.RepeatOnDays)
                ) && 
                (
                    this.RepeatOnMonths == input.RepeatOnMonths ||
                    this.RepeatOnMonths != null &&
                    input.RepeatOnMonths != null &&
                    this.RepeatOnMonths.SequenceEqual(input.RepeatOnMonths)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HolidayName != null)
                {
                    hashCode = (hashCode * 59) + this.HolidayName.GetHashCode();
                }
                if (this.OpenTime != null)
                {
                    hashCode = (hashCode * 59) + this.OpenTime.GetHashCode();
                }
                if (this.CloseTime != null)
                {
                    hashCode = (hashCode * 59) + this.CloseTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClosedAllDay.GetHashCode();
                hashCode = (hashCode * 59) + this.Frequency.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.RepeatEvery != null)
                {
                    hashCode = (hashCode * 59) + this.RepeatEvery.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RepeatBy.GetHashCode();
                if (this.RepeatOnDays != null)
                {
                    hashCode = (hashCode * 59) + this.RepeatOnDays.GetHashCode();
                }
                if (this.RepeatOnMonths != null)
                {
                    hashCode = (hashCode * 59) + this.RepeatOnMonths.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
