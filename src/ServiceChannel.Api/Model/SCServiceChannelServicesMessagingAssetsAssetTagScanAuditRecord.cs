/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Holds information about scanned asset tags.  This class must be kept in sync with ContractorTools.BL.Models.AssetTagScanAuditRecord
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Assets.AssetTagScanAuditRecord")]
    public partial class SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord : IEquatable<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>, IValidatableObject
    {
        /// <summary>
        /// Asset tag validation status
        /// </summary>
        /// <value>Asset tag validation status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetTagStatusEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum NotAvailable for value: NotAvailable
            /// </summary>
            [EnumMember(Value = "NotAvailable")]
            NotAvailable = 2,

            /// <summary>
            /// Enum NotValidated for value: NotValidated
            /// </summary>
            [EnumMember(Value = "NotValidated")]
            NotValidated = 3,

            /// <summary>
            /// Enum PendingValidation for value: PendingValidation
            /// </summary>
            [EnumMember(Value = "PendingValidation")]
            PendingValidation = 4,

            /// <summary>
            /// Enum Validated for value: Validated
            /// </summary>
            [EnumMember(Value = "Validated")]
            Validated = 5

        }


        /// <summary>
        /// Asset tag validation status
        /// </summary>
        /// <value>Asset tag validation status</value>
        [DataMember(Name = "AssetTagStatus", EmitDefaultValue = false)]
        public AssetTagStatusEnum? AssetTagStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord" /> class.
        /// </summary>
        /// <param name="assetID">Asset/Equipment ID of asset whose tag was scanned.</param>
        /// <param name="trackingNumber">Tracking ID associated with work order.</param>
        /// <param name="workOrderID">Work order number associated with this asset tag scan.</param>
        /// <param name="assetTagStatus">Asset tag validation status.</param>
        /// <param name="manuallyEntered">Indicates whether or not asset tag was manually entered instead of being scanned (default to false).</param>
        /// <param name="assetTagNotScannedReason">Reason for asset tag not being scanned.</param>
        /// <param name="validationRequired">Indicates whether or not *this* asset needs its asset tag validated (default to false).</param>
        /// <param name="assetValidated">The current validation status of *this* asset (default to false).</param>
        /// <param name="unableToValidateReasonId">Reason for asset tag not being validated.</param>
        /// <param name="otherReason">Custom reason for asset tag not being validated.</param>
        /// <param name="unableToScanReasonId">Reason for asset tag not being scanned.</param>
        public SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord(int assetID = default(int), int trackingNumber = default(int), string workOrderID = default(string), AssetTagStatusEnum? assetTagStatus = default(AssetTagStatusEnum?), bool manuallyEntered = false, string assetTagNotScannedReason = default(string), bool validationRequired = false, bool assetValidated = false, int unableToValidateReasonId = default(int), string otherReason = default(string), int unableToScanReasonId = default(int))
        {
            this.AssetID = assetID;
            this.TrackingNumber = trackingNumber;
            this.WorkOrderID = workOrderID;
            this.AssetTagStatus = assetTagStatus;
            this.ManuallyEntered = manuallyEntered;
            this.AssetTagNotScannedReason = assetTagNotScannedReason;
            this.ValidationRequired = validationRequired;
            this.AssetValidated = assetValidated;
            this.UnableToValidateReasonId = unableToValidateReasonId;
            this.OtherReason = otherReason;
            this.UnableToScanReasonId = unableToScanReasonId;
        }

        /// <summary>
        /// Asset/Equipment ID of asset whose tag was scanned
        /// </summary>
        /// <value>Asset/Equipment ID of asset whose tag was scanned</value>
        [DataMember(Name = "AssetID", EmitDefaultValue = false)]
        public int AssetID { get; set; }

        /// <summary>
        /// Tracking ID associated with work order
        /// </summary>
        /// <value>Tracking ID associated with work order</value>
        [DataMember(Name = "TrackingNumber", EmitDefaultValue = false)]
        public int TrackingNumber { get; set; }

        /// <summary>
        /// Work order number associated with this asset tag scan
        /// </summary>
        /// <value>Work order number associated with this asset tag scan</value>
        [DataMember(Name = "WorkOrderID", EmitDefaultValue = false)]
        public string WorkOrderID { get; set; }

        /// <summary>
        /// Indicates whether or not asset tag was manually entered instead of being scanned
        /// </summary>
        /// <value>Indicates whether or not asset tag was manually entered instead of being scanned</value>
        [DataMember(Name = "ManuallyEntered", EmitDefaultValue = true)]
        public bool ManuallyEntered { get; set; }

        /// <summary>
        /// Reason for asset tag not being scanned
        /// </summary>
        /// <value>Reason for asset tag not being scanned</value>
        [DataMember(Name = "AssetTagNotScannedReason", EmitDefaultValue = false)]
        public string AssetTagNotScannedReason { get; set; }

        /// <summary>
        /// Indicates whether or not *this* asset needs its asset tag validated
        /// </summary>
        /// <value>Indicates whether or not *this* asset needs its asset tag validated</value>
        [DataMember(Name = "ValidationRequired", EmitDefaultValue = true)]
        public bool ValidationRequired { get; set; }

        /// <summary>
        /// The current validation status of *this* asset
        /// </summary>
        /// <value>The current validation status of *this* asset</value>
        [DataMember(Name = "AssetValidated", EmitDefaultValue = true)]
        public bool AssetValidated { get; set; }

        /// <summary>
        /// Reason for asset tag not being validated
        /// </summary>
        /// <value>Reason for asset tag not being validated</value>
        [DataMember(Name = "UnableToValidateReasonId", EmitDefaultValue = false)]
        public int UnableToValidateReasonId { get; set; }

        /// <summary>
        /// Custom reason for asset tag not being validated
        /// </summary>
        /// <value>Custom reason for asset tag not being validated</value>
        [DataMember(Name = "OtherReason", EmitDefaultValue = false)]
        public string OtherReason { get; set; }

        /// <summary>
        /// Reason for asset tag not being scanned
        /// </summary>
        /// <value>Reason for asset tag not being scanned</value>
        [DataMember(Name = "UnableToScanReasonId", EmitDefaultValue = false)]
        public int UnableToScanReasonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord {\n");
            sb.Append("  AssetID: ").Append(AssetID).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  WorkOrderID: ").Append(WorkOrderID).Append("\n");
            sb.Append("  AssetTagStatus: ").Append(AssetTagStatus).Append("\n");
            sb.Append("  ManuallyEntered: ").Append(ManuallyEntered).Append("\n");
            sb.Append("  AssetTagNotScannedReason: ").Append(AssetTagNotScannedReason).Append("\n");
            sb.Append("  ValidationRequired: ").Append(ValidationRequired).Append("\n");
            sb.Append("  AssetValidated: ").Append(AssetValidated).Append("\n");
            sb.Append("  UnableToValidateReasonId: ").Append(UnableToValidateReasonId).Append("\n");
            sb.Append("  OtherReason: ").Append(OtherReason).Append("\n");
            sb.Append("  UnableToScanReasonId: ").Append(UnableToScanReasonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetID == input.AssetID ||
                    this.AssetID.Equals(input.AssetID)
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    this.TrackingNumber.Equals(input.TrackingNumber)
                ) && 
                (
                    this.WorkOrderID == input.WorkOrderID ||
                    (this.WorkOrderID != null &&
                    this.WorkOrderID.Equals(input.WorkOrderID))
                ) && 
                (
                    this.AssetTagStatus == input.AssetTagStatus ||
                    this.AssetTagStatus.Equals(input.AssetTagStatus)
                ) && 
                (
                    this.ManuallyEntered == input.ManuallyEntered ||
                    this.ManuallyEntered.Equals(input.ManuallyEntered)
                ) && 
                (
                    this.AssetTagNotScannedReason == input.AssetTagNotScannedReason ||
                    (this.AssetTagNotScannedReason != null &&
                    this.AssetTagNotScannedReason.Equals(input.AssetTagNotScannedReason))
                ) && 
                (
                    this.ValidationRequired == input.ValidationRequired ||
                    this.ValidationRequired.Equals(input.ValidationRequired)
                ) && 
                (
                    this.AssetValidated == input.AssetValidated ||
                    this.AssetValidated.Equals(input.AssetValidated)
                ) && 
                (
                    this.UnableToValidateReasonId == input.UnableToValidateReasonId ||
                    this.UnableToValidateReasonId.Equals(input.UnableToValidateReasonId)
                ) && 
                (
                    this.OtherReason == input.OtherReason ||
                    (this.OtherReason != null &&
                    this.OtherReason.Equals(input.OtherReason))
                ) && 
                (
                    this.UnableToScanReasonId == input.UnableToScanReasonId ||
                    this.UnableToScanReasonId.Equals(input.UnableToScanReasonId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AssetID.GetHashCode();
                hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                if (this.WorkOrderID != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetTagStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.ManuallyEntered.GetHashCode();
                if (this.AssetTagNotScannedReason != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTagNotScannedReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ValidationRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetValidated.GetHashCode();
                hashCode = (hashCode * 59) + this.UnableToValidateReasonId.GetHashCode();
                if (this.OtherReason != null)
                {
                    hashCode = (hashCode * 59) + this.OtherReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnableToScanReasonId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
