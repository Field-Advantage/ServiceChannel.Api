/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelNotificationsObjectsAsset
    /// </summary>
    [DataContract(Name = "ServiceChannel.Notifications.Objects.Asset")]
    public partial class SCServiceChannelNotificationsObjectsAsset : IEquatable<SCServiceChannelNotificationsObjectsAsset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelNotificationsObjectsAsset" /> class.
        /// </summary>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="modelNo">modelNo.</param>
        /// <param name="serialNo">serialNo.</param>
        /// <param name="area">area.</param>
        /// <param name="workOrderArea">workOrderArea.</param>
        /// <param name="storeId">storeId.</param>
        /// <param name="trade">trade.</param>
        /// <param name="type">type.</param>
        /// <param name="installDate">installDate.</param>
        /// <param name="manufacturerDate">manufacturerDate.</param>
        /// <param name="purchaseDate">purchaseDate.</param>
        /// <param name="usesRefrigerant">usesRefrigerant.</param>
        /// <param name="isLeased">isLeased (default to false).</param>
        /// <param name="lifeExpectancy">lifeExpectancy.</param>
        /// <param name="originalValue">originalValue.</param>
        /// <param name="leaseDate">leaseDate.</param>
        /// <param name="leasePeriod">leasePeriod.</param>
        /// <param name="condition">condition.</param>
        /// <param name="energyEfficiency">energyEfficiency.</param>
        /// <param name="capacity">capacity.</param>
        /// <param name="hasLeakDetector">hasLeakDetector (default to false).</param>
        /// <param name="warranty">warranty.</param>
        /// <param name="isReplaceEquipment">isReplaceEquipment (default to false).</param>
        /// <param name="hasTagged">hasTagged (default to false).</param>
        /// <param name="lastModifiedUseDate">lastModifiedUseDate.</param>
        /// <param name="lastModifiedUserName">lastModifiedUserName.</param>
        /// <param name="subName">subName.</param>
        /// <param name="assetAttributesMap">assetAttributesMap.</param>
        /// <param name="importedFrom">importedFrom.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="description">description.</param>
        /// <param name="hasComponents">hasComponents (default to false).</param>
        /// <param name="hasCircuits">hasCircuits (default to false).</param>
        /// <param name="isCircuit">isCircuit (default to false).</param>
        /// <param name="subscriberId">subscriberId.</param>
        /// <param name="assetValidated">assetValidated (default to false).</param>
        /// <param name="validationRequired">validationRequired (default to false).</param>
        /// <param name="isLeakDetector">isLeakDetector (default to false).</param>
        /// <param name="additionalTradesNames">additionalTradesNames.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="assetTypeGroupId">assetTypeGroupId.</param>
        /// <param name="assetTagScanAuditRecord">assetTagScanAuditRecord.</param>
        /// <param name="id">id.</param>
        /// <param name="tag">tag.</param>
        /// <param name="assetTypeId">assetTypeId.</param>
        /// <param name="tradeId">tradeId.</param>
        /// <param name="brandId">brandId.</param>
        /// <param name="active">active (default to false).</param>
        /// <param name="assetTag">assetTag.</param>
        /// <param name="assetStatus">assetStatus.</param>
        /// <param name="locationId">locationId.</param>
        public SCServiceChannelNotificationsObjectsAsset(string manufacturer = default(string), string modelNo = default(string), string serialNo = default(string), string area = default(string), string workOrderArea = default(string), string storeId = default(string), string trade = default(string), string type = default(string), string installDate = default(string), string manufacturerDate = default(string), string purchaseDate = default(string), int usesRefrigerant = default(int), bool isLeased = false, int lifeExpectancy = default(int), double originalValue = default(double), string leaseDate = default(string), int leasePeriod = default(int), int condition = default(int), string energyEfficiency = default(string), string capacity = default(string), bool hasLeakDetector = false, SCServiceChannelNotificationsObjectsAssetWarranty warranty = default(SCServiceChannelNotificationsObjectsAssetWarranty), bool isReplaceEquipment = false, bool hasTagged = false, DateTime lastModifiedUseDate = default(DateTime), string lastModifiedUserName = default(string), string subName = default(string), SCServiceChannelNotificationsObjectsAssetAttributesMap assetAttributesMap = default(SCServiceChannelNotificationsObjectsAssetAttributesMap), int importedFrom = default(int), int parentId = default(int), string description = default(string), bool hasComponents = false, bool hasCircuits = false, bool isCircuit = false, int subscriberId = default(int), bool assetValidated = false, bool validationRequired = false, bool isLeakDetector = false, string additionalTradesNames = default(string), DateTime createdDate = default(DateTime), DateTime modifiedDate = default(DateTime), int assetTypeGroupId = default(int), SCServiceChannelNotificationsObjectsAssetTagScanAuditRecord assetTagScanAuditRecord = default(SCServiceChannelNotificationsObjectsAssetTagScanAuditRecord), int id = default(int), string tag = default(string), int assetTypeId = default(int), int tradeId = default(int), int brandId = default(int), bool active = false, string assetTag = default(string), byte[] assetStatus = default(byte[]), int locationId = default(int))
        {
            this.Manufacturer = manufacturer;
            this.ModelNo = modelNo;
            this.SerialNo = serialNo;
            this.Area = area;
            this.WorkOrderArea = workOrderArea;
            this.StoreId = storeId;
            this.Trade = trade;
            this.Type = type;
            this.InstallDate = installDate;
            this.ManufacturerDate = manufacturerDate;
            this.PurchaseDate = purchaseDate;
            this.UsesRefrigerant = usesRefrigerant;
            this.IsLeased = isLeased;
            this.LifeExpectancy = lifeExpectancy;
            this.OriginalValue = originalValue;
            this.LeaseDate = leaseDate;
            this.LeasePeriod = leasePeriod;
            this.Condition = condition;
            this.EnergyEfficiency = energyEfficiency;
            this.Capacity = capacity;
            this.HasLeakDetector = hasLeakDetector;
            this.Warranty = warranty;
            this.IsReplaceEquipment = isReplaceEquipment;
            this.HasTagged = hasTagged;
            this.LastModifiedUseDate = lastModifiedUseDate;
            this.LastModifiedUserName = lastModifiedUserName;
            this.SubName = subName;
            this.AssetAttributesMap = assetAttributesMap;
            this.ImportedFrom = importedFrom;
            this.ParentId = parentId;
            this.Description = description;
            this.HasComponents = hasComponents;
            this.HasCircuits = hasCircuits;
            this.IsCircuit = isCircuit;
            this.SubscriberId = subscriberId;
            this.AssetValidated = assetValidated;
            this.ValidationRequired = validationRequired;
            this.IsLeakDetector = isLeakDetector;
            this.AdditionalTradesNames = additionalTradesNames;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.AssetTypeGroupId = assetTypeGroupId;
            this.AssetTagScanAuditRecord = assetTagScanAuditRecord;
            this.Id = id;
            this.Tag = tag;
            this.AssetTypeId = assetTypeId;
            this.TradeId = tradeId;
            this.BrandId = brandId;
            this.Active = active;
            this.AssetTag = assetTag;
            this.AssetStatus = assetStatus;
            this.LocationId = locationId;
        }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "Manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets ModelNo
        /// </summary>
        [DataMember(Name = "ModelNo", EmitDefaultValue = false)]
        public string ModelNo { get; set; }

        /// <summary>
        /// Gets or Sets SerialNo
        /// </summary>
        [DataMember(Name = "SerialNo", EmitDefaultValue = false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "Area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderArea
        /// </summary>
        [DataMember(Name = "WorkOrderArea", EmitDefaultValue = false)]
        public string WorkOrderArea { get; set; }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name = "StoreId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets InstallDate
        /// </summary>
        [DataMember(Name = "InstallDate", EmitDefaultValue = false)]
        public string InstallDate { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerDate
        /// </summary>
        [DataMember(Name = "ManufacturerDate", EmitDefaultValue = false)]
        public string ManufacturerDate { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name = "PurchaseDate", EmitDefaultValue = false)]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets UsesRefrigerant
        /// </summary>
        [DataMember(Name = "UsesRefrigerant", EmitDefaultValue = false)]
        public int UsesRefrigerant { get; set; }

        /// <summary>
        /// Gets or Sets IsLeased
        /// </summary>
        [DataMember(Name = "IsLeased", EmitDefaultValue = true)]
        public bool IsLeased { get; set; }

        /// <summary>
        /// Gets or Sets LifeExpectancy
        /// </summary>
        [DataMember(Name = "LifeExpectancy", EmitDefaultValue = false)]
        public int LifeExpectancy { get; set; }

        /// <summary>
        /// Gets or Sets OriginalValue
        /// </summary>
        [DataMember(Name = "OriginalValue", EmitDefaultValue = false)]
        public double OriginalValue { get; set; }

        /// <summary>
        /// Gets or Sets LeaseDate
        /// </summary>
        [DataMember(Name = "LeaseDate", EmitDefaultValue = false)]
        public string LeaseDate { get; set; }

        /// <summary>
        /// Gets or Sets LeasePeriod
        /// </summary>
        [DataMember(Name = "LeasePeriod", EmitDefaultValue = false)]
        public int LeasePeriod { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "Condition", EmitDefaultValue = false)]
        public int Condition { get; set; }

        /// <summary>
        /// Gets or Sets EnergyEfficiency
        /// </summary>
        [DataMember(Name = "EnergyEfficiency", EmitDefaultValue = false)]
        public string EnergyEfficiency { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "Capacity", EmitDefaultValue = false)]
        public string Capacity { get; set; }

        /// <summary>
        /// Gets or Sets HasLeakDetector
        /// </summary>
        [DataMember(Name = "HasLeakDetector", EmitDefaultValue = true)]
        public bool HasLeakDetector { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "Location", EmitDefaultValue = false)]
        public string Location { get; private set; }

        /// <summary>
        /// Returns false as Location should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLocation()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Warranty
        /// </summary>
        [DataMember(Name = "Warranty", EmitDefaultValue = false)]
        public SCServiceChannelNotificationsObjectsAssetWarranty Warranty { get; set; }

        /// <summary>
        /// Gets or Sets IsReplaceEquipment
        /// </summary>
        [DataMember(Name = "IsReplaceEquipment", EmitDefaultValue = true)]
        public bool IsReplaceEquipment { get; set; }

        /// <summary>
        /// Gets or Sets HasTagged
        /// </summary>
        [DataMember(Name = "HasTagged", EmitDefaultValue = true)]
        public bool HasTagged { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedUseDate
        /// </summary>
        [DataMember(Name = "LastModifiedUseDate", EmitDefaultValue = false)]
        public DateTime LastModifiedUseDate { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedUserName
        /// </summary>
        [DataMember(Name = "LastModifiedUserName", EmitDefaultValue = false)]
        public string LastModifiedUserName { get; set; }

        /// <summary>
        /// Gets or Sets SubName
        /// </summary>
        [DataMember(Name = "SubName", EmitDefaultValue = false)]
        public string SubName { get; set; }

        /// <summary>
        /// Gets or Sets AssetAttributesMap
        /// </summary>
        [DataMember(Name = "AssetAttributesMap", EmitDefaultValue = false)]
        public SCServiceChannelNotificationsObjectsAssetAttributesMap AssetAttributesMap { get; set; }

        /// <summary>
        /// Gets or Sets ImportedFrom
        /// </summary>
        [DataMember(Name = "ImportedFrom", EmitDefaultValue = false)]
        public int ImportedFrom { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "ParentId", EmitDefaultValue = false)]
        public int ParentId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HasComponents
        /// </summary>
        [DataMember(Name = "HasComponents", EmitDefaultValue = true)]
        public bool HasComponents { get; set; }

        /// <summary>
        /// Gets or Sets HasCircuits
        /// </summary>
        [DataMember(Name = "HasCircuits", EmitDefaultValue = true)]
        public bool HasCircuits { get; set; }

        /// <summary>
        /// Gets or Sets IsCircuit
        /// </summary>
        [DataMember(Name = "IsCircuit", EmitDefaultValue = true)]
        public bool IsCircuit { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberId
        /// </summary>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets AssetValidated
        /// </summary>
        [DataMember(Name = "AssetValidated", EmitDefaultValue = true)]
        public bool AssetValidated { get; set; }

        /// <summary>
        /// Gets or Sets ValidationRequired
        /// </summary>
        [DataMember(Name = "ValidationRequired", EmitDefaultValue = true)]
        public bool ValidationRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsLeakDetector
        /// </summary>
        [DataMember(Name = "IsLeakDetector", EmitDefaultValue = true)]
        public bool IsLeakDetector { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalTradesNames
        /// </summary>
        [DataMember(Name = "AdditionalTradesNames", EmitDefaultValue = false)]
        public string AdditionalTradesNames { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name = "ModifiedDate", EmitDefaultValue = false)]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeGroupId
        /// </summary>
        [DataMember(Name = "AssetTypeGroupId", EmitDefaultValue = false)]
        public int AssetTypeGroupId { get; set; }

        /// <summary>
        /// Gets or Sets AssetTagScanAuditRecord
        /// </summary>
        [DataMember(Name = "AssetTagScanAuditRecord", EmitDefaultValue = false)]
        public SCServiceChannelNotificationsObjectsAssetTagScanAuditRecord AssetTagScanAuditRecord { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "Tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeId
        /// </summary>
        [DataMember(Name = "AssetTypeId", EmitDefaultValue = false)]
        public int AssetTypeId { get; set; }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name = "TradeId", EmitDefaultValue = false)]
        public int TradeId { get; set; }

        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [DataMember(Name = "BrandId", EmitDefaultValue = false)]
        public int BrandId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "Active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets AssetTag
        /// </summary>
        [DataMember(Name = "AssetTag", EmitDefaultValue = false)]
        public string AssetTag { get; set; }

        /// <summary>
        /// Gets or Sets AssetStatus
        /// </summary>
        [DataMember(Name = "AssetStatus", EmitDefaultValue = false)]
        public byte[] AssetStatus { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelNotificationsObjectsAsset {\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNo: ").Append(ModelNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  WorkOrderArea: ").Append(WorkOrderArea).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InstallDate: ").Append(InstallDate).Append("\n");
            sb.Append("  ManufacturerDate: ").Append(ManufacturerDate).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  UsesRefrigerant: ").Append(UsesRefrigerant).Append("\n");
            sb.Append("  IsLeased: ").Append(IsLeased).Append("\n");
            sb.Append("  LifeExpectancy: ").Append(LifeExpectancy).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  LeaseDate: ").Append(LeaseDate).Append("\n");
            sb.Append("  LeasePeriod: ").Append(LeasePeriod).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  EnergyEfficiency: ").Append(EnergyEfficiency).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  HasLeakDetector: ").Append(HasLeakDetector).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Warranty: ").Append(Warranty).Append("\n");
            sb.Append("  IsReplaceEquipment: ").Append(IsReplaceEquipment).Append("\n");
            sb.Append("  HasTagged: ").Append(HasTagged).Append("\n");
            sb.Append("  LastModifiedUseDate: ").Append(LastModifiedUseDate).Append("\n");
            sb.Append("  LastModifiedUserName: ").Append(LastModifiedUserName).Append("\n");
            sb.Append("  SubName: ").Append(SubName).Append("\n");
            sb.Append("  AssetAttributesMap: ").Append(AssetAttributesMap).Append("\n");
            sb.Append("  ImportedFrom: ").Append(ImportedFrom).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasComponents: ").Append(HasComponents).Append("\n");
            sb.Append("  HasCircuits: ").Append(HasCircuits).Append("\n");
            sb.Append("  IsCircuit: ").Append(IsCircuit).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  AssetValidated: ").Append(AssetValidated).Append("\n");
            sb.Append("  ValidationRequired: ").Append(ValidationRequired).Append("\n");
            sb.Append("  IsLeakDetector: ").Append(IsLeakDetector).Append("\n");
            sb.Append("  AdditionalTradesNames: ").Append(AdditionalTradesNames).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  AssetTypeGroupId: ").Append(AssetTypeGroupId).Append("\n");
            sb.Append("  AssetTagScanAuditRecord: ").Append(AssetTagScanAuditRecord).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  AssetTypeId: ").Append(AssetTypeId).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AssetTag: ").Append(AssetTag).Append("\n");
            sb.Append("  AssetStatus: ").Append(AssetStatus).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelNotificationsObjectsAsset);
        }

        /// <summary>
        /// Returns true if SCServiceChannelNotificationsObjectsAsset instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelNotificationsObjectsAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelNotificationsObjectsAsset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ModelNo == input.ModelNo ||
                    (this.ModelNo != null &&
                    this.ModelNo.Equals(input.ModelNo))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.WorkOrderArea == input.WorkOrderArea ||
                    (this.WorkOrderArea != null &&
                    this.WorkOrderArea.Equals(input.WorkOrderArea))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.InstallDate == input.InstallDate ||
                    (this.InstallDate != null &&
                    this.InstallDate.Equals(input.InstallDate))
                ) && 
                (
                    this.ManufacturerDate == input.ManufacturerDate ||
                    (this.ManufacturerDate != null &&
                    this.ManufacturerDate.Equals(input.ManufacturerDate))
                ) && 
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) && 
                (
                    this.UsesRefrigerant == input.UsesRefrigerant ||
                    this.UsesRefrigerant.Equals(input.UsesRefrigerant)
                ) && 
                (
                    this.IsLeased == input.IsLeased ||
                    this.IsLeased.Equals(input.IsLeased)
                ) && 
                (
                    this.LifeExpectancy == input.LifeExpectancy ||
                    this.LifeExpectancy.Equals(input.LifeExpectancy)
                ) && 
                (
                    this.OriginalValue == input.OriginalValue ||
                    this.OriginalValue.Equals(input.OriginalValue)
                ) && 
                (
                    this.LeaseDate == input.LeaseDate ||
                    (this.LeaseDate != null &&
                    this.LeaseDate.Equals(input.LeaseDate))
                ) && 
                (
                    this.LeasePeriod == input.LeasePeriod ||
                    this.LeasePeriod.Equals(input.LeasePeriod)
                ) && 
                (
                    this.Condition == input.Condition ||
                    this.Condition.Equals(input.Condition)
                ) && 
                (
                    this.EnergyEfficiency == input.EnergyEfficiency ||
                    (this.EnergyEfficiency != null &&
                    this.EnergyEfficiency.Equals(input.EnergyEfficiency))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.HasLeakDetector == input.HasLeakDetector ||
                    this.HasLeakDetector.Equals(input.HasLeakDetector)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Warranty == input.Warranty ||
                    (this.Warranty != null &&
                    this.Warranty.Equals(input.Warranty))
                ) && 
                (
                    this.IsReplaceEquipment == input.IsReplaceEquipment ||
                    this.IsReplaceEquipment.Equals(input.IsReplaceEquipment)
                ) && 
                (
                    this.HasTagged == input.HasTagged ||
                    this.HasTagged.Equals(input.HasTagged)
                ) && 
                (
                    this.LastModifiedUseDate == input.LastModifiedUseDate ||
                    (this.LastModifiedUseDate != null &&
                    this.LastModifiedUseDate.Equals(input.LastModifiedUseDate))
                ) && 
                (
                    this.LastModifiedUserName == input.LastModifiedUserName ||
                    (this.LastModifiedUserName != null &&
                    this.LastModifiedUserName.Equals(input.LastModifiedUserName))
                ) && 
                (
                    this.SubName == input.SubName ||
                    (this.SubName != null &&
                    this.SubName.Equals(input.SubName))
                ) && 
                (
                    this.AssetAttributesMap == input.AssetAttributesMap ||
                    (this.AssetAttributesMap != null &&
                    this.AssetAttributesMap.Equals(input.AssetAttributesMap))
                ) && 
                (
                    this.ImportedFrom == input.ImportedFrom ||
                    this.ImportedFrom.Equals(input.ImportedFrom)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    this.ParentId.Equals(input.ParentId)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HasComponents == input.HasComponents ||
                    this.HasComponents.Equals(input.HasComponents)
                ) && 
                (
                    this.HasCircuits == input.HasCircuits ||
                    this.HasCircuits.Equals(input.HasCircuits)
                ) && 
                (
                    this.IsCircuit == input.IsCircuit ||
                    this.IsCircuit.Equals(input.IsCircuit)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.AssetValidated == input.AssetValidated ||
                    this.AssetValidated.Equals(input.AssetValidated)
                ) && 
                (
                    this.ValidationRequired == input.ValidationRequired ||
                    this.ValidationRequired.Equals(input.ValidationRequired)
                ) && 
                (
                    this.IsLeakDetector == input.IsLeakDetector ||
                    this.IsLeakDetector.Equals(input.IsLeakDetector)
                ) && 
                (
                    this.AdditionalTradesNames == input.AdditionalTradesNames ||
                    (this.AdditionalTradesNames != null &&
                    this.AdditionalTradesNames.Equals(input.AdditionalTradesNames))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.AssetTypeGroupId == input.AssetTypeGroupId ||
                    this.AssetTypeGroupId.Equals(input.AssetTypeGroupId)
                ) && 
                (
                    this.AssetTagScanAuditRecord == input.AssetTagScanAuditRecord ||
                    (this.AssetTagScanAuditRecord != null &&
                    this.AssetTagScanAuditRecord.Equals(input.AssetTagScanAuditRecord))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.AssetTypeId == input.AssetTypeId ||
                    this.AssetTypeId.Equals(input.AssetTypeId)
                ) && 
                (
                    this.TradeId == input.TradeId ||
                    this.TradeId.Equals(input.TradeId)
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    this.BrandId.Equals(input.BrandId)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.AssetTag == input.AssetTag ||
                    (this.AssetTag != null &&
                    this.AssetTag.Equals(input.AssetTag))
                ) && 
                (
                    this.AssetStatus == input.AssetStatus ||
                    (this.AssetStatus != null &&
                    this.AssetStatus.Equals(input.AssetStatus))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.ModelNo != null)
                {
                    hashCode = (hashCode * 59) + this.ModelNo.GetHashCode();
                }
                if (this.SerialNo != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNo.GetHashCode();
                }
                if (this.Area != null)
                {
                    hashCode = (hashCode * 59) + this.Area.GetHashCode();
                }
                if (this.WorkOrderArea != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderArea.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.InstallDate != null)
                {
                    hashCode = (hashCode * 59) + this.InstallDate.GetHashCode();
                }
                if (this.ManufacturerDate != null)
                {
                    hashCode = (hashCode * 59) + this.ManufacturerDate.GetHashCode();
                }
                if (this.PurchaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsesRefrigerant.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLeased.GetHashCode();
                hashCode = (hashCode * 59) + this.LifeExpectancy.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalValue.GetHashCode();
                if (this.LeaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.LeaseDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LeasePeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.Condition.GetHashCode();
                if (this.EnergyEfficiency != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyEfficiency.GetHashCode();
                }
                if (this.Capacity != null)
                {
                    hashCode = (hashCode * 59) + this.Capacity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasLeakDetector.GetHashCode();
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Warranty != null)
                {
                    hashCode = (hashCode * 59) + this.Warranty.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsReplaceEquipment.GetHashCode();
                hashCode = (hashCode * 59) + this.HasTagged.GetHashCode();
                if (this.LastModifiedUseDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedUseDate.GetHashCode();
                }
                if (this.LastModifiedUserName != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedUserName.GetHashCode();
                }
                if (this.SubName != null)
                {
                    hashCode = (hashCode * 59) + this.SubName.GetHashCode();
                }
                if (this.AssetAttributesMap != null)
                {
                    hashCode = (hashCode * 59) + this.AssetAttributesMap.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ImportedFrom.GetHashCode();
                hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasComponents.GetHashCode();
                hashCode = (hashCode * 59) + this.HasCircuits.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCircuit.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetValidated.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidationRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLeakDetector.GetHashCode();
                if (this.AdditionalTradesNames != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalTradesNames.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.ModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetTypeGroupId.GetHashCode();
                if (this.AssetTagScanAuditRecord != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTagScanAuditRecord.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetTypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.TradeId.GetHashCode();
                hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.AssetTag != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTag.GetHashCode();
                }
                if (this.AssetStatus != null)
                {
                    hashCode = (hashCode * 59) + this.AssetStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
