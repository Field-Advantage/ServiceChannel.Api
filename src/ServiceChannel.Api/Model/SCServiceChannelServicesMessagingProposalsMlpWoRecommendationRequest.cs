/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The request object to escalate a proposal.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Proposals.MlpWoRecommendationRequest")]
    public partial class SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest : IEquatable<SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest" /> class.
        /// </summary>
        /// <param name="action">Proposal escalation action. **Valid values**: *Approve*, *Reject*, *OnHold*, *Return*. (required).</param>
        /// <param name="woType">Work order type. **Valid values**: 0 — *Origin*, 1 — *New*, 2 — *Existing*..</param>
        /// <param name="trackingNumber">The unique numeric identifier of the work order. Required if the &#x60;WoType&#x60; is 2 — *Existing*..</param>
        /// <param name="poNumber">Purchase order number..</param>
        /// <param name="existingPoNumber">The existing purchase order number. If the &#x60;PoNumber&#x60; parameter is passed, its value is used instead of &#x60;ExistingPoNumber&#x60;..</param>
        /// <param name="category">The overall classification of a WO, such as *Maintenance*, *Repair*, or *CAPEX*. Required if the &#x60;WoType&#x60; is 1 — *New*.              The value you enter must be a valid category..</param>
        /// <param name="categoryId">Numeric identifier of the category..</param>
        /// <param name="approvalCode">Approval code, or GL code, used when approving an invoice..</param>
        /// <param name="priority">Period during which a service provider should check in to perform the requested service. Required if the &#x60;WoType&#x60; is 1 — *New*.              The value you enter must be a valid priority..</param>
        /// <param name="comment">Your comment describing why you are escalating the proposal..</param>
        /// <param name="rejectReasonCodeId">Numeric identifier of the reason for rejecting the proposal. Don’t pass when escalating the proposal..</param>
        /// <param name="reasonString">Reason for approving the proposal..</param>
        /// <param name="emailsToNotify">The email address of the user to notify about the proposal escalation. When entering multiple addresses, separate them with a comma or semicolon..</param>
        /// <param name="emailMyself">Defines if the proposal escalation notification is sent to the current user. (default to false).</param>
        /// <param name="myEmail">The email address of the current user to which a proposal escalation notification is sent..</param>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate..</param>
        /// <param name="workOrderLabel">workOrderLabel.</param>
        /// <param name="deleteLabel">Is WorkOrder Label to delete. (default to false).</param>
        /// <param name="actor">The Actor is added to the work order note..</param>
        /// <param name="additionalApprovalCodes">The Additional Approval Codes..</param>
        public SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest(string action = default(string), int woType = default(int), int trackingNumber = default(int), string poNumber = default(string), string existingPoNumber = default(string), string category = default(string), int categoryId = default(int), string approvalCode = default(string), string priority = default(string), string comment = default(string), int rejectReasonCodeId = default(int), string reasonString = default(string), string emailsToNotify = default(string), bool emailMyself = false, string myEmail = default(string), int proposalId = default(int), SCServiceChannelApiModelLabel workOrderLabel = default(SCServiceChannelApiModelLabel), bool deleteLabel = false, string actor = default(string), List<SCServiceChannelServicesMessagingApprovalCodesAdditionalApprovalCode> additionalApprovalCodes = default(List<SCServiceChannelServicesMessagingApprovalCodesAdditionalApprovalCode>))
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new ArgumentNullException("action is a required property for SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest and cannot be null");
            }
            this.Action = action;
            this.WoType = woType;
            this.TrackingNumber = trackingNumber;
            this.PoNumber = poNumber;
            this.ExistingPoNumber = existingPoNumber;
            this.Category = category;
            this.CategoryId = categoryId;
            this.ApprovalCode = approvalCode;
            this.Priority = priority;
            this.Comment = comment;
            this.RejectReasonCodeId = rejectReasonCodeId;
            this.ReasonString = reasonString;
            this.EmailsToNotify = emailsToNotify;
            this.EmailMyself = emailMyself;
            this.MyEmail = myEmail;
            this.ProposalId = proposalId;
            this.WorkOrderLabel = workOrderLabel;
            this.DeleteLabel = deleteLabel;
            this.Actor = actor;
            this.AdditionalApprovalCodes = additionalApprovalCodes;
        }

        /// <summary>
        /// Proposal escalation action. **Valid values**: *Approve*, *Reject*, *OnHold*, *Return*.
        /// </summary>
        /// <value>Proposal escalation action. **Valid values**: *Approve*, *Reject*, *OnHold*, *Return*.</value>
        [DataMember(Name = "Action", IsRequired = true, EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Work order type. **Valid values**: 0 — *Origin*, 1 — *New*, 2 — *Existing*.
        /// </summary>
        /// <value>Work order type. **Valid values**: 0 — *Origin*, 1 — *New*, 2 — *Existing*.</value>
        [DataMember(Name = "WoType", EmitDefaultValue = false)]
        public int WoType { get; set; }

        /// <summary>
        /// The unique numeric identifier of the work order. Required if the &#x60;WoType&#x60; is 2 — *Existing*.
        /// </summary>
        /// <value>The unique numeric identifier of the work order. Required if the &#x60;WoType&#x60; is 2 — *Existing*.</value>
        [DataMember(Name = "TrackingNumber", EmitDefaultValue = false)]
        public int TrackingNumber { get; set; }

        /// <summary>
        /// Purchase order number.
        /// </summary>
        /// <value>Purchase order number.</value>
        [DataMember(Name = "PoNumber", EmitDefaultValue = false)]
        public string PoNumber { get; set; }

        /// <summary>
        /// The existing purchase order number. If the &#x60;PoNumber&#x60; parameter is passed, its value is used instead of &#x60;ExistingPoNumber&#x60;.
        /// </summary>
        /// <value>The existing purchase order number. If the &#x60;PoNumber&#x60; parameter is passed, its value is used instead of &#x60;ExistingPoNumber&#x60;.</value>
        [DataMember(Name = "ExistingPoNumber", EmitDefaultValue = false)]
        public string ExistingPoNumber { get; set; }

        /// <summary>
        /// The overall classification of a WO, such as *Maintenance*, *Repair*, or *CAPEX*. Required if the &#x60;WoType&#x60; is 1 — *New*.              The value you enter must be a valid category.
        /// </summary>
        /// <value>The overall classification of a WO, such as *Maintenance*, *Repair*, or *CAPEX*. Required if the &#x60;WoType&#x60; is 1 — *New*.              The value you enter must be a valid category.</value>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Numeric identifier of the category.
        /// </summary>
        /// <value>Numeric identifier of the category.</value>
        [DataMember(Name = "CategoryId", EmitDefaultValue = false)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Approval code, or GL code, used when approving an invoice.
        /// </summary>
        /// <value>Approval code, or GL code, used when approving an invoice.</value>
        [DataMember(Name = "ApprovalCode", EmitDefaultValue = false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Period during which a service provider should check in to perform the requested service. Required if the &#x60;WoType&#x60; is 1 — *New*.              The value you enter must be a valid priority.
        /// </summary>
        /// <value>Period during which a service provider should check in to perform the requested service. Required if the &#x60;WoType&#x60; is 1 — *New*.              The value you enter must be a valid priority.</value>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// Your comment describing why you are escalating the proposal.
        /// </summary>
        /// <value>Your comment describing why you are escalating the proposal.</value>
        [DataMember(Name = "Comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Numeric identifier of the reason for rejecting the proposal. Don’t pass when escalating the proposal.
        /// </summary>
        /// <value>Numeric identifier of the reason for rejecting the proposal. Don’t pass when escalating the proposal.</value>
        [DataMember(Name = "RejectReasonCodeId", EmitDefaultValue = false)]
        public int RejectReasonCodeId { get; set; }

        /// <summary>
        /// Reason for approving the proposal.
        /// </summary>
        /// <value>Reason for approving the proposal.</value>
        [DataMember(Name = "ReasonString", EmitDefaultValue = false)]
        public string ReasonString { get; set; }

        /// <summary>
        /// The email address of the user to notify about the proposal escalation. When entering multiple addresses, separate them with a comma or semicolon.
        /// </summary>
        /// <value>The email address of the user to notify about the proposal escalation. When entering multiple addresses, separate them with a comma or semicolon.</value>
        [DataMember(Name = "EmailsToNotify", EmitDefaultValue = false)]
        public string EmailsToNotify { get; set; }

        /// <summary>
        /// Defines if the proposal escalation notification is sent to the current user.
        /// </summary>
        /// <value>Defines if the proposal escalation notification is sent to the current user.</value>
        [DataMember(Name = "EmailMyself", EmitDefaultValue = true)]
        public bool EmailMyself { get; set; }

        /// <summary>
        /// The email address of the current user to which a proposal escalation notification is sent.
        /// </summary>
        /// <value>The email address of the current user to which a proposal escalation notification is sent.</value>
        [DataMember(Name = "MyEmail", EmitDefaultValue = false)]
        public string MyEmail { get; set; }

        /// <summary>
        /// The unique numeric identifier of the proposal to escalate.
        /// </summary>
        /// <value>The unique numeric identifier of the proposal to escalate.</value>
        [DataMember(Name = "ProposalId", EmitDefaultValue = false)]
        public int ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderLabel
        /// </summary>
        [DataMember(Name = "WorkOrderLabel", EmitDefaultValue = false)]
        public SCServiceChannelApiModelLabel WorkOrderLabel { get; set; }

        /// <summary>
        /// Is WorkOrder Label to delete.
        /// </summary>
        /// <value>Is WorkOrder Label to delete.</value>
        [DataMember(Name = "DeleteLabel", EmitDefaultValue = true)]
        public bool DeleteLabel { get; set; }

        /// <summary>
        /// The Actor is added to the work order note.
        /// </summary>
        /// <value>The Actor is added to the work order note.</value>
        [DataMember(Name = "Actor", EmitDefaultValue = false)]
        public string Actor { get; set; }

        /// <summary>
        /// The Additional Approval Codes.
        /// </summary>
        /// <value>The Additional Approval Codes.</value>
        [DataMember(Name = "AdditionalApprovalCodes", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingApprovalCodesAdditionalApprovalCode> AdditionalApprovalCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  WoType: ").Append(WoType).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  ExistingPoNumber: ").Append(ExistingPoNumber).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  RejectReasonCodeId: ").Append(RejectReasonCodeId).Append("\n");
            sb.Append("  ReasonString: ").Append(ReasonString).Append("\n");
            sb.Append("  EmailsToNotify: ").Append(EmailsToNotify).Append("\n");
            sb.Append("  EmailMyself: ").Append(EmailMyself).Append("\n");
            sb.Append("  MyEmail: ").Append(MyEmail).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  WorkOrderLabel: ").Append(WorkOrderLabel).Append("\n");
            sb.Append("  DeleteLabel: ").Append(DeleteLabel).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  AdditionalApprovalCodes: ").Append(AdditionalApprovalCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.WoType == input.WoType ||
                    this.WoType.Equals(input.WoType)
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    this.TrackingNumber.Equals(input.TrackingNumber)
                ) && 
                (
                    this.PoNumber == input.PoNumber ||
                    (this.PoNumber != null &&
                    this.PoNumber.Equals(input.PoNumber))
                ) && 
                (
                    this.ExistingPoNumber == input.ExistingPoNumber ||
                    (this.ExistingPoNumber != null &&
                    this.ExistingPoNumber.Equals(input.ExistingPoNumber))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    this.CategoryId.Equals(input.CategoryId)
                ) && 
                (
                    this.ApprovalCode == input.ApprovalCode ||
                    (this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(input.ApprovalCode))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.RejectReasonCodeId == input.RejectReasonCodeId ||
                    this.RejectReasonCodeId.Equals(input.RejectReasonCodeId)
                ) && 
                (
                    this.ReasonString == input.ReasonString ||
                    (this.ReasonString != null &&
                    this.ReasonString.Equals(input.ReasonString))
                ) && 
                (
                    this.EmailsToNotify == input.EmailsToNotify ||
                    (this.EmailsToNotify != null &&
                    this.EmailsToNotify.Equals(input.EmailsToNotify))
                ) && 
                (
                    this.EmailMyself == input.EmailMyself ||
                    this.EmailMyself.Equals(input.EmailMyself)
                ) && 
                (
                    this.MyEmail == input.MyEmail ||
                    (this.MyEmail != null &&
                    this.MyEmail.Equals(input.MyEmail))
                ) && 
                (
                    this.ProposalId == input.ProposalId ||
                    this.ProposalId.Equals(input.ProposalId)
                ) && 
                (
                    this.WorkOrderLabel == input.WorkOrderLabel ||
                    (this.WorkOrderLabel != null &&
                    this.WorkOrderLabel.Equals(input.WorkOrderLabel))
                ) && 
                (
                    this.DeleteLabel == input.DeleteLabel ||
                    this.DeleteLabel.Equals(input.DeleteLabel)
                ) && 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                ) && 
                (
                    this.AdditionalApprovalCodes == input.AdditionalApprovalCodes ||
                    this.AdditionalApprovalCodes != null &&
                    input.AdditionalApprovalCodes != null &&
                    this.AdditionalApprovalCodes.SequenceEqual(input.AdditionalApprovalCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WoType.GetHashCode();
                hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                if (this.PoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PoNumber.GetHashCode();
                }
                if (this.ExistingPoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ExistingPoNumber.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                if (this.ApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCode.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RejectReasonCodeId.GetHashCode();
                if (this.ReasonString != null)
                {
                    hashCode = (hashCode * 59) + this.ReasonString.GetHashCode();
                }
                if (this.EmailsToNotify != null)
                {
                    hashCode = (hashCode * 59) + this.EmailsToNotify.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailMyself.GetHashCode();
                if (this.MyEmail != null)
                {
                    hashCode = (hashCode * 59) + this.MyEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProposalId.GetHashCode();
                if (this.WorkOrderLabel != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeleteLabel.GetHashCode();
                if (this.Actor != null)
                {
                    hashCode = (hashCode * 59) + this.Actor.GetHashCode();
                }
                if (this.AdditionalApprovalCodes != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalApprovalCodes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
