/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Invoice number requirements object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.InvoiceNumberRequirement")]
    public partial class SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement>, IValidatableObject
    {
        /// <summary>
        /// Selected restriction for the numbers of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type.
        /// </summary>
        /// <value>Selected restriction for the numbers of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RestrictionTypeEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 2,

            /// <summary>
            /// Enum DigitsOnly for value: DigitsOnly
            /// </summary>
            [EnumMember(Value = "DigitsOnly")]
            DigitsOnly = 3,

            /// <summary>
            /// Enum AlphaNumericOnly for value: AlphaNumericOnly
            /// </summary>
            [EnumMember(Value = "AlphaNumericOnly")]
            AlphaNumericOnly = 4

        }


        /// <summary>
        /// Selected restriction for the numbers of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type.
        /// </summary>
        /// <value>Selected restriction for the numbers of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type.</value>
        [DataMember(Name = "RestrictionType", EmitDefaultValue = false)]
        public RestrictionTypeEnum? RestrictionType { get; set; }
        /// <summary>
        /// Selected rule for the numbers of invoices generated automatically. See &#x60;AutoGenerationTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which rule.
        /// </summary>
        /// <value>Selected rule for the numbers of invoices generated automatically. See &#x60;AutoGenerationTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which rule.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutoGenerationTypeEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum CurrentDate for value: CurrentDate
            /// </summary>
            [EnumMember(Value = "CurrentDate")]
            CurrentDate = 2

        }


        /// <summary>
        /// Selected rule for the numbers of invoices generated automatically. See &#x60;AutoGenerationTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which rule.
        /// </summary>
        /// <value>Selected rule for the numbers of invoices generated automatically. See &#x60;AutoGenerationTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which rule.</value>
        [DataMember(Name = "AutoGenerationType", EmitDefaultValue = false)]
        public AutoGenerationTypeEnum? AutoGenerationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement" /> class.
        /// </summary>
        /// <param name="id">ID of the regular expression pattern used to validate the numbers of invoices created manually..</param>
        /// <param name="subscriberId">Unique ID of the subscriber whose invoice number requirements are returned..</param>
        /// <param name="pattern">Regular expression pattern used to validate the numbers of invoices created manually.&lt;br /&gt;A value is returned even if the selected &#x60;RestrictionType&#x60; is &#x60;0&#x60; — *None*. In this case, it’s the last pattern entered in the field..</param>
        /// <param name="comment">Comment on the invoice number format displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the specified restrictions. Invoice numbers are validated by the regular expression pattern specified in &#x60;Pattern&#x60;.&lt;br /&gt;A value is returned even if the selected &#x60;RestrictionType&#x60; is &#x60;0&#x60; — *None*. In this case, it’s the last comment entered in the field..</param>
        /// <param name="restrictionType">Selected restriction for the numbers of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type..</param>
        /// <param name="autoGenerationType">Selected rule for the numbers of invoices generated automatically. See &#x60;AutoGenerationTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which rule..</param>
        /// <param name="createdDate">Date and time when the invoice number requirements were created..</param>
        /// <param name="updatedDate">Date and time when the invoice number requirements were last updated..</param>
        /// <param name="createdByUserId">Unique ID of the subscriber admin user who created the invoice number requirements..</param>
        /// <param name="updatedByUserId">Unique ID of the subscriber admin user who last updated the invoice number requirements..</param>
        /// <param name="createdByUser">Username of the subscriber admin who created the invoice number requirements..</param>
        /// <param name="updatedByUser">Username of the subscriber admin who last updated the invoice number requirements. The username appears in the **Invoice Number** section next to **Last modified**..</param>
        /// <param name="reuseInvoiceNumber">Reuse invoice number.</param>
        public SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement(int id = default(int), int subscriberId = default(int), string pattern = default(string), string comment = default(string), RestrictionTypeEnum? restrictionType = default(RestrictionTypeEnum?), AutoGenerationTypeEnum? autoGenerationType = default(AutoGenerationTypeEnum?), DateTime createdDate = default(DateTime), DateTime updatedDate = default(DateTime), int createdByUserId = default(int), int updatedByUserId = default(int), string createdByUser = default(string), string updatedByUser = default(string), byte[] reuseInvoiceNumber = default(byte[]))
        {
            this.Id = id;
            this.SubscriberId = subscriberId;
            this.Pattern = pattern;
            this.Comment = comment;
            this.RestrictionType = restrictionType;
            this.AutoGenerationType = autoGenerationType;
            this.CreatedDate = createdDate;
            this.UpdatedDate = updatedDate;
            this.CreatedByUserId = createdByUserId;
            this.UpdatedByUserId = updatedByUserId;
            this.CreatedByUser = createdByUser;
            this.UpdatedByUser = updatedByUser;
            this.ReuseInvoiceNumber = reuseInvoiceNumber;
        }

        /// <summary>
        /// ID of the regular expression pattern used to validate the numbers of invoices created manually.
        /// </summary>
        /// <value>ID of the regular expression pattern used to validate the numbers of invoices created manually.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique ID of the subscriber whose invoice number requirements are returned.
        /// </summary>
        /// <value>Unique ID of the subscriber whose invoice number requirements are returned.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Regular expression pattern used to validate the numbers of invoices created manually.&lt;br /&gt;A value is returned even if the selected &#x60;RestrictionType&#x60; is &#x60;0&#x60; — *None*. In this case, it’s the last pattern entered in the field.
        /// </summary>
        /// <value>Regular expression pattern used to validate the numbers of invoices created manually.&lt;br /&gt;A value is returned even if the selected &#x60;RestrictionType&#x60; is &#x60;0&#x60; — *None*. In this case, it’s the last pattern entered in the field.</value>
        [DataMember(Name = "Pattern", EmitDefaultValue = false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Comment on the invoice number format displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the specified restrictions. Invoice numbers are validated by the regular expression pattern specified in &#x60;Pattern&#x60;.&lt;br /&gt;A value is returned even if the selected &#x60;RestrictionType&#x60; is &#x60;0&#x60; — *None*. In this case, it’s the last comment entered in the field.
        /// </summary>
        /// <value>Comment on the invoice number format displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the specified restrictions. Invoice numbers are validated by the regular expression pattern specified in &#x60;Pattern&#x60;.&lt;br /&gt;A value is returned even if the selected &#x60;RestrictionType&#x60; is &#x60;0&#x60; — *None*. In this case, it’s the last comment entered in the field.</value>
        [DataMember(Name = "Comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Date and time when the invoice number requirements were created.
        /// </summary>
        /// <value>Date and time when the invoice number requirements were created.</value>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Date and time when the invoice number requirements were last updated.
        /// </summary>
        /// <value>Date and time when the invoice number requirements were last updated.</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Unique ID of the subscriber admin user who created the invoice number requirements.
        /// </summary>
        /// <value>Unique ID of the subscriber admin user who created the invoice number requirements.</value>
        [DataMember(Name = "CreatedByUserId", EmitDefaultValue = false)]
        public int CreatedByUserId { get; set; }

        /// <summary>
        /// Unique ID of the subscriber admin user who last updated the invoice number requirements.
        /// </summary>
        /// <value>Unique ID of the subscriber admin user who last updated the invoice number requirements.</value>
        [DataMember(Name = "UpdatedByUserId", EmitDefaultValue = false)]
        public int UpdatedByUserId { get; set; }

        /// <summary>
        /// Username of the subscriber admin who created the invoice number requirements.
        /// </summary>
        /// <value>Username of the subscriber admin who created the invoice number requirements.</value>
        [DataMember(Name = "CreatedByUser", EmitDefaultValue = false)]
        public string CreatedByUser { get; set; }

        /// <summary>
        /// Username of the subscriber admin who last updated the invoice number requirements. The username appears in the **Invoice Number** section next to **Last modified**.
        /// </summary>
        /// <value>Username of the subscriber admin who last updated the invoice number requirements. The username appears in the **Invoice Number** section next to **Last modified**.</value>
        [DataMember(Name = "UpdatedByUser", EmitDefaultValue = false)]
        public string UpdatedByUser { get; set; }

        /// <summary>
        /// Reuse invoice number
        /// </summary>
        /// <value>Reuse invoice number</value>
        [DataMember(Name = "ReuseInvoiceNumber", EmitDefaultValue = false)]
        public byte[] ReuseInvoiceNumber { get; set; }

        /// <summary>
        /// Defines whether a default restriction pattern is used.
        /// </summary>
        /// <value>Defines whether a default restriction pattern is used.</value>
        [DataMember(Name = "IsNew", EmitDefaultValue = true)]
        public bool IsNew { get; private set; }

        /// <summary>
        /// Returns false as IsNew should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsNew()
        {
            return false;
        }
        /// <summary>
        /// Date when the invoice number requirements were created.
        /// </summary>
        /// <value>Date when the invoice number requirements were created.</value>
        [DataMember(Name = "CreatedDateString", EmitDefaultValue = false)]
        public string CreatedDateString { get; private set; }

        /// <summary>
        /// Returns false as CreatedDateString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedDateString()
        {
            return false;
        }
        /// <summary>
        /// Date when the invoice number requirements were last updated. The date appears in the **Invoice Number** section next to **Last modified**.
        /// </summary>
        /// <value>Date when the invoice number requirements were last updated. The date appears in the **Invoice Number** section next to **Last modified**.</value>
        [DataMember(Name = "UpdatedDateString", EmitDefaultValue = false)]
        public string UpdatedDateString { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateString()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  RestrictionType: ").Append(RestrictionType).Append("\n");
            sb.Append("  AutoGenerationType: ").Append(AutoGenerationType).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  UpdatedByUserId: ").Append(UpdatedByUserId).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  UpdatedByUser: ").Append(UpdatedByUser).Append("\n");
            sb.Append("  ReuseInvoiceNumber: ").Append(ReuseInvoiceNumber).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  CreatedDateString: ").Append(CreatedDateString).Append("\n");
            sb.Append("  UpdatedDateString: ").Append(UpdatedDateString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.RestrictionType == input.RestrictionType ||
                    this.RestrictionType.Equals(input.RestrictionType)
                ) && 
                (
                    this.AutoGenerationType == input.AutoGenerationType ||
                    this.AutoGenerationType.Equals(input.AutoGenerationType)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    this.CreatedByUserId.Equals(input.CreatedByUserId)
                ) && 
                (
                    this.UpdatedByUserId == input.UpdatedByUserId ||
                    this.UpdatedByUserId.Equals(input.UpdatedByUserId)
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.UpdatedByUser == input.UpdatedByUser ||
                    (this.UpdatedByUser != null &&
                    this.UpdatedByUser.Equals(input.UpdatedByUser))
                ) && 
                (
                    this.ReuseInvoiceNumber == input.ReuseInvoiceNumber ||
                    (this.ReuseInvoiceNumber != null &&
                    this.ReuseInvoiceNumber.Equals(input.ReuseInvoiceNumber))
                ) && 
                (
                    this.IsNew == input.IsNew ||
                    this.IsNew.Equals(input.IsNew)
                ) && 
                (
                    this.CreatedDateString == input.CreatedDateString ||
                    (this.CreatedDateString != null &&
                    this.CreatedDateString.Equals(input.CreatedDateString))
                ) && 
                (
                    this.UpdatedDateString == input.UpdatedDateString ||
                    (this.UpdatedDateString != null &&
                    this.UpdatedDateString.Equals(input.UpdatedDateString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                if (this.Pattern != null)
                {
                    hashCode = (hashCode * 59) + this.Pattern.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RestrictionType.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoGenerationType.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedByUserId.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedByUserId.GetHashCode();
                if (this.CreatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUser.GetHashCode();
                }
                if (this.UpdatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedByUser.GetHashCode();
                }
                if (this.ReuseInvoiceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReuseInvoiceNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsNew.GetHashCode();
                if (this.CreatedDateString != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateString.GetHashCode();
                }
                if (this.UpdatedDateString != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
