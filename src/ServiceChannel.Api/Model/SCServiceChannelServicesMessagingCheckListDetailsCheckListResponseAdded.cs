/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Checklist response object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.CheckListDetails.CheckListResponseAdded")]
    public partial class SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded : IEquatable<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded" /> class.
        /// </summary>
        /// <param name="checkListQuestionId">checkListQuestionId.</param>
        /// <param name="checkListQuestionOptionId">checkListQuestionOptionId.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="technicianId">technicianId.</param>
        /// <param name="id">Checklist response ID..</param>
        /// <param name="answer">Answer to a checklist question..</param>
        /// <param name="freeTextAnswer">Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type..</param>
        /// <param name="entityId">ID of the work order the response was submitted for..</param>
        /// <param name="entityTypeId">ID of the entity the response was submitted for. 0 is returned for work orders..</param>
        /// <param name="attempt">Order of a technician’s on-site visit when the response was submitted..</param>
        /// <param name="updatedDate">Date and time when the response was last updated set in EST. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss&#x60;..</param>
        /// <param name="updatedDateStr">Date and time when the response was last updated set in the location’s time zone. The format is &#x60;Month Day Year hh:mm&#x60;..</param>
        /// <param name="updatedDateDto">Date and time when the response was last updated set in the location’s time zone with the UTC offset. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss±hh:mm&#x60;..</param>
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded(int checkListQuestionId = default(int), int checkListQuestionOptionId = default(int), int providerId = default(int), int technicianId = default(int), int id = default(int), string answer = default(string), string freeTextAnswer = default(string), int entityId = default(int), int entityTypeId = default(int), int attempt = default(int), DateTime updatedDate = default(DateTime), string updatedDateStr = default(string), DateTime updatedDateDto = default(DateTime))
        {
            this.CheckListQuestionId = checkListQuestionId;
            this.CheckListQuestionOptionId = checkListQuestionOptionId;
            this.ProviderId = providerId;
            this.TechnicianId = technicianId;
            this.Id = id;
            this.Answer = answer;
            this.FreeTextAnswer = freeTextAnswer;
            this.EntityId = entityId;
            this.EntityTypeId = entityTypeId;
            this.Attempt = attempt;
            this.UpdatedDate = updatedDate;
            this.UpdatedDateStr = updatedDateStr;
            this.UpdatedDateDto = updatedDateDto;
        }

        /// <summary>
        /// Gets or Sets CheckListQuestionId
        /// </summary>
        [DataMember(Name = "CheckListQuestionId", EmitDefaultValue = false)]
        public int CheckListQuestionId { get; set; }

        /// <summary>
        /// Gets or Sets CheckListQuestionOptionId
        /// </summary>
        [DataMember(Name = "CheckListQuestionOptionId", EmitDefaultValue = false)]
        public int CheckListQuestionOptionId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets TechnicianId
        /// </summary>
        [DataMember(Name = "TechnicianId", EmitDefaultValue = false)]
        public int TechnicianId { get; set; }

        /// <summary>
        /// Checklist response ID.
        /// </summary>
        /// <value>Checklist response ID.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Answer to a checklist question.
        /// </summary>
        /// <value>Answer to a checklist question.</value>
        [DataMember(Name = "Answer", EmitDefaultValue = false)]
        public string Answer { get; set; }

        /// <summary>
        /// Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.
        /// </summary>
        /// <value>Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.</value>
        [DataMember(Name = "FreeTextAnswer", EmitDefaultValue = false)]
        public string FreeTextAnswer { get; set; }

        /// <summary>
        /// ID of the work order the response was submitted for.
        /// </summary>
        /// <value>ID of the work order the response was submitted for.</value>
        [DataMember(Name = "EntityId", EmitDefaultValue = false)]
        public int EntityId { get; set; }

        /// <summary>
        /// ID of the entity the response was submitted for. 0 is returned for work orders.
        /// </summary>
        /// <value>ID of the entity the response was submitted for. 0 is returned for work orders.</value>
        [DataMember(Name = "EntityTypeId", EmitDefaultValue = false)]
        public int EntityTypeId { get; set; }

        /// <summary>
        /// Order of a technician’s on-site visit when the response was submitted.
        /// </summary>
        /// <value>Order of a technician’s on-site visit when the response was submitted.</value>
        [DataMember(Name = "Attempt", EmitDefaultValue = false)]
        public int Attempt { get; set; }

        /// <summary>
        /// Date and time when the response was last updated set in EST. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss&#x60;.
        /// </summary>
        /// <value>Date and time when the response was last updated set in EST. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss&#x60;.</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Date and time when the response was last updated set in the location’s time zone. The format is &#x60;Month Day Year hh:mm&#x60;.
        /// </summary>
        /// <value>Date and time when the response was last updated set in the location’s time zone. The format is &#x60;Month Day Year hh:mm&#x60;.</value>
        [DataMember(Name = "UpdatedDateStr", EmitDefaultValue = false)]
        public string UpdatedDateStr { get; set; }

        /// <summary>
        /// Date and time when the response was last updated set in the location’s time zone with the UTC offset. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss±hh:mm&#x60;.
        /// </summary>
        /// <value>Date and time when the response was last updated set in the location’s time zone with the UTC offset. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss±hh:mm&#x60;.</value>
        [DataMember(Name = "UpdatedDateDto", EmitDefaultValue = false)]
        public DateTime UpdatedDateDto { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded {\n");
            sb.Append("  CheckListQuestionId: ").Append(CheckListQuestionId).Append("\n");
            sb.Append("  CheckListQuestionOptionId: ").Append(CheckListQuestionOptionId).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  TechnicianId: ").Append(TechnicianId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  FreeTextAnswer: ").Append(FreeTextAnswer).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityTypeId: ").Append(EntityTypeId).Append("\n");
            sb.Append("  Attempt: ").Append(Attempt).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDateStr: ").Append(UpdatedDateStr).Append("\n");
            sb.Append("  UpdatedDateDto: ").Append(UpdatedDateDto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseAdded input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CheckListQuestionId == input.CheckListQuestionId ||
                    this.CheckListQuestionId.Equals(input.CheckListQuestionId)
                ) && 
                (
                    this.CheckListQuestionOptionId == input.CheckListQuestionOptionId ||
                    this.CheckListQuestionOptionId.Equals(input.CheckListQuestionOptionId)
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.TechnicianId == input.TechnicianId ||
                    this.TechnicianId.Equals(input.TechnicianId)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.FreeTextAnswer == input.FreeTextAnswer ||
                    (this.FreeTextAnswer != null &&
                    this.FreeTextAnswer.Equals(input.FreeTextAnswer))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    this.EntityId.Equals(input.EntityId)
                ) && 
                (
                    this.EntityTypeId == input.EntityTypeId ||
                    this.EntityTypeId.Equals(input.EntityTypeId)
                ) && 
                (
                    this.Attempt == input.Attempt ||
                    this.Attempt.Equals(input.Attempt)
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.UpdatedDateStr == input.UpdatedDateStr ||
                    (this.UpdatedDateStr != null &&
                    this.UpdatedDateStr.Equals(input.UpdatedDateStr))
                ) && 
                (
                    this.UpdatedDateDto == input.UpdatedDateDto ||
                    (this.UpdatedDateDto != null &&
                    this.UpdatedDateDto.Equals(input.UpdatedDateDto))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CheckListQuestionId.GetHashCode();
                hashCode = (hashCode * 59) + this.CheckListQuestionOptionId.GetHashCode();
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                hashCode = (hashCode * 59) + this.TechnicianId.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Answer != null)
                {
                    hashCode = (hashCode * 59) + this.Answer.GetHashCode();
                }
                if (this.FreeTextAnswer != null)
                {
                    hashCode = (hashCode * 59) + this.FreeTextAnswer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                hashCode = (hashCode * 59) + this.EntityTypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.Attempt.GetHashCode();
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                if (this.UpdatedDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateStr.GetHashCode();
                }
                if (this.UpdatedDateDto != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateDto.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
