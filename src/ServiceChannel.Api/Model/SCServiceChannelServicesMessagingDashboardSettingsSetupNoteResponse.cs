/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Settings for Dashboard Notes
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.DashboardSettings.SetupNoteResponse")]
    public partial class SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse : IEquatable<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse" /> class.
        /// </summary>
        /// <param name="setupId">Store Dashboard Setup ID..</param>
        /// <param name="allowAddingNotes">Enable / disable an ability to add workorder notes. (default to false).</param>
        /// <param name="allowAddingNotesForCompletedWorkorders">Enable / disable an ability to add notes for workorders with status \&quot;completed\&quot;. (default to false).</param>
        /// <param name="maskMoney">Parse a work order description and a note text in order to mask money. (default to false).</param>
        /// <param name="maskPhone">Parse a work order description and a note text in order to mask phone numbers. (default to false).</param>
        /// <param name="maskEmail">Parse a work order description and a note text in order to mask email. (default to false).</param>
        /// <param name="showProviderRecipients">Show provider recipients as wo note recipients. (default to false).</param>
        /// <param name="showSubscriberRecipients">Show subscriber recipients as wo note recipients. (default to false).</param>
        /// <param name="showPublicUserEmailsOnly">Show only users with public emails as wo note recipients. (default to false).</param>
        /// <param name="showUniversalRecipients">Show universal users as wo note recipients. (default to false).</param>
        /// <param name="locationNotesAsRecipients">Show emails from location notes as wo note recipients..</param>
        /// <param name="autoCopyContractorNotes">Specify custom addressees to show as wo note recipients. (default to false).</param>
        /// <param name="customNoteRecipients">Specify custom addressees to show as wo note recipients..</param>
        /// <param name="statuses">statuses.</param>
        /// <param name="disableNotes">disableNotes (default to false).</param>
        /// <param name="noteEmails">Get addresses without dublicates..</param>
        public SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse(int setupId = default(int), bool allowAddingNotes = false, bool allowAddingNotesForCompletedWorkorders = false, bool maskMoney = false, bool maskPhone = false, bool maskEmail = false, bool showProviderRecipients = false, bool showSubscriberRecipients = false, bool showPublicUserEmailsOnly = false, bool showUniversalRecipients = false, string locationNotesAsRecipients = default(string), bool autoCopyContractorNotes = false, string customNoteRecipients = default(string), List<string> statuses = default(List<string>), bool disableNotes = false, List<string> noteEmails = default(List<string>))
        {
            this.SetupId = setupId;
            this.AllowAddingNotes = allowAddingNotes;
            this.AllowAddingNotesForCompletedWorkorders = allowAddingNotesForCompletedWorkorders;
            this.MaskMoney = maskMoney;
            this.MaskPhone = maskPhone;
            this.MaskEmail = maskEmail;
            this.ShowProviderRecipients = showProviderRecipients;
            this.ShowSubscriberRecipients = showSubscriberRecipients;
            this.ShowPublicUserEmailsOnly = showPublicUserEmailsOnly;
            this.ShowUniversalRecipients = showUniversalRecipients;
            this.LocationNotesAsRecipients = locationNotesAsRecipients;
            this.AutoCopyContractorNotes = autoCopyContractorNotes;
            this.CustomNoteRecipients = customNoteRecipients;
            this.Statuses = statuses;
            this.DisableNotes = disableNotes;
            this.NoteEmails = noteEmails;
        }

        /// <summary>
        /// Store Dashboard Setup ID.
        /// </summary>
        /// <value>Store Dashboard Setup ID.</value>
        [DataMember(Name = "SetupId", EmitDefaultValue = false)]
        public int SetupId { get; set; }

        /// <summary>
        /// Enable / disable an ability to add workorder notes.
        /// </summary>
        /// <value>Enable / disable an ability to add workorder notes.</value>
        [DataMember(Name = "AllowAddingNotes", EmitDefaultValue = true)]
        public bool AllowAddingNotes { get; set; }

        /// <summary>
        /// Enable / disable an ability to add notes for workorders with status \&quot;completed\&quot;.
        /// </summary>
        /// <value>Enable / disable an ability to add notes for workorders with status \&quot;completed\&quot;.</value>
        [DataMember(Name = "AllowAddingNotesForCompletedWorkorders", EmitDefaultValue = true)]
        public bool AllowAddingNotesForCompletedWorkorders { get; set; }

        /// <summary>
        /// Parse a work order description and a note text in order to mask money.
        /// </summary>
        /// <value>Parse a work order description and a note text in order to mask money.</value>
        [DataMember(Name = "MaskMoney", EmitDefaultValue = true)]
        public bool MaskMoney { get; set; }

        /// <summary>
        /// Parse a work order description and a note text in order to mask phone numbers.
        /// </summary>
        /// <value>Parse a work order description and a note text in order to mask phone numbers.</value>
        [DataMember(Name = "MaskPhone", EmitDefaultValue = true)]
        public bool MaskPhone { get; set; }

        /// <summary>
        /// Parse a work order description and a note text in order to mask email.
        /// </summary>
        /// <value>Parse a work order description and a note text in order to mask email.</value>
        [DataMember(Name = "MaskEmail", EmitDefaultValue = true)]
        public bool MaskEmail { get; set; }

        /// <summary>
        /// Show provider recipients as wo note recipients.
        /// </summary>
        /// <value>Show provider recipients as wo note recipients.</value>
        [DataMember(Name = "ShowProviderRecipients", EmitDefaultValue = true)]
        public bool ShowProviderRecipients { get; set; }

        /// <summary>
        /// Show subscriber recipients as wo note recipients.
        /// </summary>
        /// <value>Show subscriber recipients as wo note recipients.</value>
        [DataMember(Name = "ShowSubscriberRecipients", EmitDefaultValue = true)]
        public bool ShowSubscriberRecipients { get; set; }

        /// <summary>
        /// Show only users with public emails as wo note recipients.
        /// </summary>
        /// <value>Show only users with public emails as wo note recipients.</value>
        [DataMember(Name = "ShowPublicUserEmailsOnly", EmitDefaultValue = true)]
        public bool ShowPublicUserEmailsOnly { get; set; }

        /// <summary>
        /// Show universal users as wo note recipients.
        /// </summary>
        /// <value>Show universal users as wo note recipients.</value>
        [DataMember(Name = "ShowUniversalRecipients", EmitDefaultValue = true)]
        public bool ShowUniversalRecipients { get; set; }

        /// <summary>
        /// Show emails from location notes as wo note recipients.
        /// </summary>
        /// <value>Show emails from location notes as wo note recipients.</value>
        [DataMember(Name = "LocationNotesAsRecipients", EmitDefaultValue = false)]
        public string LocationNotesAsRecipients { get; set; }

        /// <summary>
        /// Specify custom addressees to show as wo note recipients.
        /// </summary>
        /// <value>Specify custom addressees to show as wo note recipients.</value>
        [DataMember(Name = "AutoCopyContractorNotes", EmitDefaultValue = true)]
        public bool AutoCopyContractorNotes { get; set; }

        /// <summary>
        /// Specify custom addressees to show as wo note recipients.
        /// </summary>
        /// <value>Specify custom addressees to show as wo note recipients.</value>
        [DataMember(Name = "CustomNoteRecipients", EmitDefaultValue = false)]
        public string CustomNoteRecipients { get; set; }

        /// <summary>
        /// Gets or Sets Statuses
        /// </summary>
        [DataMember(Name = "Statuses", EmitDefaultValue = false)]
        public List<string> Statuses { get; set; }

        /// <summary>
        /// Gets or Sets DisableNotes
        /// </summary>
        [DataMember(Name = "DisableNotes", EmitDefaultValue = true)]
        public bool DisableNotes { get; set; }

        /// <summary>
        /// Get addresses without dublicates.
        /// </summary>
        /// <value>Get addresses without dublicates.</value>
        [DataMember(Name = "NoteEmails", EmitDefaultValue = false)]
        public List<string> NoteEmails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse {\n");
            sb.Append("  SetupId: ").Append(SetupId).Append("\n");
            sb.Append("  AllowAddingNotes: ").Append(AllowAddingNotes).Append("\n");
            sb.Append("  AllowAddingNotesForCompletedWorkorders: ").Append(AllowAddingNotesForCompletedWorkorders).Append("\n");
            sb.Append("  MaskMoney: ").Append(MaskMoney).Append("\n");
            sb.Append("  MaskPhone: ").Append(MaskPhone).Append("\n");
            sb.Append("  MaskEmail: ").Append(MaskEmail).Append("\n");
            sb.Append("  ShowProviderRecipients: ").Append(ShowProviderRecipients).Append("\n");
            sb.Append("  ShowSubscriberRecipients: ").Append(ShowSubscriberRecipients).Append("\n");
            sb.Append("  ShowPublicUserEmailsOnly: ").Append(ShowPublicUserEmailsOnly).Append("\n");
            sb.Append("  ShowUniversalRecipients: ").Append(ShowUniversalRecipients).Append("\n");
            sb.Append("  LocationNotesAsRecipients: ").Append(LocationNotesAsRecipients).Append("\n");
            sb.Append("  AutoCopyContractorNotes: ").Append(AutoCopyContractorNotes).Append("\n");
            sb.Append("  CustomNoteRecipients: ").Append(CustomNoteRecipients).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  DisableNotes: ").Append(DisableNotes).Append("\n");
            sb.Append("  NoteEmails: ").Append(NoteEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SetupId == input.SetupId ||
                    this.SetupId.Equals(input.SetupId)
                ) && 
                (
                    this.AllowAddingNotes == input.AllowAddingNotes ||
                    this.AllowAddingNotes.Equals(input.AllowAddingNotes)
                ) && 
                (
                    this.AllowAddingNotesForCompletedWorkorders == input.AllowAddingNotesForCompletedWorkorders ||
                    this.AllowAddingNotesForCompletedWorkorders.Equals(input.AllowAddingNotesForCompletedWorkorders)
                ) && 
                (
                    this.MaskMoney == input.MaskMoney ||
                    this.MaskMoney.Equals(input.MaskMoney)
                ) && 
                (
                    this.MaskPhone == input.MaskPhone ||
                    this.MaskPhone.Equals(input.MaskPhone)
                ) && 
                (
                    this.MaskEmail == input.MaskEmail ||
                    this.MaskEmail.Equals(input.MaskEmail)
                ) && 
                (
                    this.ShowProviderRecipients == input.ShowProviderRecipients ||
                    this.ShowProviderRecipients.Equals(input.ShowProviderRecipients)
                ) && 
                (
                    this.ShowSubscriberRecipients == input.ShowSubscriberRecipients ||
                    this.ShowSubscriberRecipients.Equals(input.ShowSubscriberRecipients)
                ) && 
                (
                    this.ShowPublicUserEmailsOnly == input.ShowPublicUserEmailsOnly ||
                    this.ShowPublicUserEmailsOnly.Equals(input.ShowPublicUserEmailsOnly)
                ) && 
                (
                    this.ShowUniversalRecipients == input.ShowUniversalRecipients ||
                    this.ShowUniversalRecipients.Equals(input.ShowUniversalRecipients)
                ) && 
                (
                    this.LocationNotesAsRecipients == input.LocationNotesAsRecipients ||
                    (this.LocationNotesAsRecipients != null &&
                    this.LocationNotesAsRecipients.Equals(input.LocationNotesAsRecipients))
                ) && 
                (
                    this.AutoCopyContractorNotes == input.AutoCopyContractorNotes ||
                    this.AutoCopyContractorNotes.Equals(input.AutoCopyContractorNotes)
                ) && 
                (
                    this.CustomNoteRecipients == input.CustomNoteRecipients ||
                    (this.CustomNoteRecipients != null &&
                    this.CustomNoteRecipients.Equals(input.CustomNoteRecipients))
                ) && 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    input.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                ) && 
                (
                    this.DisableNotes == input.DisableNotes ||
                    this.DisableNotes.Equals(input.DisableNotes)
                ) && 
                (
                    this.NoteEmails == input.NoteEmails ||
                    this.NoteEmails != null &&
                    input.NoteEmails != null &&
                    this.NoteEmails.SequenceEqual(input.NoteEmails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SetupId.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowAddingNotes.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowAddingNotesForCompletedWorkorders.GetHashCode();
                hashCode = (hashCode * 59) + this.MaskMoney.GetHashCode();
                hashCode = (hashCode * 59) + this.MaskPhone.GetHashCode();
                hashCode = (hashCode * 59) + this.MaskEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowProviderRecipients.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowSubscriberRecipients.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPublicUserEmailsOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowUniversalRecipients.GetHashCode();
                if (this.LocationNotesAsRecipients != null)
                {
                    hashCode = (hashCode * 59) + this.LocationNotesAsRecipients.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoCopyContractorNotes.GetHashCode();
                if (this.CustomNoteRecipients != null)
                {
                    hashCode = (hashCode * 59) + this.CustomNoteRecipients.GetHashCode();
                }
                if (this.Statuses != null)
                {
                    hashCode = (hashCode * 59) + this.Statuses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableNotes.GetHashCode();
                if (this.NoteEmails != null)
                {
                    hashCode = (hashCode * 59) + this.NoteEmails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
