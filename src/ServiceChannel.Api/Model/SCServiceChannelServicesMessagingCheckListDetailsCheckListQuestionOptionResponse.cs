/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Answer option configured for a checklist question of the **Selector** type.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.CheckListDetails.CheckListQuestionOptionResponse")]
    public partial class SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse : IEquatable<SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse" /> class.
        /// </summary>
        /// <param name="id">ID of the answer option for a checklist question of the **Selector** type..</param>
        /// <param name="answer">Answer option for a checklist question of the **Selector** type. A technician can select from a list of configured options when answering the question..</param>
        /// <param name="sequence">Not applicable to checklists..</param>
        /// <param name="isConditionalFollowUp">Defines whether a technician is prompted to add a comment to the selected answer option. A comment is mandatory if answering the checklist question is required. (default to false).</param>
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse(int id = default(int), string answer = default(string), int sequence = default(int), bool isConditionalFollowUp = false)
        {
            this.Id = id;
            this.Answer = answer;
            this.Sequence = sequence;
            this.IsConditionalFollowUp = isConditionalFollowUp;
        }

        /// <summary>
        /// ID of the answer option for a checklist question of the **Selector** type.
        /// </summary>
        /// <value>ID of the answer option for a checklist question of the **Selector** type.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Answer option for a checklist question of the **Selector** type. A technician can select from a list of configured options when answering the question.
        /// </summary>
        /// <value>Answer option for a checklist question of the **Selector** type. A technician can select from a list of configured options when answering the question.</value>
        [DataMember(Name = "Answer", EmitDefaultValue = false)]
        public string Answer { get; set; }

        /// <summary>
        /// Not applicable to checklists.
        /// </summary>
        /// <value>Not applicable to checklists.</value>
        [DataMember(Name = "Sequence", EmitDefaultValue = false)]
        public int Sequence { get; set; }

        /// <summary>
        /// Defines whether a technician is prompted to add a comment to the selected answer option. A comment is mandatory if answering the checklist question is required.
        /// </summary>
        /// <value>Defines whether a technician is prompted to add a comment to the selected answer option. A comment is mandatory if answering the checklist question is required.</value>
        [DataMember(Name = "IsConditionalFollowUp", EmitDefaultValue = true)]
        public bool IsConditionalFollowUp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  IsConditionalFollowUp: ").Append(IsConditionalFollowUp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    this.Sequence.Equals(input.Sequence)
                ) && 
                (
                    this.IsConditionalFollowUp == input.IsConditionalFollowUp ||
                    this.IsConditionalFollowUp.Equals(input.IsConditionalFollowUp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Answer != null)
                {
                    hashCode = (hashCode * 59) + this.Answer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sequence.GetHashCode();
                hashCode = (hashCode * 59) + this.IsConditionalFollowUp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
