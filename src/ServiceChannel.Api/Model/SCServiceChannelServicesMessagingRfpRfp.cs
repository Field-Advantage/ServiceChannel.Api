/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingRfpRfp
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Rfp.Rfp")]
    public partial class SCServiceChannelServicesMessagingRfpRfp : IEquatable<SCServiceChannelServicesMessagingRfpRfp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingRfpRfp" /> class.
        /// </summary>
        /// <param name="id">Gets or sets Id..</param>
        /// <param name="number">Gets or sets Rfp Number..</param>
        /// <param name="createdDate">Gets or sets Rfp Created Date..</param>
        /// <param name="createdDateDTO">createdDateDTO.</param>
        /// <param name="date">Gets or sets Rfp Date..</param>
        /// <param name="dateDTO">dateDTO.</param>
        /// <param name="updatedDate">Last Update Date.</param>
        /// <param name="updatedDateDTO">updatedDateDTO.</param>
        /// <param name="userId">Gets or sets UserId..</param>
        /// <param name="waitingForPrpEmail">Gets or sets WaitingForPrpEmail..</param>
        /// <param name="providerEmail">Gets or sets ProviderEmail..</param>
        /// <param name="description">Gets or sets Description..</param>
        /// <param name="dueHrs">Gets or sets DueHrs..</param>
        /// <param name="dueDate">Gets or sets DueDate..</param>
        /// <param name="dueDateDTO">dueDateDTO.</param>
        /// <param name="status">Gets or sets Status..</param>
        /// <param name="location">location.</param>
        /// <param name="provider">provider.</param>
        /// <param name="subscriber">subscriber.</param>
        /// <param name="trade">trade.</param>
        /// <param name="tradeId">tradeId.</param>
        /// <param name="workOrder">workOrder.</param>
        /// <param name="proposals">Gets or sets proposal collection..</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="batchRfpNumber">batchRfpNumber.</param>
        public SCServiceChannelServicesMessagingRfpRfp(int id = default(int), string number = default(string), DateTime createdDate = default(DateTime), DateTime createdDateDTO = default(DateTime), DateTime date = default(DateTime), DateTime dateDTO = default(DateTime), DateTime updatedDate = default(DateTime), DateTime updatedDateDTO = default(DateTime), int userId = default(int), string waitingForPrpEmail = default(string), string providerEmail = default(string), string description = default(string), double dueHrs = default(double), DateTime dueDate = default(DateTime), DateTime dueDateDTO = default(DateTime), string status = default(string), SCServiceChannelServicesMessagingLocationLocation location = default(SCServiceChannelServicesMessagingLocationLocation), SCServiceChannelServicesMessagingProvidersProvider provider = default(SCServiceChannelServicesMessagingProvidersProvider), SCServiceChannelServicesMessagingSubscribersSubscriber subscriber = default(SCServiceChannelServicesMessagingSubscribersSubscriber), string trade = default(string), int tradeId = default(int), SCServiceChannelServicesMessagingWorkordersWorkOrder workOrder = default(SCServiceChannelServicesMessagingWorkordersWorkOrder), List<SCServiceChannelServicesMessagingProposalsProposalInfo> proposals = default(List<SCServiceChannelServicesMessagingProposalsProposalInfo>), List<SCServiceChannelServicesMessagingAttachmentsAttachment> attachments = default(List<SCServiceChannelServicesMessagingAttachmentsAttachment>), string batchRfpNumber = default(string))
        {
            this.Id = id;
            this.Number = number;
            this.CreatedDate = createdDate;
            this.CreatedDateDTO = createdDateDTO;
            this.Date = date;
            this.DateDTO = dateDTO;
            this.UpdatedDate = updatedDate;
            this.UpdatedDateDTO = updatedDateDTO;
            this.UserId = userId;
            this.WaitingForPrpEmail = waitingForPrpEmail;
            this.ProviderEmail = providerEmail;
            this.Description = description;
            this.DueHrs = dueHrs;
            this.DueDate = dueDate;
            this.DueDateDTO = dueDateDTO;
            this.Status = status;
            this.Location = location;
            this.Provider = provider;
            this.Subscriber = subscriber;
            this.Trade = trade;
            this.TradeId = tradeId;
            this.WorkOrder = workOrder;
            this.Proposals = proposals;
            this.Attachments = attachments;
            this.BatchRfpNumber = batchRfpNumber;
        }

        /// <summary>
        /// Gets or sets Id.
        /// </summary>
        /// <value>Gets or sets Id.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets Rfp Number.
        /// </summary>
        /// <value>Gets or sets Rfp Number.</value>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets Rfp Created Date.
        /// </summary>
        /// <value>Gets or sets Rfp Created Date.</value>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateDTO
        /// </summary>
        [DataMember(Name = "CreatedDateDTO", EmitDefaultValue = false)]
        public DateTime CreatedDateDTO { get; set; }

        /// <summary>
        /// Gets or sets Rfp Date.
        /// </summary>
        /// <value>Gets or sets Rfp Date.</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets DateDTO
        /// </summary>
        [DataMember(Name = "DateDTO", EmitDefaultValue = false)]
        public DateTime DateDTO { get; set; }

        /// <summary>
        /// Last Update Date
        /// </summary>
        /// <value>Last Update Date</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDateDTO
        /// </summary>
        [DataMember(Name = "UpdatedDateDTO", EmitDefaultValue = false)]
        public DateTime UpdatedDateDTO { get; set; }

        /// <summary>
        /// Gets or sets UserId.
        /// </summary>
        /// <value>Gets or sets UserId.</value>
        [DataMember(Name = "UserId", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets WaitingForPrpEmail.
        /// </summary>
        /// <value>Gets or sets WaitingForPrpEmail.</value>
        [DataMember(Name = "WaitingForPrpEmail", EmitDefaultValue = false)]
        public string WaitingForPrpEmail { get; set; }

        /// <summary>
        /// Gets or sets ProviderEmail.
        /// </summary>
        /// <value>Gets or sets ProviderEmail.</value>
        [DataMember(Name = "ProviderEmail", EmitDefaultValue = false)]
        public string ProviderEmail { get; set; }

        /// <summary>
        /// Gets or sets Description.
        /// </summary>
        /// <value>Gets or sets Description.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets DueHrs.
        /// </summary>
        /// <value>Gets or sets DueHrs.</value>
        [DataMember(Name = "DueHrs", EmitDefaultValue = false)]
        public double DueHrs { get; set; }

        /// <summary>
        /// Gets or sets DueDate.
        /// </summary>
        /// <value>Gets or sets DueDate.</value>
        [DataMember(Name = "DueDate", EmitDefaultValue = false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDateDTO
        /// </summary>
        [DataMember(Name = "DueDateDTO", EmitDefaultValue = false)]
        public DateTime DueDateDTO { get; set; }

        /// <summary>
        /// Gets or sets Status.
        /// </summary>
        /// <value>Gets or sets Status.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "Location", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingLocationLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "Provider", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingProvidersProvider Provider { get; set; }

        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name = "Subscriber", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingSubscribersSubscriber Subscriber { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name = "TradeId", EmitDefaultValue = false)]
        public int TradeId { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrder
        /// </summary>
        [DataMember(Name = "WorkOrder", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersWorkOrder WorkOrder { get; set; }

        /// <summary>
        /// Gets or sets proposal collection.
        /// </summary>
        /// <value>Gets or sets proposal collection.</value>
        [DataMember(Name = "Proposals", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingProposalsProposalInfo> Proposals { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets BatchRfpNumber
        /// </summary>
        [DataMember(Name = "BatchRfpNumber", EmitDefaultValue = false)]
        public string BatchRfpNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingRfpRfp {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedDateDTO: ").Append(CreatedDateDTO).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateDTO: ").Append(DateDTO).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDateDTO: ").Append(UpdatedDateDTO).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WaitingForPrpEmail: ").Append(WaitingForPrpEmail).Append("\n");
            sb.Append("  ProviderEmail: ").Append(ProviderEmail).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueHrs: ").Append(DueHrs).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueDateDTO: ").Append(DueDateDTO).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  WorkOrder: ").Append(WorkOrder).Append("\n");
            sb.Append("  Proposals: ").Append(Proposals).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  BatchRfpNumber: ").Append(BatchRfpNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingRfpRfp);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingRfpRfp instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingRfpRfp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingRfpRfp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.CreatedDateDTO == input.CreatedDateDTO ||
                    (this.CreatedDateDTO != null &&
                    this.CreatedDateDTO.Equals(input.CreatedDateDTO))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DateDTO == input.DateDTO ||
                    (this.DateDTO != null &&
                    this.DateDTO.Equals(input.DateDTO))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.UpdatedDateDTO == input.UpdatedDateDTO ||
                    (this.UpdatedDateDTO != null &&
                    this.UpdatedDateDTO.Equals(input.UpdatedDateDTO))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.WaitingForPrpEmail == input.WaitingForPrpEmail ||
                    (this.WaitingForPrpEmail != null &&
                    this.WaitingForPrpEmail.Equals(input.WaitingForPrpEmail))
                ) && 
                (
                    this.ProviderEmail == input.ProviderEmail ||
                    (this.ProviderEmail != null &&
                    this.ProviderEmail.Equals(input.ProviderEmail))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DueHrs == input.DueHrs ||
                    this.DueHrs.Equals(input.DueHrs)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.DueDateDTO == input.DueDateDTO ||
                    (this.DueDateDTO != null &&
                    this.DueDateDTO.Equals(input.DueDateDTO))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Subscriber == input.Subscriber ||
                    (this.Subscriber != null &&
                    this.Subscriber.Equals(input.Subscriber))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.TradeId == input.TradeId ||
                    this.TradeId.Equals(input.TradeId)
                ) && 
                (
                    this.WorkOrder == input.WorkOrder ||
                    (this.WorkOrder != null &&
                    this.WorkOrder.Equals(input.WorkOrder))
                ) && 
                (
                    this.Proposals == input.Proposals ||
                    this.Proposals != null &&
                    input.Proposals != null &&
                    this.Proposals.SequenceEqual(input.Proposals)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.BatchRfpNumber == input.BatchRfpNumber ||
                    (this.BatchRfpNumber != null &&
                    this.BatchRfpNumber.Equals(input.BatchRfpNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.CreatedDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateDTO.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.DateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.DateDTO.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                if (this.UpdatedDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateDTO.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.WaitingForPrpEmail != null)
                {
                    hashCode = (hashCode * 59) + this.WaitingForPrpEmail.GetHashCode();
                }
                if (this.ProviderEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderEmail.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DueHrs.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.DueDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.DueDateDTO.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.Subscriber != null)
                {
                    hashCode = (hashCode * 59) + this.Subscriber.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradeId.GetHashCode();
                if (this.WorkOrder != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrder.GetHashCode();
                }
                if (this.Proposals != null)
                {
                    hashCode = (hashCode * 59) + this.Proposals.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.BatchRfpNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BatchRfpNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
