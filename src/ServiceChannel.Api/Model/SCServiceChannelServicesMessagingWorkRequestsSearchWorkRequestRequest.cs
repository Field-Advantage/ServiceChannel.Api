/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Object to perform search for work requests
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.WorkRequests.SearchWorkRequestRequest")]
    public partial class SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest : IEquatable<SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest>, IValidatableObject
    {
        /// <summary>
        /// Sort Field
        /// </summary>
        /// <value>Sort Field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortFieldEnum
        {
            /// <summary>
            /// Enum Id for value: Id
            /// </summary>
            [EnumMember(Value = "Id")]
            Id = 1,

            /// <summary>
            /// Enum CallDate for value: CallDate
            /// </summary>
            [EnumMember(Value = "CallDate")]
            CallDate = 2,

            /// <summary>
            /// Enum ScheduledDate for value: ScheduledDate
            /// </summary>
            [EnumMember(Value = "ScheduledDate")]
            ScheduledDate = 3,

            /// <summary>
            /// Enum ClosedDate for value: ClosedDate
            /// </summary>
            [EnumMember(Value = "ClosedDate")]
            ClosedDate = 4

        }


        /// <summary>
        /// Sort Field
        /// </summary>
        /// <value>Sort Field</value>
        [DataMember(Name = "SortField", EmitDefaultValue = false)]
        public SortFieldEnum? SortField { get; set; }
        /// <summary>
        /// Sort direction
        /// </summary>
        /// <value>Sort direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Asc for value: Asc
            /// </summary>
            [EnumMember(Value = "Asc")]
            Asc = 1,

            /// <summary>
            /// Enum Desc for value: Desc
            /// </summary>
            [EnumMember(Value = "Desc")]
            Desc = 2

        }


        /// <summary>
        /// Sort direction
        /// </summary>
        /// <value>Sort direction</value>
        [DataMember(Name = "SortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest" /> class.
        /// </summary>
        /// <param name="ids">Ids.</param>
        /// <param name="subscriberIds">Subscriber Ids.</param>
        /// <param name="providerIds">Provider Ids.</param>
        /// <param name="locationIds">Location Ids.</param>
        /// <param name="categoryIds">Category Ids.</param>
        /// <param name="statusIds">Status Ids.</param>
        /// <param name="extendedStatusIds">Extended Status Ids.</param>
        /// <param name="priorityIds">Priority Ids.</param>
        /// <param name="tradeIds">Trade Ids.</param>
        /// <param name="closedReasonIds">Closed Reason Ids.</param>
        /// <param name="eventIds">Event Ids.</param>
        /// <param name="workOrderIds">Work Order Ids.</param>
        /// <param name="assetIds">Asset Ids.</param>
        /// <param name="callDateFrom">Minimum Call Date.</param>
        /// <param name="callDateTo">Maximum Call Date.</param>
        /// <param name="scheduledDateFrom">Minimum Scheduled Date.</param>
        /// <param name="scheduledDateTo">Maximum Scheduled Date.</param>
        /// <param name="closedDateFrom">Minimum Closed Date.</param>
        /// <param name="closedDateTo">Maximum Closed Date.</param>
        /// <param name="sortField">Sort Field.</param>
        /// <param name="sortDirection">Sort direction.</param>
        /// <param name="page">Page. Zero based.</param>
        /// <param name="pageSize">Page Size.</param>
        public SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest(List<int> ids = default(List<int>), List<int> subscriberIds = default(List<int>), List<int> providerIds = default(List<int>), List<int> locationIds = default(List<int>), List<int> categoryIds = default(List<int>), List<int> statusIds = default(List<int>), List<int> extendedStatusIds = default(List<int>), List<int> priorityIds = default(List<int>), List<int> tradeIds = default(List<int>), List<int> closedReasonIds = default(List<int>), List<string> eventIds = default(List<string>), List<int> workOrderIds = default(List<int>), List<int> assetIds = default(List<int>), string callDateFrom = default(string), string callDateTo = default(string), string scheduledDateFrom = default(string), string scheduledDateTo = default(string), string closedDateFrom = default(string), string closedDateTo = default(string), SortFieldEnum? sortField = default(SortFieldEnum?), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), int page = default(int), int pageSize = default(int))
        {
            this.Ids = ids;
            this.SubscriberIds = subscriberIds;
            this.ProviderIds = providerIds;
            this.LocationIds = locationIds;
            this.CategoryIds = categoryIds;
            this.StatusIds = statusIds;
            this.ExtendedStatusIds = extendedStatusIds;
            this.PriorityIds = priorityIds;
            this.TradeIds = tradeIds;
            this.ClosedReasonIds = closedReasonIds;
            this.EventIds = eventIds;
            this.WorkOrderIds = workOrderIds;
            this.AssetIds = assetIds;
            this.CallDateFrom = callDateFrom;
            this.CallDateTo = callDateTo;
            this.ScheduledDateFrom = scheduledDateFrom;
            this.ScheduledDateTo = scheduledDateTo;
            this.ClosedDateFrom = closedDateFrom;
            this.ClosedDateTo = closedDateTo;
            this.SortField = sortField;
            this.SortDirection = sortDirection;
            this.Page = page;
            this.PageSize = pageSize;
        }

        /// <summary>
        /// Ids
        /// </summary>
        /// <value>Ids</value>
        [DataMember(Name = "Ids", EmitDefaultValue = false)]
        public List<int> Ids { get; set; }

        /// <summary>
        /// Subscriber Ids
        /// </summary>
        /// <value>Subscriber Ids</value>
        [DataMember(Name = "SubscriberIds", EmitDefaultValue = false)]
        public List<int> SubscriberIds { get; set; }

        /// <summary>
        /// Provider Ids
        /// </summary>
        /// <value>Provider Ids</value>
        [DataMember(Name = "ProviderIds", EmitDefaultValue = false)]
        public List<int> ProviderIds { get; set; }

        /// <summary>
        /// Location Ids
        /// </summary>
        /// <value>Location Ids</value>
        [DataMember(Name = "LocationIds", EmitDefaultValue = false)]
        public List<int> LocationIds { get; set; }

        /// <summary>
        /// Category Ids
        /// </summary>
        /// <value>Category Ids</value>
        [DataMember(Name = "CategoryIds", EmitDefaultValue = false)]
        public List<int> CategoryIds { get; set; }

        /// <summary>
        /// Status Ids
        /// </summary>
        /// <value>Status Ids</value>
        [DataMember(Name = "StatusIds", EmitDefaultValue = false)]
        public List<int> StatusIds { get; set; }

        /// <summary>
        /// Extended Status Ids
        /// </summary>
        /// <value>Extended Status Ids</value>
        [DataMember(Name = "ExtendedStatusIds", EmitDefaultValue = false)]
        public List<int> ExtendedStatusIds { get; set; }

        /// <summary>
        /// Priority Ids
        /// </summary>
        /// <value>Priority Ids</value>
        [DataMember(Name = "PriorityIds", EmitDefaultValue = false)]
        public List<int> PriorityIds { get; set; }

        /// <summary>
        /// Trade Ids
        /// </summary>
        /// <value>Trade Ids</value>
        [DataMember(Name = "TradeIds", EmitDefaultValue = false)]
        public List<int> TradeIds { get; set; }

        /// <summary>
        /// Closed Reason Ids
        /// </summary>
        /// <value>Closed Reason Ids</value>
        [DataMember(Name = "ClosedReasonIds", EmitDefaultValue = false)]
        public List<int> ClosedReasonIds { get; set; }

        /// <summary>
        /// Event Ids
        /// </summary>
        /// <value>Event Ids</value>
        [DataMember(Name = "EventIds", EmitDefaultValue = false)]
        public List<string> EventIds { get; set; }

        /// <summary>
        /// Work Order Ids
        /// </summary>
        /// <value>Work Order Ids</value>
        [DataMember(Name = "WorkOrderIds", EmitDefaultValue = false)]
        public List<int> WorkOrderIds { get; set; }

        /// <summary>
        /// Asset Ids
        /// </summary>
        /// <value>Asset Ids</value>
        [DataMember(Name = "AssetIds", EmitDefaultValue = false)]
        public List<int> AssetIds { get; set; }

        /// <summary>
        /// Minimum Call Date
        /// </summary>
        /// <value>Minimum Call Date</value>
        [DataMember(Name = "CallDateFrom", EmitDefaultValue = false)]
        public string CallDateFrom { get; set; }

        /// <summary>
        /// Maximum Call Date
        /// </summary>
        /// <value>Maximum Call Date</value>
        [DataMember(Name = "CallDateTo", EmitDefaultValue = false)]
        public string CallDateTo { get; set; }

        /// <summary>
        /// Minimum Scheduled Date
        /// </summary>
        /// <value>Minimum Scheduled Date</value>
        [DataMember(Name = "ScheduledDateFrom", EmitDefaultValue = false)]
        public string ScheduledDateFrom { get; set; }

        /// <summary>
        /// Maximum Scheduled Date
        /// </summary>
        /// <value>Maximum Scheduled Date</value>
        [DataMember(Name = "ScheduledDateTo", EmitDefaultValue = false)]
        public string ScheduledDateTo { get; set; }

        /// <summary>
        /// Minimum Closed Date
        /// </summary>
        /// <value>Minimum Closed Date</value>
        [DataMember(Name = "ClosedDateFrom", EmitDefaultValue = false)]
        public string ClosedDateFrom { get; set; }

        /// <summary>
        /// Maximum Closed Date
        /// </summary>
        /// <value>Maximum Closed Date</value>
        [DataMember(Name = "ClosedDateTo", EmitDefaultValue = false)]
        public string ClosedDateTo { get; set; }

        /// <summary>
        /// Page. Zero based
        /// </summary>
        /// <value>Page. Zero based</value>
        [DataMember(Name = "Page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Page Size
        /// </summary>
        /// <value>Page Size</value>
        [DataMember(Name = "PageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  SubscriberIds: ").Append(SubscriberIds).Append("\n");
            sb.Append("  ProviderIds: ").Append(ProviderIds).Append("\n");
            sb.Append("  LocationIds: ").Append(LocationIds).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  StatusIds: ").Append(StatusIds).Append("\n");
            sb.Append("  ExtendedStatusIds: ").Append(ExtendedStatusIds).Append("\n");
            sb.Append("  PriorityIds: ").Append(PriorityIds).Append("\n");
            sb.Append("  TradeIds: ").Append(TradeIds).Append("\n");
            sb.Append("  ClosedReasonIds: ").Append(ClosedReasonIds).Append("\n");
            sb.Append("  EventIds: ").Append(EventIds).Append("\n");
            sb.Append("  WorkOrderIds: ").Append(WorkOrderIds).Append("\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  CallDateFrom: ").Append(CallDateFrom).Append("\n");
            sb.Append("  CallDateTo: ").Append(CallDateTo).Append("\n");
            sb.Append("  ScheduledDateFrom: ").Append(ScheduledDateFrom).Append("\n");
            sb.Append("  ScheduledDateTo: ").Append(ScheduledDateTo).Append("\n");
            sb.Append("  ClosedDateFrom: ").Append(ClosedDateFrom).Append("\n");
            sb.Append("  ClosedDateTo: ").Append(ClosedDateTo).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.SubscriberIds == input.SubscriberIds ||
                    this.SubscriberIds != null &&
                    input.SubscriberIds != null &&
                    this.SubscriberIds.SequenceEqual(input.SubscriberIds)
                ) && 
                (
                    this.ProviderIds == input.ProviderIds ||
                    this.ProviderIds != null &&
                    input.ProviderIds != null &&
                    this.ProviderIds.SequenceEqual(input.ProviderIds)
                ) && 
                (
                    this.LocationIds == input.LocationIds ||
                    this.LocationIds != null &&
                    input.LocationIds != null &&
                    this.LocationIds.SequenceEqual(input.LocationIds)
                ) && 
                (
                    this.CategoryIds == input.CategoryIds ||
                    this.CategoryIds != null &&
                    input.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(input.CategoryIds)
                ) && 
                (
                    this.StatusIds == input.StatusIds ||
                    this.StatusIds != null &&
                    input.StatusIds != null &&
                    this.StatusIds.SequenceEqual(input.StatusIds)
                ) && 
                (
                    this.ExtendedStatusIds == input.ExtendedStatusIds ||
                    this.ExtendedStatusIds != null &&
                    input.ExtendedStatusIds != null &&
                    this.ExtendedStatusIds.SequenceEqual(input.ExtendedStatusIds)
                ) && 
                (
                    this.PriorityIds == input.PriorityIds ||
                    this.PriorityIds != null &&
                    input.PriorityIds != null &&
                    this.PriorityIds.SequenceEqual(input.PriorityIds)
                ) && 
                (
                    this.TradeIds == input.TradeIds ||
                    this.TradeIds != null &&
                    input.TradeIds != null &&
                    this.TradeIds.SequenceEqual(input.TradeIds)
                ) && 
                (
                    this.ClosedReasonIds == input.ClosedReasonIds ||
                    this.ClosedReasonIds != null &&
                    input.ClosedReasonIds != null &&
                    this.ClosedReasonIds.SequenceEqual(input.ClosedReasonIds)
                ) && 
                (
                    this.EventIds == input.EventIds ||
                    this.EventIds != null &&
                    input.EventIds != null &&
                    this.EventIds.SequenceEqual(input.EventIds)
                ) && 
                (
                    this.WorkOrderIds == input.WorkOrderIds ||
                    this.WorkOrderIds != null &&
                    input.WorkOrderIds != null &&
                    this.WorkOrderIds.SequenceEqual(input.WorkOrderIds)
                ) && 
                (
                    this.AssetIds == input.AssetIds ||
                    this.AssetIds != null &&
                    input.AssetIds != null &&
                    this.AssetIds.SequenceEqual(input.AssetIds)
                ) && 
                (
                    this.CallDateFrom == input.CallDateFrom ||
                    (this.CallDateFrom != null &&
                    this.CallDateFrom.Equals(input.CallDateFrom))
                ) && 
                (
                    this.CallDateTo == input.CallDateTo ||
                    (this.CallDateTo != null &&
                    this.CallDateTo.Equals(input.CallDateTo))
                ) && 
                (
                    this.ScheduledDateFrom == input.ScheduledDateFrom ||
                    (this.ScheduledDateFrom != null &&
                    this.ScheduledDateFrom.Equals(input.ScheduledDateFrom))
                ) && 
                (
                    this.ScheduledDateTo == input.ScheduledDateTo ||
                    (this.ScheduledDateTo != null &&
                    this.ScheduledDateTo.Equals(input.ScheduledDateTo))
                ) && 
                (
                    this.ClosedDateFrom == input.ClosedDateFrom ||
                    (this.ClosedDateFrom != null &&
                    this.ClosedDateFrom.Equals(input.ClosedDateFrom))
                ) && 
                (
                    this.ClosedDateTo == input.ClosedDateTo ||
                    (this.ClosedDateTo != null &&
                    this.ClosedDateTo.Equals(input.ClosedDateTo))
                ) && 
                (
                    this.SortField == input.SortField ||
                    this.SortField.Equals(input.SortField)
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                if (this.SubscriberIds != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriberIds.GetHashCode();
                }
                if (this.ProviderIds != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderIds.GetHashCode();
                }
                if (this.LocationIds != null)
                {
                    hashCode = (hashCode * 59) + this.LocationIds.GetHashCode();
                }
                if (this.CategoryIds != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryIds.GetHashCode();
                }
                if (this.StatusIds != null)
                {
                    hashCode = (hashCode * 59) + this.StatusIds.GetHashCode();
                }
                if (this.ExtendedStatusIds != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedStatusIds.GetHashCode();
                }
                if (this.PriorityIds != null)
                {
                    hashCode = (hashCode * 59) + this.PriorityIds.GetHashCode();
                }
                if (this.TradeIds != null)
                {
                    hashCode = (hashCode * 59) + this.TradeIds.GetHashCode();
                }
                if (this.ClosedReasonIds != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedReasonIds.GetHashCode();
                }
                if (this.EventIds != null)
                {
                    hashCode = (hashCode * 59) + this.EventIds.GetHashCode();
                }
                if (this.WorkOrderIds != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderIds.GetHashCode();
                }
                if (this.AssetIds != null)
                {
                    hashCode = (hashCode * 59) + this.AssetIds.GetHashCode();
                }
                if (this.CallDateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.CallDateFrom.GetHashCode();
                }
                if (this.CallDateTo != null)
                {
                    hashCode = (hashCode * 59) + this.CallDateTo.GetHashCode();
                }
                if (this.ScheduledDateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDateFrom.GetHashCode();
                }
                if (this.ScheduledDateTo != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDateTo.GetHashCode();
                }
                if (this.ClosedDateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedDateFrom.GetHashCode();
                }
                if (this.ClosedDateTo != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedDateTo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortField.GetHashCode();
                hashCode = (hashCode * 59) + this.SortDirection.GetHashCode();
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
