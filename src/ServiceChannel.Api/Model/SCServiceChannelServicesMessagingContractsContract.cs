/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Contract object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Contracts.Contract")]
    public partial class SCServiceChannelServicesMessagingContractsContract : IEquatable<SCServiceChannelServicesMessagingContractsContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingContractsContract" /> class.
        /// </summary>
        /// <param name="id">Numeric identifier of the provider’s assignment..</param>
        /// <param name="rank">Provider’s rank for the trade and location combo in the subscriber’s system..</param>
        /// <param name="contractor">contractor.</param>
        /// <param name="_client">_client.</param>
        /// <param name="trade">trade.</param>
        /// <param name="location">location.</param>
        /// <param name="category">category.</param>
        public SCServiceChannelServicesMessagingContractsContract(int id = default(int), int rank = default(int), SCServiceChannelServicesMessagingProvidersProvider contractor = default(SCServiceChannelServicesMessagingProvidersProvider), SCServiceChannelServicesMessagingSubscribersSubscriber _client = default(SCServiceChannelServicesMessagingSubscribersSubscriber), SCServiceChannelServicesMessagingTradeTrade trade = default(SCServiceChannelServicesMessagingTradeTrade), SCServiceChannelServicesMessagingLocationLocation location = default(SCServiceChannelServicesMessagingLocationLocation), SCServiceChannelApiModelEntitiesCategory category = default(SCServiceChannelApiModelEntitiesCategory))
        {
            this.Id = id;
            this.Rank = rank;
            this.Contractor = contractor;
            this._Client = _client;
            this.Trade = trade;
            this.Location = location;
            this.Category = category;
        }

        /// <summary>
        /// Numeric identifier of the provider’s assignment.
        /// </summary>
        /// <value>Numeric identifier of the provider’s assignment.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Provider’s rank for the trade and location combo in the subscriber’s system.
        /// </summary>
        /// <value>Provider’s rank for the trade and location combo in the subscriber’s system.</value>
        [DataMember(Name = "Rank", EmitDefaultValue = false)]
        public int Rank { get; set; }

        /// <summary>
        /// Gets or Sets Contractor
        /// </summary>
        [DataMember(Name = "Contractor", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingProvidersProvider Contractor { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name = "Client", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingSubscribersSubscriber _Client { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingTradeTrade Trade { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "Location", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingLocationLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public SCServiceChannelApiModelEntitiesCategory Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingContractsContract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Contractor: ").Append(Contractor).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingContractsContract);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingContractsContract instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingContractsContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingContractsContract input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Rank == input.Rank ||
                    this.Rank.Equals(input.Rank)
                ) && 
                (
                    this.Contractor == input.Contractor ||
                    (this.Contractor != null &&
                    this.Contractor.Equals(input.Contractor))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Rank.GetHashCode();
                if (this.Contractor != null)
                {
                    hashCode = (hashCode * 59) + this.Contractor.GetHashCode();
                }
                if (this._Client != null)
                {
                    hashCode = (hashCode * 59) + this._Client.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
