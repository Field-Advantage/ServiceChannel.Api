/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelApiModelProposalsMlpRecommendation
    /// </summary>
    [DataContract(Name = "ServiceChannel.Api.Model.Proposals.MlpRecommendation")]
    public partial class SCServiceChannelApiModelProposalsMlpRecommendation : IEquatable<SCServiceChannelApiModelProposalsMlpRecommendation>, IValidatableObject
    {
        /// <summary>
        /// Defines WoType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WoTypeEnum
        {
            /// <summary>
            /// Enum Origin for value: Origin
            /// </summary>
            [EnumMember(Value = "Origin")]
            Origin = 1,

            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 2,

            /// <summary>
            /// Enum Existing for value: Existing
            /// </summary>
            [EnumMember(Value = "Existing")]
            Existing = 3

        }


        /// <summary>
        /// Gets or Sets WoType
        /// </summary>
        [DataMember(Name = "WoType", EmitDefaultValue = false)]
        public WoTypeEnum? WoType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelApiModelProposalsMlpRecommendation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="proposalId">proposalId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="status">status.</param>
        /// <param name="woType">woType.</param>
        /// <param name="originalTrackingNumber">originalTrackingNumber.</param>
        /// <param name="selectedTrackingNumber">selectedTrackingNumber.</param>
        /// <param name="generatedTrackingNumber">generatedTrackingNumber.</param>
        /// <param name="poNumber">poNumber.</param>
        /// <param name="category">category.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="approvalCode">approvalCode.</param>
        /// <param name="priority">priority.</param>
        /// <param name="rejectCodeId">rejectCodeId.</param>
        /// <param name="approvalReason">approvalReason.</param>
        /// <param name="emailsToNotify">emailsToNotify.</param>
        /// <param name="applied">applied (default to false).</param>
        /// <param name="emailMyself">emailMyself (default to false).</param>
        /// <param name="myEmail">myEmail.</param>
        /// <param name="notSavedRecommendation">notSavedRecommendation (default to false).</param>
        /// <param name="workOrderLabel">workOrderLabel.</param>
        /// <param name="comment">comment.</param>
        public SCServiceChannelApiModelProposalsMlpRecommendation(int id = default(int), int proposalId = default(int), int userId = default(int), string status = default(string), WoTypeEnum? woType = default(WoTypeEnum?), int originalTrackingNumber = default(int), int selectedTrackingNumber = default(int), int generatedTrackingNumber = default(int), string poNumber = default(string), string category = default(string), int categoryId = default(int), string approvalCode = default(string), string priority = default(string), int rejectCodeId = default(int), string approvalReason = default(string), string emailsToNotify = default(string), bool applied = false, bool emailMyself = false, string myEmail = default(string), bool notSavedRecommendation = false, SCServiceChannelApiModelLabel workOrderLabel = default(SCServiceChannelApiModelLabel), string comment = default(string))
        {
            this.Id = id;
            this.ProposalId = proposalId;
            this.UserId = userId;
            this.Status = status;
            this.WoType = woType;
            this.OriginalTrackingNumber = originalTrackingNumber;
            this.SelectedTrackingNumber = selectedTrackingNumber;
            this.GeneratedTrackingNumber = generatedTrackingNumber;
            this.PoNumber = poNumber;
            this.Category = category;
            this.CategoryId = categoryId;
            this.ApprovalCode = approvalCode;
            this.Priority = priority;
            this.RejectCodeId = rejectCodeId;
            this.ApprovalReason = approvalReason;
            this.EmailsToNotify = emailsToNotify;
            this.Applied = applied;
            this.EmailMyself = emailMyself;
            this.MyEmail = myEmail;
            this.NotSavedRecommendation = notSavedRecommendation;
            this.WorkOrderLabel = workOrderLabel;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name = "ProposalId", EmitDefaultValue = false)]
        public int ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "UserId", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTrackingNumber
        /// </summary>
        [DataMember(Name = "OriginalTrackingNumber", EmitDefaultValue = false)]
        public int OriginalTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets SelectedTrackingNumber
        /// </summary>
        [DataMember(Name = "SelectedTrackingNumber", EmitDefaultValue = false)]
        public int SelectedTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets GeneratedTrackingNumber
        /// </summary>
        [DataMember(Name = "GeneratedTrackingNumber", EmitDefaultValue = false)]
        public int GeneratedTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets PoNumber
        /// </summary>
        [DataMember(Name = "PoNumber", EmitDefaultValue = false)]
        public string PoNumber { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "CategoryId", EmitDefaultValue = false)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCode
        /// </summary>
        [DataMember(Name = "ApprovalCode", EmitDefaultValue = false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets RejectCodeId
        /// </summary>
        [DataMember(Name = "RejectCodeId", EmitDefaultValue = false)]
        public int RejectCodeId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalReason
        /// </summary>
        [DataMember(Name = "ApprovalReason", EmitDefaultValue = false)]
        public string ApprovalReason { get; set; }

        /// <summary>
        /// Gets or Sets EmailsToNotify
        /// </summary>
        [DataMember(Name = "EmailsToNotify", EmitDefaultValue = false)]
        public string EmailsToNotify { get; set; }

        /// <summary>
        /// Gets or Sets Applied
        /// </summary>
        [DataMember(Name = "Applied", EmitDefaultValue = true)]
        public bool Applied { get; set; }

        /// <summary>
        /// Gets or Sets EmailMyself
        /// </summary>
        [DataMember(Name = "EmailMyself", EmitDefaultValue = true)]
        public bool EmailMyself { get; set; }

        /// <summary>
        /// Gets or Sets MyEmail
        /// </summary>
        [DataMember(Name = "MyEmail", EmitDefaultValue = false)]
        public string MyEmail { get; set; }

        /// <summary>
        /// Gets or Sets NotSavedRecommendation
        /// </summary>
        [DataMember(Name = "NotSavedRecommendation", EmitDefaultValue = true)]
        public bool NotSavedRecommendation { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderLabel
        /// </summary>
        [DataMember(Name = "WorkOrderLabel", EmitDefaultValue = false)]
        public SCServiceChannelApiModelLabel WorkOrderLabel { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "Comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelApiModelProposalsMlpRecommendation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WoType: ").Append(WoType).Append("\n");
            sb.Append("  OriginalTrackingNumber: ").Append(OriginalTrackingNumber).Append("\n");
            sb.Append("  SelectedTrackingNumber: ").Append(SelectedTrackingNumber).Append("\n");
            sb.Append("  GeneratedTrackingNumber: ").Append(GeneratedTrackingNumber).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  RejectCodeId: ").Append(RejectCodeId).Append("\n");
            sb.Append("  ApprovalReason: ").Append(ApprovalReason).Append("\n");
            sb.Append("  EmailsToNotify: ").Append(EmailsToNotify).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("  EmailMyself: ").Append(EmailMyself).Append("\n");
            sb.Append("  MyEmail: ").Append(MyEmail).Append("\n");
            sb.Append("  NotSavedRecommendation: ").Append(NotSavedRecommendation).Append("\n");
            sb.Append("  WorkOrderLabel: ").Append(WorkOrderLabel).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelApiModelProposalsMlpRecommendation);
        }

        /// <summary>
        /// Returns true if SCServiceChannelApiModelProposalsMlpRecommendation instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelApiModelProposalsMlpRecommendation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelApiModelProposalsMlpRecommendation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ProposalId == input.ProposalId ||
                    this.ProposalId.Equals(input.ProposalId)
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.WoType == input.WoType ||
                    this.WoType.Equals(input.WoType)
                ) && 
                (
                    this.OriginalTrackingNumber == input.OriginalTrackingNumber ||
                    this.OriginalTrackingNumber.Equals(input.OriginalTrackingNumber)
                ) && 
                (
                    this.SelectedTrackingNumber == input.SelectedTrackingNumber ||
                    this.SelectedTrackingNumber.Equals(input.SelectedTrackingNumber)
                ) && 
                (
                    this.GeneratedTrackingNumber == input.GeneratedTrackingNumber ||
                    this.GeneratedTrackingNumber.Equals(input.GeneratedTrackingNumber)
                ) && 
                (
                    this.PoNumber == input.PoNumber ||
                    (this.PoNumber != null &&
                    this.PoNumber.Equals(input.PoNumber))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    this.CategoryId.Equals(input.CategoryId)
                ) && 
                (
                    this.ApprovalCode == input.ApprovalCode ||
                    (this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(input.ApprovalCode))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.RejectCodeId == input.RejectCodeId ||
                    this.RejectCodeId.Equals(input.RejectCodeId)
                ) && 
                (
                    this.ApprovalReason == input.ApprovalReason ||
                    (this.ApprovalReason != null &&
                    this.ApprovalReason.Equals(input.ApprovalReason))
                ) && 
                (
                    this.EmailsToNotify == input.EmailsToNotify ||
                    (this.EmailsToNotify != null &&
                    this.EmailsToNotify.Equals(input.EmailsToNotify))
                ) && 
                (
                    this.Applied == input.Applied ||
                    this.Applied.Equals(input.Applied)
                ) && 
                (
                    this.EmailMyself == input.EmailMyself ||
                    this.EmailMyself.Equals(input.EmailMyself)
                ) && 
                (
                    this.MyEmail == input.MyEmail ||
                    (this.MyEmail != null &&
                    this.MyEmail.Equals(input.MyEmail))
                ) && 
                (
                    this.NotSavedRecommendation == input.NotSavedRecommendation ||
                    this.NotSavedRecommendation.Equals(input.NotSavedRecommendation)
                ) && 
                (
                    this.WorkOrderLabel == input.WorkOrderLabel ||
                    (this.WorkOrderLabel != null &&
                    this.WorkOrderLabel.Equals(input.WorkOrderLabel))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ProposalId.GetHashCode();
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WoType.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalTrackingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.SelectedTrackingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.GeneratedTrackingNumber.GetHashCode();
                if (this.PoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PoNumber.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                if (this.ApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCode.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RejectCodeId.GetHashCode();
                if (this.ApprovalReason != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalReason.GetHashCode();
                }
                if (this.EmailsToNotify != null)
                {
                    hashCode = (hashCode * 59) + this.EmailsToNotify.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Applied.GetHashCode();
                hashCode = (hashCode * 59) + this.EmailMyself.GetHashCode();
                if (this.MyEmail != null)
                {
                    hashCode = (hashCode * 59) + this.MyEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotSavedRecommendation.GetHashCode();
                if (this.WorkOrderLabel != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderLabel.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
