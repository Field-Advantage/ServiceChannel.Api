/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingProposalsProposalCategoryRow
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Proposals.ProposalCategoryRow")]
    public partial class SCServiceChannelServicesMessagingProposalsProposalCategoryRow : IEquatable<SCServiceChannelServicesMessagingProposalsProposalCategoryRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsProposalCategoryRow" /> class.
        /// </summary>
        /// <param name="required">required (default to false).</param>
        /// <param name="hideDetails">hideDetails (default to false).</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="serviceType">serviceType.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="isActive">isActive (default to false).</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="quantity1">quantity1.</param>
        /// <param name="quantity2">quantity2.</param>
        /// <param name="unitCost">unitCost.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="extendedCost">extendedCost.</param>
        /// <param name="craft">craft.</param>
        /// <param name="repairCategory">repairCategory.</param>
        /// <param name="repairType">repairType.</param>
        /// <param name="materialThickness">materialThickness.</param>
        /// <param name="markup">markup.</param>
        /// <param name="priceList">priceList.</param>
        /// <param name="partNumber">partNumber.</param>
        /// <param name="partName">partName.</param>
        /// <param name="vAT">vAT.</param>
        /// <param name="feesType">feesType.</param>
        public SCServiceChannelServicesMessagingProposalsProposalCategoryRow(bool required = false, bool hideDetails = false, double totalCost = default(double), string serviceType = default(string), string name = default(string), string description = default(string), bool isActive = false, int sortOrder = default(int), double quantity1 = default(double), int quantity2 = default(int), double unitCost = default(double), string unitOfMeasure = default(string), double extendedCost = default(double), string craft = default(string), string repairCategory = default(string), string repairType = default(string), string materialThickness = default(string), double markup = default(double), string priceList = default(string), string partNumber = default(string), string partName = default(string), string vAT = default(string), string feesType = default(string))
        {
            this.Required = required;
            this.HideDetails = hideDetails;
            this.TotalCost = totalCost;
            this.ServiceType = serviceType;
            this.Name = name;
            this.Description = description;
            this.IsActive = isActive;
            this.SortOrder = sortOrder;
            this.Quantity1 = quantity1;
            this.Quantity2 = quantity2;
            this.UnitCost = unitCost;
            this.UnitOfMeasure = unitOfMeasure;
            this.ExtendedCost = extendedCost;
            this.Craft = craft;
            this.RepairCategory = repairCategory;
            this.RepairType = repairType;
            this.MaterialThickness = materialThickness;
            this.Markup = markup;
            this.PriceList = priceList;
            this.PartNumber = partNumber;
            this.PartName = partName;
            this.VAT = vAT;
            this.FeesType = feesType;
        }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "Required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets HideDetails
        /// </summary>
        [DataMember(Name = "HideDetails", EmitDefaultValue = true)]
        public bool HideDetails { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name = "TotalCost", EmitDefaultValue = false)]
        public double TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name = "ServiceType", EmitDefaultValue = false)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "IsActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "SortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets Quantity1
        /// </summary>
        [DataMember(Name = "Quantity1", EmitDefaultValue = false)]
        public double Quantity1 { get; set; }

        /// <summary>
        /// Gets or Sets Quantity2
        /// </summary>
        [DataMember(Name = "Quantity2", EmitDefaultValue = false)]
        public int Quantity2 { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name = "UnitCost", EmitDefaultValue = false)]
        public double UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name = "UnitOfMeasure", EmitDefaultValue = false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedCost
        /// </summary>
        [DataMember(Name = "ExtendedCost", EmitDefaultValue = false)]
        public double ExtendedCost { get; set; }

        /// <summary>
        /// Gets or Sets Craft
        /// </summary>
        [DataMember(Name = "Craft", EmitDefaultValue = false)]
        public string Craft { get; set; }

        /// <summary>
        /// Gets or Sets RepairCategory
        /// </summary>
        [DataMember(Name = "RepairCategory", EmitDefaultValue = false)]
        public string RepairCategory { get; set; }

        /// <summary>
        /// Gets or Sets RepairType
        /// </summary>
        [DataMember(Name = "RepairType", EmitDefaultValue = false)]
        public string RepairType { get; set; }

        /// <summary>
        /// Gets or Sets MaterialThickness
        /// </summary>
        [DataMember(Name = "MaterialThickness", EmitDefaultValue = false)]
        public string MaterialThickness { get; set; }

        /// <summary>
        /// Gets or Sets Markup
        /// </summary>
        [DataMember(Name = "Markup", EmitDefaultValue = false)]
        public double Markup { get; set; }

        /// <summary>
        /// Gets or Sets PriceList
        /// </summary>
        [DataMember(Name = "PriceList", EmitDefaultValue = false)]
        public string PriceList { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name = "PartNumber", EmitDefaultValue = false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets PartName
        /// </summary>
        [DataMember(Name = "PartName", EmitDefaultValue = false)]
        public string PartName { get; set; }

        /// <summary>
        /// Gets or Sets VAT
        /// </summary>
        [DataMember(Name = "VAT", EmitDefaultValue = false)]
        public string VAT { get; set; }

        /// <summary>
        /// Gets or Sets FeesType
        /// </summary>
        [DataMember(Name = "FeesType", EmitDefaultValue = false)]
        public string FeesType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsProposalCategoryRow {\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  HideDetails: ").Append(HideDetails).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Quantity1: ").Append(Quantity1).Append("\n");
            sb.Append("  Quantity2: ").Append(Quantity2).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  ExtendedCost: ").Append(ExtendedCost).Append("\n");
            sb.Append("  Craft: ").Append(Craft).Append("\n");
            sb.Append("  RepairCategory: ").Append(RepairCategory).Append("\n");
            sb.Append("  RepairType: ").Append(RepairType).Append("\n");
            sb.Append("  MaterialThickness: ").Append(MaterialThickness).Append("\n");
            sb.Append("  Markup: ").Append(Markup).Append("\n");
            sb.Append("  PriceList: ").Append(PriceList).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  PartName: ").Append(PartName).Append("\n");
            sb.Append("  VAT: ").Append(VAT).Append("\n");
            sb.Append("  FeesType: ").Append(FeesType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingProposalsProposalCategoryRow);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsProposalCategoryRow instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingProposalsProposalCategoryRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsProposalCategoryRow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.HideDetails == input.HideDetails ||
                    this.HideDetails.Equals(input.HideDetails)
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    this.TotalCost.Equals(input.TotalCost)
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                ) && 
                (
                    this.Quantity1 == input.Quantity1 ||
                    this.Quantity1.Equals(input.Quantity1)
                ) && 
                (
                    this.Quantity2 == input.Quantity2 ||
                    this.Quantity2.Equals(input.Quantity2)
                ) && 
                (
                    this.UnitCost == input.UnitCost ||
                    this.UnitCost.Equals(input.UnitCost)
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.ExtendedCost == input.ExtendedCost ||
                    this.ExtendedCost.Equals(input.ExtendedCost)
                ) && 
                (
                    this.Craft == input.Craft ||
                    (this.Craft != null &&
                    this.Craft.Equals(input.Craft))
                ) && 
                (
                    this.RepairCategory == input.RepairCategory ||
                    (this.RepairCategory != null &&
                    this.RepairCategory.Equals(input.RepairCategory))
                ) && 
                (
                    this.RepairType == input.RepairType ||
                    (this.RepairType != null &&
                    this.RepairType.Equals(input.RepairType))
                ) && 
                (
                    this.MaterialThickness == input.MaterialThickness ||
                    (this.MaterialThickness != null &&
                    this.MaterialThickness.Equals(input.MaterialThickness))
                ) && 
                (
                    this.Markup == input.Markup ||
                    this.Markup.Equals(input.Markup)
                ) && 
                (
                    this.PriceList == input.PriceList ||
                    (this.PriceList != null &&
                    this.PriceList.Equals(input.PriceList))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.PartName == input.PartName ||
                    (this.PartName != null &&
                    this.PartName.Equals(input.PartName))
                ) && 
                (
                    this.VAT == input.VAT ||
                    (this.VAT != null &&
                    this.VAT.Equals(input.VAT))
                ) && 
                (
                    this.FeesType == input.FeesType ||
                    (this.FeesType != null &&
                    this.FeesType.Equals(input.FeesType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                hashCode = (hashCode * 59) + this.HideDetails.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCost.GetHashCode();
                if (this.ServiceType != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceType.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity1.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity2.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitCost.GetHashCode();
                if (this.UnitOfMeasure != null)
                {
                    hashCode = (hashCode * 59) + this.UnitOfMeasure.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExtendedCost.GetHashCode();
                if (this.Craft != null)
                {
                    hashCode = (hashCode * 59) + this.Craft.GetHashCode();
                }
                if (this.RepairCategory != null)
                {
                    hashCode = (hashCode * 59) + this.RepairCategory.GetHashCode();
                }
                if (this.RepairType != null)
                {
                    hashCode = (hashCode * 59) + this.RepairType.GetHashCode();
                }
                if (this.MaterialThickness != null)
                {
                    hashCode = (hashCode * 59) + this.MaterialThickness.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Markup.GetHashCode();
                if (this.PriceList != null)
                {
                    hashCode = (hashCode * 59) + this.PriceList.GetHashCode();
                }
                if (this.PartNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PartNumber.GetHashCode();
                }
                if (this.PartName != null)
                {
                    hashCode = (hashCode * 59) + this.PartName.GetHashCode();
                }
                if (this.VAT != null)
                {
                    hashCode = (hashCode * 59) + this.VAT.GetHashCode();
                }
                if (this.FeesType != null)
                {
                    hashCode = (hashCode * 59) + this.FeesType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
