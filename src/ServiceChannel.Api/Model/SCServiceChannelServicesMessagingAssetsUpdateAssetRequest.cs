/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingAssetsUpdateAssetRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Assets.UpdateAssetRequest")]
    public partial class SCServiceChannelServicesMessagingAssetsUpdateAssetRequest : IEquatable<SCServiceChannelServicesMessagingAssetsUpdateAssetRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAssetsUpdateAssetRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingAssetsUpdateAssetRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAssetsUpdateAssetRequest" /> class.
        /// </summary>
        /// <param name="id">The unique Equipment ID in Service Click system.</param>
        /// <param name="needUpdateParentId">Flag Need Update ParenId (default to false).</param>
        /// <param name="processDuplicatedAssetTag">processDuplicatedAssetTag (default to false).</param>
        /// <param name="tag">Required, Should be unique for subscriber (required).</param>
        /// <param name="parentAssetTagId">parentAssetTagId.</param>
        /// <param name="manufacturer">Required, Must be existing manufacturer name (required).</param>
        /// <param name="modelNo">Model Number of asset.</param>
        /// <param name="serialNo">Serial Number of asset.</param>
        /// <param name="locationId">ID of location, Ignored. Use StoreId to setup Location.</param>
        /// <param name="area">area.</param>
        /// <param name="workOrderArea">workOrderArea.</param>
        /// <param name="storeId">Required, Should be unique for subscriber (required).</param>
        /// <param name="trade">Trade of asset. Examples: HVAC, DOORS, ELECTRICAL.</param>
        /// <param name="tradeId">tradeId.</param>
        /// <param name="type">Required, Type of asset. Examples: Refrigerator, Computer Monitor and etc (required).</param>
        /// <param name="assetTypeId">assetTypeId.</param>
        /// <param name="brandId">brandId.</param>
        /// <param name="active">active (default to false).</param>
        /// <param name="installDate">If not specified the current date is taken.</param>
        /// <param name="purchaseDate">If not specified the current date is taken.</param>
        /// <param name="manufacturedDate">If not specified the current date is taken.</param>
        /// <param name="warranty">warranty.</param>
        /// <param name="usesRefrigerant">Refrigerant Usage options.</param>
        /// <param name="isLeased">Is Leased (default to false).</param>
        /// <param name="lifeExpectancy">Life Expectancy.</param>
        /// <param name="originalValue">Original Value.</param>
        /// <param name="leaseDate">Lease Date.</param>
        /// <param name="leasePeriod">Lease Period.</param>
        /// <param name="condition">condition.</param>
        /// <param name="energyEfficiency">energyEfficiency.</param>
        /// <param name="capacity">capacity.</param>
        /// <param name="hasLeakDetector">Has Leak Detector (default to false).</param>
        /// <param name="parentId">Parent Id.</param>
        /// <param name="description">description.</param>
        /// <param name="hasComponents">hasComponents (default to false).</param>
        /// <param name="hasCircuits">hasCircuits (default to false).</param>
        /// <param name="clearAssetTag">clearAssetTag (default to false).</param>
        /// <param name="assetTag">assetTag.</param>
        /// <param name="isInspection">isInspection (default to false).</param>
        /// <param name="isCarbReporting">isCarbReporting (default to false).</param>
        /// <param name="applyCustom">applyCustom (default to false).</param>
        /// <param name="customAttributes">customAttributes.</param>
        /// <param name="assetUpdatesStatus">assetUpdatesStatus.</param>
        /// <param name="locationNoteHeader">Location Note Header.</param>
        /// <param name="locationNoteValue">Location Note Value.</param>
        /// <param name="currency">currency.</param>
        public SCServiceChannelServicesMessagingAssetsUpdateAssetRequest(int id = default(int), bool needUpdateParentId = false, bool processDuplicatedAssetTag = false, string tag = default(string), string parentAssetTagId = default(string), string manufacturer = default(string), string modelNo = default(string), string serialNo = default(string), int locationId = default(int), string area = default(string), string workOrderArea = default(string), string storeId = default(string), string trade = default(string), int tradeId = default(int), string type = default(string), int assetTypeId = default(int), int brandId = default(int), bool active = false, string installDate = default(string), string purchaseDate = default(string), string manufacturedDate = default(string), SCServiceChannelServicesMessagingAssetsWarrantyInfo warranty = default(SCServiceChannelServicesMessagingAssetsWarrantyInfo), int usesRefrigerant = default(int), bool isLeased = false, int lifeExpectancy = default(int), double originalValue = default(double), string leaseDate = default(string), int leasePeriod = default(int), int condition = default(int), string energyEfficiency = default(string), string capacity = default(string), bool hasLeakDetector = false, int parentId = default(int), string description = default(string), bool hasComponents = false, bool hasCircuits = false, bool clearAssetTag = false, string assetTag = default(string), bool isInspection = false, bool isCarbReporting = false, bool applyCustom = false, List<SCServiceChannelServicesMessagingEquipmentsEquipmentAttributeDescription> customAttributes = default(List<SCServiceChannelServicesMessagingEquipmentsEquipmentAttributeDescription>), byte[] assetUpdatesStatus = default(byte[]), string locationNoteHeader = default(string), string locationNoteValue = default(string), int currency = default(int))
        {
            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new ArgumentNullException("tag is a required property for SCServiceChannelServicesMessagingAssetsUpdateAssetRequest and cannot be null");
            }
            this.Tag = tag;
            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null)
            {
                throw new ArgumentNullException("manufacturer is a required property for SCServiceChannelServicesMessagingAssetsUpdateAssetRequest and cannot be null");
            }
            this.Manufacturer = manufacturer;
            // to ensure "storeId" is required (not null)
            if (storeId == null)
            {
                throw new ArgumentNullException("storeId is a required property for SCServiceChannelServicesMessagingAssetsUpdateAssetRequest and cannot be null");
            }
            this.StoreId = storeId;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for SCServiceChannelServicesMessagingAssetsUpdateAssetRequest and cannot be null");
            }
            this.Type = type;
            this.Id = id;
            this.NeedUpdateParentId = needUpdateParentId;
            this.ProcessDuplicatedAssetTag = processDuplicatedAssetTag;
            this.ParentAssetTagId = parentAssetTagId;
            this.ModelNo = modelNo;
            this.SerialNo = serialNo;
            this.LocationId = locationId;
            this.Area = area;
            this.WorkOrderArea = workOrderArea;
            this.Trade = trade;
            this.TradeId = tradeId;
            this.AssetTypeId = assetTypeId;
            this.BrandId = brandId;
            this.Active = active;
            this.InstallDate = installDate;
            this.PurchaseDate = purchaseDate;
            this.ManufacturedDate = manufacturedDate;
            this.Warranty = warranty;
            this.UsesRefrigerant = usesRefrigerant;
            this.IsLeased = isLeased;
            this.LifeExpectancy = lifeExpectancy;
            this.OriginalValue = originalValue;
            this.LeaseDate = leaseDate;
            this.LeasePeriod = leasePeriod;
            this.Condition = condition;
            this.EnergyEfficiency = energyEfficiency;
            this.Capacity = capacity;
            this.HasLeakDetector = hasLeakDetector;
            this.ParentId = parentId;
            this.Description = description;
            this.HasComponents = hasComponents;
            this.HasCircuits = hasCircuits;
            this.ClearAssetTag = clearAssetTag;
            this.AssetTag = assetTag;
            this.IsInspection = isInspection;
            this.IsCarbReporting = isCarbReporting;
            this.ApplyCustom = applyCustom;
            this.CustomAttributes = customAttributes;
            this.AssetUpdatesStatus = assetUpdatesStatus;
            this.LocationNoteHeader = locationNoteHeader;
            this.LocationNoteValue = locationNoteValue;
            this.Currency = currency;
        }

        /// <summary>
        /// The unique Equipment ID in Service Click system
        /// </summary>
        /// <value>The unique Equipment ID in Service Click system</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Flag Need Update ParenId
        /// </summary>
        /// <value>Flag Need Update ParenId</value>
        [DataMember(Name = "NeedUpdateParentId", EmitDefaultValue = true)]
        public bool NeedUpdateParentId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDuplicatedAssetTag
        /// </summary>
        [DataMember(Name = "ProcessDuplicatedAssetTag", EmitDefaultValue = true)]
        public bool ProcessDuplicatedAssetTag { get; set; }

        /// <summary>
        /// Required, Should be unique for subscriber
        /// </summary>
        /// <value>Required, Should be unique for subscriber</value>
        [DataMember(Name = "Tag", IsRequired = true, EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets ParentAssetTagId
        /// </summary>
        [DataMember(Name = "ParentAssetTagId", EmitDefaultValue = false)]
        public string ParentAssetTagId { get; set; }

        /// <summary>
        /// Required, Must be existing manufacturer name
        /// </summary>
        /// <value>Required, Must be existing manufacturer name</value>
        [DataMember(Name = "Manufacturer", IsRequired = true, EmitDefaultValue = true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Model Number of asset
        /// </summary>
        /// <value>Model Number of asset</value>
        [DataMember(Name = "ModelNo", EmitDefaultValue = false)]
        public string ModelNo { get; set; }

        /// <summary>
        /// Serial Number of asset
        /// </summary>
        /// <value>Serial Number of asset</value>
        [DataMember(Name = "SerialNo", EmitDefaultValue = false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// ID of location, Ignored. Use StoreId to setup Location
        /// </summary>
        /// <value>ID of location, Ignored. Use StoreId to setup Location</value>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "Area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderArea
        /// </summary>
        [DataMember(Name = "WorkOrderArea", EmitDefaultValue = false)]
        public string WorkOrderArea { get; set; }

        /// <summary>
        /// Required, Should be unique for subscriber
        /// </summary>
        /// <value>Required, Should be unique for subscriber</value>
        [DataMember(Name = "StoreId", IsRequired = true, EmitDefaultValue = true)]
        public string StoreId { get; set; }

        /// <summary>
        /// Trade of asset. Examples: HVAC, DOORS, ELECTRICAL
        /// </summary>
        /// <value>Trade of asset. Examples: HVAC, DOORS, ELECTRICAL</value>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name = "TradeId", EmitDefaultValue = false)]
        public int TradeId { get; set; }

        /// <summary>
        /// Required, Type of asset. Examples: Refrigerator, Computer Monitor and etc
        /// </summary>
        /// <value>Required, Type of asset. Examples: Refrigerator, Computer Monitor and etc</value>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeId
        /// </summary>
        [DataMember(Name = "AssetTypeId", EmitDefaultValue = false)]
        public int AssetTypeId { get; set; }

        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [DataMember(Name = "BrandId", EmitDefaultValue = false)]
        public int BrandId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "Active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// If not specified the current date is taken
        /// </summary>
        /// <value>If not specified the current date is taken</value>
        [DataMember(Name = "InstallDate", EmitDefaultValue = false)]
        public string InstallDate { get; set; }

        /// <summary>
        /// If not specified the current date is taken
        /// </summary>
        /// <value>If not specified the current date is taken</value>
        [DataMember(Name = "PurchaseDate", EmitDefaultValue = false)]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// If not specified the current date is taken
        /// </summary>
        /// <value>If not specified the current date is taken</value>
        [DataMember(Name = "ManufacturedDate", EmitDefaultValue = false)]
        public string ManufacturedDate { get; set; }

        /// <summary>
        /// Gets or Sets Warranty
        /// </summary>
        [DataMember(Name = "Warranty", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingAssetsWarrantyInfo Warranty { get; set; }

        /// <summary>
        /// Refrigerant Usage options
        /// </summary>
        /// <value>Refrigerant Usage options</value>
        [DataMember(Name = "UsesRefrigerant", EmitDefaultValue = false)]
        public int UsesRefrigerant { get; set; }

        /// <summary>
        /// Is Leased
        /// </summary>
        /// <value>Is Leased</value>
        [DataMember(Name = "IsLeased", EmitDefaultValue = true)]
        public bool IsLeased { get; set; }

        /// <summary>
        /// Life Expectancy
        /// </summary>
        /// <value>Life Expectancy</value>
        [DataMember(Name = "LifeExpectancy", EmitDefaultValue = false)]
        public int LifeExpectancy { get; set; }

        /// <summary>
        /// Original Value
        /// </summary>
        /// <value>Original Value</value>
        [DataMember(Name = "OriginalValue", EmitDefaultValue = false)]
        public double OriginalValue { get; set; }

        /// <summary>
        /// Lease Date
        /// </summary>
        /// <value>Lease Date</value>
        [DataMember(Name = "LeaseDate", EmitDefaultValue = false)]
        public string LeaseDate { get; set; }

        /// <summary>
        /// Lease Period
        /// </summary>
        /// <value>Lease Period</value>
        [DataMember(Name = "LeasePeriod", EmitDefaultValue = false)]
        public int LeasePeriod { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "Condition", EmitDefaultValue = false)]
        public int Condition { get; set; }

        /// <summary>
        /// Gets or Sets EnergyEfficiency
        /// </summary>
        [DataMember(Name = "EnergyEfficiency", EmitDefaultValue = false)]
        public string EnergyEfficiency { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "Capacity", EmitDefaultValue = false)]
        public string Capacity { get; set; }

        /// <summary>
        /// Has Leak Detector
        /// </summary>
        /// <value>Has Leak Detector</value>
        [DataMember(Name = "HasLeakDetector", EmitDefaultValue = true)]
        public bool HasLeakDetector { get; set; }

        /// <summary>
        /// Parent Id
        /// </summary>
        /// <value>Parent Id</value>
        [DataMember(Name = "ParentId", EmitDefaultValue = false)]
        public int ParentId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HasComponents
        /// </summary>
        [DataMember(Name = "HasComponents", EmitDefaultValue = true)]
        public bool HasComponents { get; set; }

        /// <summary>
        /// Gets or Sets HasCircuits
        /// </summary>
        [DataMember(Name = "HasCircuits", EmitDefaultValue = true)]
        public bool HasCircuits { get; set; }

        /// <summary>
        /// Gets or Sets ClearAssetTag
        /// </summary>
        [DataMember(Name = "ClearAssetTag", EmitDefaultValue = true)]
        public bool ClearAssetTag { get; set; }

        /// <summary>
        /// Gets or Sets AssetTag
        /// </summary>
        [DataMember(Name = "AssetTag", EmitDefaultValue = false)]
        public string AssetTag { get; set; }

        /// <summary>
        /// Gets or Sets IsInspection
        /// </summary>
        [DataMember(Name = "IsInspection", EmitDefaultValue = true)]
        public bool IsInspection { get; set; }

        /// <summary>
        /// Gets or Sets IsCarbReporting
        /// </summary>
        [DataMember(Name = "IsCarbReporting", EmitDefaultValue = true)]
        public bool IsCarbReporting { get; set; }

        /// <summary>
        /// Gets or Sets ApplyCustom
        /// </summary>
        [DataMember(Name = "ApplyCustom", EmitDefaultValue = true)]
        public bool ApplyCustom { get; set; }

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name = "CustomAttributes", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingEquipmentsEquipmentAttributeDescription> CustomAttributes { get; set; }

        /// <summary>
        /// Gets or Sets AssetUpdatesStatus
        /// </summary>
        [DataMember(Name = "AssetUpdatesStatus", EmitDefaultValue = false)]
        public byte[] AssetUpdatesStatus { get; set; }

        /// <summary>
        /// Location Note Header
        /// </summary>
        /// <value>Location Note Header</value>
        [DataMember(Name = "LocationNoteHeader", EmitDefaultValue = false)]
        public string LocationNoteHeader { get; set; }

        /// <summary>
        /// Location Note Value
        /// </summary>
        /// <value>Location Note Value</value>
        [DataMember(Name = "LocationNoteValue", EmitDefaultValue = false)]
        public string LocationNoteValue { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public int Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsUpdateAssetRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NeedUpdateParentId: ").Append(NeedUpdateParentId).Append("\n");
            sb.Append("  ProcessDuplicatedAssetTag: ").Append(ProcessDuplicatedAssetTag).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  ParentAssetTagId: ").Append(ParentAssetTagId).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNo: ").Append(ModelNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  WorkOrderArea: ").Append(WorkOrderArea).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssetTypeId: ").Append(AssetTypeId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  InstallDate: ").Append(InstallDate).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  ManufacturedDate: ").Append(ManufacturedDate).Append("\n");
            sb.Append("  Warranty: ").Append(Warranty).Append("\n");
            sb.Append("  UsesRefrigerant: ").Append(UsesRefrigerant).Append("\n");
            sb.Append("  IsLeased: ").Append(IsLeased).Append("\n");
            sb.Append("  LifeExpectancy: ").Append(LifeExpectancy).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  LeaseDate: ").Append(LeaseDate).Append("\n");
            sb.Append("  LeasePeriod: ").Append(LeasePeriod).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  EnergyEfficiency: ").Append(EnergyEfficiency).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  HasLeakDetector: ").Append(HasLeakDetector).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasComponents: ").Append(HasComponents).Append("\n");
            sb.Append("  HasCircuits: ").Append(HasCircuits).Append("\n");
            sb.Append("  ClearAssetTag: ").Append(ClearAssetTag).Append("\n");
            sb.Append("  AssetTag: ").Append(AssetTag).Append("\n");
            sb.Append("  IsInspection: ").Append(IsInspection).Append("\n");
            sb.Append("  IsCarbReporting: ").Append(IsCarbReporting).Append("\n");
            sb.Append("  ApplyCustom: ").Append(ApplyCustom).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  AssetUpdatesStatus: ").Append(AssetUpdatesStatus).Append("\n");
            sb.Append("  LocationNoteHeader: ").Append(LocationNoteHeader).Append("\n");
            sb.Append("  LocationNoteValue: ").Append(LocationNoteValue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingAssetsUpdateAssetRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsUpdateAssetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingAssetsUpdateAssetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsUpdateAssetRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.NeedUpdateParentId == input.NeedUpdateParentId ||
                    this.NeedUpdateParentId.Equals(input.NeedUpdateParentId)
                ) && 
                (
                    this.ProcessDuplicatedAssetTag == input.ProcessDuplicatedAssetTag ||
                    this.ProcessDuplicatedAssetTag.Equals(input.ProcessDuplicatedAssetTag)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.ParentAssetTagId == input.ParentAssetTagId ||
                    (this.ParentAssetTagId != null &&
                    this.ParentAssetTagId.Equals(input.ParentAssetTagId))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ModelNo == input.ModelNo ||
                    (this.ModelNo != null &&
                    this.ModelNo.Equals(input.ModelNo))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.WorkOrderArea == input.WorkOrderArea ||
                    (this.WorkOrderArea != null &&
                    this.WorkOrderArea.Equals(input.WorkOrderArea))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.TradeId == input.TradeId ||
                    this.TradeId.Equals(input.TradeId)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AssetTypeId == input.AssetTypeId ||
                    this.AssetTypeId.Equals(input.AssetTypeId)
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    this.BrandId.Equals(input.BrandId)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.InstallDate == input.InstallDate ||
                    (this.InstallDate != null &&
                    this.InstallDate.Equals(input.InstallDate))
                ) && 
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) && 
                (
                    this.ManufacturedDate == input.ManufacturedDate ||
                    (this.ManufacturedDate != null &&
                    this.ManufacturedDate.Equals(input.ManufacturedDate))
                ) && 
                (
                    this.Warranty == input.Warranty ||
                    (this.Warranty != null &&
                    this.Warranty.Equals(input.Warranty))
                ) && 
                (
                    this.UsesRefrigerant == input.UsesRefrigerant ||
                    this.UsesRefrigerant.Equals(input.UsesRefrigerant)
                ) && 
                (
                    this.IsLeased == input.IsLeased ||
                    this.IsLeased.Equals(input.IsLeased)
                ) && 
                (
                    this.LifeExpectancy == input.LifeExpectancy ||
                    this.LifeExpectancy.Equals(input.LifeExpectancy)
                ) && 
                (
                    this.OriginalValue == input.OriginalValue ||
                    this.OriginalValue.Equals(input.OriginalValue)
                ) && 
                (
                    this.LeaseDate == input.LeaseDate ||
                    (this.LeaseDate != null &&
                    this.LeaseDate.Equals(input.LeaseDate))
                ) && 
                (
                    this.LeasePeriod == input.LeasePeriod ||
                    this.LeasePeriod.Equals(input.LeasePeriod)
                ) && 
                (
                    this.Condition == input.Condition ||
                    this.Condition.Equals(input.Condition)
                ) && 
                (
                    this.EnergyEfficiency == input.EnergyEfficiency ||
                    (this.EnergyEfficiency != null &&
                    this.EnergyEfficiency.Equals(input.EnergyEfficiency))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.HasLeakDetector == input.HasLeakDetector ||
                    this.HasLeakDetector.Equals(input.HasLeakDetector)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    this.ParentId.Equals(input.ParentId)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HasComponents == input.HasComponents ||
                    this.HasComponents.Equals(input.HasComponents)
                ) && 
                (
                    this.HasCircuits == input.HasCircuits ||
                    this.HasCircuits.Equals(input.HasCircuits)
                ) && 
                (
                    this.ClearAssetTag == input.ClearAssetTag ||
                    this.ClearAssetTag.Equals(input.ClearAssetTag)
                ) && 
                (
                    this.AssetTag == input.AssetTag ||
                    (this.AssetTag != null &&
                    this.AssetTag.Equals(input.AssetTag))
                ) && 
                (
                    this.IsInspection == input.IsInspection ||
                    this.IsInspection.Equals(input.IsInspection)
                ) && 
                (
                    this.IsCarbReporting == input.IsCarbReporting ||
                    this.IsCarbReporting.Equals(input.IsCarbReporting)
                ) && 
                (
                    this.ApplyCustom == input.ApplyCustom ||
                    this.ApplyCustom.Equals(input.ApplyCustom)
                ) && 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    this.CustomAttributes != null &&
                    input.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(input.CustomAttributes)
                ) && 
                (
                    this.AssetUpdatesStatus == input.AssetUpdatesStatus ||
                    (this.AssetUpdatesStatus != null &&
                    this.AssetUpdatesStatus.Equals(input.AssetUpdatesStatus))
                ) && 
                (
                    this.LocationNoteHeader == input.LocationNoteHeader ||
                    (this.LocationNoteHeader != null &&
                    this.LocationNoteHeader.Equals(input.LocationNoteHeader))
                ) && 
                (
                    this.LocationNoteValue == input.LocationNoteValue ||
                    (this.LocationNoteValue != null &&
                    this.LocationNoteValue.Equals(input.LocationNoteValue))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.NeedUpdateParentId.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessDuplicatedAssetTag.GetHashCode();
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                if (this.ParentAssetTagId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentAssetTagId.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.ModelNo != null)
                {
                    hashCode = (hashCode * 59) + this.ModelNo.GetHashCode();
                }
                if (this.SerialNo != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.Area != null)
                {
                    hashCode = (hashCode * 59) + this.Area.GetHashCode();
                }
                if (this.WorkOrderArea != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderArea.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradeId.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetTypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.InstallDate != null)
                {
                    hashCode = (hashCode * 59) + this.InstallDate.GetHashCode();
                }
                if (this.PurchaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseDate.GetHashCode();
                }
                if (this.ManufacturedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ManufacturedDate.GetHashCode();
                }
                if (this.Warranty != null)
                {
                    hashCode = (hashCode * 59) + this.Warranty.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsesRefrigerant.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLeased.GetHashCode();
                hashCode = (hashCode * 59) + this.LifeExpectancy.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalValue.GetHashCode();
                if (this.LeaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.LeaseDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LeasePeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.Condition.GetHashCode();
                if (this.EnergyEfficiency != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyEfficiency.GetHashCode();
                }
                if (this.Capacity != null)
                {
                    hashCode = (hashCode * 59) + this.Capacity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasLeakDetector.GetHashCode();
                hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasComponents.GetHashCode();
                hashCode = (hashCode * 59) + this.HasCircuits.GetHashCode();
                hashCode = (hashCode * 59) + this.ClearAssetTag.GetHashCode();
                if (this.AssetTag != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsInspection.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCarbReporting.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplyCustom.GetHashCode();
                if (this.CustomAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.CustomAttributes.GetHashCode();
                }
                if (this.AssetUpdatesStatus != null)
                {
                    hashCode = (hashCode * 59) + this.AssetUpdatesStatus.GetHashCode();
                }
                if (this.LocationNoteHeader != null)
                {
                    hashCode = (hashCode * 59) + this.LocationNoteHeader.GetHashCode();
                }
                if (this.LocationNoteValue != null)
                {
                    hashCode = (hashCode * 59) + this.LocationNoteValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
