/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// CreateWoRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.CreateWoRequest")]
    public partial class SCServiceChannelServicesMessagingWorkordersCreateWoRequest : IEquatable<SCServiceChannelServicesMessagingWorkordersCreateWoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCreateWoRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingWorkordersCreateWoRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCreateWoRequest" /> class.
        /// </summary>
        /// <param name="number">Work Order Number.</param>
        /// <param name="purchaseNumber">Purchase Order Number.</param>
        /// <param name="hasTruncatedDescription">Optional (default to false).</param>
        /// <param name="contractInfo">contractInfo (required).</param>
        /// <param name="comment">Optional, Gets or sets the comment. Describes comments in work order.</param>
        /// <param name="setupId">Optional Dashboard Id, UID of dashboard from which this work order was created              must be bigger then zero and belong to existing dashboard.</param>
        /// <param name="assetId">Optional Asset, UID of asset, that will be repaired/reinstalled              must be present and correspond to valid asset if system finds that asset exists for specified LocationId,              TradeName, IssueRequest.EquipmentType params and asset is required for issue choice specified by IssueRequest,              SubscriberId and SetupId params.</param>
        /// <param name="replaceAsset">Optional (default to false).</param>
        /// <param name="callerName">Optional, can be empty Caller Name. Name of the person/organization who created work order.</param>
        /// <param name="category">Required, not empty Category must be valid category for specified subscriber. Describes what type of work will be performed.              This definition is broader then TradeName.              For example if TradeName is \&quot;FLOOR MAINTENANCE\&quot; then Category will be \&quot;Maintenance\&quot; (required).</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="priority">Required, not empty Priority must be valid priority for specified subscriber. Describes work order priority.              For example \&quot;Normal\&quot;, \&quot;Emergency\&quot; (required).</param>
        /// <param name="nte">Required Nte value; optional only for users that have no access to change NTE. (decimal number (e.g. 1.00)) - describes maximum amount of money to be spent on work order.              Must not exceed max amount defined by Subscriber.              If you specify ExtendedInfo.Tax, ExtendedInfo.Tax2 and ExtendedInfo.Price then Nte must be equal to sum of those three params.</param>
        /// <param name="callDate">Required, date when work order was created. (required).</param>
        /// <param name="scheduledDate">Optional, calculated based on CallDate and Priority by default. Date when provider will come to perform work order.              Must be an actual date (i.e. not 1/1/1900 or 1/1/3001) + must be bigger then CallDate and smaller then ExpirationDate.</param>
        /// <param name="completedDate">Optional, WorkDate when its not completed status..</param>
        /// <param name="problemSource">Optional, source from which the problem came from.</param>
        /// <param name="description">Required problem description, Must not be empty. Overall description of a problem (e.g. \&quot;Coffee machines are broken all over the place - please help!\&quot;) (required).</param>
        /// <param name="problemCode">Required, describes problem similar to Description attribute, but its value is predefined in subscriber&#39;s [IssueList]. (required).</param>
        /// <param name="recallWorkOrder">Optional,  UID of recalled work order. Work order is set as &#39;recalled&#39; when subscriber isn&#39;t satisfied with work that was done by provider.</param>
        /// <param name="serviceNowId">Optional, Service Now Id.</param>
        /// <param name="currencyId">Optional, UID of currency used to pay for work order. Defaul value is &#39;1&#39; which corresponds to USD.              Must be bigger then 0 and correspond to valid currency in dashboard which is found by SetupId param.</param>
        /// <param name="followupWorkOrder">Optional, UID of work order that is created if problem cannot be fully solved in terms of original work order.</param>
        /// <param name="approvalCode">Optional.</param>
        /// <param name="issueRequestInfo">issueRequestInfo.</param>
        /// <param name="dispatchSettingsInfo">dispatchSettingsInfo.</param>
        /// <param name="status">status.</param>
        /// <param name="extendedInfo">extendedInfo.</param>
        /// <param name="attachments">Optional, at least one attachement must be present in list if system finds that attachments are required for issue choice specified by IssueRequest,              SubscriberId and SetupId params.</param>
        /// <param name="ignoreAttachmentsRequiredFlag">ignoreAttachmentsRequiredFlag (default to false).</param>
        /// <param name="apiRequest">apiRequest (default to false).</param>
        /// <param name="materials">Optional.</param>
        /// <param name="materialsUsed">Optional.</param>
        /// <param name="additionalFields">Interactive troubleshooting additional fileds.</param>
        /// <param name="issueListHeaderId">Optional. Id in dash_IssueListHeader table.</param>
        /// <param name="proposedNte">Optional.</param>
        /// <param name="notifyProvider">Optional (default to false).</param>
        /// <param name="isDashboardRequest">Optional (default to false).</param>
        /// <param name="floorPlansImagePath">Optional.</param>
        /// <param name="projectId">Optional. Project Id from Project Tracker.</param>
        /// <param name="weatherTypeId">Optional. Associate with a specific weather type.</param>
        /// <param name="labelId">Optional, Label Id.</param>
        /// <param name="additionalApprovalCodes">Additional Approval Codes.</param>
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequest(string number = default(string), string purchaseNumber = default(string), bool hasTruncatedDescription = false, SCServiceChannelServicesMessagingWorkordersContractInfo contractInfo = default(SCServiceChannelServicesMessagingWorkordersContractInfo), string comment = default(string), int setupId = default(int), int assetId = default(int), bool replaceAsset = false, string callerName = default(string), string category = default(string), int categoryId = default(int), string priority = default(string), double nte = default(double), string callDate = default(string), string scheduledDate = default(string), string completedDate = default(string), string problemSource = default(string), string description = default(string), string problemCode = default(string), int recallWorkOrder = default(int), string serviceNowId = default(string), int currencyId = default(int), int followupWorkOrder = default(int), string approvalCode = default(string), SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest issueRequestInfo = default(SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest), SCServiceChannelServicesMessagingWorkordersCreateWoRequestDispatchSettings dispatchSettingsInfo = default(SCServiceChannelServicesMessagingWorkordersCreateWoRequestDispatchSettings), SCServiceChannelServicesMessagingWorkordersWorkorderStatus status = default(SCServiceChannelServicesMessagingWorkordersWorkorderStatus), SCServiceChannelServicesMessagingWorkordersCreateWoRequestExtendedRequestInfo extendedInfo = default(SCServiceChannelServicesMessagingWorkordersCreateWoRequestExtendedRequestInfo), List<SCServiceChannelServicesMessagingAttachmentsAddAttachmentRequest> attachments = default(List<SCServiceChannelServicesMessagingAttachmentsAddAttachmentRequest>), bool ignoreAttachmentsRequiredFlag = false, bool apiRequest = false, List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestMaterial> materials = default(List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestMaterial>), List<SCServiceChannelServicesMessagingRefrigerantTrackingAddWorkOrderPartRefrigerantItem> materialsUsed = default(List<SCServiceChannelServicesMessagingRefrigerantTrackingAddWorkOrderPartRefrigerantItem>), List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestAdditionalField> additionalFields = default(List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestAdditionalField>), int issueListHeaderId = default(int), double proposedNte = default(double), bool notifyProvider = false, bool isDashboardRequest = false, string floorPlansImagePath = default(string), int projectId = default(int), int weatherTypeId = default(int), int labelId = default(int), Dictionary<string, string> additionalApprovalCodes = default(Dictionary<string, string>))
        {
            // to ensure "contractInfo" is required (not null)
            if (contractInfo == null)
            {
                throw new ArgumentNullException("contractInfo is a required property for SCServiceChannelServicesMessagingWorkordersCreateWoRequest and cannot be null");
            }
            this.ContractInfo = contractInfo;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for SCServiceChannelServicesMessagingWorkordersCreateWoRequest and cannot be null");
            }
            this.Category = category;
            // to ensure "priority" is required (not null)
            if (priority == null)
            {
                throw new ArgumentNullException("priority is a required property for SCServiceChannelServicesMessagingWorkordersCreateWoRequest and cannot be null");
            }
            this.Priority = priority;
            // to ensure "callDate" is required (not null)
            if (callDate == null)
            {
                throw new ArgumentNullException("callDate is a required property for SCServiceChannelServicesMessagingWorkordersCreateWoRequest and cannot be null");
            }
            this.CallDate = callDate;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for SCServiceChannelServicesMessagingWorkordersCreateWoRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "problemCode" is required (not null)
            if (problemCode == null)
            {
                throw new ArgumentNullException("problemCode is a required property for SCServiceChannelServicesMessagingWorkordersCreateWoRequest and cannot be null");
            }
            this.ProblemCode = problemCode;
            this.Number = number;
            this.PurchaseNumber = purchaseNumber;
            this.HasTruncatedDescription = hasTruncatedDescription;
            this.Comment = comment;
            this.SetupId = setupId;
            this.AssetId = assetId;
            this.ReplaceAsset = replaceAsset;
            this.CallerName = callerName;
            this.CategoryId = categoryId;
            this.Nte = nte;
            this.ScheduledDate = scheduledDate;
            this.CompletedDate = completedDate;
            this.ProblemSource = problemSource;
            this.RecallWorkOrder = recallWorkOrder;
            this.ServiceNowId = serviceNowId;
            this.CurrencyId = currencyId;
            this.FollowupWorkOrder = followupWorkOrder;
            this.ApprovalCode = approvalCode;
            this.IssueRequestInfo = issueRequestInfo;
            this.DispatchSettingsInfo = dispatchSettingsInfo;
            this.Status = status;
            this.ExtendedInfo = extendedInfo;
            this.Attachments = attachments;
            this.IgnoreAttachmentsRequiredFlag = ignoreAttachmentsRequiredFlag;
            this.ApiRequest = apiRequest;
            this.Materials = materials;
            this.MaterialsUsed = materialsUsed;
            this.AdditionalFields = additionalFields;
            this.IssueListHeaderId = issueListHeaderId;
            this.ProposedNte = proposedNte;
            this.NotifyProvider = notifyProvider;
            this.IsDashboardRequest = isDashboardRequest;
            this.FloorPlansImagePath = floorPlansImagePath;
            this.ProjectId = projectId;
            this.WeatherTypeId = weatherTypeId;
            this.LabelId = labelId;
            this.AdditionalApprovalCodes = additionalApprovalCodes;
        }

        /// <summary>
        /// Work Order Number
        /// </summary>
        /// <value>Work Order Number</value>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Purchase Order Number
        /// </summary>
        /// <value>Purchase Order Number</value>
        [DataMember(Name = "PurchaseNumber", EmitDefaultValue = false)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "HasTruncatedDescription", EmitDefaultValue = true)]
        public bool HasTruncatedDescription { get; set; }

        /// <summary>
        /// Gets or Sets ContractInfo
        /// </summary>
        [DataMember(Name = "ContractInfo", IsRequired = true, EmitDefaultValue = true)]
        public SCServiceChannelServicesMessagingWorkordersContractInfo ContractInfo { get; set; }

        /// <summary>
        /// Optional, Gets or sets the comment. Describes comments in work order
        /// </summary>
        /// <value>Optional, Gets or sets the comment. Describes comments in work order</value>
        [DataMember(Name = "Comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Optional Dashboard Id, UID of dashboard from which this work order was created              must be bigger then zero and belong to existing dashboard
        /// </summary>
        /// <value>Optional Dashboard Id, UID of dashboard from which this work order was created              must be bigger then zero and belong to existing dashboard</value>
        [DataMember(Name = "SetupId", EmitDefaultValue = false)]
        public int SetupId { get; set; }

        /// <summary>
        /// Optional Asset, UID of asset, that will be repaired/reinstalled              must be present and correspond to valid asset if system finds that asset exists for specified LocationId,              TradeName, IssueRequest.EquipmentType params and asset is required for issue choice specified by IssueRequest,              SubscriberId and SetupId params
        /// </summary>
        /// <value>Optional Asset, UID of asset, that will be repaired/reinstalled              must be present and correspond to valid asset if system finds that asset exists for specified LocationId,              TradeName, IssueRequest.EquipmentType params and asset is required for issue choice specified by IssueRequest,              SubscriberId and SetupId params</value>
        [DataMember(Name = "AssetId", EmitDefaultValue = false)]
        public int AssetId { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "ReplaceAsset", EmitDefaultValue = true)]
        public bool ReplaceAsset { get; set; }

        /// <summary>
        /// Optional, can be empty Caller Name. Name of the person/organization who created work order
        /// </summary>
        /// <value>Optional, can be empty Caller Name. Name of the person/organization who created work order</value>
        [DataMember(Name = "CallerName", EmitDefaultValue = false)]
        public string CallerName { get; set; }

        /// <summary>
        /// Required, not empty Category must be valid category for specified subscriber. Describes what type of work will be performed.              This definition is broader then TradeName.              For example if TradeName is \&quot;FLOOR MAINTENANCE\&quot; then Category will be \&quot;Maintenance\&quot;
        /// </summary>
        /// <value>Required, not empty Category must be valid category for specified subscriber. Describes what type of work will be performed.              This definition is broader then TradeName.              For example if TradeName is \&quot;FLOOR MAINTENANCE\&quot; then Category will be \&quot;Maintenance\&quot;</value>
        [DataMember(Name = "Category", IsRequired = true, EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "CategoryId", EmitDefaultValue = false)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Required, not empty Priority must be valid priority for specified subscriber. Describes work order priority.              For example \&quot;Normal\&quot;, \&quot;Emergency\&quot;
        /// </summary>
        /// <value>Required, not empty Priority must be valid priority for specified subscriber. Describes work order priority.              For example \&quot;Normal\&quot;, \&quot;Emergency\&quot;</value>
        [DataMember(Name = "Priority", IsRequired = true, EmitDefaultValue = true)]
        public string Priority { get; set; }

        /// <summary>
        /// Required Nte value; optional only for users that have no access to change NTE. (decimal number (e.g. 1.00)) - describes maximum amount of money to be spent on work order.              Must not exceed max amount defined by Subscriber.              If you specify ExtendedInfo.Tax, ExtendedInfo.Tax2 and ExtendedInfo.Price then Nte must be equal to sum of those three params
        /// </summary>
        /// <value>Required Nte value; optional only for users that have no access to change NTE. (decimal number (e.g. 1.00)) - describes maximum amount of money to be spent on work order.              Must not exceed max amount defined by Subscriber.              If you specify ExtendedInfo.Tax, ExtendedInfo.Tax2 and ExtendedInfo.Price then Nte must be equal to sum of those three params</value>
        [DataMember(Name = "Nte", EmitDefaultValue = false)]
        public double Nte { get; set; }

        /// <summary>
        /// Required, date when work order was created.
        /// </summary>
        /// <value>Required, date when work order was created.</value>
        [DataMember(Name = "CallDate", IsRequired = true, EmitDefaultValue = true)]
        public string CallDate { get; set; }

        /// <summary>
        /// Optional, calculated based on CallDate and Priority by default. Date when provider will come to perform work order.              Must be an actual date (i.e. not 1/1/1900 or 1/1/3001) + must be bigger then CallDate and smaller then ExpirationDate
        /// </summary>
        /// <value>Optional, calculated based on CallDate and Priority by default. Date when provider will come to perform work order.              Must be an actual date (i.e. not 1/1/1900 or 1/1/3001) + must be bigger then CallDate and smaller then ExpirationDate</value>
        [DataMember(Name = "ScheduledDate", EmitDefaultValue = false)]
        public string ScheduledDate { get; set; }

        /// <summary>
        /// Optional, WorkDate when its not completed status.
        /// </summary>
        /// <value>Optional, WorkDate when its not completed status.</value>
        [DataMember(Name = "CompletedDate", EmitDefaultValue = false)]
        public string CompletedDate { get; set; }

        /// <summary>
        /// Optional, source from which the problem came from
        /// </summary>
        /// <value>Optional, source from which the problem came from</value>
        [DataMember(Name = "ProblemSource", EmitDefaultValue = false)]
        public string ProblemSource { get; set; }

        /// <summary>
        /// Required problem description, Must not be empty. Overall description of a problem (e.g. \&quot;Coffee machines are broken all over the place - please help!\&quot;)
        /// </summary>
        /// <value>Required problem description, Must not be empty. Overall description of a problem (e.g. \&quot;Coffee machines are broken all over the place - please help!\&quot;)</value>
        [DataMember(Name = "Description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Required, describes problem similar to Description attribute, but its value is predefined in subscriber&#39;s [IssueList].
        /// </summary>
        /// <value>Required, describes problem similar to Description attribute, but its value is predefined in subscriber&#39;s [IssueList].</value>
        [DataMember(Name = "ProblemCode", IsRequired = true, EmitDefaultValue = true)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Optional,  UID of recalled work order. Work order is set as &#39;recalled&#39; when subscriber isn&#39;t satisfied with work that was done by provider
        /// </summary>
        /// <value>Optional,  UID of recalled work order. Work order is set as &#39;recalled&#39; when subscriber isn&#39;t satisfied with work that was done by provider</value>
        [DataMember(Name = "RecallWorkOrder", EmitDefaultValue = false)]
        public int RecallWorkOrder { get; set; }

        /// <summary>
        /// Optional, Service Now Id
        /// </summary>
        /// <value>Optional, Service Now Id</value>
        [DataMember(Name = "ServiceNowId", EmitDefaultValue = false)]
        public string ServiceNowId { get; set; }

        /// <summary>
        /// Optional, UID of currency used to pay for work order. Defaul value is &#39;1&#39; which corresponds to USD.              Must be bigger then 0 and correspond to valid currency in dashboard which is found by SetupId param
        /// </summary>
        /// <value>Optional, UID of currency used to pay for work order. Defaul value is &#39;1&#39; which corresponds to USD.              Must be bigger then 0 and correspond to valid currency in dashboard which is found by SetupId param</value>
        [DataMember(Name = "CurrencyId", EmitDefaultValue = false)]
        public int CurrencyId { get; set; }

        /// <summary>
        /// Optional, UID of work order that is created if problem cannot be fully solved in terms of original work order
        /// </summary>
        /// <value>Optional, UID of work order that is created if problem cannot be fully solved in terms of original work order</value>
        [DataMember(Name = "FollowupWorkOrder", EmitDefaultValue = false)]
        public int FollowupWorkOrder { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "ApprovalCode", EmitDefaultValue = false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets IssueRequestInfo
        /// </summary>
        [DataMember(Name = "IssueRequestInfo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest IssueRequestInfo { get; set; }

        /// <summary>
        /// Gets or Sets DispatchSettingsInfo
        /// </summary>
        [DataMember(Name = "DispatchSettingsInfo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequestDispatchSettings DispatchSettingsInfo { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersWorkorderStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedInfo
        /// </summary>
        [DataMember(Name = "ExtendedInfo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequestExtendedRequestInfo ExtendedInfo { get; set; }

        /// <summary>
        /// Optional, at least one attachement must be present in list if system finds that attachments are required for issue choice specified by IssueRequest,              SubscriberId and SetupId params
        /// </summary>
        /// <value>Optional, at least one attachement must be present in list if system finds that attachments are required for issue choice specified by IssueRequest,              SubscriberId and SetupId params</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingAttachmentsAddAttachmentRequest> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreAttachmentsRequiredFlag
        /// </summary>
        [DataMember(Name = "IgnoreAttachmentsRequiredFlag", EmitDefaultValue = true)]
        public bool IgnoreAttachmentsRequiredFlag { get; set; }

        /// <summary>
        /// Gets or Sets ApiRequest
        /// </summary>
        [DataMember(Name = "ApiRequest", EmitDefaultValue = true)]
        public bool ApiRequest { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "Materials", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestMaterial> Materials { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "MaterialsUsed", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingRefrigerantTrackingAddWorkOrderPartRefrigerantItem> MaterialsUsed { get; set; }

        /// <summary>
        /// Interactive troubleshooting additional fileds
        /// </summary>
        /// <value>Interactive troubleshooting additional fileds</value>
        [DataMember(Name = "AdditionalFields", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestAdditionalField> AdditionalFields { get; set; }

        /// <summary>
        /// Optional. Id in dash_IssueListHeader table
        /// </summary>
        /// <value>Optional. Id in dash_IssueListHeader table</value>
        [DataMember(Name = "IssueListHeaderId", EmitDefaultValue = false)]
        public int IssueListHeaderId { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "ProposedNte", EmitDefaultValue = false)]
        public double ProposedNte { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "NotifyProvider", EmitDefaultValue = true)]
        public bool NotifyProvider { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "IsDashboardRequest", EmitDefaultValue = true)]
        public bool IsDashboardRequest { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "FloorPlansImagePath", EmitDefaultValue = false)]
        public string FloorPlansImagePath { get; set; }

        /// <summary>
        /// Optional. Project Id from Project Tracker
        /// </summary>
        /// <value>Optional. Project Id from Project Tracker</value>
        [DataMember(Name = "ProjectId", EmitDefaultValue = false)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Optional. Associate with a specific weather type
        /// </summary>
        /// <value>Optional. Associate with a specific weather type</value>
        [DataMember(Name = "WeatherTypeId", EmitDefaultValue = false)]
        public int WeatherTypeId { get; set; }

        /// <summary>
        /// Optional, Label Id
        /// </summary>
        /// <value>Optional, Label Id</value>
        [DataMember(Name = "LabelId", EmitDefaultValue = false)]
        public int LabelId { get; set; }

        /// <summary>
        /// Additional Approval Codes
        /// </summary>
        /// <value>Additional Approval Codes</value>
        [DataMember(Name = "AdditionalApprovalCodes", EmitDefaultValue = false)]
        public Dictionary<string, string> AdditionalApprovalCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersCreateWoRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PurchaseNumber: ").Append(PurchaseNumber).Append("\n");
            sb.Append("  HasTruncatedDescription: ").Append(HasTruncatedDescription).Append("\n");
            sb.Append("  ContractInfo: ").Append(ContractInfo).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  SetupId: ").Append(SetupId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ReplaceAsset: ").Append(ReplaceAsset).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Nte: ").Append(Nte).Append("\n");
            sb.Append("  CallDate: ").Append(CallDate).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  ProblemSource: ").Append(ProblemSource).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  RecallWorkOrder: ").Append(RecallWorkOrder).Append("\n");
            sb.Append("  ServiceNowId: ").Append(ServiceNowId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  FollowupWorkOrder: ").Append(FollowupWorkOrder).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  IssueRequestInfo: ").Append(IssueRequestInfo).Append("\n");
            sb.Append("  DispatchSettingsInfo: ").Append(DispatchSettingsInfo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExtendedInfo: ").Append(ExtendedInfo).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  IgnoreAttachmentsRequiredFlag: ").Append(IgnoreAttachmentsRequiredFlag).Append("\n");
            sb.Append("  ApiRequest: ").Append(ApiRequest).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  MaterialsUsed: ").Append(MaterialsUsed).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  IssueListHeaderId: ").Append(IssueListHeaderId).Append("\n");
            sb.Append("  ProposedNte: ").Append(ProposedNte).Append("\n");
            sb.Append("  NotifyProvider: ").Append(NotifyProvider).Append("\n");
            sb.Append("  IsDashboardRequest: ").Append(IsDashboardRequest).Append("\n");
            sb.Append("  FloorPlansImagePath: ").Append(FloorPlansImagePath).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  WeatherTypeId: ").Append(WeatherTypeId).Append("\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("  AdditionalApprovalCodes: ").Append(AdditionalApprovalCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersCreateWoRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersCreateWoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersCreateWoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersCreateWoRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.PurchaseNumber == input.PurchaseNumber ||
                    (this.PurchaseNumber != null &&
                    this.PurchaseNumber.Equals(input.PurchaseNumber))
                ) && 
                (
                    this.HasTruncatedDescription == input.HasTruncatedDescription ||
                    this.HasTruncatedDescription.Equals(input.HasTruncatedDescription)
                ) && 
                (
                    this.ContractInfo == input.ContractInfo ||
                    (this.ContractInfo != null &&
                    this.ContractInfo.Equals(input.ContractInfo))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.SetupId == input.SetupId ||
                    this.SetupId.Equals(input.SetupId)
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    this.AssetId.Equals(input.AssetId)
                ) && 
                (
                    this.ReplaceAsset == input.ReplaceAsset ||
                    this.ReplaceAsset.Equals(input.ReplaceAsset)
                ) && 
                (
                    this.CallerName == input.CallerName ||
                    (this.CallerName != null &&
                    this.CallerName.Equals(input.CallerName))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    this.CategoryId.Equals(input.CategoryId)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Nte == input.Nte ||
                    this.Nte.Equals(input.Nte)
                ) && 
                (
                    this.CallDate == input.CallDate ||
                    (this.CallDate != null &&
                    this.CallDate.Equals(input.CallDate))
                ) && 
                (
                    this.ScheduledDate == input.ScheduledDate ||
                    (this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(input.ScheduledDate))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.ProblemSource == input.ProblemSource ||
                    (this.ProblemSource != null &&
                    this.ProblemSource.Equals(input.ProblemSource))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ProblemCode == input.ProblemCode ||
                    (this.ProblemCode != null &&
                    this.ProblemCode.Equals(input.ProblemCode))
                ) && 
                (
                    this.RecallWorkOrder == input.RecallWorkOrder ||
                    this.RecallWorkOrder.Equals(input.RecallWorkOrder)
                ) && 
                (
                    this.ServiceNowId == input.ServiceNowId ||
                    (this.ServiceNowId != null &&
                    this.ServiceNowId.Equals(input.ServiceNowId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    this.CurrencyId.Equals(input.CurrencyId)
                ) && 
                (
                    this.FollowupWorkOrder == input.FollowupWorkOrder ||
                    this.FollowupWorkOrder.Equals(input.FollowupWorkOrder)
                ) && 
                (
                    this.ApprovalCode == input.ApprovalCode ||
                    (this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(input.ApprovalCode))
                ) && 
                (
                    this.IssueRequestInfo == input.IssueRequestInfo ||
                    (this.IssueRequestInfo != null &&
                    this.IssueRequestInfo.Equals(input.IssueRequestInfo))
                ) && 
                (
                    this.DispatchSettingsInfo == input.DispatchSettingsInfo ||
                    (this.DispatchSettingsInfo != null &&
                    this.DispatchSettingsInfo.Equals(input.DispatchSettingsInfo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ExtendedInfo == input.ExtendedInfo ||
                    (this.ExtendedInfo != null &&
                    this.ExtendedInfo.Equals(input.ExtendedInfo))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.IgnoreAttachmentsRequiredFlag == input.IgnoreAttachmentsRequiredFlag ||
                    this.IgnoreAttachmentsRequiredFlag.Equals(input.IgnoreAttachmentsRequiredFlag)
                ) && 
                (
                    this.ApiRequest == input.ApiRequest ||
                    this.ApiRequest.Equals(input.ApiRequest)
                ) && 
                (
                    this.Materials == input.Materials ||
                    this.Materials != null &&
                    input.Materials != null &&
                    this.Materials.SequenceEqual(input.Materials)
                ) && 
                (
                    this.MaterialsUsed == input.MaterialsUsed ||
                    this.MaterialsUsed != null &&
                    input.MaterialsUsed != null &&
                    this.MaterialsUsed.SequenceEqual(input.MaterialsUsed)
                ) && 
                (
                    this.AdditionalFields == input.AdditionalFields ||
                    this.AdditionalFields != null &&
                    input.AdditionalFields != null &&
                    this.AdditionalFields.SequenceEqual(input.AdditionalFields)
                ) && 
                (
                    this.IssueListHeaderId == input.IssueListHeaderId ||
                    this.IssueListHeaderId.Equals(input.IssueListHeaderId)
                ) && 
                (
                    this.ProposedNte == input.ProposedNte ||
                    this.ProposedNte.Equals(input.ProposedNte)
                ) && 
                (
                    this.NotifyProvider == input.NotifyProvider ||
                    this.NotifyProvider.Equals(input.NotifyProvider)
                ) && 
                (
                    this.IsDashboardRequest == input.IsDashboardRequest ||
                    this.IsDashboardRequest.Equals(input.IsDashboardRequest)
                ) && 
                (
                    this.FloorPlansImagePath == input.FloorPlansImagePath ||
                    (this.FloorPlansImagePath != null &&
                    this.FloorPlansImagePath.Equals(input.FloorPlansImagePath))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                ) && 
                (
                    this.WeatherTypeId == input.WeatherTypeId ||
                    this.WeatherTypeId.Equals(input.WeatherTypeId)
                ) && 
                (
                    this.LabelId == input.LabelId ||
                    this.LabelId.Equals(input.LabelId)
                ) && 
                (
                    this.AdditionalApprovalCodes == input.AdditionalApprovalCodes ||
                    this.AdditionalApprovalCodes != null &&
                    input.AdditionalApprovalCodes != null &&
                    this.AdditionalApprovalCodes.SequenceEqual(input.AdditionalApprovalCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.PurchaseNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasTruncatedDescription.GetHashCode();
                if (this.ContractInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ContractInfo.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SetupId.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReplaceAsset.GetHashCode();
                if (this.CallerName != null)
                {
                    hashCode = (hashCode * 59) + this.CallerName.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nte.GetHashCode();
                if (this.CallDate != null)
                {
                    hashCode = (hashCode * 59) + this.CallDate.GetHashCode();
                }
                if (this.ScheduledDate != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDate.GetHashCode();
                }
                if (this.CompletedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedDate.GetHashCode();
                }
                if (this.ProblemSource != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemSource.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ProblemCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecallWorkOrder.GetHashCode();
                if (this.ServiceNowId != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceNowId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                hashCode = (hashCode * 59) + this.FollowupWorkOrder.GetHashCode();
                if (this.ApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCode.GetHashCode();
                }
                if (this.IssueRequestInfo != null)
                {
                    hashCode = (hashCode * 59) + this.IssueRequestInfo.GetHashCode();
                }
                if (this.DispatchSettingsInfo != null)
                {
                    hashCode = (hashCode * 59) + this.DispatchSettingsInfo.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.ExtendedInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedInfo.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreAttachmentsRequiredFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.ApiRequest.GetHashCode();
                if (this.Materials != null)
                {
                    hashCode = (hashCode * 59) + this.Materials.GetHashCode();
                }
                if (this.MaterialsUsed != null)
                {
                    hashCode = (hashCode * 59) + this.MaterialsUsed.GetHashCode();
                }
                if (this.AdditionalFields != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalFields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IssueListHeaderId.GetHashCode();
                hashCode = (hashCode * 59) + this.ProposedNte.GetHashCode();
                hashCode = (hashCode * 59) + this.NotifyProvider.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDashboardRequest.GetHashCode();
                if (this.FloorPlansImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.FloorPlansImagePath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                hashCode = (hashCode * 59) + this.WeatherTypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.LabelId.GetHashCode();
                if (this.AdditionalApprovalCodes != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalApprovalCodes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
