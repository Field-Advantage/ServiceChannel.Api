/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions
    /// </summary>
    [DataContract(Name = "ServiceChannel.Api.Model.Entities.ApprovalCodes.ApprovalCodeWithOptions")]
    public partial class SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions : IEquatable<SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions" /> class.
        /// </summary>
        /// <param name="locationId">locationId.</param>
        /// <param name="locationName">locationName.</param>
        /// <param name="locationStoreId">locationStoreId.</param>
        /// <param name="editableAtLineItemLevel">editableAtLineItemLevel (default to false).</param>
        /// <param name="valueFormat">valueFormat.</param>
        /// <param name="defaultOptionId">defaultOptionId.</param>
        /// <param name="defaultOption">defaultOption.</param>
        /// <param name="options">options.</param>
        /// <param name="id">id.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="category">category.</param>
        /// <param name="name">name.</param>
        /// <param name="code">code.</param>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="subscriberId">subscriberId.</param>
        /// <param name="isEnabled">isEnabled (default to false).</param>
        public SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions(int locationId = default(int), string locationName = default(string), string locationStoreId = default(string), bool editableAtLineItemLevel = false, int valueFormat = default(int), int defaultOptionId = default(int), string defaultOption = default(string), List<SCServiceChannelApiModelEntitiesApprovalCodesAdditionalApprovalCodeOption> options = default(List<SCServiceChannelApiModelEntitiesApprovalCodesAdditionalApprovalCodeOption>), int id = default(int), int categoryId = default(int), string category = default(string), string name = default(string), string code = default(string), int orderNumber = default(int), int subscriberId = default(int), bool isEnabled = false)
        {
            this.LocationId = locationId;
            this.LocationName = locationName;
            this.LocationStoreId = locationStoreId;
            this.EditableAtLineItemLevel = editableAtLineItemLevel;
            this.ValueFormat = valueFormat;
            this.DefaultOptionId = defaultOptionId;
            this.DefaultOption = defaultOption;
            this.Options = options;
            this.Id = id;
            this.CategoryId = categoryId;
            this.Category = category;
            this.Name = name;
            this.Code = code;
            this.OrderNumber = orderNumber;
            this.SubscriberId = subscriberId;
            this.IsEnabled = isEnabled;
        }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name = "LocationName", EmitDefaultValue = false)]
        public string LocationName { get; set; }

        /// <summary>
        /// Gets or Sets LocationStoreId
        /// </summary>
        [DataMember(Name = "LocationStoreId", EmitDefaultValue = false)]
        public string LocationStoreId { get; set; }

        /// <summary>
        /// Gets or Sets EditableAtLineItemLevel
        /// </summary>
        [DataMember(Name = "EditableAtLineItemLevel", EmitDefaultValue = true)]
        public bool EditableAtLineItemLevel { get; set; }

        /// <summary>
        /// Gets or Sets ValueFormat
        /// </summary>
        [DataMember(Name = "ValueFormat", EmitDefaultValue = false)]
        public int ValueFormat { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOptionId
        /// </summary>
        [DataMember(Name = "DefaultOptionId", EmitDefaultValue = false)]
        public int DefaultOptionId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOption
        /// </summary>
        [DataMember(Name = "DefaultOption", EmitDefaultValue = false)]
        public string DefaultOption { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "Options", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelEntitiesApprovalCodesAdditionalApprovalCodeOption> Options { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "CategoryId", EmitDefaultValue = false)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "Code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "OrderNumber", EmitDefaultValue = false)]
        public int OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberId
        /// </summary>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "IsEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  LocationStoreId: ").Append(LocationStoreId).Append("\n");
            sb.Append("  EditableAtLineItemLevel: ").Append(EditableAtLineItemLevel).Append("\n");
            sb.Append("  ValueFormat: ").Append(ValueFormat).Append("\n");
            sb.Append("  DefaultOptionId: ").Append(DefaultOptionId).Append("\n");
            sb.Append("  DefaultOption: ").Append(DefaultOption).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions);
        }

        /// <summary>
        /// Returns true if SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelApiModelEntitiesApprovalCodesApprovalCodeWithOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.LocationStoreId == input.LocationStoreId ||
                    (this.LocationStoreId != null &&
                    this.LocationStoreId.Equals(input.LocationStoreId))
                ) && 
                (
                    this.EditableAtLineItemLevel == input.EditableAtLineItemLevel ||
                    this.EditableAtLineItemLevel.Equals(input.EditableAtLineItemLevel)
                ) && 
                (
                    this.ValueFormat == input.ValueFormat ||
                    this.ValueFormat.Equals(input.ValueFormat)
                ) && 
                (
                    this.DefaultOptionId == input.DefaultOptionId ||
                    this.DefaultOptionId.Equals(input.DefaultOptionId)
                ) && 
                (
                    this.DefaultOption == input.DefaultOption ||
                    (this.DefaultOption != null &&
                    this.DefaultOption.Equals(input.DefaultOption))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    this.CategoryId.Equals(input.CategoryId)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.LocationName != null)
                {
                    hashCode = (hashCode * 59) + this.LocationName.GetHashCode();
                }
                if (this.LocationStoreId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationStoreId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EditableAtLineItemLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.ValueFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultOptionId.GetHashCode();
                if (this.DefaultOption != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultOption.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
