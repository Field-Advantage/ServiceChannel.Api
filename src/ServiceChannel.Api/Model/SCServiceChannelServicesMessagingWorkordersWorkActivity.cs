/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Work activity object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.WorkActivity")]
    public partial class SCServiceChannelServicesMessagingWorkordersWorkActivity : IEquatable<SCServiceChannelServicesMessagingWorkordersWorkActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersWorkActivity" /> class.
        /// </summary>
        /// <param name="id">The unique numeric identifier of the work activity..</param>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which the work activity was reported..</param>
        /// <param name="timeIn">The date and time when the technician started work on the service request..</param>
        /// <param name="timeOut">The date and time when the technician finished work on the service request..</param>
        /// <param name="isTimeEdited">Indicates if the time of the labor performed was modified. (default to false).</param>
        /// <param name="user">user.</param>
        /// <param name="callerId">Possible values:              a) The GPS coordinates of the location where the technician performed the most recent action — either check-in or check-out — via the ServiceChannel Provider mobile app.              b) The phone number of the technician from which they performed the most recent action — either check-in or check-out — using the IVR (Interactive Voice Response) system.              c) Null value if the work activity was entered manually..</param>
        /// <param name="resolutionCode">The most recent status assigned to the work order by the technician..</param>
        /// <param name="workType">The type of activity performed: *Repair* or *Travel*. Other values may be returned if custom types are set up for the subscriber..</param>
        /// <param name="hasCheckInInfo">Indicates if a check-in was performed for the work activity. (default to false).</param>
        /// <param name="hasCheckListResponse">Indicates if the technician answered checklist questions. (default to false).</param>
        /// <param name="techsCount">The number of technicians who performed the work..</param>
        /// <param name="name">The technician performed the work..</param>
        /// <param name="createdBy">The user who created the labor..</param>
        public SCServiceChannelServicesMessagingWorkordersWorkActivity(int id = default(int), int workOrderId = default(int), DateTime timeIn = default(DateTime), DateTime timeOut = default(DateTime), bool isTimeEdited = false, SCServiceChannelServicesMessagingUsersUserInfo user = default(SCServiceChannelServicesMessagingUsersUserInfo), string callerId = default(string), string resolutionCode = default(string), string workType = default(string), bool hasCheckInInfo = false, bool hasCheckListResponse = false, int techsCount = default(int), string name = default(string), int createdBy = default(int))
        {
            this.Id = id;
            this.WorkOrderId = workOrderId;
            this.TimeIn = timeIn;
            this.TimeOut = timeOut;
            this.IsTimeEdited = isTimeEdited;
            this.User = user;
            this.CallerId = callerId;
            this.ResolutionCode = resolutionCode;
            this.WorkType = workType;
            this.HasCheckInInfo = hasCheckInInfo;
            this.HasCheckListResponse = hasCheckListResponse;
            this.TechsCount = techsCount;
            this.Name = name;
            this.CreatedBy = createdBy;
        }

        /// <summary>
        /// The unique numeric identifier of the work activity.
        /// </summary>
        /// <value>The unique numeric identifier of the work activity.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The unique numeric identifier of the work order for which the work activity was reported.
        /// </summary>
        /// <value>The unique numeric identifier of the work order for which the work activity was reported.</value>
        [DataMember(Name = "WorkOrderId", EmitDefaultValue = false)]
        public int WorkOrderId { get; set; }

        /// <summary>
        /// The date and time when the technician started work on the service request.
        /// </summary>
        /// <value>The date and time when the technician started work on the service request.</value>
        [DataMember(Name = "TimeIn", EmitDefaultValue = false)]
        public DateTime TimeIn { get; set; }

        /// <summary>
        /// The date and time when the technician finished work on the service request.
        /// </summary>
        /// <value>The date and time when the technician finished work on the service request.</value>
        [DataMember(Name = "TimeOut", EmitDefaultValue = false)]
        public DateTime TimeOut { get; set; }

        /// <summary>
        /// Indicates if the time of the labor performed was modified.
        /// </summary>
        /// <value>Indicates if the time of the labor performed was modified.</value>
        [DataMember(Name = "IsTimeEdited", EmitDefaultValue = true)]
        public bool IsTimeEdited { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersUserInfo User { get; set; }

        /// <summary>
        /// Possible values:              a) The GPS coordinates of the location where the technician performed the most recent action — either check-in or check-out — via the ServiceChannel Provider mobile app.              b) The phone number of the technician from which they performed the most recent action — either check-in or check-out — using the IVR (Interactive Voice Response) system.              c) Null value if the work activity was entered manually.
        /// </summary>
        /// <value>Possible values:              a) The GPS coordinates of the location where the technician performed the most recent action — either check-in or check-out — via the ServiceChannel Provider mobile app.              b) The phone number of the technician from which they performed the most recent action — either check-in or check-out — using the IVR (Interactive Voice Response) system.              c) Null value if the work activity was entered manually.</value>
        [DataMember(Name = "CallerId", EmitDefaultValue = false)]
        public string CallerId { get; set; }

        /// <summary>
        /// The most recent status assigned to the work order by the technician.
        /// </summary>
        /// <value>The most recent status assigned to the work order by the technician.</value>
        [DataMember(Name = "ResolutionCode", EmitDefaultValue = false)]
        public string ResolutionCode { get; set; }

        /// <summary>
        /// The type of activity performed: *Repair* or *Travel*. Other values may be returned if custom types are set up for the subscriber.
        /// </summary>
        /// <value>The type of activity performed: *Repair* or *Travel*. Other values may be returned if custom types are set up for the subscriber.</value>
        [DataMember(Name = "WorkType", EmitDefaultValue = false)]
        public string WorkType { get; set; }

        /// <summary>
        /// Indicates if a check-in was performed for the work activity.
        /// </summary>
        /// <value>Indicates if a check-in was performed for the work activity.</value>
        [DataMember(Name = "HasCheckInInfo", EmitDefaultValue = true)]
        public bool HasCheckInInfo { get; set; }

        /// <summary>
        /// Indicates if the technician answered checklist questions.
        /// </summary>
        /// <value>Indicates if the technician answered checklist questions.</value>
        [DataMember(Name = "HasCheckListResponse", EmitDefaultValue = true)]
        public bool HasCheckListResponse { get; set; }

        /// <summary>
        /// The number of technicians who performed the work.
        /// </summary>
        /// <value>The number of technicians who performed the work.</value>
        [DataMember(Name = "TechsCount", EmitDefaultValue = false)]
        public int TechsCount { get; set; }

        /// <summary>
        /// The technician performed the work.
        /// </summary>
        /// <value>The technician performed the work.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The user who created the labor.
        /// </summary>
        /// <value>The user who created the labor.</value>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public int CreatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersWorkActivity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  TimeIn: ").Append(TimeIn).Append("\n");
            sb.Append("  TimeOut: ").Append(TimeOut).Append("\n");
            sb.Append("  IsTimeEdited: ").Append(IsTimeEdited).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  ResolutionCode: ").Append(ResolutionCode).Append("\n");
            sb.Append("  WorkType: ").Append(WorkType).Append("\n");
            sb.Append("  HasCheckInInfo: ").Append(HasCheckInInfo).Append("\n");
            sb.Append("  HasCheckListResponse: ").Append(HasCheckListResponse).Append("\n");
            sb.Append("  TechsCount: ").Append(TechsCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersWorkActivity);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersWorkActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersWorkActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersWorkActivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.WorkOrderId == input.WorkOrderId ||
                    this.WorkOrderId.Equals(input.WorkOrderId)
                ) && 
                (
                    this.TimeIn == input.TimeIn ||
                    (this.TimeIn != null &&
                    this.TimeIn.Equals(input.TimeIn))
                ) && 
                (
                    this.TimeOut == input.TimeOut ||
                    (this.TimeOut != null &&
                    this.TimeOut.Equals(input.TimeOut))
                ) && 
                (
                    this.IsTimeEdited == input.IsTimeEdited ||
                    this.IsTimeEdited.Equals(input.IsTimeEdited)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.ResolutionCode == input.ResolutionCode ||
                    (this.ResolutionCode != null &&
                    this.ResolutionCode.Equals(input.ResolutionCode))
                ) && 
                (
                    this.WorkType == input.WorkType ||
                    (this.WorkType != null &&
                    this.WorkType.Equals(input.WorkType))
                ) && 
                (
                    this.HasCheckInInfo == input.HasCheckInInfo ||
                    this.HasCheckInInfo.Equals(input.HasCheckInInfo)
                ) && 
                (
                    this.HasCheckListResponse == input.HasCheckListResponse ||
                    this.HasCheckListResponse.Equals(input.HasCheckListResponse)
                ) && 
                (
                    this.TechsCount == input.TechsCount ||
                    this.TechsCount.Equals(input.TechsCount)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.WorkOrderId.GetHashCode();
                if (this.TimeIn != null)
                {
                    hashCode = (hashCode * 59) + this.TimeIn.GetHashCode();
                }
                if (this.TimeOut != null)
                {
                    hashCode = (hashCode * 59) + this.TimeOut.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsTimeEdited.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.CallerId != null)
                {
                    hashCode = (hashCode * 59) + this.CallerId.GetHashCode();
                }
                if (this.ResolutionCode != null)
                {
                    hashCode = (hashCode * 59) + this.ResolutionCode.GetHashCode();
                }
                if (this.WorkType != null)
                {
                    hashCode = (hashCode * 59) + this.WorkType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasCheckInInfo.GetHashCode();
                hashCode = (hashCode * 59) + this.HasCheckListResponse.GetHashCode();
                hashCode = (hashCode * 59) + this.TechsCount.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
