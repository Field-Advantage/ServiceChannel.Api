/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Invoice statistics response class
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.InvoiceStatisticsResponse")]
    public partial class SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse" /> class.
        /// </summary>
        /// <param name="daysPeriod">Gets or sets the period in days, last X days for which Invoices statistics was collected.</param>
        /// <param name="woReadyForInvoices">Gets or sets the count of Work Orders ready for Invoices.</param>
        /// <param name="openInvoices">Gets or sets the count of open Invoices.</param>
        /// <param name="approvedInvoicesDaysPeriod">Gets or sets the period in days, last X days during which Invoices are approved.</param>
        /// <param name="approvedInvoices">Gets or sets the count of Invoices approved in the past &lt;ApprovedInvoicesDaysPeriod /&gt; days.</param>
        public SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse(int daysPeriod = default(int), int woReadyForInvoices = default(int), int openInvoices = default(int), int approvedInvoicesDaysPeriod = default(int), int approvedInvoices = default(int))
        {
            this.DaysPeriod = daysPeriod;
            this.WoReadyForInvoices = woReadyForInvoices;
            this.OpenInvoices = openInvoices;
            this.ApprovedInvoicesDaysPeriod = approvedInvoicesDaysPeriod;
            this.ApprovedInvoices = approvedInvoices;
        }

        /// <summary>
        /// Gets or sets the period in days, last X days for which Invoices statistics was collected
        /// </summary>
        /// <value>Gets or sets the period in days, last X days for which Invoices statistics was collected</value>
        [DataMember(Name = "DaysPeriod", EmitDefaultValue = false)]
        public int DaysPeriod { get; set; }

        /// <summary>
        /// Gets or sets the count of Work Orders ready for Invoices
        /// </summary>
        /// <value>Gets or sets the count of Work Orders ready for Invoices</value>
        [DataMember(Name = "WoReadyForInvoices", EmitDefaultValue = false)]
        public int WoReadyForInvoices { get; set; }

        /// <summary>
        /// Gets or sets the count of open Invoices
        /// </summary>
        /// <value>Gets or sets the count of open Invoices</value>
        [DataMember(Name = "OpenInvoices", EmitDefaultValue = false)]
        public int OpenInvoices { get; set; }

        /// <summary>
        /// Gets or sets the period in days, last X days during which Invoices are approved
        /// </summary>
        /// <value>Gets or sets the period in days, last X days during which Invoices are approved</value>
        [DataMember(Name = "ApprovedInvoicesDaysPeriod", EmitDefaultValue = false)]
        public int ApprovedInvoicesDaysPeriod { get; set; }

        /// <summary>
        /// Gets or sets the count of Invoices approved in the past &lt;ApprovedInvoicesDaysPeriod /&gt; days
        /// </summary>
        /// <value>Gets or sets the count of Invoices approved in the past &lt;ApprovedInvoicesDaysPeriod /&gt; days</value>
        [DataMember(Name = "ApprovedInvoices", EmitDefaultValue = false)]
        public int ApprovedInvoices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse {\n");
            sb.Append("  DaysPeriod: ").Append(DaysPeriod).Append("\n");
            sb.Append("  WoReadyForInvoices: ").Append(WoReadyForInvoices).Append("\n");
            sb.Append("  OpenInvoices: ").Append(OpenInvoices).Append("\n");
            sb.Append("  ApprovedInvoicesDaysPeriod: ").Append(ApprovedInvoicesDaysPeriod).Append("\n");
            sb.Append("  ApprovedInvoices: ").Append(ApprovedInvoices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DaysPeriod == input.DaysPeriod ||
                    this.DaysPeriod.Equals(input.DaysPeriod)
                ) && 
                (
                    this.WoReadyForInvoices == input.WoReadyForInvoices ||
                    this.WoReadyForInvoices.Equals(input.WoReadyForInvoices)
                ) && 
                (
                    this.OpenInvoices == input.OpenInvoices ||
                    this.OpenInvoices.Equals(input.OpenInvoices)
                ) && 
                (
                    this.ApprovedInvoicesDaysPeriod == input.ApprovedInvoicesDaysPeriod ||
                    this.ApprovedInvoicesDaysPeriod.Equals(input.ApprovedInvoicesDaysPeriod)
                ) && 
                (
                    this.ApprovedInvoices == input.ApprovedInvoices ||
                    this.ApprovedInvoices.Equals(input.ApprovedInvoices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DaysPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.WoReadyForInvoices.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenInvoices.GetHashCode();
                hashCode = (hashCode * 59) + this.ApprovedInvoicesDaysPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.ApprovedInvoices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
