/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Parameters of a standard checklist.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.CheckListDetails.CheckListDetailResponse")]
    public partial class SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse : IEquatable<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse" /> class.
        /// </summary>
        /// <param name="checklistName">Checklist name..</param>
        /// <param name="id">Checklist ID..</param>
        /// <param name="isActive">Defines whether the checklist is active or not. (default to false).</param>
        /// <param name="createdDate">Date and time when the checklist was created..</param>
        /// <param name="updatedDate">Date and time when the checklist was last updated..</param>
        /// <param name="createdBy">User ID of the employee who created the checklist..</param>
        /// <param name="updatedBy">User ID of the employee who last updated the checklist..</param>
        /// <param name="questions">A list of questions configured for the checklist..</param>
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse(string checklistName = default(string), int id = default(int), bool isActive = false, DateTime createdDate = default(DateTime), DateTime updatedDate = default(DateTime), int createdBy = default(int), int updatedBy = default(int), List<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsResponse> questions = default(List<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsResponse>))
        {
            this.ChecklistName = checklistName;
            this.Id = id;
            this.IsActive = isActive;
            this.CreatedDate = createdDate;
            this.UpdatedDate = updatedDate;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.Questions = questions;
        }

        /// <summary>
        /// Checklist name.
        /// </summary>
        /// <value>Checklist name.</value>
        [DataMember(Name = "ChecklistName", EmitDefaultValue = false)]
        public string ChecklistName { get; set; }

        /// <summary>
        /// Checklist ID.
        /// </summary>
        /// <value>Checklist ID.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Defines whether the checklist is active or not.
        /// </summary>
        /// <value>Defines whether the checklist is active or not.</value>
        [DataMember(Name = "IsActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Date and time when the checklist was created.
        /// </summary>
        /// <value>Date and time when the checklist was created.</value>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Date and time when the checklist was last updated.
        /// </summary>
        /// <value>Date and time when the checklist was last updated.</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// User ID of the employee who created the checklist.
        /// </summary>
        /// <value>User ID of the employee who created the checklist.</value>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public int CreatedBy { get; set; }

        /// <summary>
        /// User ID of the employee who last updated the checklist.
        /// </summary>
        /// <value>User ID of the employee who last updated the checklist.</value>
        [DataMember(Name = "UpdatedBy", EmitDefaultValue = false)]
        public int UpdatedBy { get; set; }

        /// <summary>
        /// A list of questions configured for the checklist.
        /// </summary>
        /// <value>A list of questions configured for the checklist.</value>
        [DataMember(Name = "Questions", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsResponse> Questions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse {\n");
            sb.Append("  ChecklistName: ").Append(ChecklistName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChecklistName == input.ChecklistName ||
                    (this.ChecklistName != null &&
                    this.ChecklistName.Equals(input.ChecklistName))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    this.UpdatedBy.Equals(input.UpdatedBy)
                ) && 
                (
                    this.Questions == input.Questions ||
                    this.Questions != null &&
                    input.Questions != null &&
                    this.Questions.SequenceEqual(input.Questions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChecklistName != null)
                {
                    hashCode = (hashCode * 59) + this.ChecklistName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                if (this.Questions != null)
                {
                    hashCode = (hashCode * 59) + this.Questions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
