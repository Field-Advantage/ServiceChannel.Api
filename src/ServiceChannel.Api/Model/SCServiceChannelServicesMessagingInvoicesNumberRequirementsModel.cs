/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Invoice number requirements object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.NumberRequirementsModel")]
    public partial class SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel : IEquatable<SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel" /> class.
        /// </summary>
        /// <param name="autoGenerationTypesSelect">A list of options in the \&quot;Generation uniqueness rule\&quot; drop-down list a subscriber admin can choose from when configuring invoice number rules for automatically generated invoices..</param>
        /// <param name="restrictionTypesSelect">A list of options in the \&quot;Restrictions\&quot; drop-down list a subscriber admin can choose from when configuring invoice number restrictions for manually created invoices..</param>
        /// <param name="reuseInvoiceNumbersSelect">A list of options in the \&quot;ReuseInvoiceNumber\&quot; drop-down list a subscriber admin can choose from when configuring invoice number..</param>
        /// <param name="invoiceNumberRequirement">invoiceNumberRequirement.</param>
        /// <param name="defaultRestrictionComments">A list of default explanatory comments on the invoice number format for the corresponding restrictions. A comment is displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the restrictions specified by their subscriber. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*..</param>
        /// <param name="defaultRestrictionPatterns">A list of default regular expressions that define search patterns used to validate the number format of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*..</param>
        /// <param name="resources">resources.</param>
        public SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel(List<SCServiceChannelServicesMessagingInvoicesSelectItem> autoGenerationTypesSelect = default(List<SCServiceChannelServicesMessagingInvoicesSelectItem>), List<SCServiceChannelServicesMessagingInvoicesSelectItem> restrictionTypesSelect = default(List<SCServiceChannelServicesMessagingInvoicesSelectItem>), List<SCServiceChannelServicesMessagingInvoicesSelectItem> reuseInvoiceNumbersSelect = default(List<SCServiceChannelServicesMessagingInvoicesSelectItem>), SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement invoiceNumberRequirement = default(SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement), Dictionary<string, string> defaultRestrictionComments = default(Dictionary<string, string>), Dictionary<string, string> defaultRestrictionPatterns = default(Dictionary<string, string>), SCServiceChannelServicesMessagingInvoicesLocalizations resources = default(SCServiceChannelServicesMessagingInvoicesLocalizations))
        {
            this.AutoGenerationTypesSelect = autoGenerationTypesSelect;
            this.RestrictionTypesSelect = restrictionTypesSelect;
            this.ReuseInvoiceNumbersSelect = reuseInvoiceNumbersSelect;
            this.InvoiceNumberRequirement = invoiceNumberRequirement;
            this.DefaultRestrictionComments = defaultRestrictionComments;
            this.DefaultRestrictionPatterns = defaultRestrictionPatterns;
            this.Resources = resources;
        }

        /// <summary>
        /// A list of options in the \&quot;Generation uniqueness rule\&quot; drop-down list a subscriber admin can choose from when configuring invoice number rules for automatically generated invoices.
        /// </summary>
        /// <value>A list of options in the \&quot;Generation uniqueness rule\&quot; drop-down list a subscriber admin can choose from when configuring invoice number rules for automatically generated invoices.</value>
        [DataMember(Name = "AutoGenerationTypesSelect", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesSelectItem> AutoGenerationTypesSelect { get; set; }

        /// <summary>
        /// A list of options in the \&quot;Restrictions\&quot; drop-down list a subscriber admin can choose from when configuring invoice number restrictions for manually created invoices.
        /// </summary>
        /// <value>A list of options in the \&quot;Restrictions\&quot; drop-down list a subscriber admin can choose from when configuring invoice number restrictions for manually created invoices.</value>
        [DataMember(Name = "RestrictionTypesSelect", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesSelectItem> RestrictionTypesSelect { get; set; }

        /// <summary>
        /// A list of options in the \&quot;ReuseInvoiceNumber\&quot; drop-down list a subscriber admin can choose from when configuring invoice number.
        /// </summary>
        /// <value>A list of options in the \&quot;ReuseInvoiceNumber\&quot; drop-down list a subscriber admin can choose from when configuring invoice number.</value>
        [DataMember(Name = "ReuseInvoiceNumbersSelect", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesSelectItem> ReuseInvoiceNumbersSelect { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumberRequirement
        /// </summary>
        [DataMember(Name = "InvoiceNumberRequirement", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement InvoiceNumberRequirement { get; set; }

        /// <summary>
        /// A list of default explanatory comments on the invoice number format for the corresponding restrictions. A comment is displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the restrictions specified by their subscriber. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.
        /// </summary>
        /// <value>A list of default explanatory comments on the invoice number format for the corresponding restrictions. A comment is displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the restrictions specified by their subscriber. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.</value>
        [DataMember(Name = "DefaultRestrictionComments", EmitDefaultValue = false)]
        public Dictionary<string, string> DefaultRestrictionComments { get; set; }

        /// <summary>
        /// A list of default regular expressions that define search patterns used to validate the number format of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.
        /// </summary>
        /// <value>A list of default regular expressions that define search patterns used to validate the number format of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.</value>
        [DataMember(Name = "DefaultRestrictionPatterns", EmitDefaultValue = false)]
        public Dictionary<string, string> DefaultRestrictionPatterns { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "Resources", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesLocalizations Resources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel {\n");
            sb.Append("  AutoGenerationTypesSelect: ").Append(AutoGenerationTypesSelect).Append("\n");
            sb.Append("  RestrictionTypesSelect: ").Append(RestrictionTypesSelect).Append("\n");
            sb.Append("  ReuseInvoiceNumbersSelect: ").Append(ReuseInvoiceNumbersSelect).Append("\n");
            sb.Append("  InvoiceNumberRequirement: ").Append(InvoiceNumberRequirement).Append("\n");
            sb.Append("  DefaultRestrictionComments: ").Append(DefaultRestrictionComments).Append("\n");
            sb.Append("  DefaultRestrictionPatterns: ").Append(DefaultRestrictionPatterns).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AutoGenerationTypesSelect == input.AutoGenerationTypesSelect ||
                    this.AutoGenerationTypesSelect != null &&
                    input.AutoGenerationTypesSelect != null &&
                    this.AutoGenerationTypesSelect.SequenceEqual(input.AutoGenerationTypesSelect)
                ) && 
                (
                    this.RestrictionTypesSelect == input.RestrictionTypesSelect ||
                    this.RestrictionTypesSelect != null &&
                    input.RestrictionTypesSelect != null &&
                    this.RestrictionTypesSelect.SequenceEqual(input.RestrictionTypesSelect)
                ) && 
                (
                    this.ReuseInvoiceNumbersSelect == input.ReuseInvoiceNumbersSelect ||
                    this.ReuseInvoiceNumbersSelect != null &&
                    input.ReuseInvoiceNumbersSelect != null &&
                    this.ReuseInvoiceNumbersSelect.SequenceEqual(input.ReuseInvoiceNumbersSelect)
                ) && 
                (
                    this.InvoiceNumberRequirement == input.InvoiceNumberRequirement ||
                    (this.InvoiceNumberRequirement != null &&
                    this.InvoiceNumberRequirement.Equals(input.InvoiceNumberRequirement))
                ) && 
                (
                    this.DefaultRestrictionComments == input.DefaultRestrictionComments ||
                    this.DefaultRestrictionComments != null &&
                    input.DefaultRestrictionComments != null &&
                    this.DefaultRestrictionComments.SequenceEqual(input.DefaultRestrictionComments)
                ) && 
                (
                    this.DefaultRestrictionPatterns == input.DefaultRestrictionPatterns ||
                    this.DefaultRestrictionPatterns != null &&
                    input.DefaultRestrictionPatterns != null &&
                    this.DefaultRestrictionPatterns.SequenceEqual(input.DefaultRestrictionPatterns)
                ) && 
                (
                    this.Resources == input.Resources ||
                    (this.Resources != null &&
                    this.Resources.Equals(input.Resources))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoGenerationTypesSelect != null)
                {
                    hashCode = (hashCode * 59) + this.AutoGenerationTypesSelect.GetHashCode();
                }
                if (this.RestrictionTypesSelect != null)
                {
                    hashCode = (hashCode * 59) + this.RestrictionTypesSelect.GetHashCode();
                }
                if (this.ReuseInvoiceNumbersSelect != null)
                {
                    hashCode = (hashCode * 59) + this.ReuseInvoiceNumbersSelect.GetHashCode();
                }
                if (this.InvoiceNumberRequirement != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceNumberRequirement.GetHashCode();
                }
                if (this.DefaultRestrictionComments != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultRestrictionComments.GetHashCode();
                }
                if (this.DefaultRestrictionPatterns != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultRestrictionPatterns.GetHashCode();
                }
                if (this.Resources != null)
                {
                    hashCode = (hashCode * 59) + this.Resources.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
