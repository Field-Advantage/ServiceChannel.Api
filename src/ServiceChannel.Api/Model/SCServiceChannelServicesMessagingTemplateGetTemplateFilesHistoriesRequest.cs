/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// holds request
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Template.GetTemplateFilesHistoriesRequest")]
    public partial class SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest : IEquatable<SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest" /> class.
        /// </summary>
        /// <param name="fileTypeIds">Gets or sets FileTypeId..</param>
        /// <param name="sort">Sort resources by the specified property in the response..</param>
        /// <param name="page">Results page number..</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50..</param>
        public SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest(List<int> fileTypeIds = default(List<int>), string sort = default(string), int page = default(int), int pageSize = default(int))
        {
            this.FileTypeIds = fileTypeIds;
            this.Sort = sort;
            this.Page = page;
            this.PageSize = pageSize;
        }

        /// <summary>
        /// Gets or sets FileTypeId.
        /// </summary>
        /// <value>Gets or sets FileTypeId.</value>
        [DataMember(Name = "FileTypeIds", EmitDefaultValue = false)]
        public List<int> FileTypeIds { get; set; }

        /// <summary>
        /// Sort resources by the specified property in the response.
        /// </summary>
        /// <value>Sort resources by the specified property in the response.</value>
        [DataMember(Name = "Sort", EmitDefaultValue = false)]
        public string Sort { get; set; }

        /// <summary>
        /// Results page number.
        /// </summary>
        /// <value>Results page number.</value>
        [DataMember(Name = "Page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Gets or Sets IsPageSizeDefault
        /// </summary>
        [DataMember(Name = "IsPageSizeDefault", EmitDefaultValue = true)]
        public bool IsPageSizeDefault { get; private set; }

        /// <summary>
        /// Returns false as IsPageSizeDefault should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsPageSizeDefault()
        {
            return false;
        }
        /// <summary>
        /// Number of objects on the results page. The default and maximum per page is 50.
        /// </summary>
        /// <value>Number of objects on the results page. The default and maximum per page is 50.</value>
        [DataMember(Name = "PageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest {\n");
            sb.Append("  FileTypeIds: ").Append(FileTypeIds).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  IsPageSizeDefault: ").Append(IsPageSizeDefault).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileTypeIds == input.FileTypeIds ||
                    this.FileTypeIds != null &&
                    input.FileTypeIds != null &&
                    this.FileTypeIds.SequenceEqual(input.FileTypeIds)
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.IsPageSizeDefault == input.IsPageSizeDefault ||
                    this.IsPageSizeDefault.Equals(input.IsPageSizeDefault)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileTypeIds != null)
                {
                    hashCode = (hashCode * 59) + this.FileTypeIds.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPageSizeDefault.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
