/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.BatchRfp.BatchCreateRfp")]
    public partial class SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp : IEquatable<SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp" /> class.
        /// </summary>
        /// <param name="rfpNumber">The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified..</param>
        /// <param name="tradeId">The unique trade identifier. (required).</param>
        /// <param name="description">RFP description. (required).</param>
        /// <param name="date">The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time..</param>
        /// <param name="dueHrs">Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group..</param>
        /// <param name="dueDate">Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group..</param>
        /// <param name="locationId">Location identifier (required).</param>
        /// <param name="createRequestId">Create Request Id from project module.</param>
        /// <param name="locationName">Store ID (required).</param>
        /// <param name="providerId">The unique provider identifier. (required).</param>
        /// <param name="projectId">The unique project identifier..</param>
        /// <param name="purchaseOrder">The Purchase Order..</param>
        /// <param name="providerEmail">Provider&#39;s email.</param>
        /// <param name="waitingForPrpEmail">User&#39;s email.</param>
        public SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp(string rfpNumber = default(string), int tradeId = default(int), string description = default(string), DateTime date = default(DateTime), double dueHrs = default(double), DateTime dueDate = default(DateTime), int locationId = default(int), string createRequestId = default(string), string locationName = default(string), int providerId = default(int), int projectId = default(int), string purchaseOrder = default(string), string providerEmail = default(string), string waitingForPrpEmail = default(string))
        {
            this.TradeId = tradeId;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp and cannot be null");
            }
            this.Description = description;
            this.LocationId = locationId;
            // to ensure "locationName" is required (not null)
            if (locationName == null)
            {
                throw new ArgumentNullException("locationName is a required property for SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp and cannot be null");
            }
            this.LocationName = locationName;
            this.ProviderId = providerId;
            this.RfpNumber = rfpNumber;
            this.Date = date;
            this.DueHrs = dueHrs;
            this.DueDate = dueDate;
            this.CreateRequestId = createRequestId;
            this.ProjectId = projectId;
            this.PurchaseOrder = purchaseOrder;
            this.ProviderEmail = providerEmail;
            this.WaitingForPrpEmail = waitingForPrpEmail;
        }

        /// <summary>
        /// The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified.
        /// </summary>
        /// <value>The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified.</value>
        [DataMember(Name = "RfpNumber", EmitDefaultValue = false)]
        public string RfpNumber { get; set; }

        /// <summary>
        /// The unique trade identifier.
        /// </summary>
        /// <value>The unique trade identifier.</value>
        [DataMember(Name = "TradeId", IsRequired = true, EmitDefaultValue = true)]
        public int TradeId { get; set; }

        /// <summary>
        /// RFP description.
        /// </summary>
        /// <value>RFP description.</value>
        [DataMember(Name = "Description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time.
        /// </summary>
        /// <value>The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time.</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.
        /// </summary>
        /// <value>Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.</value>
        [DataMember(Name = "DueHrs", EmitDefaultValue = false)]
        public double DueHrs { get; set; }

        /// <summary>
        /// Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.
        /// </summary>
        /// <value>Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.</value>
        [DataMember(Name = "DueDate", EmitDefaultValue = false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Location identifier
        /// </summary>
        /// <value>Location identifier</value>
        [DataMember(Name = "LocationId", IsRequired = true, EmitDefaultValue = true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Create Request Id from project module
        /// </summary>
        /// <value>Create Request Id from project module</value>
        [DataMember(Name = "CreateRequestId", EmitDefaultValue = false)]
        public string CreateRequestId { get; set; }

        /// <summary>
        /// Store ID
        /// </summary>
        /// <value>Store ID</value>
        [DataMember(Name = "LocationName", IsRequired = true, EmitDefaultValue = true)]
        public string LocationName { get; set; }

        /// <summary>
        /// The unique provider identifier.
        /// </summary>
        /// <value>The unique provider identifier.</value>
        [DataMember(Name = "ProviderId", IsRequired = true, EmitDefaultValue = true)]
        public int ProviderId { get; set; }

        /// <summary>
        /// The unique project identifier.
        /// </summary>
        /// <value>The unique project identifier.</value>
        [DataMember(Name = "ProjectId", EmitDefaultValue = false)]
        public int ProjectId { get; set; }

        /// <summary>
        /// The Purchase Order.
        /// </summary>
        /// <value>The Purchase Order.</value>
        [DataMember(Name = "PurchaseOrder", EmitDefaultValue = false)]
        public string PurchaseOrder { get; set; }

        /// <summary>
        /// Provider&#39;s email
        /// </summary>
        /// <value>Provider&#39;s email</value>
        [DataMember(Name = "ProviderEmail", EmitDefaultValue = false)]
        public string ProviderEmail { get; set; }

        /// <summary>
        /// User&#39;s email
        /// </summary>
        /// <value>User&#39;s email</value>
        [DataMember(Name = "WaitingForPrpEmail", EmitDefaultValue = false)]
        public string WaitingForPrpEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp {\n");
            sb.Append("  RfpNumber: ").Append(RfpNumber).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DueHrs: ").Append(DueHrs).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  CreateRequestId: ").Append(CreateRequestId).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  PurchaseOrder: ").Append(PurchaseOrder).Append("\n");
            sb.Append("  ProviderEmail: ").Append(ProviderEmail).Append("\n");
            sb.Append("  WaitingForPrpEmail: ").Append(WaitingForPrpEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingBatchRfpBatchCreateRfp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RfpNumber == input.RfpNumber ||
                    (this.RfpNumber != null &&
                    this.RfpNumber.Equals(input.RfpNumber))
                ) && 
                (
                    this.TradeId == input.TradeId ||
                    this.TradeId.Equals(input.TradeId)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DueHrs == input.DueHrs ||
                    this.DueHrs.Equals(input.DueHrs)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.CreateRequestId == input.CreateRequestId ||
                    (this.CreateRequestId != null &&
                    this.CreateRequestId.Equals(input.CreateRequestId))
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                ) && 
                (
                    this.PurchaseOrder == input.PurchaseOrder ||
                    (this.PurchaseOrder != null &&
                    this.PurchaseOrder.Equals(input.PurchaseOrder))
                ) && 
                (
                    this.ProviderEmail == input.ProviderEmail ||
                    (this.ProviderEmail != null &&
                    this.ProviderEmail.Equals(input.ProviderEmail))
                ) && 
                (
                    this.WaitingForPrpEmail == input.WaitingForPrpEmail ||
                    (this.WaitingForPrpEmail != null &&
                    this.WaitingForPrpEmail.Equals(input.WaitingForPrpEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RfpNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RfpNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradeId.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DueHrs.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.CreateRequestId != null)
                {
                    hashCode = (hashCode * 59) + this.CreateRequestId.GetHashCode();
                }
                if (this.LocationName != null)
                {
                    hashCode = (hashCode * 59) + this.LocationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                if (this.PurchaseOrder != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrder.GetHashCode();
                }
                if (this.ProviderEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderEmail.GetHashCode();
                }
                if (this.WaitingForPrpEmail != null)
                {
                    hashCode = (hashCode * 59) + this.WaitingForPrpEmail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
