/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The request object to assign a proposal to a user.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Proposals.AssignUserToProposalRequest")]
    public partial class SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest : IEquatable<SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest" /> class.
        /// </summary>
        /// <param name="userId">The unique numeric identifier of the user to assign the proposal to. (required).</param>
        /// <param name="comments">Your comment describing why you are assigning or reassigning the proposal to the specified user..</param>
        /// <param name="userEmail">The email address to send a notification about the assigned proposal to. The default is the email address of the user who is assigned the proposal..</param>
        /// <param name="reasonString">Reason for approving the proposal. Don’t pass when assigning the proposal to a user..</param>
        /// <param name="note">Note added upon assigning or reassigning the proposal..</param>
        public SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest(int userId = default(int), string comments = default(string), string userEmail = default(string), string reasonString = default(string), string note = default(string))
        {
            this.UserId = userId;
            this.Comments = comments;
            this.UserEmail = userEmail;
            this.ReasonString = reasonString;
            this.Note = note;
        }

        /// <summary>
        /// The unique numeric identifier of the user to assign the proposal to.
        /// </summary>
        /// <value>The unique numeric identifier of the user to assign the proposal to.</value>
        [DataMember(Name = "UserId", IsRequired = true, EmitDefaultValue = true)]
        public int UserId { get; set; }

        /// <summary>
        /// Your comment describing why you are assigning or reassigning the proposal to the specified user.
        /// </summary>
        /// <value>Your comment describing why you are assigning or reassigning the proposal to the specified user.</value>
        [DataMember(Name = "Comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// The email address to send a notification about the assigned proposal to. The default is the email address of the user who is assigned the proposal.
        /// </summary>
        /// <value>The email address to send a notification about the assigned proposal to. The default is the email address of the user who is assigned the proposal.</value>
        [DataMember(Name = "UserEmail", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Reason for approving the proposal. Don’t pass when assigning the proposal to a user.
        /// </summary>
        /// <value>Reason for approving the proposal. Don’t pass when assigning the proposal to a user.</value>
        [DataMember(Name = "ReasonString", EmitDefaultValue = false)]
        public string ReasonString { get; set; }

        /// <summary>
        /// Note added upon assigning or reassigning the proposal.
        /// </summary>
        /// <value>Note added upon assigning or reassigning the proposal.</value>
        [DataMember(Name = "Note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  ReasonString: ").Append(ReasonString).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.ReasonString == input.ReasonString ||
                    (this.ReasonString != null &&
                    this.ReasonString.Equals(input.ReasonString))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                if (this.UserEmail != null)
                {
                    hashCode = (hashCode * 59) + this.UserEmail.GetHashCode();
                }
                if (this.ReasonString != null)
                {
                    hashCode = (hashCode * 59) + this.ReasonString.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
