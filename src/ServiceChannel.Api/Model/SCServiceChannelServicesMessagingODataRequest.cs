/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingODataRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.ODataRequest")]
    public partial class SCServiceChannelServicesMessagingODataRequest : IEquatable<SCServiceChannelServicesMessagingODataRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingODataRequest" /> class.
        /// </summary>
        /// <param name="expand">Expand a navigation property..</param>
        /// <param name="select">Select a set of properties to return..</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL..</param>
        /// <param name="orderby">Order resources by the specified property in the response..</param>
        /// <param name="count">Include the count of the matching resources in the response..</param>
        /// <param name="top">Return the specified number of items in the response..</param>
        /// <param name="skip">Skip the specified number of items in the response..</param>
        public SCServiceChannelServicesMessagingODataRequest(string expand = default(string), string select = default(string), string filter = default(string), string orderby = default(string), string count = default(string), int top = default(int), int skip = default(int))
        {
            this.Expand = expand;
            this.Select = select;
            this.Filter = filter;
            this.Orderby = orderby;
            this.Count = count;
            this.Top = top;
            this.Skip = skip;
        }

        /// <summary>
        /// Expand a navigation property.
        /// </summary>
        /// <value>Expand a navigation property.</value>
        [DataMember(Name = "Expand", EmitDefaultValue = false)]
        public string Expand { get; set; }

        /// <summary>
        /// Select a set of properties to return.
        /// </summary>
        /// <value>Select a set of properties to return.</value>
        [DataMember(Name = "Select", EmitDefaultValue = false)]
        public string Select { get; set; }

        /// <summary>
        /// Filter a collection of resources addressed by a request URL.
        /// </summary>
        /// <value>Filter a collection of resources addressed by a request URL.</value>
        [DataMember(Name = "Filter", EmitDefaultValue = false)]
        public string Filter { get; set; }

        /// <summary>
        /// Order resources by the specified property in the response.
        /// </summary>
        /// <value>Order resources by the specified property in the response.</value>
        [DataMember(Name = "Orderby", EmitDefaultValue = false)]
        public string Orderby { get; set; }

        /// <summary>
        /// Include the count of the matching resources in the response.
        /// </summary>
        /// <value>Include the count of the matching resources in the response.</value>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public string Count { get; set; }

        /// <summary>
        /// Return the specified number of items in the response.
        /// </summary>
        /// <value>Return the specified number of items in the response.</value>
        [DataMember(Name = "Top", EmitDefaultValue = false)]
        public int Top { get; set; }

        /// <summary>
        /// Skip the specified number of items in the response.
        /// </summary>
        /// <value>Skip the specified number of items in the response.</value>
        [DataMember(Name = "Skip", EmitDefaultValue = false)]
        public int Skip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingODataRequest {\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Select: ").Append(Select).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Orderby: ").Append(Orderby).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingODataRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingODataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingODataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingODataRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Expand == input.Expand ||
                    (this.Expand != null &&
                    this.Expand.Equals(input.Expand))
                ) && 
                (
                    this.Select == input.Select ||
                    (this.Select != null &&
                    this.Select.Equals(input.Select))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Orderby == input.Orderby ||
                    (this.Orderby != null &&
                    this.Orderby.Equals(input.Orderby))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Top == input.Top ||
                    this.Top.Equals(input.Top)
                ) && 
                (
                    this.Skip == input.Skip ||
                    this.Skip.Equals(input.Skip)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expand != null)
                {
                    hashCode = (hashCode * 59) + this.Expand.GetHashCode();
                }
                if (this.Select != null)
                {
                    hashCode = (hashCode * 59) + this.Select.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.Orderby != null)
                {
                    hashCode = (hashCode * 59) + this.Orderby.GetHashCode();
                }
                if (this.Count != null)
                {
                    hashCode = (hashCode * 59) + this.Count.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Top.GetHashCode();
                hashCode = (hashCode * 59) + this.Skip.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
