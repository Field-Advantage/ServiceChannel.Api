/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingProposalsProposalInfo
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Proposals.ProposalInfo")]
    public partial class SCServiceChannelServicesMessagingProposalsProposalInfo : IEquatable<SCServiceChannelServicesMessagingProposalsProposalInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsProposalInfo" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="number">number.</param>
        /// <param name="description">description.</param>
        /// <param name="description2">description2.</param>
        /// <param name="comments">comments.</param>
        /// <param name="location">location.</param>
        /// <param name="provider">provider.</param>
        /// <param name="subscriber">subscriber.</param>
        /// <param name="trade">trade.</param>
        /// <param name="workOrder">workOrder.</param>
        /// <param name="currency">currency.</param>
        /// <param name="rFP">rFP.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="createdDateDto">createdDateDto.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="submittedTo">submittedTo.</param>
        /// <param name="status">status.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="assignedTo">assignedTo.</param>
        /// <param name="scheduledDate">scheduledDate.</param>
        /// <param name="scheduledDateDto">scheduledDateDto.</param>
        /// <param name="amountCategories">amountCategories.</param>
        /// <param name="updatedDate">Updated Date.</param>
        /// <param name="updatedDateDto">updatedDateDto.</param>
        /// <param name="recommendation">recommendation.</param>
        /// <param name="amount">amount.</param>
        /// <param name="assignedFromLevel">assignedFromLevel.</param>
        /// <param name="assignedToLevel">assignedToLevel.</param>
        /// <param name="levelsEscalateTo">levelsEscalateTo.</param>
        /// <param name="actions">actions.</param>
        /// <param name="mlpRecommendations">mlpRecommendations.</param>
        /// <param name="mlpRecommendation">mlpRecommendation.</param>
        /// <param name="currentProposalMlpRuleSetId">currentProposalMlpRuleSetId.</param>
        /// <param name="currentProposalMlpRuleSetName">currentProposalMlpRuleSetName.</param>
        /// <param name="currentProposalMlpLevelId">currentProposalMlpLevelId.</param>
        /// <param name="currentProposalMlpLevelName">currentProposalMlpLevelName.</param>
        /// <param name="poNumber">poNumber.</param>
        /// <param name="isMlpLimitOverrun">isMlpLimitOverrun (default to false).</param>
        /// <param name="nextLevelEmpty">nextLevelEmpty (default to false).</param>
        /// <param name="project">project.</param>
        public SCServiceChannelServicesMessagingProposalsProposalInfo(int id = default(int), string number = default(string), string description = default(string), string description2 = default(string), string comments = default(string), SCServiceChannelServicesMessagingLocationLocation location = default(SCServiceChannelServicesMessagingLocationLocation), SCServiceChannelServicesMessagingProvidersProvider provider = default(SCServiceChannelServicesMessagingProvidersProvider), SCServiceChannelServicesMessagingSubscribersSubscriber subscriber = default(SCServiceChannelServicesMessagingSubscribersSubscriber), SCServiceChannelServicesMessagingTradeTrade trade = default(SCServiceChannelServicesMessagingTradeTrade), SCServiceChannelServicesMessagingWorkordersWorkOrder workOrder = default(SCServiceChannelServicesMessagingWorkordersWorkOrder), SCServiceChannelServicesMessagingCurrenciesCurrency currency = default(SCServiceChannelServicesMessagingCurrenciesCurrency), SCServiceChannelServicesMessagingRfpRfp rFP = default(SCServiceChannelServicesMessagingRfpRfp), DateTime createdDate = default(DateTime), DateTime createdDateDto = default(DateTime), SCServiceChannelServicesMessagingUsersUserInfo createdBy = default(SCServiceChannelServicesMessagingUsersUserInfo), string submittedTo = default(string), SCServiceChannelServicesMessagingProposalsProposalStatus status = default(SCServiceChannelServicesMessagingProposalsProposalStatus), List<SCServiceChannelServicesMessagingAttachmentsAttachment> attachments = default(List<SCServiceChannelServicesMessagingAttachmentsAttachment>), SCServiceChannelServicesMessagingUsersUserInfo assignedTo = default(SCServiceChannelServicesMessagingUsersUserInfo), DateTime scheduledDate = default(DateTime), DateTime scheduledDateDto = default(DateTime), List<SCServiceChannelServicesMessagingProposalsProposalCategoryInfo> amountCategories = default(List<SCServiceChannelServicesMessagingProposalsProposalCategoryInfo>), DateTime updatedDate = default(DateTime), DateTime updatedDateDto = default(DateTime), SCServiceChannelServicesMessagingProposalsProposalRecommendation recommendation = default(SCServiceChannelServicesMessagingProposalsProposalRecommendation), double amount = default(double), string assignedFromLevel = default(string), string assignedToLevel = default(string), List<SCServiceChannelServicesMessagingProposalsEscalateTo> levelsEscalateTo = default(List<SCServiceChannelServicesMessagingProposalsEscalateTo>), List<string> actions = default(List<string>), List<SCServiceChannelApiModelProposalsMlpRecommendation> mlpRecommendations = default(List<SCServiceChannelApiModelProposalsMlpRecommendation>), SCServiceChannelApiModelProposalsMlpRecommendation mlpRecommendation = default(SCServiceChannelApiModelProposalsMlpRecommendation), int currentProposalMlpRuleSetId = default(int), string currentProposalMlpRuleSetName = default(string), int currentProposalMlpLevelId = default(int), string currentProposalMlpLevelName = default(string), string poNumber = default(string), bool isMlpLimitOverrun = false, bool nextLevelEmpty = false, SCServiceChannelApiModelProposalsProposalProjectSimpleModel project = default(SCServiceChannelApiModelProposalsProposalProjectSimpleModel))
        {
            this.Id = id;
            this.Number = number;
            this.Description = description;
            this.Description2 = description2;
            this.Comments = comments;
            this.Location = location;
            this.Provider = provider;
            this.Subscriber = subscriber;
            this.Trade = trade;
            this.WorkOrder = workOrder;
            this.Currency = currency;
            this.RFP = rFP;
            this.CreatedDate = createdDate;
            this.CreatedDateDto = createdDateDto;
            this.CreatedBy = createdBy;
            this.SubmittedTo = submittedTo;
            this.Status = status;
            this.Attachments = attachments;
            this.AssignedTo = assignedTo;
            this.ScheduledDate = scheduledDate;
            this.ScheduledDateDto = scheduledDateDto;
            this.AmountCategories = amountCategories;
            this.UpdatedDate = updatedDate;
            this.UpdatedDateDto = updatedDateDto;
            this.Recommendation = recommendation;
            this.Amount = amount;
            this.AssignedFromLevel = assignedFromLevel;
            this.AssignedToLevel = assignedToLevel;
            this.LevelsEscalateTo = levelsEscalateTo;
            this.Actions = actions;
            this.MlpRecommendations = mlpRecommendations;
            this.MlpRecommendation = mlpRecommendation;
            this.CurrentProposalMlpRuleSetId = currentProposalMlpRuleSetId;
            this.CurrentProposalMlpRuleSetName = currentProposalMlpRuleSetName;
            this.CurrentProposalMlpLevelId = currentProposalMlpLevelId;
            this.CurrentProposalMlpLevelName = currentProposalMlpLevelName;
            this.PoNumber = poNumber;
            this.IsMlpLimitOverrun = isMlpLimitOverrun;
            this.NextLevelEmpty = nextLevelEmpty;
            this.Project = project;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Description2
        /// </summary>
        [DataMember(Name = "Description2", EmitDefaultValue = false)]
        public string Description2 { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "Comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "Location", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingLocationLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "Provider", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingProvidersProvider Provider { get; set; }

        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name = "Subscriber", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingSubscribersSubscriber Subscriber { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingTradeTrade Trade { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrder
        /// </summary>
        [DataMember(Name = "WorkOrder", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersWorkOrder WorkOrder { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingCurrenciesCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets RFP
        /// </summary>
        [DataMember(Name = "RFP", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingRfpRfp RFP { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateDto
        /// </summary>
        [DataMember(Name = "CreatedDate_dto", EmitDefaultValue = false)]
        public DateTime CreatedDateDto { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersUserInfo CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedTo
        /// </summary>
        [DataMember(Name = "SubmittedTo", EmitDefaultValue = false)]
        public string SubmittedTo { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingProposalsProposalStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTo
        /// </summary>
        [DataMember(Name = "AssignedTo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersUserInfo AssignedTo { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDate
        /// </summary>
        [DataMember(Name = "ScheduledDate", EmitDefaultValue = false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDateDto
        /// </summary>
        [DataMember(Name = "ScheduledDateDto", EmitDefaultValue = false)]
        public DateTime ScheduledDateDto { get; set; }

        /// <summary>
        /// Gets or Sets AmountCategories
        /// </summary>
        [DataMember(Name = "AmountCategories", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingProposalsProposalCategoryInfo> AmountCategories { get; set; }

        /// <summary>
        /// Updated Date
        /// </summary>
        /// <value>Updated Date</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDateDto
        /// </summary>
        [DataMember(Name = "UpdatedDateDto", EmitDefaultValue = false)]
        public DateTime UpdatedDateDto { get; set; }

        /// <summary>
        /// Gets or Sets Recommendation
        /// </summary>
        [DataMember(Name = "Recommendation", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingProposalsProposalRecommendation Recommendation { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets AssignedFromLevel
        /// </summary>
        [DataMember(Name = "AssignedFromLevel", EmitDefaultValue = false)]
        public string AssignedFromLevel { get; set; }

        /// <summary>
        /// Gets or Sets AssignedToLevel
        /// </summary>
        [DataMember(Name = "AssignedToLevel", EmitDefaultValue = false)]
        public string AssignedToLevel { get; set; }

        /// <summary>
        /// Gets or Sets LevelsEscalateTo
        /// </summary>
        [DataMember(Name = "LevelsEscalateTo", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingProposalsEscalateTo> LevelsEscalateTo { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "Actions", EmitDefaultValue = false)]
        public List<string> Actions { get; set; }

        /// <summary>
        /// Gets or Sets MlpRecommendations
        /// </summary>
        [DataMember(Name = "MlpRecommendations", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelProposalsMlpRecommendation> MlpRecommendations { get; set; }

        /// <summary>
        /// Gets or Sets MlpRecommendation
        /// </summary>
        [DataMember(Name = "MlpRecommendation", EmitDefaultValue = false)]
        public SCServiceChannelApiModelProposalsMlpRecommendation MlpRecommendation { get; set; }

        /// <summary>
        /// Gets or Sets CurrentProposalMlpRuleSetId
        /// </summary>
        [DataMember(Name = "CurrentProposalMlpRuleSetId", EmitDefaultValue = false)]
        public int CurrentProposalMlpRuleSetId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentProposalMlpRuleSetName
        /// </summary>
        [DataMember(Name = "CurrentProposalMlpRuleSetName", EmitDefaultValue = false)]
        public string CurrentProposalMlpRuleSetName { get; set; }

        /// <summary>
        /// Gets or Sets CurrentProposalMlpLevelId
        /// </summary>
        [DataMember(Name = "CurrentProposalMlpLevelId", EmitDefaultValue = false)]
        public int CurrentProposalMlpLevelId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentProposalMlpLevelName
        /// </summary>
        [DataMember(Name = "CurrentProposalMlpLevelName", EmitDefaultValue = false)]
        public string CurrentProposalMlpLevelName { get; set; }

        /// <summary>
        /// Gets or Sets PoNumber
        /// </summary>
        [DataMember(Name = "PoNumber", EmitDefaultValue = false)]
        public string PoNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsMlpLimitOverrun
        /// </summary>
        [DataMember(Name = "IsMlpLimitOverrun", EmitDefaultValue = true)]
        public bool IsMlpLimitOverrun { get; set; }

        /// <summary>
        /// Gets or Sets NextLevelEmpty
        /// </summary>
        [DataMember(Name = "NextLevelEmpty", EmitDefaultValue = true)]
        public bool NextLevelEmpty { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "Project", EmitDefaultValue = false)]
        public SCServiceChannelApiModelProposalsProposalProjectSimpleModel Project { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsProposalInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Description2: ").Append(Description2).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  WorkOrder: ").Append(WorkOrder).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RFP: ").Append(RFP).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedDateDto: ").Append(CreatedDateDto).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  SubmittedTo: ").Append(SubmittedTo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AssignedTo: ").Append(AssignedTo).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  ScheduledDateDto: ").Append(ScheduledDateDto).Append("\n");
            sb.Append("  AmountCategories: ").Append(AmountCategories).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDateDto: ").Append(UpdatedDateDto).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssignedFromLevel: ").Append(AssignedFromLevel).Append("\n");
            sb.Append("  AssignedToLevel: ").Append(AssignedToLevel).Append("\n");
            sb.Append("  LevelsEscalateTo: ").Append(LevelsEscalateTo).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  MlpRecommendations: ").Append(MlpRecommendations).Append("\n");
            sb.Append("  MlpRecommendation: ").Append(MlpRecommendation).Append("\n");
            sb.Append("  CurrentProposalMlpRuleSetId: ").Append(CurrentProposalMlpRuleSetId).Append("\n");
            sb.Append("  CurrentProposalMlpRuleSetName: ").Append(CurrentProposalMlpRuleSetName).Append("\n");
            sb.Append("  CurrentProposalMlpLevelId: ").Append(CurrentProposalMlpLevelId).Append("\n");
            sb.Append("  CurrentProposalMlpLevelName: ").Append(CurrentProposalMlpLevelName).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  IsMlpLimitOverrun: ").Append(IsMlpLimitOverrun).Append("\n");
            sb.Append("  NextLevelEmpty: ").Append(NextLevelEmpty).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingProposalsProposalInfo);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsProposalInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingProposalsProposalInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsProposalInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Description2 == input.Description2 ||
                    (this.Description2 != null &&
                    this.Description2.Equals(input.Description2))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Subscriber == input.Subscriber ||
                    (this.Subscriber != null &&
                    this.Subscriber.Equals(input.Subscriber))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.WorkOrder == input.WorkOrder ||
                    (this.WorkOrder != null &&
                    this.WorkOrder.Equals(input.WorkOrder))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.RFP == input.RFP ||
                    (this.RFP != null &&
                    this.RFP.Equals(input.RFP))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.CreatedDateDto == input.CreatedDateDto ||
                    (this.CreatedDateDto != null &&
                    this.CreatedDateDto.Equals(input.CreatedDateDto))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.SubmittedTo == input.SubmittedTo ||
                    (this.SubmittedTo != null &&
                    this.SubmittedTo.Equals(input.SubmittedTo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.AssignedTo == input.AssignedTo ||
                    (this.AssignedTo != null &&
                    this.AssignedTo.Equals(input.AssignedTo))
                ) && 
                (
                    this.ScheduledDate == input.ScheduledDate ||
                    (this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(input.ScheduledDate))
                ) && 
                (
                    this.ScheduledDateDto == input.ScheduledDateDto ||
                    (this.ScheduledDateDto != null &&
                    this.ScheduledDateDto.Equals(input.ScheduledDateDto))
                ) && 
                (
                    this.AmountCategories == input.AmountCategories ||
                    this.AmountCategories != null &&
                    input.AmountCategories != null &&
                    this.AmountCategories.SequenceEqual(input.AmountCategories)
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.UpdatedDateDto == input.UpdatedDateDto ||
                    (this.UpdatedDateDto != null &&
                    this.UpdatedDateDto.Equals(input.UpdatedDateDto))
                ) && 
                (
                    this.Recommendation == input.Recommendation ||
                    (this.Recommendation != null &&
                    this.Recommendation.Equals(input.Recommendation))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.AssignedFromLevel == input.AssignedFromLevel ||
                    (this.AssignedFromLevel != null &&
                    this.AssignedFromLevel.Equals(input.AssignedFromLevel))
                ) && 
                (
                    this.AssignedToLevel == input.AssignedToLevel ||
                    (this.AssignedToLevel != null &&
                    this.AssignedToLevel.Equals(input.AssignedToLevel))
                ) && 
                (
                    this.LevelsEscalateTo == input.LevelsEscalateTo ||
                    this.LevelsEscalateTo != null &&
                    input.LevelsEscalateTo != null &&
                    this.LevelsEscalateTo.SequenceEqual(input.LevelsEscalateTo)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.MlpRecommendations == input.MlpRecommendations ||
                    this.MlpRecommendations != null &&
                    input.MlpRecommendations != null &&
                    this.MlpRecommendations.SequenceEqual(input.MlpRecommendations)
                ) && 
                (
                    this.MlpRecommendation == input.MlpRecommendation ||
                    (this.MlpRecommendation != null &&
                    this.MlpRecommendation.Equals(input.MlpRecommendation))
                ) && 
                (
                    this.CurrentProposalMlpRuleSetId == input.CurrentProposalMlpRuleSetId ||
                    this.CurrentProposalMlpRuleSetId.Equals(input.CurrentProposalMlpRuleSetId)
                ) && 
                (
                    this.CurrentProposalMlpRuleSetName == input.CurrentProposalMlpRuleSetName ||
                    (this.CurrentProposalMlpRuleSetName != null &&
                    this.CurrentProposalMlpRuleSetName.Equals(input.CurrentProposalMlpRuleSetName))
                ) && 
                (
                    this.CurrentProposalMlpLevelId == input.CurrentProposalMlpLevelId ||
                    this.CurrentProposalMlpLevelId.Equals(input.CurrentProposalMlpLevelId)
                ) && 
                (
                    this.CurrentProposalMlpLevelName == input.CurrentProposalMlpLevelName ||
                    (this.CurrentProposalMlpLevelName != null &&
                    this.CurrentProposalMlpLevelName.Equals(input.CurrentProposalMlpLevelName))
                ) && 
                (
                    this.PoNumber == input.PoNumber ||
                    (this.PoNumber != null &&
                    this.PoNumber.Equals(input.PoNumber))
                ) && 
                (
                    this.IsMlpLimitOverrun == input.IsMlpLimitOverrun ||
                    this.IsMlpLimitOverrun.Equals(input.IsMlpLimitOverrun)
                ) && 
                (
                    this.NextLevelEmpty == input.NextLevelEmpty ||
                    this.NextLevelEmpty.Equals(input.NextLevelEmpty)
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Description2 != null)
                {
                    hashCode = (hashCode * 59) + this.Description2.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.Subscriber != null)
                {
                    hashCode = (hashCode * 59) + this.Subscriber.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                if (this.WorkOrder != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrder.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.RFP != null)
                {
                    hashCode = (hashCode * 59) + this.RFP.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.CreatedDateDto != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateDto.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.SubmittedTo != null)
                {
                    hashCode = (hashCode * 59) + this.SubmittedTo.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.AssignedTo != null)
                {
                    hashCode = (hashCode * 59) + this.AssignedTo.GetHashCode();
                }
                if (this.ScheduledDate != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDate.GetHashCode();
                }
                if (this.ScheduledDateDto != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDateDto.GetHashCode();
                }
                if (this.AmountCategories != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCategories.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                if (this.UpdatedDateDto != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateDto.GetHashCode();
                }
                if (this.Recommendation != null)
                {
                    hashCode = (hashCode * 59) + this.Recommendation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.AssignedFromLevel != null)
                {
                    hashCode = (hashCode * 59) + this.AssignedFromLevel.GetHashCode();
                }
                if (this.AssignedToLevel != null)
                {
                    hashCode = (hashCode * 59) + this.AssignedToLevel.GetHashCode();
                }
                if (this.LevelsEscalateTo != null)
                {
                    hashCode = (hashCode * 59) + this.LevelsEscalateTo.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                if (this.MlpRecommendations != null)
                {
                    hashCode = (hashCode * 59) + this.MlpRecommendations.GetHashCode();
                }
                if (this.MlpRecommendation != null)
                {
                    hashCode = (hashCode * 59) + this.MlpRecommendation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentProposalMlpRuleSetId.GetHashCode();
                if (this.CurrentProposalMlpRuleSetName != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentProposalMlpRuleSetName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentProposalMlpLevelId.GetHashCode();
                if (this.CurrentProposalMlpLevelName != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentProposalMlpLevelName.GetHashCode();
                }
                if (this.PoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PoNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMlpLimitOverrun.GetHashCode();
                hashCode = (hashCode * 59) + this.NextLevelEmpty.GetHashCode();
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
