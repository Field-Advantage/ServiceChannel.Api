/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Problem solve model
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.Dashboard.Requests.SubmitSolvedIssueModel")]
    public partial class SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel : IEquatable<SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum DuplicateWorkOrder for value: DuplicateWorkOrder
            /// </summary>
            [EnumMember(Value = "DuplicateWorkOrder")]
            DuplicateWorkOrder = 2,

            /// <summary>
            /// Enum DecisionTree for value: DecisionTree
            /// </summary>
            [EnumMember(Value = "DecisionTree")]
            DecisionTree = 3,

            /// <summary>
            /// Enum DecisionTreeStop for value: DecisionTreeStop
            /// </summary>
            [EnumMember(Value = "DecisionTreeStop")]
            DecisionTreeStop = 4,

            /// <summary>
            /// Enum IssueListMessage for value: IssueListMessage
            /// </summary>
            [EnumMember(Value = "IssueListMessage")]
            IssueListMessage = 5

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="locationId">locationId (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="category">category.</param>
        /// <param name="trade">trade.</param>
        /// <param name="priority">priority.</param>
        /// <param name="problemCode">problemCode.</param>
        /// <param name="problemDescription">problemDescription.</param>
        /// <param name="workOrderId">workOrderId.</param>
        /// <param name="nTE">nTE.</param>
        /// <param name="currencyId">currencyId.</param>
        public SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel(TypeEnum? type = default(TypeEnum?), int locationId = default(int), string source = default(string), string category = default(string), string trade = default(string), string priority = default(string), string problemCode = default(string), string problemDescription = default(string), int workOrderId = default(int), double nTE = default(double), int currencyId = default(int))
        {
            this.LocationId = locationId;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel and cannot be null");
            }
            this.Source = source;
            this.Type = type;
            this.Category = category;
            this.Trade = trade;
            this.Priority = priority;
            this.ProblemCode = problemCode;
            this.ProblemDescription = problemDescription;
            this.WorkOrderId = workOrderId;
            this.NTE = nTE;
            this.CurrencyId = currencyId;
        }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "LocationId", IsRequired = true, EmitDefaultValue = true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "Source", IsRequired = true, EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets ProblemCode
        /// </summary>
        [DataMember(Name = "ProblemCode", EmitDefaultValue = false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Gets or Sets ProblemDescription
        /// </summary>
        [DataMember(Name = "ProblemDescription", EmitDefaultValue = false)]
        public string ProblemDescription { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderId
        /// </summary>
        [DataMember(Name = "WorkOrderId", EmitDefaultValue = false)]
        public int WorkOrderId { get; set; }

        /// <summary>
        /// Gets or Sets NTE
        /// </summary>
        [DataMember(Name = "NTE", EmitDefaultValue = false)]
        public double NTE { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "CurrencyId", EmitDefaultValue = false)]
        public int CurrencyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  ProblemDescription: ").Append(ProblemDescription).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  NTE: ").Append(NTE).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ProblemCode == input.ProblemCode ||
                    (this.ProblemCode != null &&
                    this.ProblemCode.Equals(input.ProblemCode))
                ) && 
                (
                    this.ProblemDescription == input.ProblemDescription ||
                    (this.ProblemDescription != null &&
                    this.ProblemDescription.Equals(input.ProblemDescription))
                ) && 
                (
                    this.WorkOrderId == input.WorkOrderId ||
                    this.WorkOrderId.Equals(input.WorkOrderId)
                ) && 
                (
                    this.NTE == input.NTE ||
                    this.NTE.Equals(input.NTE)
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    this.CurrencyId.Equals(input.CurrencyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.ProblemCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemCode.GetHashCode();
                }
                if (this.ProblemDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkOrderId.GetHashCode();
                hashCode = (hashCode * 59) + this.NTE.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
