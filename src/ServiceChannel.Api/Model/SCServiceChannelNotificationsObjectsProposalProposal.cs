/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelNotificationsObjectsProposalProposal
    /// </summary>
    [DataContract(Name = "ServiceChannel.Notifications.Objects.Proposal.Proposal")]
    public partial class SCServiceChannelNotificationsObjectsProposalProposal : IEquatable<SCServiceChannelNotificationsObjectsProposalProposal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelNotificationsObjectsProposalProposal" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="number">number.</param>
        /// <param name="description">description.</param>
        /// <param name="comments">comments.</param>
        /// <param name="trade">trade.</param>
        /// <param name="locationId">locationId.</param>
        /// <param name="subscriberId">subscriberId.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="workOrderId">workOrderId.</param>
        /// <param name="workOrderNumber">workOrderNumber.</param>
        /// <param name="rfpId">rfpId.</param>
        /// <param name="currencyAlphabeticalCode">currencyAlphabeticalCode.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="assignedTo">assignedTo.</param>
        /// <param name="requestedBy">requestedBy.</param>
        /// <param name="scheduledDate">scheduledDate.</param>
        /// <param name="status">status.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="amount">amount.</param>
        /// <param name="amountCategories">amountCategories.</param>
        /// <param name="asset">asset.</param>
        /// <param name="category">category.</param>
        /// <param name="projectId">projectId.</param>
        public SCServiceChannelNotificationsObjectsProposalProposal(int id = default(int), string number = default(string), string description = default(string), string comments = default(string), string trade = default(string), int locationId = default(int), int subscriberId = default(int), int providerId = default(int), int workOrderId = default(int), string workOrderNumber = default(string), int rfpId = default(int), string currencyAlphabeticalCode = default(string), SCServiceChannelNotificationsObjectsUser createdBy = default(SCServiceChannelNotificationsObjectsUser), SCServiceChannelNotificationsObjectsUser updatedBy = default(SCServiceChannelNotificationsObjectsUser), SCServiceChannelNotificationsObjectsUser assignedTo = default(SCServiceChannelNotificationsObjectsUser), string requestedBy = default(string), DateTime scheduledDate = default(DateTime), string status = default(string), List<SCServiceChannelNotificationsObjectsAttachment> attachments = default(List<SCServiceChannelNotificationsObjectsAttachment>), double amount = default(double), List<SCServiceChannelNotificationsObjectsProposalCategory> amountCategories = default(List<SCServiceChannelNotificationsObjectsProposalCategory>), List<SCServiceChannelNotificationsObjectsProposalAsset> asset = default(List<SCServiceChannelNotificationsObjectsProposalAsset>), string category = default(string), int projectId = default(int))
        {
            this.Id = id;
            this.Number = number;
            this.Description = description;
            this.Comments = comments;
            this.Trade = trade;
            this.LocationId = locationId;
            this.SubscriberId = subscriberId;
            this.ProviderId = providerId;
            this.WorkOrderId = workOrderId;
            this.WorkOrderNumber = workOrderNumber;
            this.RfpId = rfpId;
            this.CurrencyAlphabeticalCode = currencyAlphabeticalCode;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.AssignedTo = assignedTo;
            this.RequestedBy = requestedBy;
            this.ScheduledDate = scheduledDate;
            this.Status = status;
            this.Attachments = attachments;
            this.Amount = amount;
            this.AmountCategories = amountCategories;
            this.Asset = asset;
            this.Category = category;
            this.ProjectId = projectId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "Comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberId
        /// </summary>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderId
        /// </summary>
        [DataMember(Name = "WorkOrderId", EmitDefaultValue = false)]
        public int WorkOrderId { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderNumber
        /// </summary>
        [DataMember(Name = "WorkOrderNumber", EmitDefaultValue = false)]
        public string WorkOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets RfpId
        /// </summary>
        [DataMember(Name = "RfpId", EmitDefaultValue = false)]
        public int RfpId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyAlphabeticalCode
        /// </summary>
        [DataMember(Name = "CurrencyAlphabeticalCode", EmitDefaultValue = false)]
        public string CurrencyAlphabeticalCode { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public SCServiceChannelNotificationsObjectsUser CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "UpdatedBy", EmitDefaultValue = false)]
        public SCServiceChannelNotificationsObjectsUser UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTo
        /// </summary>
        [DataMember(Name = "AssignedTo", EmitDefaultValue = false)]
        public SCServiceChannelNotificationsObjectsUser AssignedTo { get; set; }

        /// <summary>
        /// Gets or Sets RequestedBy
        /// </summary>
        [DataMember(Name = "RequestedBy", EmitDefaultValue = false)]
        public string RequestedBy { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDate
        /// </summary>
        [DataMember(Name = "ScheduledDate", EmitDefaultValue = false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<SCServiceChannelNotificationsObjectsAttachment> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets AmountCategories
        /// </summary>
        [DataMember(Name = "AmountCategories", EmitDefaultValue = false)]
        public List<SCServiceChannelNotificationsObjectsProposalCategory> AmountCategories { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "Asset", EmitDefaultValue = false)]
        public List<SCServiceChannelNotificationsObjectsProposalAsset> Asset { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "ProjectId", EmitDefaultValue = false)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelNotificationsObjectsProposalProposal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  WorkOrderNumber: ").Append(WorkOrderNumber).Append("\n");
            sb.Append("  RfpId: ").Append(RfpId).Append("\n");
            sb.Append("  CurrencyAlphabeticalCode: ").Append(CurrencyAlphabeticalCode).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  AssignedTo: ").Append(AssignedTo).Append("\n");
            sb.Append("  RequestedBy: ").Append(RequestedBy).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountCategories: ").Append(AmountCategories).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelNotificationsObjectsProposalProposal);
        }

        /// <summary>
        /// Returns true if SCServiceChannelNotificationsObjectsProposalProposal instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelNotificationsObjectsProposalProposal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelNotificationsObjectsProposalProposal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.WorkOrderId == input.WorkOrderId ||
                    this.WorkOrderId.Equals(input.WorkOrderId)
                ) && 
                (
                    this.WorkOrderNumber == input.WorkOrderNumber ||
                    (this.WorkOrderNumber != null &&
                    this.WorkOrderNumber.Equals(input.WorkOrderNumber))
                ) && 
                (
                    this.RfpId == input.RfpId ||
                    this.RfpId.Equals(input.RfpId)
                ) && 
                (
                    this.CurrencyAlphabeticalCode == input.CurrencyAlphabeticalCode ||
                    (this.CurrencyAlphabeticalCode != null &&
                    this.CurrencyAlphabeticalCode.Equals(input.CurrencyAlphabeticalCode))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.AssignedTo == input.AssignedTo ||
                    (this.AssignedTo != null &&
                    this.AssignedTo.Equals(input.AssignedTo))
                ) && 
                (
                    this.RequestedBy == input.RequestedBy ||
                    (this.RequestedBy != null &&
                    this.RequestedBy.Equals(input.RequestedBy))
                ) && 
                (
                    this.ScheduledDate == input.ScheduledDate ||
                    (this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(input.ScheduledDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.AmountCategories == input.AmountCategories ||
                    this.AmountCategories != null &&
                    input.AmountCategories != null &&
                    this.AmountCategories.SequenceEqual(input.AmountCategories)
                ) && 
                (
                    this.Asset == input.Asset ||
                    this.Asset != null &&
                    input.Asset != null &&
                    this.Asset.SequenceEqual(input.Asset)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                hashCode = (hashCode * 59) + this.WorkOrderId.GetHashCode();
                if (this.WorkOrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RfpId.GetHashCode();
                if (this.CurrencyAlphabeticalCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyAlphabeticalCode.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.AssignedTo != null)
                {
                    hashCode = (hashCode * 59) + this.AssignedTo.GetHashCode();
                }
                if (this.RequestedBy != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedBy.GetHashCode();
                }
                if (this.ScheduledDate != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDate.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.AmountCategories != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCategories.GetHashCode();
                }
                if (this.Asset != null)
                {
                    hashCode = (hashCode * 59) + this.Asset.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
