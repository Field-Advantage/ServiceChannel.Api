/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The model for update isDoNotDispatch value for providers.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.WebApi.Models.UpdateDispatchSettingModel")]
    public partial class SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel : IEquatable<SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel" /> class.
        /// </summary>
        /// <param name="subscriberId">The id of a calling subscriber.              This id is the one who sets isDoNotDispatch value or is an aggregator of other subscribers.              If it is the aggregator then subscriberId and subscriberIds from SubscriberProviders pairs do not match..</param>
        /// <param name="doNotDispatch">The flag to set isDoNotDispatch value for providers. (default to false).</param>
        /// <param name="subscriberIdProviderIds">The list of pairs subscriber and providers to set isDoNotDispatch value..</param>
        public SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel(int subscriberId = default(int), bool doNotDispatch = false, List<SCServiceChannelServicesWebApiModelsSubscriberIdProviderIdsPair> subscriberIdProviderIds = default(List<SCServiceChannelServicesWebApiModelsSubscriberIdProviderIdsPair>))
        {
            this.SubscriberId = subscriberId;
            this.DoNotDispatch = doNotDispatch;
            this.SubscriberIdProviderIds = subscriberIdProviderIds;
        }

        /// <summary>
        /// The id of a calling subscriber.              This id is the one who sets isDoNotDispatch value or is an aggregator of other subscribers.              If it is the aggregator then subscriberId and subscriberIds from SubscriberProviders pairs do not match.
        /// </summary>
        /// <value>The id of a calling subscriber.              This id is the one who sets isDoNotDispatch value or is an aggregator of other subscribers.              If it is the aggregator then subscriberId and subscriberIds from SubscriberProviders pairs do not match.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// The flag to set isDoNotDispatch value for providers.
        /// </summary>
        /// <value>The flag to set isDoNotDispatch value for providers.</value>
        [DataMember(Name = "DoNotDispatch", EmitDefaultValue = true)]
        public bool DoNotDispatch { get; set; }

        /// <summary>
        /// The list of pairs subscriber and providers to set isDoNotDispatch value.
        /// </summary>
        /// <value>The list of pairs subscriber and providers to set isDoNotDispatch value.</value>
        [DataMember(Name = "SubscriberIdProviderIds", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesWebApiModelsSubscriberIdProviderIdsPair> SubscriberIdProviderIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel {\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  DoNotDispatch: ").Append(DoNotDispatch).Append("\n");
            sb.Append("  SubscriberIdProviderIds: ").Append(SubscriberIdProviderIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.DoNotDispatch == input.DoNotDispatch ||
                    this.DoNotDispatch.Equals(input.DoNotDispatch)
                ) && 
                (
                    this.SubscriberIdProviderIds == input.SubscriberIdProviderIds ||
                    this.SubscriberIdProviderIds != null &&
                    input.SubscriberIdProviderIds != null &&
                    this.SubscriberIdProviderIds.SequenceEqual(input.SubscriberIdProviderIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.DoNotDispatch.GetHashCode();
                if (this.SubscriberIdProviderIds != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriberIdProviderIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
