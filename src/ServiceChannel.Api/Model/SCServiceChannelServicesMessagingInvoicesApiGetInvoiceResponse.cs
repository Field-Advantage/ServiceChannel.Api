/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.ApiGetInvoiceResponse")]
    public partial class SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse : IEquatable<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse" /> class.
        /// </summary>
        /// <param name="vendorPayee">vendorPayee.</param>
        /// <param name="providerId">Gets or sets provider identifier..</param>
        /// <param name="subscriberId">Gets or sets subscriber identifier..</param>
        /// <param name="locationId">Gets or sets location identifier..</param>
        /// <param name="withAutoApprovalCriteria">Gets or sets if invoice meets Auto Approval Criteria. (default to false).</param>
        /// <param name="providerName">providerName.</param>
        /// <param name="previousUpdated">previousUpdated.</param>
        /// <param name="discount">discount.</param>
        /// <param name="subscriberFee">subscriberFee.</param>
        /// <param name="providerFee">providerFee.</param>
        /// <param name="inPaymentManager">inPaymentManager (default to false).</param>
        /// <param name="discountPercent">discountPercent.</param>
        /// <param name="status">status.</param>
        /// <param name="earlyPayFeePercent">earlyPayFeePercent.</param>
        /// <param name="labels">labels.</param>
        /// <param name="weatherEventTypeForInvoice">weatherEventTypeForInvoice.</param>
        /// <param name="isHideUsernameOnInvoice">isHideUsernameOnInvoice (default to false).</param>
        /// <param name="isInvoiceNegativeLineItemsEnabled">isInvoiceNegativeLineItemsEnabled (default to false).</param>
        /// <param name="isHolidayLaborRate">isHolidayLaborRate (default to false).</param>
        /// <param name="projectId">WO ProjectId.</param>
        /// <param name="isRestrictedForChanges">isRestrictedForChanges (default to false).</param>
        /// <param name="payments">payments.</param>
        /// <param name="disputeReason">disputeReason.</param>
        /// <param name="rejectionReasonDescription">rejectionReasonDescription.</param>
        /// <param name="id">id.</param>
        /// <param name="number">Gets or sets invoice number..</param>
        /// <param name="batchNumber">Gets or sets Batch number..</param>
        /// <param name="invoiceTax">invoiceTax.</param>
        /// <param name="postedTaxRate">postedTaxRate.</param>
        /// <param name="postedTax2Rate">postedTax2Rate.</param>
        /// <param name="vendorPayeeId">vendorPayeeId.</param>
        /// <param name="invoiceTotal">Gets or sets total with tax amounts..</param>
        /// <param name="invoiceBalance">invoiceBalance.</param>
        /// <param name="currency">currency.</param>
        /// <param name="approvedDate">approvedDate.</param>
        /// <param name="approvalCode">approvalCode.</param>
        /// <param name="editableAdditionalApprovalCode">editableAdditionalApprovalCode.</param>
        /// <param name="postedDate">postedDate.</param>
        /// <param name="postedBy">postedBy.</param>
        /// <param name="subtotal">subtotal.</param>
        /// <param name="trade">trade.</param>
        /// <param name="invoiceAmountsDetails">invoiceAmountsDetails.</param>
        /// <param name="invoiceTaxesDetails">invoiceTaxesDetails.</param>
        /// <param name="tax2Details">tax2Details.</param>
        /// <param name="labors">labors.</param>
        /// <param name="materials">materials.</param>
        /// <param name="travels">travels.</param>
        /// <param name="others">others.</param>
        /// <param name="taxApprovalCodeGroups">taxApprovalCodeGroups.</param>
        /// <param name="tax2ApprovalCodeGroups">tax2ApprovalCodeGroups.</param>
        /// <param name="freightApprovalCodeGroups">freightApprovalCodeGroups.</param>
        /// <param name="withMismatchedRates">withMismatchedRates (default to false).</param>
        /// <param name="isOutsourced">isOutsourced (default to false).</param>
        /// <param name="starredBy">starredBy.</param>
        /// <param name="isStarred">isStarred (default to false).</param>
        /// <param name="starredDate">starredDate.</param>
        /// <param name="description">description.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="laborTaxIncluded">laborTaxIncluded (default to false).</param>
        /// <param name="travelTaxIncluded">travelTaxIncluded (default to false).</param>
        /// <param name="materialsTaxIncluded">materialsTaxIncluded (default to false).</param>
        /// <param name="freightTaxIncluded">freightTaxIncluded (default to false).</param>
        /// <param name="otherTaxIncluded">otherTaxIncluded (default to false).</param>
        /// <param name="nonTaxableLabor">nonTaxableLabor.</param>
        /// <param name="nonTaxableTravel">nonTaxableTravel.</param>
        /// <param name="nonTaxableMaterial">nonTaxableMaterial.</param>
        /// <param name="nonTaxableFreight">nonTaxableFreight.</param>
        /// <param name="nonTaxableOther">nonTaxableOther.</param>
        /// <param name="statusChangeDate">statusChangeDate.</param>
        /// <param name="statusChangeUser">statusChangeUser.</param>
        /// <param name="statusChangeUserid">statusChangeUserid.</param>
        /// <param name="isDuplicate">isDuplicate (default to false).</param>
        /// <param name="woTrackingNumber">Gets or sets work order tracking number..</param>
        /// <param name="terms">terms.</param>
        /// <param name="comments">comments.</param>
        /// <param name="paidDate">paidDate.</param>
        /// <param name="transferredDate">transferredDate.</param>
        /// <param name="lastActionDate">lastActionDate.</param>
        /// <param name="updatedDate">Updated Date.</param>
        /// <param name="statusHistoryShort">statusHistoryShort.</param>
        /// <param name="woAssignedTo">Gets or sets WO Assignee.</param>
        /// <param name="approvalCodes">approvalCodes.</param>
        /// <param name="isChargesApprovalCodesDefault">isChargesApprovalCodesDefault (default to false).</param>
        /// <param name="storedFeatures">storedFeatures.</param>
        public SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse(SCServiceChannelServicesMessagingInvoicesApiVendorPayee vendorPayee = default(SCServiceChannelServicesMessagingInvoicesApiVendorPayee), int providerId = default(int), int subscriberId = default(int), int locationId = default(int), bool withAutoApprovalCriteria = false, string providerName = default(string), string previousUpdated = default(string), double discount = default(double), double subscriberFee = default(double), double providerFee = default(double), bool inPaymentManager = false, double discountPercent = default(double), string status = default(string), double earlyPayFeePercent = default(double), List<SCServiceChannelApiModelWorkordersLabel> labels = default(List<SCServiceChannelApiModelWorkordersLabel>), SCServiceChannelApiModelInvoicesWeatherEventTypeForInvoice weatherEventTypeForInvoice = default(SCServiceChannelApiModelInvoicesWeatherEventTypeForInvoice), bool isHideUsernameOnInvoice = false, bool isInvoiceNegativeLineItemsEnabled = false, bool isHolidayLaborRate = false, int projectId = default(int), bool isRestrictedForChanges = false, List<SCServiceChannelServicesMessagingInvoicesInvoicePaymentResponse> payments = default(List<SCServiceChannelServicesMessagingInvoicesInvoicePaymentResponse>), string disputeReason = default(string), string rejectionReasonDescription = default(string), int id = default(int), string number = default(string), string batchNumber = default(string), double invoiceTax = default(double), float postedTaxRate = default(float), float postedTax2Rate = default(float), int vendorPayeeId = default(int), double invoiceTotal = default(double), double invoiceBalance = default(double), SCServiceChannelServicesMessagingCurrenciesCurrency currency = default(SCServiceChannelServicesMessagingCurrenciesCurrency), DateTime approvedDate = default(DateTime), string approvalCode = default(string), SCServiceChannelServicesMessagingApprovalCodesEditableAdditionalApprovalCode editableAdditionalApprovalCode = default(SCServiceChannelServicesMessagingApprovalCodesEditableAdditionalApprovalCode), DateTime postedDate = default(DateTime), string postedBy = default(string), double subtotal = default(double), string trade = default(string), SCServiceChannelServicesMessagingInvoicesInvoiceAmountsDetails invoiceAmountsDetails = default(SCServiceChannelServicesMessagingInvoicesInvoiceAmountsDetails), SCServiceChannelServicesMessagingInvoicesInvoiceTaxesDetails invoiceTaxesDetails = default(SCServiceChannelServicesMessagingInvoicesInvoiceTaxesDetails), SCServiceChannelServicesMessagingInvoicesTax2Details tax2Details = default(SCServiceChannelServicesMessagingInvoicesTax2Details), List<SCServiceChannelServicesMessagingInvoicesInvoiceLabor> labors = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceLabor>), List<SCServiceChannelServicesMessagingInvoicesInvoiceMaterial> materials = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceMaterial>), List<SCServiceChannelServicesMessagingInvoicesInvoiceTravel> travels = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceTravel>), List<SCServiceChannelServicesMessagingInvoicesInvoiceOther> others = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceOther>), List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> taxApprovalCodeGroups = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup>), List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> tax2ApprovalCodeGroups = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup>), List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> freightApprovalCodeGroups = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup>), bool withMismatchedRates = false, bool isOutsourced = false, string starredBy = default(string), bool isStarred = false, DateTime starredDate = default(DateTime), string description = default(string), DateTime invoiceDate = default(DateTime), bool laborTaxIncluded = false, bool travelTaxIncluded = false, bool materialsTaxIncluded = false, bool freightTaxIncluded = false, bool otherTaxIncluded = false, int nonTaxableLabor = default(int), int nonTaxableTravel = default(int), int nonTaxableMaterial = default(int), int nonTaxableFreight = default(int), int nonTaxableOther = default(int), DateTime statusChangeDate = default(DateTime), string statusChangeUser = default(string), string statusChangeUserid = default(string), bool isDuplicate = false, int woTrackingNumber = default(int), string terms = default(string), string comments = default(string), DateTime paidDate = default(DateTime), DateTime transferredDate = default(DateTime), DateTime lastActionDate = default(DateTime), DateTime updatedDate = default(DateTime), List<SCServiceChannelServicesMessagingInvoicesStatusHistoryShort> statusHistoryShort = default(List<SCServiceChannelServicesMessagingInvoicesStatusHistoryShort>), string woAssignedTo = default(string), List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCode> approvalCodes = default(List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCode>), bool isChargesApprovalCodesDefault = false, List<string> storedFeatures = default(List<string>))
        {
            this.VendorPayee = vendorPayee;
            this.ProviderId = providerId;
            this.SubscriberId = subscriberId;
            this.LocationId = locationId;
            this.WithAutoApprovalCriteria = withAutoApprovalCriteria;
            this.ProviderName = providerName;
            this.PreviousUpdated = previousUpdated;
            this.Discount = discount;
            this.SubscriberFee = subscriberFee;
            this.ProviderFee = providerFee;
            this.InPaymentManager = inPaymentManager;
            this.DiscountPercent = discountPercent;
            this.Status = status;
            this.EarlyPayFeePercent = earlyPayFeePercent;
            this.Labels = labels;
            this.WeatherEventTypeForInvoice = weatherEventTypeForInvoice;
            this.IsHideUsernameOnInvoice = isHideUsernameOnInvoice;
            this.IsInvoiceNegativeLineItemsEnabled = isInvoiceNegativeLineItemsEnabled;
            this.IsHolidayLaborRate = isHolidayLaborRate;
            this.ProjectId = projectId;
            this.IsRestrictedForChanges = isRestrictedForChanges;
            this.Payments = payments;
            this.DisputeReason = disputeReason;
            this.RejectionReasonDescription = rejectionReasonDescription;
            this.Id = id;
            this.Number = number;
            this.BatchNumber = batchNumber;
            this.InvoiceTax = invoiceTax;
            this.PostedTaxRate = postedTaxRate;
            this.PostedTax2Rate = postedTax2Rate;
            this.VendorPayeeId = vendorPayeeId;
            this.InvoiceTotal = invoiceTotal;
            this.InvoiceBalance = invoiceBalance;
            this.Currency = currency;
            this.ApprovedDate = approvedDate;
            this.ApprovalCode = approvalCode;
            this.EditableAdditionalApprovalCode = editableAdditionalApprovalCode;
            this.PostedDate = postedDate;
            this.PostedBy = postedBy;
            this.Subtotal = subtotal;
            this.Trade = trade;
            this.InvoiceAmountsDetails = invoiceAmountsDetails;
            this.InvoiceTaxesDetails = invoiceTaxesDetails;
            this.Tax2Details = tax2Details;
            this.Labors = labors;
            this.Materials = materials;
            this.Travels = travels;
            this.Others = others;
            this.TaxApprovalCodeGroups = taxApprovalCodeGroups;
            this.Tax2ApprovalCodeGroups = tax2ApprovalCodeGroups;
            this.FreightApprovalCodeGroups = freightApprovalCodeGroups;
            this.WithMismatchedRates = withMismatchedRates;
            this.IsOutsourced = isOutsourced;
            this.StarredBy = starredBy;
            this.IsStarred = isStarred;
            this.StarredDate = starredDate;
            this.Description = description;
            this.InvoiceDate = invoiceDate;
            this.LaborTaxIncluded = laborTaxIncluded;
            this.TravelTaxIncluded = travelTaxIncluded;
            this.MaterialsTaxIncluded = materialsTaxIncluded;
            this.FreightTaxIncluded = freightTaxIncluded;
            this.OtherTaxIncluded = otherTaxIncluded;
            this.NonTaxableLabor = nonTaxableLabor;
            this.NonTaxableTravel = nonTaxableTravel;
            this.NonTaxableMaterial = nonTaxableMaterial;
            this.NonTaxableFreight = nonTaxableFreight;
            this.NonTaxableOther = nonTaxableOther;
            this.StatusChangeDate = statusChangeDate;
            this.StatusChangeUser = statusChangeUser;
            this.StatusChangeUserid = statusChangeUserid;
            this.IsDuplicate = isDuplicate;
            this.WoTrackingNumber = woTrackingNumber;
            this.Terms = terms;
            this.Comments = comments;
            this.PaidDate = paidDate;
            this.TransferredDate = transferredDate;
            this.LastActionDate = lastActionDate;
            this.UpdatedDate = updatedDate;
            this.StatusHistoryShort = statusHistoryShort;
            this.WoAssignedTo = woAssignedTo;
            this.ApprovalCodes = approvalCodes;
            this.IsChargesApprovalCodesDefault = isChargesApprovalCodesDefault;
            this.StoredFeatures = storedFeatures;
        }

        /// <summary>
        /// Gets or Sets VendorPayee
        /// </summary>
        [DataMember(Name = "VendorPayee", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesApiVendorPayee VendorPayee { get; set; }

        /// <summary>
        /// Gets or sets provider identifier.
        /// </summary>
        /// <value>Gets or sets provider identifier.</value>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Gets or sets subscriber identifier.
        /// </summary>
        /// <value>Gets or sets subscriber identifier.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or sets location identifier.
        /// </summary>
        /// <value>Gets or sets location identifier.</value>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or sets invoice number.
        /// </summary>
        /// <value>Gets or sets invoice number.</value>
        [DataMember(Name = "InvoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; private set; }

        /// <summary>
        /// Returns false as InvoiceNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInvoiceNumber()
        {
            return false;
        }
        /// <summary>
        /// Gets or sets if invoice meets Auto Approval Criteria.
        /// </summary>
        /// <value>Gets or sets if invoice meets Auto Approval Criteria.</value>
        [DataMember(Name = "WithAutoApprovalCriteria", EmitDefaultValue = true)]
        public bool WithAutoApprovalCriteria { get; set; }

        /// <summary>
        /// Gets or Sets PostedDateStr
        /// </summary>
        [DataMember(Name = "PostedDateStr", EmitDefaultValue = false)]
        public string PostedDateStr { get; private set; }

        /// <summary>
        /// Returns false as PostedDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostedDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets InvoiceDateStr
        /// </summary>
        [DataMember(Name = "InvoiceDateStr", EmitDefaultValue = false)]
        public string InvoiceDateStr { get; private set; }

        /// <summary>
        /// Returns false as InvoiceDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInvoiceDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PaidDateStr
        /// </summary>
        [DataMember(Name = "PaidDateStr", EmitDefaultValue = false)]
        public string PaidDateStr { get; private set; }

        /// <summary>
        /// Returns false as PaidDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaidDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StarredDateStr
        /// </summary>
        [DataMember(Name = "StarredDateStr", EmitDefaultValue = false)]
        public string StarredDateStr { get; private set; }

        /// <summary>
        /// Returns false as StarredDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStarredDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ApprovedDateStr
        /// </summary>
        [DataMember(Name = "ApprovedDateStr", EmitDefaultValue = false)]
        public string ApprovedDateStr { get; private set; }

        /// <summary>
        /// Returns false as ApprovedDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApprovedDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TransferredDateStr
        /// </summary>
        [DataMember(Name = "TransferredDateStr", EmitDefaultValue = false)]
        public string TransferredDateStr { get; private set; }

        /// <summary>
        /// Returns false as TransferredDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransferredDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastActionDateStr
        /// </summary>
        [DataMember(Name = "LastActionDateStr", EmitDefaultValue = false)]
        public string LastActionDateStr { get; private set; }

        /// <summary>
        /// Returns false as LastActionDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastActionDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StatusChangeDateStr
        /// </summary>
        [DataMember(Name = "StatusChangeDateStr", EmitDefaultValue = false)]
        public string StatusChangeDateStr { get; private set; }

        /// <summary>
        /// Returns false as StatusChangeDateStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatusChangeDateStr()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name = "ProviderName", EmitDefaultValue = false)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets PreviousUpdated
        /// </summary>
        [DataMember(Name = "PreviousUpdated", EmitDefaultValue = false)]
        public string PreviousUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "Discount", EmitDefaultValue = false)]
        public double Discount { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberFee
        /// </summary>
        [DataMember(Name = "SubscriberFee", EmitDefaultValue = false)]
        public double SubscriberFee { get; set; }

        /// <summary>
        /// Gets or Sets ProviderFee
        /// </summary>
        [DataMember(Name = "ProviderFee", EmitDefaultValue = false)]
        public double ProviderFee { get; set; }

        /// <summary>
        /// Gets or Sets InPaymentManager
        /// </summary>
        [DataMember(Name = "InPaymentManager", EmitDefaultValue = true)]
        public bool InPaymentManager { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name = "DiscountPercent", EmitDefaultValue = false)]
        public double DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets EarlyPayFeePercent
        /// </summary>
        [DataMember(Name = "EarlyPayFeePercent", EmitDefaultValue = false)]
        public double EarlyPayFeePercent { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "Labels", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelWorkordersLabel> Labels { get; set; }

        /// <summary>
        /// Gets or Sets WeatherEventTypeForInvoice
        /// </summary>
        [DataMember(Name = "WeatherEventTypeForInvoice", EmitDefaultValue = false)]
        public SCServiceChannelApiModelInvoicesWeatherEventTypeForInvoice WeatherEventTypeForInvoice { get; set; }

        /// <summary>
        /// Gets or Sets IsHideUsernameOnInvoice
        /// </summary>
        [DataMember(Name = "IsHideUsernameOnInvoice", EmitDefaultValue = true)]
        public bool IsHideUsernameOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets IsInvoiceNegativeLineItemsEnabled
        /// </summary>
        [DataMember(Name = "IsInvoiceNegativeLineItemsEnabled", EmitDefaultValue = true)]
        public bool IsInvoiceNegativeLineItemsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsHolidayLaborRate
        /// </summary>
        [DataMember(Name = "IsHolidayLaborRate", EmitDefaultValue = true)]
        public bool IsHolidayLaborRate { get; set; }

        /// <summary>
        /// WO ProjectId
        /// </summary>
        /// <value>WO ProjectId</value>
        [DataMember(Name = "ProjectId", EmitDefaultValue = false)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsRestrictedForChanges
        /// </summary>
        [DataMember(Name = "IsRestrictedForChanges", EmitDefaultValue = true)]
        public bool IsRestrictedForChanges { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "Payments", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoicePaymentResponse> Payments { get; set; }

        /// <summary>
        /// Gets or Sets DisputeReason
        /// </summary>
        [DataMember(Name = "DisputeReason", EmitDefaultValue = false)]
        public string DisputeReason { get; set; }

        /// <summary>
        /// Gets or Sets RejectionReasonDescription
        /// </summary>
        [DataMember(Name = "RejectionReasonDescription", EmitDefaultValue = false)]
        public string RejectionReasonDescription { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets invoice number.
        /// </summary>
        /// <value>Gets or sets invoice number.</value>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets Batch number.
        /// </summary>
        /// <value>Gets or sets Batch number.</value>
        [DataMember(Name = "BatchNumber", EmitDefaultValue = false)]
        public string BatchNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTax
        /// </summary>
        [DataMember(Name = "InvoiceTax", EmitDefaultValue = false)]
        public double InvoiceTax { get; set; }

        /// <summary>
        /// Gets or Sets PostedTaxRate
        /// </summary>
        [DataMember(Name = "PostedTaxRate", EmitDefaultValue = false)]
        public float PostedTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets PostedTax2Rate
        /// </summary>
        [DataMember(Name = "PostedTax2Rate", EmitDefaultValue = false)]
        public float PostedTax2Rate { get; set; }

        /// <summary>
        /// Gets or Sets VendorPayeeId
        /// </summary>
        [DataMember(Name = "VendorPayeeId", EmitDefaultValue = false)]
        public int VendorPayeeId { get; set; }

        /// <summary>
        /// Gets or sets total with tax amounts.
        /// </summary>
        /// <value>Gets or sets total with tax amounts.</value>
        [DataMember(Name = "InvoiceTotal", EmitDefaultValue = false)]
        public double InvoiceTotal { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceBalance
        /// </summary>
        [DataMember(Name = "InvoiceBalance", EmitDefaultValue = false)]
        public double InvoiceBalance { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingCurrenciesCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedDate
        /// </summary>
        [DataMember(Name = "ApprovedDate", EmitDefaultValue = false)]
        public DateTime ApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCode
        /// </summary>
        [DataMember(Name = "ApprovalCode", EmitDefaultValue = false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets EditableAdditionalApprovalCode
        /// </summary>
        [DataMember(Name = "EditableAdditionalApprovalCode", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingApprovalCodesEditableAdditionalApprovalCode EditableAdditionalApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets PostedDate
        /// </summary>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// Gets or Sets PostedBy
        /// </summary>
        [DataMember(Name = "PostedBy", EmitDefaultValue = false)]
        public string PostedBy { get; set; }

        /// <summary>
        /// Gets or Sets Subtotal
        /// </summary>
        [DataMember(Name = "Subtotal", EmitDefaultValue = false)]
        public double Subtotal { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAmountsDetails
        /// </summary>
        [DataMember(Name = "InvoiceAmountsDetails", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceAmountsDetails InvoiceAmountsDetails { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTaxesDetails
        /// </summary>
        [DataMember(Name = "InvoiceTaxesDetails", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceTaxesDetails InvoiceTaxesDetails { get; set; }

        /// <summary>
        /// Gets or Sets Tax2Details
        /// </summary>
        [DataMember(Name = "Tax2Details", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesTax2Details Tax2Details { get; set; }

        /// <summary>
        /// Gets or Sets Labors
        /// </summary>
        [DataMember(Name = "Labors", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceLabor> Labors { get; set; }

        /// <summary>
        /// Gets or Sets Materials
        /// </summary>
        [DataMember(Name = "Materials", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceMaterial> Materials { get; set; }

        /// <summary>
        /// Gets or Sets Travels
        /// </summary>
        [DataMember(Name = "Travels", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceTravel> Travels { get; set; }

        /// <summary>
        /// Gets or Sets Others
        /// </summary>
        [DataMember(Name = "Others", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceOther> Others { get; set; }

        /// <summary>
        /// Gets or Sets TaxApprovalCodeGroups
        /// </summary>
        [DataMember(Name = "TaxApprovalCodeGroups", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> TaxApprovalCodeGroups { get; set; }

        /// <summary>
        /// Gets or Sets Tax2ApprovalCodeGroups
        /// </summary>
        [DataMember(Name = "Tax2ApprovalCodeGroups", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> Tax2ApprovalCodeGroups { get; set; }

        /// <summary>
        /// Gets or Sets FreightApprovalCodeGroups
        /// </summary>
        [DataMember(Name = "FreightApprovalCodeGroups", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> FreightApprovalCodeGroups { get; set; }

        /// <summary>
        /// Gets or Sets WithMismatchedRates
        /// </summary>
        [DataMember(Name = "WithMismatchedRates", EmitDefaultValue = true)]
        public bool WithMismatchedRates { get; set; }

        /// <summary>
        /// Gets or Sets IsOutsourced
        /// </summary>
        [DataMember(Name = "IsOutsourced", EmitDefaultValue = true)]
        public bool IsOutsourced { get; set; }

        /// <summary>
        /// Gets or Sets StarredBy
        /// </summary>
        [DataMember(Name = "StarredBy", EmitDefaultValue = false)]
        public string StarredBy { get; set; }

        /// <summary>
        /// Gets or Sets IsStarred
        /// </summary>
        [DataMember(Name = "IsStarred", EmitDefaultValue = true)]
        public bool IsStarred { get; set; }

        /// <summary>
        /// Gets or Sets IsTransferred
        /// </summary>
        [DataMember(Name = "IsTransferred", EmitDefaultValue = true)]
        public bool IsTransferred { get; private set; }

        /// <summary>
        /// Returns false as IsTransferred should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsTransferred()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StarredDate
        /// </summary>
        [DataMember(Name = "StarredDate", EmitDefaultValue = false)]
        public DateTime StarredDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name = "InvoiceDate", EmitDefaultValue = false)]
        public DateTime InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets LaborTaxIncluded
        /// </summary>
        [DataMember(Name = "LaborTaxIncluded", EmitDefaultValue = true)]
        public bool LaborTaxIncluded { get; set; }

        /// <summary>
        /// Gets or Sets TravelTaxIncluded
        /// </summary>
        [DataMember(Name = "TravelTaxIncluded", EmitDefaultValue = true)]
        public bool TravelTaxIncluded { get; set; }

        /// <summary>
        /// Gets or Sets MaterialsTaxIncluded
        /// </summary>
        [DataMember(Name = "MaterialsTaxIncluded", EmitDefaultValue = true)]
        public bool MaterialsTaxIncluded { get; set; }

        /// <summary>
        /// Gets or Sets FreightTaxIncluded
        /// </summary>
        [DataMember(Name = "FreightTaxIncluded", EmitDefaultValue = true)]
        public bool FreightTaxIncluded { get; set; }

        /// <summary>
        /// Gets or Sets OtherTaxIncluded
        /// </summary>
        [DataMember(Name = "OtherTaxIncluded", EmitDefaultValue = true)]
        public bool OtherTaxIncluded { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableLabor
        /// </summary>
        [DataMember(Name = "NonTaxableLabor", EmitDefaultValue = false)]
        public int NonTaxableLabor { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableTravel
        /// </summary>
        [DataMember(Name = "NonTaxableTravel", EmitDefaultValue = false)]
        public int NonTaxableTravel { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableMaterial
        /// </summary>
        [DataMember(Name = "NonTaxableMaterial", EmitDefaultValue = false)]
        public int NonTaxableMaterial { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableFreight
        /// </summary>
        [DataMember(Name = "NonTaxableFreight", EmitDefaultValue = false)]
        public int NonTaxableFreight { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableOther
        /// </summary>
        [DataMember(Name = "NonTaxableOther", EmitDefaultValue = false)]
        public int NonTaxableOther { get; set; }

        /// <summary>
        /// Gets or Sets IsExists
        /// </summary>
        [DataMember(Name = "IsExists", EmitDefaultValue = true)]
        public bool IsExists { get; private set; }

        /// <summary>
        /// Returns false as IsExists should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsExists()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StatusChangeDate
        /// </summary>
        [DataMember(Name = "StatusChangeDate", EmitDefaultValue = false)]
        public DateTime StatusChangeDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangeUser
        /// </summary>
        [DataMember(Name = "StatusChangeUser", EmitDefaultValue = false)]
        public string StatusChangeUser { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangeUserid
        /// </summary>
        [DataMember(Name = "StatusChangeUserid", EmitDefaultValue = false)]
        public string StatusChangeUserid { get; set; }

        /// <summary>
        /// Gets or Sets IsDuplicate
        /// </summary>
        [DataMember(Name = "IsDuplicate", EmitDefaultValue = true)]
        public bool IsDuplicate { get; set; }

        /// <summary>
        /// Gets or sets work order tracking number.
        /// </summary>
        /// <value>Gets or sets work order tracking number.</value>
        [DataMember(Name = "WoTrackingNumber", EmitDefaultValue = false)]
        public int WoTrackingNumber { get; set; }

        /// <summary>
        /// terms
        /// </summary>
        /// <value>terms</value>
        [DataMember(Name = "Terms", EmitDefaultValue = false)]
        public string Terms { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "Comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets PaidDate
        /// </summary>
        [DataMember(Name = "PaidDate", EmitDefaultValue = false)]
        public DateTime PaidDate { get; set; }

        /// <summary>
        /// Gets or Sets TransferredDate
        /// </summary>
        [DataMember(Name = "TransferredDate", EmitDefaultValue = false)]
        public DateTime TransferredDate { get; set; }

        /// <summary>
        /// Gets or Sets LastActionDate
        /// </summary>
        [DataMember(Name = "LastActionDate", EmitDefaultValue = false)]
        public DateTime LastActionDate { get; set; }

        /// <summary>
        /// Updated Date
        /// </summary>
        /// <value>Updated Date</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusHistoryShort
        /// </summary>
        [DataMember(Name = "StatusHistoryShort", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesStatusHistoryShort> StatusHistoryShort { get; set; }

        /// <summary>
        /// Gets or sets WO Assignee
        /// </summary>
        /// <value>Gets or sets WO Assignee</value>
        [DataMember(Name = "WoAssignedTo", EmitDefaultValue = false)]
        public string WoAssignedTo { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCodes
        /// </summary>
        [DataMember(Name = "ApprovalCodes", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCode> ApprovalCodes { get; set; }

        /// <summary>
        /// Gets or Sets IsChargesApprovalCodesDefault
        /// </summary>
        [DataMember(Name = "IsChargesApprovalCodesDefault", EmitDefaultValue = true)]
        public bool IsChargesApprovalCodesDefault { get; set; }

        /// <summary>
        /// Gets or Sets StoredFeatures
        /// </summary>
        [DataMember(Name = "StoredFeatures", EmitDefaultValue = false)]
        public List<string> StoredFeatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse {\n");
            sb.Append("  VendorPayee: ").Append(VendorPayee).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  WithAutoApprovalCriteria: ").Append(WithAutoApprovalCriteria).Append("\n");
            sb.Append("  PostedDateStr: ").Append(PostedDateStr).Append("\n");
            sb.Append("  InvoiceDateStr: ").Append(InvoiceDateStr).Append("\n");
            sb.Append("  PaidDateStr: ").Append(PaidDateStr).Append("\n");
            sb.Append("  StarredDateStr: ").Append(StarredDateStr).Append("\n");
            sb.Append("  ApprovedDateStr: ").Append(ApprovedDateStr).Append("\n");
            sb.Append("  TransferredDateStr: ").Append(TransferredDateStr).Append("\n");
            sb.Append("  LastActionDateStr: ").Append(LastActionDateStr).Append("\n");
            sb.Append("  StatusChangeDateStr: ").Append(StatusChangeDateStr).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  PreviousUpdated: ").Append(PreviousUpdated).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  SubscriberFee: ").Append(SubscriberFee).Append("\n");
            sb.Append("  ProviderFee: ").Append(ProviderFee).Append("\n");
            sb.Append("  InPaymentManager: ").Append(InPaymentManager).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EarlyPayFeePercent: ").Append(EarlyPayFeePercent).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  WeatherEventTypeForInvoice: ").Append(WeatherEventTypeForInvoice).Append("\n");
            sb.Append("  IsHideUsernameOnInvoice: ").Append(IsHideUsernameOnInvoice).Append("\n");
            sb.Append("  IsInvoiceNegativeLineItemsEnabled: ").Append(IsInvoiceNegativeLineItemsEnabled).Append("\n");
            sb.Append("  IsHolidayLaborRate: ").Append(IsHolidayLaborRate).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  IsRestrictedForChanges: ").Append(IsRestrictedForChanges).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  DisputeReason: ").Append(DisputeReason).Append("\n");
            sb.Append("  RejectionReasonDescription: ").Append(RejectionReasonDescription).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  BatchNumber: ").Append(BatchNumber).Append("\n");
            sb.Append("  InvoiceTax: ").Append(InvoiceTax).Append("\n");
            sb.Append("  PostedTaxRate: ").Append(PostedTaxRate).Append("\n");
            sb.Append("  PostedTax2Rate: ").Append(PostedTax2Rate).Append("\n");
            sb.Append("  VendorPayeeId: ").Append(VendorPayeeId).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  InvoiceBalance: ").Append(InvoiceBalance).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  EditableAdditionalApprovalCode: ").Append(EditableAdditionalApprovalCode).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  PostedBy: ").Append(PostedBy).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  InvoiceAmountsDetails: ").Append(InvoiceAmountsDetails).Append("\n");
            sb.Append("  InvoiceTaxesDetails: ").Append(InvoiceTaxesDetails).Append("\n");
            sb.Append("  Tax2Details: ").Append(Tax2Details).Append("\n");
            sb.Append("  Labors: ").Append(Labors).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  Travels: ").Append(Travels).Append("\n");
            sb.Append("  Others: ").Append(Others).Append("\n");
            sb.Append("  TaxApprovalCodeGroups: ").Append(TaxApprovalCodeGroups).Append("\n");
            sb.Append("  Tax2ApprovalCodeGroups: ").Append(Tax2ApprovalCodeGroups).Append("\n");
            sb.Append("  FreightApprovalCodeGroups: ").Append(FreightApprovalCodeGroups).Append("\n");
            sb.Append("  WithMismatchedRates: ").Append(WithMismatchedRates).Append("\n");
            sb.Append("  IsOutsourced: ").Append(IsOutsourced).Append("\n");
            sb.Append("  StarredBy: ").Append(StarredBy).Append("\n");
            sb.Append("  IsStarred: ").Append(IsStarred).Append("\n");
            sb.Append("  IsTransferred: ").Append(IsTransferred).Append("\n");
            sb.Append("  StarredDate: ").Append(StarredDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  LaborTaxIncluded: ").Append(LaborTaxIncluded).Append("\n");
            sb.Append("  TravelTaxIncluded: ").Append(TravelTaxIncluded).Append("\n");
            sb.Append("  MaterialsTaxIncluded: ").Append(MaterialsTaxIncluded).Append("\n");
            sb.Append("  FreightTaxIncluded: ").Append(FreightTaxIncluded).Append("\n");
            sb.Append("  OtherTaxIncluded: ").Append(OtherTaxIncluded).Append("\n");
            sb.Append("  NonTaxableLabor: ").Append(NonTaxableLabor).Append("\n");
            sb.Append("  NonTaxableTravel: ").Append(NonTaxableTravel).Append("\n");
            sb.Append("  NonTaxableMaterial: ").Append(NonTaxableMaterial).Append("\n");
            sb.Append("  NonTaxableFreight: ").Append(NonTaxableFreight).Append("\n");
            sb.Append("  NonTaxableOther: ").Append(NonTaxableOther).Append("\n");
            sb.Append("  IsExists: ").Append(IsExists).Append("\n");
            sb.Append("  StatusChangeDate: ").Append(StatusChangeDate).Append("\n");
            sb.Append("  StatusChangeUser: ").Append(StatusChangeUser).Append("\n");
            sb.Append("  StatusChangeUserid: ").Append(StatusChangeUserid).Append("\n");
            sb.Append("  IsDuplicate: ").Append(IsDuplicate).Append("\n");
            sb.Append("  WoTrackingNumber: ").Append(WoTrackingNumber).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  TransferredDate: ").Append(TransferredDate).Append("\n");
            sb.Append("  LastActionDate: ").Append(LastActionDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  StatusHistoryShort: ").Append(StatusHistoryShort).Append("\n");
            sb.Append("  WoAssignedTo: ").Append(WoAssignedTo).Append("\n");
            sb.Append("  ApprovalCodes: ").Append(ApprovalCodes).Append("\n");
            sb.Append("  IsChargesApprovalCodesDefault: ").Append(IsChargesApprovalCodesDefault).Append("\n");
            sb.Append("  StoredFeatures: ").Append(StoredFeatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VendorPayee == input.VendorPayee ||
                    (this.VendorPayee != null &&
                    this.VendorPayee.Equals(input.VendorPayee))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.WithAutoApprovalCriteria == input.WithAutoApprovalCriteria ||
                    this.WithAutoApprovalCriteria.Equals(input.WithAutoApprovalCriteria)
                ) && 
                (
                    this.PostedDateStr == input.PostedDateStr ||
                    (this.PostedDateStr != null &&
                    this.PostedDateStr.Equals(input.PostedDateStr))
                ) && 
                (
                    this.InvoiceDateStr == input.InvoiceDateStr ||
                    (this.InvoiceDateStr != null &&
                    this.InvoiceDateStr.Equals(input.InvoiceDateStr))
                ) && 
                (
                    this.PaidDateStr == input.PaidDateStr ||
                    (this.PaidDateStr != null &&
                    this.PaidDateStr.Equals(input.PaidDateStr))
                ) && 
                (
                    this.StarredDateStr == input.StarredDateStr ||
                    (this.StarredDateStr != null &&
                    this.StarredDateStr.Equals(input.StarredDateStr))
                ) && 
                (
                    this.ApprovedDateStr == input.ApprovedDateStr ||
                    (this.ApprovedDateStr != null &&
                    this.ApprovedDateStr.Equals(input.ApprovedDateStr))
                ) && 
                (
                    this.TransferredDateStr == input.TransferredDateStr ||
                    (this.TransferredDateStr != null &&
                    this.TransferredDateStr.Equals(input.TransferredDateStr))
                ) && 
                (
                    this.LastActionDateStr == input.LastActionDateStr ||
                    (this.LastActionDateStr != null &&
                    this.LastActionDateStr.Equals(input.LastActionDateStr))
                ) && 
                (
                    this.StatusChangeDateStr == input.StatusChangeDateStr ||
                    (this.StatusChangeDateStr != null &&
                    this.StatusChangeDateStr.Equals(input.StatusChangeDateStr))
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.PreviousUpdated == input.PreviousUpdated ||
                    (this.PreviousUpdated != null &&
                    this.PreviousUpdated.Equals(input.PreviousUpdated))
                ) && 
                (
                    this.Discount == input.Discount ||
                    this.Discount.Equals(input.Discount)
                ) && 
                (
                    this.SubscriberFee == input.SubscriberFee ||
                    this.SubscriberFee.Equals(input.SubscriberFee)
                ) && 
                (
                    this.ProviderFee == input.ProviderFee ||
                    this.ProviderFee.Equals(input.ProviderFee)
                ) && 
                (
                    this.InPaymentManager == input.InPaymentManager ||
                    this.InPaymentManager.Equals(input.InPaymentManager)
                ) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    this.DiscountPercent.Equals(input.DiscountPercent)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.EarlyPayFeePercent == input.EarlyPayFeePercent ||
                    this.EarlyPayFeePercent.Equals(input.EarlyPayFeePercent)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.WeatherEventTypeForInvoice == input.WeatherEventTypeForInvoice ||
                    (this.WeatherEventTypeForInvoice != null &&
                    this.WeatherEventTypeForInvoice.Equals(input.WeatherEventTypeForInvoice))
                ) && 
                (
                    this.IsHideUsernameOnInvoice == input.IsHideUsernameOnInvoice ||
                    this.IsHideUsernameOnInvoice.Equals(input.IsHideUsernameOnInvoice)
                ) && 
                (
                    this.IsInvoiceNegativeLineItemsEnabled == input.IsInvoiceNegativeLineItemsEnabled ||
                    this.IsInvoiceNegativeLineItemsEnabled.Equals(input.IsInvoiceNegativeLineItemsEnabled)
                ) && 
                (
                    this.IsHolidayLaborRate == input.IsHolidayLaborRate ||
                    this.IsHolidayLaborRate.Equals(input.IsHolidayLaborRate)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                ) && 
                (
                    this.IsRestrictedForChanges == input.IsRestrictedForChanges ||
                    this.IsRestrictedForChanges.Equals(input.IsRestrictedForChanges)
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.DisputeReason == input.DisputeReason ||
                    (this.DisputeReason != null &&
                    this.DisputeReason.Equals(input.DisputeReason))
                ) && 
                (
                    this.RejectionReasonDescription == input.RejectionReasonDescription ||
                    (this.RejectionReasonDescription != null &&
                    this.RejectionReasonDescription.Equals(input.RejectionReasonDescription))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.BatchNumber == input.BatchNumber ||
                    (this.BatchNumber != null &&
                    this.BatchNumber.Equals(input.BatchNumber))
                ) && 
                (
                    this.InvoiceTax == input.InvoiceTax ||
                    this.InvoiceTax.Equals(input.InvoiceTax)
                ) && 
                (
                    this.PostedTaxRate == input.PostedTaxRate ||
                    this.PostedTaxRate.Equals(input.PostedTaxRate)
                ) && 
                (
                    this.PostedTax2Rate == input.PostedTax2Rate ||
                    this.PostedTax2Rate.Equals(input.PostedTax2Rate)
                ) && 
                (
                    this.VendorPayeeId == input.VendorPayeeId ||
                    this.VendorPayeeId.Equals(input.VendorPayeeId)
                ) && 
                (
                    this.InvoiceTotal == input.InvoiceTotal ||
                    this.InvoiceTotal.Equals(input.InvoiceTotal)
                ) && 
                (
                    this.InvoiceBalance == input.InvoiceBalance ||
                    this.InvoiceBalance.Equals(input.InvoiceBalance)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ApprovedDate == input.ApprovedDate ||
                    (this.ApprovedDate != null &&
                    this.ApprovedDate.Equals(input.ApprovedDate))
                ) && 
                (
                    this.ApprovalCode == input.ApprovalCode ||
                    (this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(input.ApprovalCode))
                ) && 
                (
                    this.EditableAdditionalApprovalCode == input.EditableAdditionalApprovalCode ||
                    (this.EditableAdditionalApprovalCode != null &&
                    this.EditableAdditionalApprovalCode.Equals(input.EditableAdditionalApprovalCode))
                ) && 
                (
                    this.PostedDate == input.PostedDate ||
                    (this.PostedDate != null &&
                    this.PostedDate.Equals(input.PostedDate))
                ) && 
                (
                    this.PostedBy == input.PostedBy ||
                    (this.PostedBy != null &&
                    this.PostedBy.Equals(input.PostedBy))
                ) && 
                (
                    this.Subtotal == input.Subtotal ||
                    this.Subtotal.Equals(input.Subtotal)
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.InvoiceAmountsDetails == input.InvoiceAmountsDetails ||
                    (this.InvoiceAmountsDetails != null &&
                    this.InvoiceAmountsDetails.Equals(input.InvoiceAmountsDetails))
                ) && 
                (
                    this.InvoiceTaxesDetails == input.InvoiceTaxesDetails ||
                    (this.InvoiceTaxesDetails != null &&
                    this.InvoiceTaxesDetails.Equals(input.InvoiceTaxesDetails))
                ) && 
                (
                    this.Tax2Details == input.Tax2Details ||
                    (this.Tax2Details != null &&
                    this.Tax2Details.Equals(input.Tax2Details))
                ) && 
                (
                    this.Labors == input.Labors ||
                    this.Labors != null &&
                    input.Labors != null &&
                    this.Labors.SequenceEqual(input.Labors)
                ) && 
                (
                    this.Materials == input.Materials ||
                    this.Materials != null &&
                    input.Materials != null &&
                    this.Materials.SequenceEqual(input.Materials)
                ) && 
                (
                    this.Travels == input.Travels ||
                    this.Travels != null &&
                    input.Travels != null &&
                    this.Travels.SequenceEqual(input.Travels)
                ) && 
                (
                    this.Others == input.Others ||
                    this.Others != null &&
                    input.Others != null &&
                    this.Others.SequenceEqual(input.Others)
                ) && 
                (
                    this.TaxApprovalCodeGroups == input.TaxApprovalCodeGroups ||
                    this.TaxApprovalCodeGroups != null &&
                    input.TaxApprovalCodeGroups != null &&
                    this.TaxApprovalCodeGroups.SequenceEqual(input.TaxApprovalCodeGroups)
                ) && 
                (
                    this.Tax2ApprovalCodeGroups == input.Tax2ApprovalCodeGroups ||
                    this.Tax2ApprovalCodeGroups != null &&
                    input.Tax2ApprovalCodeGroups != null &&
                    this.Tax2ApprovalCodeGroups.SequenceEqual(input.Tax2ApprovalCodeGroups)
                ) && 
                (
                    this.FreightApprovalCodeGroups == input.FreightApprovalCodeGroups ||
                    this.FreightApprovalCodeGroups != null &&
                    input.FreightApprovalCodeGroups != null &&
                    this.FreightApprovalCodeGroups.SequenceEqual(input.FreightApprovalCodeGroups)
                ) && 
                (
                    this.WithMismatchedRates == input.WithMismatchedRates ||
                    this.WithMismatchedRates.Equals(input.WithMismatchedRates)
                ) && 
                (
                    this.IsOutsourced == input.IsOutsourced ||
                    this.IsOutsourced.Equals(input.IsOutsourced)
                ) && 
                (
                    this.StarredBy == input.StarredBy ||
                    (this.StarredBy != null &&
                    this.StarredBy.Equals(input.StarredBy))
                ) && 
                (
                    this.IsStarred == input.IsStarred ||
                    this.IsStarred.Equals(input.IsStarred)
                ) && 
                (
                    this.IsTransferred == input.IsTransferred ||
                    this.IsTransferred.Equals(input.IsTransferred)
                ) && 
                (
                    this.StarredDate == input.StarredDate ||
                    (this.StarredDate != null &&
                    this.StarredDate.Equals(input.StarredDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.LaborTaxIncluded == input.LaborTaxIncluded ||
                    this.LaborTaxIncluded.Equals(input.LaborTaxIncluded)
                ) && 
                (
                    this.TravelTaxIncluded == input.TravelTaxIncluded ||
                    this.TravelTaxIncluded.Equals(input.TravelTaxIncluded)
                ) && 
                (
                    this.MaterialsTaxIncluded == input.MaterialsTaxIncluded ||
                    this.MaterialsTaxIncluded.Equals(input.MaterialsTaxIncluded)
                ) && 
                (
                    this.FreightTaxIncluded == input.FreightTaxIncluded ||
                    this.FreightTaxIncluded.Equals(input.FreightTaxIncluded)
                ) && 
                (
                    this.OtherTaxIncluded == input.OtherTaxIncluded ||
                    this.OtherTaxIncluded.Equals(input.OtherTaxIncluded)
                ) && 
                (
                    this.NonTaxableLabor == input.NonTaxableLabor ||
                    this.NonTaxableLabor.Equals(input.NonTaxableLabor)
                ) && 
                (
                    this.NonTaxableTravel == input.NonTaxableTravel ||
                    this.NonTaxableTravel.Equals(input.NonTaxableTravel)
                ) && 
                (
                    this.NonTaxableMaterial == input.NonTaxableMaterial ||
                    this.NonTaxableMaterial.Equals(input.NonTaxableMaterial)
                ) && 
                (
                    this.NonTaxableFreight == input.NonTaxableFreight ||
                    this.NonTaxableFreight.Equals(input.NonTaxableFreight)
                ) && 
                (
                    this.NonTaxableOther == input.NonTaxableOther ||
                    this.NonTaxableOther.Equals(input.NonTaxableOther)
                ) && 
                (
                    this.IsExists == input.IsExists ||
                    this.IsExists.Equals(input.IsExists)
                ) && 
                (
                    this.StatusChangeDate == input.StatusChangeDate ||
                    (this.StatusChangeDate != null &&
                    this.StatusChangeDate.Equals(input.StatusChangeDate))
                ) && 
                (
                    this.StatusChangeUser == input.StatusChangeUser ||
                    (this.StatusChangeUser != null &&
                    this.StatusChangeUser.Equals(input.StatusChangeUser))
                ) && 
                (
                    this.StatusChangeUserid == input.StatusChangeUserid ||
                    (this.StatusChangeUserid != null &&
                    this.StatusChangeUserid.Equals(input.StatusChangeUserid))
                ) && 
                (
                    this.IsDuplicate == input.IsDuplicate ||
                    this.IsDuplicate.Equals(input.IsDuplicate)
                ) && 
                (
                    this.WoTrackingNumber == input.WoTrackingNumber ||
                    this.WoTrackingNumber.Equals(input.WoTrackingNumber)
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.PaidDate == input.PaidDate ||
                    (this.PaidDate != null &&
                    this.PaidDate.Equals(input.PaidDate))
                ) && 
                (
                    this.TransferredDate == input.TransferredDate ||
                    (this.TransferredDate != null &&
                    this.TransferredDate.Equals(input.TransferredDate))
                ) && 
                (
                    this.LastActionDate == input.LastActionDate ||
                    (this.LastActionDate != null &&
                    this.LastActionDate.Equals(input.LastActionDate))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.StatusHistoryShort == input.StatusHistoryShort ||
                    this.StatusHistoryShort != null &&
                    input.StatusHistoryShort != null &&
                    this.StatusHistoryShort.SequenceEqual(input.StatusHistoryShort)
                ) && 
                (
                    this.WoAssignedTo == input.WoAssignedTo ||
                    (this.WoAssignedTo != null &&
                    this.WoAssignedTo.Equals(input.WoAssignedTo))
                ) && 
                (
                    this.ApprovalCodes == input.ApprovalCodes ||
                    this.ApprovalCodes != null &&
                    input.ApprovalCodes != null &&
                    this.ApprovalCodes.SequenceEqual(input.ApprovalCodes)
                ) && 
                (
                    this.IsChargesApprovalCodesDefault == input.IsChargesApprovalCodesDefault ||
                    this.IsChargesApprovalCodesDefault.Equals(input.IsChargesApprovalCodesDefault)
                ) && 
                (
                    this.StoredFeatures == input.StoredFeatures ||
                    this.StoredFeatures != null &&
                    input.StoredFeatures != null &&
                    this.StoredFeatures.SequenceEqual(input.StoredFeatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VendorPayee != null)
                {
                    hashCode = (hashCode * 59) + this.VendorPayee.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.InvoiceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WithAutoApprovalCriteria.GetHashCode();
                if (this.PostedDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.PostedDateStr.GetHashCode();
                }
                if (this.InvoiceDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceDateStr.GetHashCode();
                }
                if (this.PaidDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.PaidDateStr.GetHashCode();
                }
                if (this.StarredDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.StarredDateStr.GetHashCode();
                }
                if (this.ApprovedDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedDateStr.GetHashCode();
                }
                if (this.TransferredDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.TransferredDateStr.GetHashCode();
                }
                if (this.LastActionDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.LastActionDateStr.GetHashCode();
                }
                if (this.StatusChangeDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.StatusChangeDateStr.GetHashCode();
                }
                if (this.ProviderName != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderName.GetHashCode();
                }
                if (this.PreviousUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousUpdated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Discount.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberFee.GetHashCode();
                hashCode = (hashCode * 59) + this.ProviderFee.GetHashCode();
                hashCode = (hashCode * 59) + this.InPaymentManager.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscountPercent.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EarlyPayFeePercent.GetHashCode();
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                if (this.WeatherEventTypeForInvoice != null)
                {
                    hashCode = (hashCode * 59) + this.WeatherEventTypeForInvoice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsHideUsernameOnInvoice.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInvoiceNegativeLineItemsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHolidayLaborRate.GetHashCode();
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRestrictedForChanges.GetHashCode();
                if (this.Payments != null)
                {
                    hashCode = (hashCode * 59) + this.Payments.GetHashCode();
                }
                if (this.DisputeReason != null)
                {
                    hashCode = (hashCode * 59) + this.DisputeReason.GetHashCode();
                }
                if (this.RejectionReasonDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RejectionReasonDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.BatchNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BatchNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvoiceTax.GetHashCode();
                hashCode = (hashCode * 59) + this.PostedTaxRate.GetHashCode();
                hashCode = (hashCode * 59) + this.PostedTax2Rate.GetHashCode();
                hashCode = (hashCode * 59) + this.VendorPayeeId.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceBalance.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.ApprovedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedDate.GetHashCode();
                }
                if (this.ApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCode.GetHashCode();
                }
                if (this.EditableAdditionalApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.EditableAdditionalApprovalCode.GetHashCode();
                }
                if (this.PostedDate != null)
                {
                    hashCode = (hashCode * 59) + this.PostedDate.GetHashCode();
                }
                if (this.PostedBy != null)
                {
                    hashCode = (hashCode * 59) + this.PostedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Subtotal.GetHashCode();
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                if (this.InvoiceAmountsDetails != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceAmountsDetails.GetHashCode();
                }
                if (this.InvoiceTaxesDetails != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceTaxesDetails.GetHashCode();
                }
                if (this.Tax2Details != null)
                {
                    hashCode = (hashCode * 59) + this.Tax2Details.GetHashCode();
                }
                if (this.Labors != null)
                {
                    hashCode = (hashCode * 59) + this.Labors.GetHashCode();
                }
                if (this.Materials != null)
                {
                    hashCode = (hashCode * 59) + this.Materials.GetHashCode();
                }
                if (this.Travels != null)
                {
                    hashCode = (hashCode * 59) + this.Travels.GetHashCode();
                }
                if (this.Others != null)
                {
                    hashCode = (hashCode * 59) + this.Others.GetHashCode();
                }
                if (this.TaxApprovalCodeGroups != null)
                {
                    hashCode = (hashCode * 59) + this.TaxApprovalCodeGroups.GetHashCode();
                }
                if (this.Tax2ApprovalCodeGroups != null)
                {
                    hashCode = (hashCode * 59) + this.Tax2ApprovalCodeGroups.GetHashCode();
                }
                if (this.FreightApprovalCodeGroups != null)
                {
                    hashCode = (hashCode * 59) + this.FreightApprovalCodeGroups.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WithMismatchedRates.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOutsourced.GetHashCode();
                if (this.StarredBy != null)
                {
                    hashCode = (hashCode * 59) + this.StarredBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsStarred.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTransferred.GetHashCode();
                if (this.StarredDate != null)
                {
                    hashCode = (hashCode * 59) + this.StarredDate.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.InvoiceDate != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LaborTaxIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.TravelTaxIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.MaterialsTaxIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.FreightTaxIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.OtherTaxIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.NonTaxableLabor.GetHashCode();
                hashCode = (hashCode * 59) + this.NonTaxableTravel.GetHashCode();
                hashCode = (hashCode * 59) + this.NonTaxableMaterial.GetHashCode();
                hashCode = (hashCode * 59) + this.NonTaxableFreight.GetHashCode();
                hashCode = (hashCode * 59) + this.NonTaxableOther.GetHashCode();
                hashCode = (hashCode * 59) + this.IsExists.GetHashCode();
                if (this.StatusChangeDate != null)
                {
                    hashCode = (hashCode * 59) + this.StatusChangeDate.GetHashCode();
                }
                if (this.StatusChangeUser != null)
                {
                    hashCode = (hashCode * 59) + this.StatusChangeUser.GetHashCode();
                }
                if (this.StatusChangeUserid != null)
                {
                    hashCode = (hashCode * 59) + this.StatusChangeUserid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDuplicate.GetHashCode();
                hashCode = (hashCode * 59) + this.WoTrackingNumber.GetHashCode();
                if (this.Terms != null)
                {
                    hashCode = (hashCode * 59) + this.Terms.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                if (this.PaidDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaidDate.GetHashCode();
                }
                if (this.TransferredDate != null)
                {
                    hashCode = (hashCode * 59) + this.TransferredDate.GetHashCode();
                }
                if (this.LastActionDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastActionDate.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                if (this.StatusHistoryShort != null)
                {
                    hashCode = (hashCode * 59) + this.StatusHistoryShort.GetHashCode();
                }
                if (this.WoAssignedTo != null)
                {
                    hashCode = (hashCode * 59) + this.WoAssignedTo.GetHashCode();
                }
                if (this.ApprovalCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCodes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsChargesApprovalCodesDefault.GetHashCode();
                if (this.StoredFeatures != null)
                {
                    hashCode = (hashCode * 59) + this.StoredFeatures.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
