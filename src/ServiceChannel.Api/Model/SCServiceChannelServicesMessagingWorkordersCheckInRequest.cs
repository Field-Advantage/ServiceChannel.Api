/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Check-in request
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.CheckInRequest")]
    public partial class SCServiceChannelServicesMessagingWorkordersCheckInRequest : IEquatable<SCServiceChannelServicesMessagingWorkordersCheckInRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCheckInRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingWorkordersCheckInRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCheckInRequest" /> class.
        /// </summary>
        /// <param name="workTypeId">The unique ID of the work type.              **Possible values:** &#x60;1&#x60; — Repair, &#x60;2&#x60; — Travel. Other values are possible when custom types are set up for the subscriber.              **Default value:** 1..</param>
        /// <param name="userId">The user ID of the technician that is checking in. Use the same &#x60;UserId&#x60; for one pair of check-in and check-out records.              **Default value:** ID of the current user..</param>
        /// <param name="techsCount">The number of technicians that are checking in.              **Default value:** 1..</param>
        /// <param name="latitude">The latitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled. (required).</param>
        /// <param name="longitude">The longitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled. (required).</param>
        /// <param name="checkInTime">The date and time of the check-in. Either indicate in UTC or pass the current time and add the UTC offset.              You can pass this value only when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.              **Default value:** current date and time..</param>
        /// <param name="actor">Optional, Actor.</param>
        public SCServiceChannelServicesMessagingWorkordersCheckInRequest(int workTypeId = default(int), int userId = default(int), int techsCount = default(int), double latitude = default(double), double longitude = default(double), DateTime checkInTime = default(DateTime), string actor = default(string))
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.WorkTypeId = workTypeId;
            this.UserId = userId;
            this.TechsCount = techsCount;
            this.CheckInTime = checkInTime;
            this.Actor = actor;
        }

        /// <summary>
        /// The unique ID of the work type.              **Possible values:** &#x60;1&#x60; — Repair, &#x60;2&#x60; — Travel. Other values are possible when custom types are set up for the subscriber.              **Default value:** 1.
        /// </summary>
        /// <value>The unique ID of the work type.              **Possible values:** &#x60;1&#x60; — Repair, &#x60;2&#x60; — Travel. Other values are possible when custom types are set up for the subscriber.              **Default value:** 1.</value>
        [DataMember(Name = "WorkTypeId", EmitDefaultValue = false)]
        public int WorkTypeId { get; set; }

        /// <summary>
        /// The user ID of the technician that is checking in. Use the same &#x60;UserId&#x60; for one pair of check-in and check-out records.              **Default value:** ID of the current user.
        /// </summary>
        /// <value>The user ID of the technician that is checking in. Use the same &#x60;UserId&#x60; for one pair of check-in and check-out records.              **Default value:** ID of the current user.</value>
        [DataMember(Name = "UserId", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// The number of technicians that are checking in.              **Default value:** 1.
        /// </summary>
        /// <value>The number of technicians that are checking in.              **Default value:** 1.</value>
        [DataMember(Name = "TechsCount", EmitDefaultValue = false)]
        public int TechsCount { get; set; }

        /// <summary>
        /// The latitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.
        /// </summary>
        /// <value>The latitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.</value>
        [DataMember(Name = "Latitude", IsRequired = true, EmitDefaultValue = true)]
        public double Latitude { get; set; }

        /// <summary>
        /// The longitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.
        /// </summary>
        /// <value>The longitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.</value>
        [DataMember(Name = "Longitude", IsRequired = true, EmitDefaultValue = true)]
        public double Longitude { get; set; }

        /// <summary>
        /// The date and time of the check-in. Either indicate in UTC or pass the current time and add the UTC offset.              You can pass this value only when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.              **Default value:** current date and time.
        /// </summary>
        /// <value>The date and time of the check-in. Either indicate in UTC or pass the current time and add the UTC offset.              You can pass this value only when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.              **Default value:** current date and time.</value>
        [DataMember(Name = "CheckInTime", EmitDefaultValue = false)]
        public DateTime CheckInTime { get; set; }

        /// <summary>
        /// Optional, Actor
        /// </summary>
        /// <value>Optional, Actor</value>
        [DataMember(Name = "Actor", EmitDefaultValue = false)]
        public string Actor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersCheckInRequest {\n");
            sb.Append("  WorkTypeId: ").Append(WorkTypeId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TechsCount: ").Append(TechsCount).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  CheckInTime: ").Append(CheckInTime).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersCheckInRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersCheckInRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersCheckInRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersCheckInRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WorkTypeId == input.WorkTypeId ||
                    this.WorkTypeId.Equals(input.WorkTypeId)
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.TechsCount == input.TechsCount ||
                    this.TechsCount.Equals(input.TechsCount)
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.CheckInTime == input.CheckInTime ||
                    (this.CheckInTime != null &&
                    this.CheckInTime.Equals(input.CheckInTime))
                ) && 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.WorkTypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                hashCode = (hashCode * 59) + this.TechsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                if (this.CheckInTime != null)
                {
                    hashCode = (hashCode * 59) + this.CheckInTime.GetHashCode();
                }
                if (this.Actor != null)
                {
                    hashCode = (hashCode * 59) + this.Actor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
