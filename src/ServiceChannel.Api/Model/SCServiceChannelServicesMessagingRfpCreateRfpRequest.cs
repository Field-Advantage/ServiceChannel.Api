/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The request object to create an RFP.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Rfp.CreateRfpRequest")]
    public partial class SCServiceChannelServicesMessagingRfpCreateRfpRequest : IEquatable<SCServiceChannelServicesMessagingRfpCreateRfpRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingRfpCreateRfpRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingRfpCreateRfpRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingRfpCreateRfpRequest" /> class.
        /// </summary>
        /// <param name="number">The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified..</param>
        /// <param name="pONumber">Purchase order number..</param>
        /// <param name="wONumber">Work order number..</param>
        /// <param name="tradeId">The unique trade identifier. (required).</param>
        /// <param name="description">RFP description. (required).</param>
        /// <param name="status">RFP status..</param>
        /// <param name="date">The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time..</param>
        /// <param name="dateString">dateString.</param>
        /// <param name="dueHrs">Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group..</param>
        /// <param name="dueDate">Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group..</param>
        /// <param name="dueDateString">dueDateString.</param>
        /// <param name="location">location (required).</param>
        /// <param name="language">language.</param>
        /// <param name="providerId">The unique provider identifier. (required).</param>
        /// <param name="responseDate">Obsolete..</param>
        /// <param name="proposalNotificationEmail">The email address to send the proposal notification to. The default is the email address of the current user specified in the &#x60;PropTeamEmail&#x60; settings group..</param>
        /// <param name="providerEmail">The email address of the provider. The default is the email address of the specified provider..</param>
        /// <param name="proposalTemplateId">Obsolete..</param>
        /// <param name="workOrderId">The unique numeric identifier of the work order..</param>
        /// <param name="projectId">The unique numeric identifier of the project..</param>
        public SCServiceChannelServicesMessagingRfpCreateRfpRequest(string number = default(string), string pONumber = default(string), string wONumber = default(string), int tradeId = default(int), string description = default(string), string status = default(string), DateTime date = default(DateTime), string dateString = default(string), double dueHrs = default(double), DateTime dueDate = default(DateTime), string dueDateString = default(string), SCServiceChannelServicesMessagingLocationLocationIdentity location = default(SCServiceChannelServicesMessagingLocationLocationIdentity), string language = default(string), int providerId = default(int), DateTime responseDate = default(DateTime), string proposalNotificationEmail = default(string), string providerEmail = default(string), int proposalTemplateId = default(int), int workOrderId = default(int), int projectId = default(int))
        {
            this.TradeId = tradeId;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for SCServiceChannelServicesMessagingRfpCreateRfpRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for SCServiceChannelServicesMessagingRfpCreateRfpRequest and cannot be null");
            }
            this.Location = location;
            this.ProviderId = providerId;
            this.Number = number;
            this.PONumber = pONumber;
            this.WONumber = wONumber;
            this.Status = status;
            this.Date = date;
            this.DateString = dateString;
            this.DueHrs = dueHrs;
            this.DueDate = dueDate;
            this.DueDateString = dueDateString;
            this.Language = language;
            this.ResponseDate = responseDate;
            this.ProposalNotificationEmail = proposalNotificationEmail;
            this.ProviderEmail = providerEmail;
            this.ProposalTemplateId = proposalTemplateId;
            this.WorkOrderId = workOrderId;
            this.ProjectId = projectId;
        }

        /// <summary>
        /// The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified.
        /// </summary>
        /// <value>The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified.</value>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Purchase order number.
        /// </summary>
        /// <value>Purchase order number.</value>
        [DataMember(Name = "PONumber", EmitDefaultValue = false)]
        public string PONumber { get; set; }

        /// <summary>
        /// Work order number.
        /// </summary>
        /// <value>Work order number.</value>
        [DataMember(Name = "WONumber", EmitDefaultValue = false)]
        public string WONumber { get; set; }

        /// <summary>
        /// The unique trade identifier.
        /// </summary>
        /// <value>The unique trade identifier.</value>
        [DataMember(Name = "TradeId", IsRequired = true, EmitDefaultValue = true)]
        public int TradeId { get; set; }

        /// <summary>
        /// RFP description.
        /// </summary>
        /// <value>RFP description.</value>
        [DataMember(Name = "Description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// RFP status.
        /// </summary>
        /// <value>RFP status.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time.
        /// </summary>
        /// <value>The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time.</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets DateString
        /// </summary>
        [DataMember(Name = "DateString", EmitDefaultValue = false)]
        public string DateString { get; set; }

        /// <summary>
        /// Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.
        /// </summary>
        /// <value>Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.</value>
        [DataMember(Name = "DueHrs", EmitDefaultValue = false)]
        public double DueHrs { get; set; }

        /// <summary>
        /// Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.
        /// </summary>
        /// <value>Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.</value>
        [DataMember(Name = "DueDate", EmitDefaultValue = false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDateString
        /// </summary>
        [DataMember(Name = "DueDateString", EmitDefaultValue = false)]
        public string DueDateString { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "Location", IsRequired = true, EmitDefaultValue = true)]
        public SCServiceChannelServicesMessagingLocationLocationIdentity Location { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "Language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The unique provider identifier.
        /// </summary>
        /// <value>The unique provider identifier.</value>
        [DataMember(Name = "ProviderId", IsRequired = true, EmitDefaultValue = true)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Obsolete.
        /// </summary>
        /// <value>Obsolete.</value>
        [DataMember(Name = "ResponseDate", EmitDefaultValue = false)]
        public DateTime ResponseDate { get; set; }

        /// <summary>
        /// The email address to send the proposal notification to. The default is the email address of the current user specified in the &#x60;PropTeamEmail&#x60; settings group.
        /// </summary>
        /// <value>The email address to send the proposal notification to. The default is the email address of the current user specified in the &#x60;PropTeamEmail&#x60; settings group.</value>
        [DataMember(Name = "ProposalNotificationEmail", EmitDefaultValue = false)]
        public string ProposalNotificationEmail { get; set; }

        /// <summary>
        /// The email address of the provider. The default is the email address of the specified provider.
        /// </summary>
        /// <value>The email address of the provider. The default is the email address of the specified provider.</value>
        [DataMember(Name = "ProviderEmail", EmitDefaultValue = false)]
        public string ProviderEmail { get; set; }

        /// <summary>
        /// Obsolete.
        /// </summary>
        /// <value>Obsolete.</value>
        [DataMember(Name = "ProposalTemplateId", EmitDefaultValue = false)]
        public int ProposalTemplateId { get; set; }

        /// <summary>
        /// The unique numeric identifier of the work order.
        /// </summary>
        /// <value>The unique numeric identifier of the work order.</value>
        [DataMember(Name = "WorkOrderId", EmitDefaultValue = false)]
        public int WorkOrderId { get; set; }

        /// <summary>
        /// The unique numeric identifier of the project.
        /// </summary>
        /// <value>The unique numeric identifier of the project.</value>
        [DataMember(Name = "ProjectId", EmitDefaultValue = false)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingRfpCreateRfpRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PONumber: ").Append(PONumber).Append("\n");
            sb.Append("  WONumber: ").Append(WONumber).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateString: ").Append(DateString).Append("\n");
            sb.Append("  DueHrs: ").Append(DueHrs).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueDateString: ").Append(DueDateString).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ResponseDate: ").Append(ResponseDate).Append("\n");
            sb.Append("  ProposalNotificationEmail: ").Append(ProposalNotificationEmail).Append("\n");
            sb.Append("  ProviderEmail: ").Append(ProviderEmail).Append("\n");
            sb.Append("  ProposalTemplateId: ").Append(ProposalTemplateId).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingRfpCreateRfpRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingRfpCreateRfpRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingRfpCreateRfpRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingRfpCreateRfpRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.PONumber == input.PONumber ||
                    (this.PONumber != null &&
                    this.PONumber.Equals(input.PONumber))
                ) && 
                (
                    this.WONumber == input.WONumber ||
                    (this.WONumber != null &&
                    this.WONumber.Equals(input.WONumber))
                ) && 
                (
                    this.TradeId == input.TradeId ||
                    this.TradeId.Equals(input.TradeId)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DateString == input.DateString ||
                    (this.DateString != null &&
                    this.DateString.Equals(input.DateString))
                ) && 
                (
                    this.DueHrs == input.DueHrs ||
                    this.DueHrs.Equals(input.DueHrs)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.DueDateString == input.DueDateString ||
                    (this.DueDateString != null &&
                    this.DueDateString.Equals(input.DueDateString))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.ResponseDate == input.ResponseDate ||
                    (this.ResponseDate != null &&
                    this.ResponseDate.Equals(input.ResponseDate))
                ) && 
                (
                    this.ProposalNotificationEmail == input.ProposalNotificationEmail ||
                    (this.ProposalNotificationEmail != null &&
                    this.ProposalNotificationEmail.Equals(input.ProposalNotificationEmail))
                ) && 
                (
                    this.ProviderEmail == input.ProviderEmail ||
                    (this.ProviderEmail != null &&
                    this.ProviderEmail.Equals(input.ProviderEmail))
                ) && 
                (
                    this.ProposalTemplateId == input.ProposalTemplateId ||
                    this.ProposalTemplateId.Equals(input.ProposalTemplateId)
                ) && 
                (
                    this.WorkOrderId == input.WorkOrderId ||
                    this.WorkOrderId.Equals(input.WorkOrderId)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.PONumber != null)
                {
                    hashCode = (hashCode * 59) + this.PONumber.GetHashCode();
                }
                if (this.WONumber != null)
                {
                    hashCode = (hashCode * 59) + this.WONumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradeId.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.DateString != null)
                {
                    hashCode = (hashCode * 59) + this.DateString.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DueHrs.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.DueDateString != null)
                {
                    hashCode = (hashCode * 59) + this.DueDateString.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                if (this.ResponseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseDate.GetHashCode();
                }
                if (this.ProposalNotificationEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalNotificationEmail.GetHashCode();
                }
                if (this.ProviderEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProposalTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.WorkOrderId.GetHashCode();
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
