/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Object of statistics on RFPs and proposals.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Proposals.ProposalStatisticsResponse")]
    public partial class SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse : IEquatable<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse" /> class.
        /// </summary>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned..</param>
        /// <param name="rFPsWaitingForApproval">The total number of RFPs awaiting response for the specified time period..</param>
        /// <param name="openProposals">The total number of proposals in the _Open_ status for the specified time period..</param>
        /// <param name="approvedProposalsDaysPeriod">Time period set as the number of days prior to the current date for which statistics on approved proposals are returned in &#x60;ApprovedProposals&#x60;..</param>
        /// <param name="approvedProposals">The total number of proposals in the _Approved_ status for the specified time period..</param>
        /// <param name="waitingReviewProposals">The total number of proposals in the _On Hold_ and _Reviewed_ statuses for the specified time period..</param>
        /// <param name="rejectedProposals">The total number of proposals in the _Rejected_ status for the specified time period..</param>
        public SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse(int daysPeriod = default(int), int rFPsWaitingForApproval = default(int), int openProposals = default(int), int approvedProposalsDaysPeriod = default(int), int approvedProposals = default(int), int waitingReviewProposals = default(int), int rejectedProposals = default(int))
        {
            this.DaysPeriod = daysPeriod;
            this.RFPsWaitingForApproval = rFPsWaitingForApproval;
            this.OpenProposals = openProposals;
            this.ApprovedProposalsDaysPeriod = approvedProposalsDaysPeriod;
            this.ApprovedProposals = approvedProposals;
            this.WaitingReviewProposals = waitingReviewProposals;
            this.RejectedProposals = rejectedProposals;
        }

        /// <summary>
        /// Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned.
        /// </summary>
        /// <value>Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned.</value>
        [DataMember(Name = "DaysPeriod", EmitDefaultValue = false)]
        public int DaysPeriod { get; set; }

        /// <summary>
        /// The total number of RFPs awaiting response for the specified time period.
        /// </summary>
        /// <value>The total number of RFPs awaiting response for the specified time period.</value>
        [DataMember(Name = "RFPsWaitingForApproval", EmitDefaultValue = false)]
        public int RFPsWaitingForApproval { get; set; }

        /// <summary>
        /// The total number of proposals in the _Open_ status for the specified time period.
        /// </summary>
        /// <value>The total number of proposals in the _Open_ status for the specified time period.</value>
        [DataMember(Name = "OpenProposals", EmitDefaultValue = false)]
        public int OpenProposals { get; set; }

        /// <summary>
        /// Time period set as the number of days prior to the current date for which statistics on approved proposals are returned in &#x60;ApprovedProposals&#x60;.
        /// </summary>
        /// <value>Time period set as the number of days prior to the current date for which statistics on approved proposals are returned in &#x60;ApprovedProposals&#x60;.</value>
        [DataMember(Name = "ApprovedProposalsDaysPeriod", EmitDefaultValue = false)]
        public int ApprovedProposalsDaysPeriod { get; set; }

        /// <summary>
        /// The total number of proposals in the _Approved_ status for the specified time period.
        /// </summary>
        /// <value>The total number of proposals in the _Approved_ status for the specified time period.</value>
        [DataMember(Name = "ApprovedProposals", EmitDefaultValue = false)]
        public int ApprovedProposals { get; set; }

        /// <summary>
        /// The total number of proposals in the _On Hold_ and _Reviewed_ statuses for the specified time period.
        /// </summary>
        /// <value>The total number of proposals in the _On Hold_ and _Reviewed_ statuses for the specified time period.</value>
        [DataMember(Name = "WaitingReviewProposals", EmitDefaultValue = false)]
        public int WaitingReviewProposals { get; set; }

        /// <summary>
        /// The total number of proposals in the _Rejected_ status for the specified time period.
        /// </summary>
        /// <value>The total number of proposals in the _Rejected_ status for the specified time period.</value>
        [DataMember(Name = "RejectedProposals", EmitDefaultValue = false)]
        public int RejectedProposals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse {\n");
            sb.Append("  DaysPeriod: ").Append(DaysPeriod).Append("\n");
            sb.Append("  RFPsWaitingForApproval: ").Append(RFPsWaitingForApproval).Append("\n");
            sb.Append("  OpenProposals: ").Append(OpenProposals).Append("\n");
            sb.Append("  ApprovedProposalsDaysPeriod: ").Append(ApprovedProposalsDaysPeriod).Append("\n");
            sb.Append("  ApprovedProposals: ").Append(ApprovedProposals).Append("\n");
            sb.Append("  WaitingReviewProposals: ").Append(WaitingReviewProposals).Append("\n");
            sb.Append("  RejectedProposals: ").Append(RejectedProposals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DaysPeriod == input.DaysPeriod ||
                    this.DaysPeriod.Equals(input.DaysPeriod)
                ) && 
                (
                    this.RFPsWaitingForApproval == input.RFPsWaitingForApproval ||
                    this.RFPsWaitingForApproval.Equals(input.RFPsWaitingForApproval)
                ) && 
                (
                    this.OpenProposals == input.OpenProposals ||
                    this.OpenProposals.Equals(input.OpenProposals)
                ) && 
                (
                    this.ApprovedProposalsDaysPeriod == input.ApprovedProposalsDaysPeriod ||
                    this.ApprovedProposalsDaysPeriod.Equals(input.ApprovedProposalsDaysPeriod)
                ) && 
                (
                    this.ApprovedProposals == input.ApprovedProposals ||
                    this.ApprovedProposals.Equals(input.ApprovedProposals)
                ) && 
                (
                    this.WaitingReviewProposals == input.WaitingReviewProposals ||
                    this.WaitingReviewProposals.Equals(input.WaitingReviewProposals)
                ) && 
                (
                    this.RejectedProposals == input.RejectedProposals ||
                    this.RejectedProposals.Equals(input.RejectedProposals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DaysPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.RFPsWaitingForApproval.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenProposals.GetHashCode();
                hashCode = (hashCode * 59) + this.ApprovedProposalsDaysPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.ApprovedProposals.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitingReviewProposals.GetHashCode();
                hashCode = (hashCode * 59) + this.RejectedProposals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
