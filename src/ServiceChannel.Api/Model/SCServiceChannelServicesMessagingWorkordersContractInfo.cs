/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// ContractInfo (composite object) - describes who, where and what will perform as well as the one who requested work
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.ContractInfo")]
    public partial class SCServiceChannelServicesMessagingWorkordersContractInfo : IEquatable<SCServiceChannelServicesMessagingWorkordersContractInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersContractInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingWorkordersContractInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersContractInfo" /> class.
        /// </summary>
        /// <param name="subscriberId">Required for provider request (for subscriber request filled authomatically), must belong to existing subscriber (required).</param>
        /// <param name="locationId">Required if &#39;StoreId&#39; not passed, must belong to existing location for specified subscriber.              Can be Optional, if EquipmentId is supplied in the request, system picks LocationId of the location that equipment belongs to (required).</param>
        /// <param name="storeId">Optional, can be used instead of &#39;LocationId&#39;.              If &#39;LocationId&#39; not passed system will attempt to find location based on &#39;SubscriberId&#39; and &#39;StoreId&#39;              (&#39;StoreId&#39; is required in this case), it is possible that system won&#39;t be able to find location which results in error.              Many locations can have similar StoreId but LocationId is always unique.</param>
        /// <param name="providerId">Optional (for provider request filled authomatically), if provided - must correspond to a valid provider that has contract              for specified Subscriber, Location and Trade.              If not specified the system will attempt to find default provider based on Location,               Trade and Equipment (if specified). It is possible that system won&#39;t be able to find provider which results in error.</param>
        /// <param name="tradeName">Required, must be a valid trade for specified subscriber.              Can be Optional if EquipmentId is supplied in the request, system picks TradeName of the trade that equipment belongs to.              This definition is narrower then Category. For example if Category is \&quot;Maintenance\&quot; then TradeName will be \&quot;FLOOR MAINTENANCE\&quot; (required).</param>
        public SCServiceChannelServicesMessagingWorkordersContractInfo(int subscriberId = default(int), int locationId = default(int), string storeId = default(string), int providerId = default(int), string tradeName = default(string))
        {
            this.SubscriberId = subscriberId;
            this.LocationId = locationId;
            // to ensure "tradeName" is required (not null)
            if (tradeName == null)
            {
                throw new ArgumentNullException("tradeName is a required property for SCServiceChannelServicesMessagingWorkordersContractInfo and cannot be null");
            }
            this.TradeName = tradeName;
            this.StoreId = storeId;
            this.ProviderId = providerId;
        }

        /// <summary>
        /// Required for provider request (for subscriber request filled authomatically), must belong to existing subscriber
        /// </summary>
        /// <value>Required for provider request (for subscriber request filled authomatically), must belong to existing subscriber</value>
        [DataMember(Name = "SubscriberId", IsRequired = true, EmitDefaultValue = true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Required if &#39;StoreId&#39; not passed, must belong to existing location for specified subscriber.              Can be Optional, if EquipmentId is supplied in the request, system picks LocationId of the location that equipment belongs to
        /// </summary>
        /// <value>Required if &#39;StoreId&#39; not passed, must belong to existing location for specified subscriber.              Can be Optional, if EquipmentId is supplied in the request, system picks LocationId of the location that equipment belongs to</value>
        [DataMember(Name = "LocationId", IsRequired = true, EmitDefaultValue = true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Optional, can be used instead of &#39;LocationId&#39;.              If &#39;LocationId&#39; not passed system will attempt to find location based on &#39;SubscriberId&#39; and &#39;StoreId&#39;              (&#39;StoreId&#39; is required in this case), it is possible that system won&#39;t be able to find location which results in error.              Many locations can have similar StoreId but LocationId is always unique
        /// </summary>
        /// <value>Optional, can be used instead of &#39;LocationId&#39;.              If &#39;LocationId&#39; not passed system will attempt to find location based on &#39;SubscriberId&#39; and &#39;StoreId&#39;              (&#39;StoreId&#39; is required in this case), it is possible that system won&#39;t be able to find location which results in error.              Many locations can have similar StoreId but LocationId is always unique</value>
        [DataMember(Name = "StoreId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Optional (for provider request filled authomatically), if provided - must correspond to a valid provider that has contract              for specified Subscriber, Location and Trade.              If not specified the system will attempt to find default provider based on Location,               Trade and Equipment (if specified). It is possible that system won&#39;t be able to find provider which results in error
        /// </summary>
        /// <value>Optional (for provider request filled authomatically), if provided - must correspond to a valid provider that has contract              for specified Subscriber, Location and Trade.              If not specified the system will attempt to find default provider based on Location,               Trade and Equipment (if specified). It is possible that system won&#39;t be able to find provider which results in error</value>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Required, must be a valid trade for specified subscriber.              Can be Optional if EquipmentId is supplied in the request, system picks TradeName of the trade that equipment belongs to.              This definition is narrower then Category. For example if Category is \&quot;Maintenance\&quot; then TradeName will be \&quot;FLOOR MAINTENANCE\&quot;
        /// </summary>
        /// <value>Required, must be a valid trade for specified subscriber.              Can be Optional if EquipmentId is supplied in the request, system picks TradeName of the trade that equipment belongs to.              This definition is narrower then Category. For example if Category is \&quot;Maintenance\&quot; then TradeName will be \&quot;FLOOR MAINTENANCE\&quot;</value>
        [DataMember(Name = "TradeName", IsRequired = true, EmitDefaultValue = true)]
        public string TradeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersContractInfo {\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  TradeName: ").Append(TradeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersContractInfo);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersContractInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersContractInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersContractInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.TradeName == input.TradeName ||
                    (this.TradeName != null &&
                    this.TradeName.Equals(input.TradeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                if (this.TradeName != null)
                {
                    hashCode = (hashCode * 59) + this.TradeName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
