/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Asset type meter object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Assets.AssetMeterReadingResponseItem")]
    public partial class SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem : IEquatable<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem" /> class.
        /// </summary>
        /// <param name="id">Unique asset meter reading identifier..</param>
        /// <param name="assetMeterId">Unique numeric asset meter identifier..</param>
        /// <param name="assetTypeMeterId">Unique numeric identifier of the asset type meter..</param>
        /// <param name="assetTypeMeterName">Name of an asset type meter..</param>
        /// <param name="unitOfMeasureId">Number of the unit of measure associated with a meter. This is a sequence number of the unit of measure as it is listed in the overlay for creating a meter..</param>
        /// <param name="unitOfMeasureName">Name of a unit of measure..</param>
        /// <param name="value">Value that a user enters when recording a meter reading on an asset..</param>
        /// <param name="trackingNumber">Tracking number of a work order an asset is assigned to..</param>
        /// <param name="notes">Comment added when creating an asset meter reading..</param>
        /// <param name="updatedBy">ID of a user who added an asset meter reading..</param>
        /// <param name="updatedByUserName">Username of an employee who added an asset meter reading..</param>
        /// <param name="updatedDate">Date and time when an asset meter reading was added..</param>
        public SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem(int id = default(int), int assetMeterId = default(int), int assetTypeMeterId = default(int), string assetTypeMeterName = default(string), int unitOfMeasureId = default(int), string unitOfMeasureName = default(string), double value = default(double), int trackingNumber = default(int), string notes = default(string), int updatedBy = default(int), string updatedByUserName = default(string), DateTime updatedDate = default(DateTime))
        {
            this.Id = id;
            this.AssetMeterId = assetMeterId;
            this.AssetTypeMeterId = assetTypeMeterId;
            this.AssetTypeMeterName = assetTypeMeterName;
            this.UnitOfMeasureId = unitOfMeasureId;
            this.UnitOfMeasureName = unitOfMeasureName;
            this.Value = value;
            this.TrackingNumber = trackingNumber;
            this.Notes = notes;
            this.UpdatedBy = updatedBy;
            this.UpdatedByUserName = updatedByUserName;
            this.UpdatedDate = updatedDate;
        }

        /// <summary>
        /// Unique asset meter reading identifier.
        /// </summary>
        /// <value>Unique asset meter reading identifier.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique numeric asset meter identifier.
        /// </summary>
        /// <value>Unique numeric asset meter identifier.</value>
        [DataMember(Name = "AssetMeterId", EmitDefaultValue = false)]
        public int AssetMeterId { get; set; }

        /// <summary>
        /// Unique numeric identifier of the asset type meter.
        /// </summary>
        /// <value>Unique numeric identifier of the asset type meter.</value>
        [DataMember(Name = "AssetTypeMeterId", EmitDefaultValue = false)]
        public int AssetTypeMeterId { get; set; }

        /// <summary>
        /// Name of an asset type meter.
        /// </summary>
        /// <value>Name of an asset type meter.</value>
        [DataMember(Name = "AssetTypeMeterName", EmitDefaultValue = false)]
        public string AssetTypeMeterName { get; set; }

        /// <summary>
        /// Number of the unit of measure associated with a meter. This is a sequence number of the unit of measure as it is listed in the overlay for creating a meter.
        /// </summary>
        /// <value>Number of the unit of measure associated with a meter. This is a sequence number of the unit of measure as it is listed in the overlay for creating a meter.</value>
        [DataMember(Name = "UnitOfMeasureId", EmitDefaultValue = false)]
        public int UnitOfMeasureId { get; set; }

        /// <summary>
        /// Name of a unit of measure.
        /// </summary>
        /// <value>Name of a unit of measure.</value>
        [DataMember(Name = "UnitOfMeasureName", EmitDefaultValue = false)]
        public string UnitOfMeasureName { get; set; }

        /// <summary>
        /// Value that a user enters when recording a meter reading on an asset.
        /// </summary>
        /// <value>Value that a user enters when recording a meter reading on an asset.</value>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Tracking number of a work order an asset is assigned to.
        /// </summary>
        /// <value>Tracking number of a work order an asset is assigned to.</value>
        [DataMember(Name = "TrackingNumber", EmitDefaultValue = false)]
        public int TrackingNumber { get; set; }

        /// <summary>
        /// Comment added when creating an asset meter reading.
        /// </summary>
        /// <value>Comment added when creating an asset meter reading.</value>
        [DataMember(Name = "Notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// ID of a user who added an asset meter reading.
        /// </summary>
        /// <value>ID of a user who added an asset meter reading.</value>
        [DataMember(Name = "UpdatedBy", EmitDefaultValue = false)]
        public int UpdatedBy { get; set; }

        /// <summary>
        /// Username of an employee who added an asset meter reading.
        /// </summary>
        /// <value>Username of an employee who added an asset meter reading.</value>
        [DataMember(Name = "UpdatedByUserName", EmitDefaultValue = false)]
        public string UpdatedByUserName { get; set; }

        /// <summary>
        /// Date and time when an asset meter reading was added.
        /// </summary>
        /// <value>Date and time when an asset meter reading was added.</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssetMeterId: ").Append(AssetMeterId).Append("\n");
            sb.Append("  AssetTypeMeterId: ").Append(AssetTypeMeterId).Append("\n");
            sb.Append("  AssetTypeMeterName: ").Append(AssetTypeMeterName).Append("\n");
            sb.Append("  UnitOfMeasureId: ").Append(UnitOfMeasureId).Append("\n");
            sb.Append("  UnitOfMeasureName: ").Append(UnitOfMeasureName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedByUserName: ").Append(UpdatedByUserName).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AssetMeterId == input.AssetMeterId ||
                    this.AssetMeterId.Equals(input.AssetMeterId)
                ) && 
                (
                    this.AssetTypeMeterId == input.AssetTypeMeterId ||
                    this.AssetTypeMeterId.Equals(input.AssetTypeMeterId)
                ) && 
                (
                    this.AssetTypeMeterName == input.AssetTypeMeterName ||
                    (this.AssetTypeMeterName != null &&
                    this.AssetTypeMeterName.Equals(input.AssetTypeMeterName))
                ) && 
                (
                    this.UnitOfMeasureId == input.UnitOfMeasureId ||
                    this.UnitOfMeasureId.Equals(input.UnitOfMeasureId)
                ) && 
                (
                    this.UnitOfMeasureName == input.UnitOfMeasureName ||
                    (this.UnitOfMeasureName != null &&
                    this.UnitOfMeasureName.Equals(input.UnitOfMeasureName))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    this.TrackingNumber.Equals(input.TrackingNumber)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    this.UpdatedBy.Equals(input.UpdatedBy)
                ) && 
                (
                    this.UpdatedByUserName == input.UpdatedByUserName ||
                    (this.UpdatedByUserName != null &&
                    this.UpdatedByUserName.Equals(input.UpdatedByUserName))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetMeterId.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetTypeMeterId.GetHashCode();
                if (this.AssetTypeMeterName != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTypeMeterName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitOfMeasureId.GetHashCode();
                if (this.UnitOfMeasureName != null)
                {
                    hashCode = (hashCode * 59) + this.UnitOfMeasureName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                if (this.UpdatedByUserName != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedByUserName.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
