/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingTemplateTemplateFilesHistory
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Template.TemplateFilesHistory")]
    public partial class SCServiceChannelServicesMessagingTemplateTemplateFilesHistory : IEquatable<SCServiceChannelServicesMessagingTemplateTemplateFilesHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingTemplateTemplateFilesHistory" /> class.
        /// </summary>
        /// <param name="id">Gets or sets Id..</param>
        /// <param name="filePath">Gets or sets FilePath..</param>
        /// <param name="fileName">Gets or sets FileName..</param>
        /// <param name="description">Gets or sets Description..</param>
        /// <param name="errorMessage">Gets or sets ErrorMessage..</param>
        /// <param name="fileStatus">Gets or sets FileStatus. 0 - started 1 - processing; 2 - completed;.</param>
        /// <param name="fileType">Gets or sets FileType. 0  - pm_Template file.</param>
        /// <param name="modifiedDate">Gets or sets ModifiedDate..</param>
        /// <param name="modifiedBy">Gets or sets ModifiedBy..</param>
        /// <param name="createdRecords">Gets or sets CreatedRecords..</param>
        /// <param name="updatedRecords">Gets or sets UpdatedRecords..</param>
        /// <param name="subscriberId">Gets or sets SubscriberId..</param>
        /// <param name="deletedRecords">Gets or sets DeletedRecords..</param>
        public SCServiceChannelServicesMessagingTemplateTemplateFilesHistory(int id = default(int), string filePath = default(string), string fileName = default(string), string description = default(string), string errorMessage = default(string), int fileStatus = default(int), int fileType = default(int), DateTime modifiedDate = default(DateTime), string modifiedBy = default(string), int createdRecords = default(int), int updatedRecords = default(int), int subscriberId = default(int), int deletedRecords = default(int))
        {
            this.Id = id;
            this.FilePath = filePath;
            this.FileName = fileName;
            this.Description = description;
            this.ErrorMessage = errorMessage;
            this.FileStatus = fileStatus;
            this.FileType = fileType;
            this.ModifiedDate = modifiedDate;
            this.ModifiedBy = modifiedBy;
            this.CreatedRecords = createdRecords;
            this.UpdatedRecords = updatedRecords;
            this.SubscriberId = subscriberId;
            this.DeletedRecords = deletedRecords;
        }

        /// <summary>
        /// Gets or sets Id.
        /// </summary>
        /// <value>Gets or sets Id.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets FilePath.
        /// </summary>
        /// <value>Gets or sets FilePath.</value>
        [DataMember(Name = "FilePath", EmitDefaultValue = false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Gets or sets FileName.
        /// </summary>
        /// <value>Gets or sets FileName.</value>
        [DataMember(Name = "FileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets Description.
        /// </summary>
        /// <value>Gets or sets Description.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets ErrorMessage.
        /// </summary>
        /// <value>Gets or sets ErrorMessage.</value>
        [DataMember(Name = "ErrorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or sets FileStatus. 0 - started 1 - processing; 2 - completed;
        /// </summary>
        /// <value>Gets or sets FileStatus. 0 - started 1 - processing; 2 - completed;</value>
        [DataMember(Name = "FileStatus", EmitDefaultValue = false)]
        public int FileStatus { get; set; }

        /// <summary>
        /// Gets or sets FileType. 0  - pm_Template file
        /// </summary>
        /// <value>Gets or sets FileType. 0  - pm_Template file</value>
        [DataMember(Name = "FileType", EmitDefaultValue = false)]
        public int FileType { get; set; }

        /// <summary>
        /// Gets or sets ModifiedDate.
        /// </summary>
        /// <value>Gets or sets ModifiedDate.</value>
        [DataMember(Name = "ModifiedDate", EmitDefaultValue = false)]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Gets or sets ModifiedBy.
        /// </summary>
        /// <value>Gets or sets ModifiedBy.</value>
        [DataMember(Name = "ModifiedBy", EmitDefaultValue = false)]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Gets or sets CreatedRecords.
        /// </summary>
        /// <value>Gets or sets CreatedRecords.</value>
        [DataMember(Name = "CreatedRecords", EmitDefaultValue = false)]
        public int CreatedRecords { get; set; }

        /// <summary>
        /// Gets or sets UpdatedRecords.
        /// </summary>
        /// <value>Gets or sets UpdatedRecords.</value>
        [DataMember(Name = "UpdatedRecords", EmitDefaultValue = false)]
        public int UpdatedRecords { get; set; }

        /// <summary>
        /// Gets or sets SubscriberId.
        /// </summary>
        /// <value>Gets or sets SubscriberId.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or sets DeletedRecords.
        /// </summary>
        /// <value>Gets or sets DeletedRecords.</value>
        [DataMember(Name = "DeletedRecords", EmitDefaultValue = false)]
        public int DeletedRecords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingTemplateTemplateFilesHistory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  FileStatus: ").Append(FileStatus).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  CreatedRecords: ").Append(CreatedRecords).Append("\n");
            sb.Append("  UpdatedRecords: ").Append(UpdatedRecords).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  DeletedRecords: ").Append(DeletedRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingTemplateTemplateFilesHistory);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingTemplateTemplateFilesHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingTemplateTemplateFilesHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingTemplateTemplateFilesHistory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.FileStatus == input.FileStatus ||
                    this.FileStatus.Equals(input.FileStatus)
                ) && 
                (
                    this.FileType == input.FileType ||
                    this.FileType.Equals(input.FileType)
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    (this.ModifiedBy != null &&
                    this.ModifiedBy.Equals(input.ModifiedBy))
                ) && 
                (
                    this.CreatedRecords == input.CreatedRecords ||
                    this.CreatedRecords.Equals(input.CreatedRecords)
                ) && 
                (
                    this.UpdatedRecords == input.UpdatedRecords ||
                    this.UpdatedRecords.Equals(input.UpdatedRecords)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.DeletedRecords == input.DeletedRecords ||
                    this.DeletedRecords.Equals(input.DeletedRecords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.FilePath != null)
                {
                    hashCode = (hashCode * 59) + this.FilePath.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.FileType.GetHashCode();
                if (this.ModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDate.GetHashCode();
                }
                if (this.ModifiedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedRecords.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedRecords.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                hashCode = (hashCode * 59) + this.DeletedRecords.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
