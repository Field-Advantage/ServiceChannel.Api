/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Request object to get locations.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Location.GetFilteredLocationsRequest")]
    public partial class SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest : IEquatable<SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest" /> class.
        /// </summary>
        /// <param name="providerId">Unique provider identifier..</param>
        /// <param name="locationIds">Unique location identifier..</param>
        /// <param name="name">Location name..</param>
        /// <param name="address">Main location address..</param>
        /// <param name="countryId">Numeric identifier of the location country..</param>
        /// <param name="stateIds">Numeric identifier of the location’s state..</param>
        /// <param name="city">Location city..</param>
        /// <param name="region">Part of the country where the location is situated..</param>
        /// <param name="district">Abbreviation of the town or country area where the location is situated..</param>
        public SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest(int providerId = default(int), List<int> locationIds = default(List<int>), string name = default(string), string address = default(string), int countryId = default(int), List<int> stateIds = default(List<int>), string city = default(string), string region = default(string), string district = default(string))
        {
            this.ProviderId = providerId;
            this.LocationIds = locationIds;
            this.Name = name;
            this.Address = address;
            this.CountryId = countryId;
            this.StateIds = stateIds;
            this.City = city;
            this.Region = region;
            this.District = district;
        }

        /// <summary>
        /// Unique provider identifier.
        /// </summary>
        /// <value>Unique provider identifier.</value>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Unique location identifier.
        /// </summary>
        /// <value>Unique location identifier.</value>
        [DataMember(Name = "LocationIds", EmitDefaultValue = false)]
        public List<int> LocationIds { get; set; }

        /// <summary>
        /// Location name.
        /// </summary>
        /// <value>Location name.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Main location address.
        /// </summary>
        /// <value>Main location address.</value>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Numeric identifier of the location country.
        /// </summary>
        /// <value>Numeric identifier of the location country.</value>
        [DataMember(Name = "CountryId", EmitDefaultValue = false)]
        public int CountryId { get; set; }

        /// <summary>
        /// Numeric identifier of the location’s state.
        /// </summary>
        /// <value>Numeric identifier of the location’s state.</value>
        [DataMember(Name = "StateIds", EmitDefaultValue = false)]
        public List<int> StateIds { get; set; }

        /// <summary>
        /// Location city.
        /// </summary>
        /// <value>Location city.</value>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Part of the country where the location is situated.
        /// </summary>
        /// <value>Part of the country where the location is situated.</value>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Abbreviation of the town or country area where the location is situated.
        /// </summary>
        /// <value>Abbreviation of the town or country area where the location is situated.</value>
        [DataMember(Name = "District", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest {\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  LocationIds: ").Append(LocationIds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  StateIds: ").Append(StateIds).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.LocationIds == input.LocationIds ||
                    this.LocationIds != null &&
                    input.LocationIds != null &&
                    this.LocationIds.SequenceEqual(input.LocationIds)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    this.CountryId.Equals(input.CountryId)
                ) && 
                (
                    this.StateIds == input.StateIds ||
                    this.StateIds != null &&
                    input.StateIds != null &&
                    this.StateIds.SequenceEqual(input.StateIds)
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                if (this.LocationIds != null)
                {
                    hashCode = (hashCode * 59) + this.LocationIds.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                if (this.StateIds != null)
                {
                    hashCode = (hashCode * 59) + this.StateIds.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.District != null)
                {
                    hashCode = (hashCode * 59) + this.District.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
