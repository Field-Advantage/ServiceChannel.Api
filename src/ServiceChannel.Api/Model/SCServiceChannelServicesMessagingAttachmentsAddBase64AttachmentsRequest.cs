/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Attachments.AddBase64AttachmentsRequest")]
    public partial class SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest : IEquatable<SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest" /> class.
        /// </summary>
        /// <param name="poNumber">Purchase Order. Required..</param>
        /// <param name="file">File as a base64 encoded value..</param>
        /// <param name="fileName">File name with extension. Optional. GUID value by default..</param>
        /// <param name="extension">File extension. Ignored if fileName is passed. Optional..</param>
        /// <param name="description">Description for file. Optional..</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action. Optional..</param>
        public SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest(string poNumber = default(string), string file = default(string), string fileName = default(string), string extension = default(string), string description = default(string), string actor = default(string))
        {
            this.PoNumber = poNumber;
            this.File = file;
            this.FileName = fileName;
            this.Extension = extension;
            this.Description = description;
            this.Actor = actor;
        }

        /// <summary>
        /// Purchase Order. Required.
        /// </summary>
        /// <value>Purchase Order. Required.</value>
        [DataMember(Name = "poNumber", EmitDefaultValue = false)]
        public string PoNumber { get; set; }

        /// <summary>
        /// File as a base64 encoded value.
        /// </summary>
        /// <value>File as a base64 encoded value.</value>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public string File { get; set; }

        /// <summary>
        /// File name with extension. Optional. GUID value by default.
        /// </summary>
        /// <value>File name with extension. Optional. GUID value by default.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// File extension. Ignored if fileName is passed. Optional.
        /// </summary>
        /// <value>File extension. Ignored if fileName is passed. Optional.</value>
        [DataMember(Name = "extension", EmitDefaultValue = false)]
        public string Extension { get; set; }

        /// <summary>
        /// Description for file. Optional.
        /// </summary>
        /// <value>Description for file. Optional.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Name of the person on whose behalf you are performing the action. Optional.
        /// </summary>
        /// <value>Name of the person on whose behalf you are performing the action. Optional.</value>
        [DataMember(Name = "actor", EmitDefaultValue = false)]
        public string Actor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest {\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PoNumber == input.PoNumber ||
                    (this.PoNumber != null &&
                    this.PoNumber.Equals(input.PoNumber))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PoNumber.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.Extension != null)
                {
                    hashCode = (hashCode * 59) + this.Extension.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Actor != null)
                {
                    hashCode = (hashCode * 59) + this.Actor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
