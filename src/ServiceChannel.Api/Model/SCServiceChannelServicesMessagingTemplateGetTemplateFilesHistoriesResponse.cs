/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// holds response
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Template.GetTemplateFilesHistoriesResponse")]
    public partial class SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse : IEquatable<SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse" /> class.
        /// </summary>
        /// <param name="templateFilesHistories">Gets or sets Trades..</param>
        /// <param name="itemsCount">Gets or sets ItemsCount..</param>
        /// <param name="errorCode">Numeric identifier that determines the nature of an error. Possible values: &#x60;0&#x60; - success, otherwise - error..</param>
        /// <param name="message">Defines that the file’s remote storage is unavailable or its URL cannot be found..</param>
        public SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse(List<SCServiceChannelServicesMessagingTemplateTemplateFilesHistory> templateFilesHistories = default(List<SCServiceChannelServicesMessagingTemplateTemplateFilesHistory>), int itemsCount = default(int), int errorCode = default(int), string message = default(string))
        {
            this.TemplateFilesHistories = templateFilesHistories;
            this.ItemsCount = itemsCount;
            this.ErrorCode = errorCode;
            this.Message = message;
        }

        /// <summary>
        /// Gets or sets Trades.
        /// </summary>
        /// <value>Gets or sets Trades.</value>
        [DataMember(Name = "TemplateFilesHistories", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingTemplateTemplateFilesHistory> TemplateFilesHistories { get; set; }

        /// <summary>
        /// Gets or sets ItemsCount.
        /// </summary>
        /// <value>Gets or sets ItemsCount.</value>
        [DataMember(Name = "ItemsCount", EmitDefaultValue = false)]
        public int ItemsCount { get; set; }

        /// <summary>
        /// Numeric identifier that determines the nature of an error. Possible values: &#x60;0&#x60; - success, otherwise - error.
        /// </summary>
        /// <value>Numeric identifier that determines the nature of an error. Possible values: &#x60;0&#x60; - success, otherwise - error.</value>
        [DataMember(Name = "ErrorCode", EmitDefaultValue = false)]
        public int ErrorCode { get; set; }

        /// <summary>
        /// Defines that the file’s remote storage is unavailable or its URL cannot be found.
        /// </summary>
        /// <value>Defines that the file’s remote storage is unavailable or its URL cannot be found.</value>
        [DataMember(Name = "Message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse {\n");
            sb.Append("  TemplateFilesHistories: ").Append(TemplateFilesHistories).Append("\n");
            sb.Append("  ItemsCount: ").Append(ItemsCount).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingTemplateGetTemplateFilesHistoriesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TemplateFilesHistories == input.TemplateFilesHistories ||
                    this.TemplateFilesHistories != null &&
                    input.TemplateFilesHistories != null &&
                    this.TemplateFilesHistories.SequenceEqual(input.TemplateFilesHistories)
                ) && 
                (
                    this.ItemsCount == input.ItemsCount ||
                    this.ItemsCount.Equals(input.ItemsCount)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateFilesHistories != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateFilesHistories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
