/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Information on the trip.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.InvoiceTravel")]
    public partial class SCServiceChannelServicesMessagingInvoicesInvoiceTravel : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceTravel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesInvoiceTravel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="invoiceId">Invoice identifier..</param>
        /// <param name="description">Description of the trip..</param>
        /// <param name="unitType">Unit of measurement..</param>
        /// <param name="unitPrice">Price per unit..</param>
        /// <param name="quantity">Quantity..</param>
        /// <param name="amount">The amount of the trip cost. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Travels&#x60; array must equal &#x60;InvoiceAmountsDetails.TravelAmount&#x60;..</param>
        /// <param name="isOffShore">Type of the shore (&#x60;1&#x60; - Onshore, &#x60;2&#x60; - Offshore). (default to false).</param>
        /// <param name="approvalCodeGroup">approvalCodeGroup.</param>
        /// <param name="isNontaxableVATEU">isNontaxableVATEU (default to false).</param>
        public SCServiceChannelServicesMessagingInvoicesInvoiceTravel(int id = default(int), int invoiceId = default(int), string description = default(string), byte[] unitType = default(byte[]), double unitPrice = default(double), double quantity = default(double), double amount = default(double), bool isOffShore = false, SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup approvalCodeGroup = default(SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup), bool isNontaxableVATEU = false)
        {
            this.Id = id;
            this.InvoiceId = invoiceId;
            this.Description = description;
            this.UnitType = unitType;
            this.UnitPrice = unitPrice;
            this.Quantity = quantity;
            this.Amount = amount;
            this.IsOffShore = isOffShore;
            this.ApprovalCodeGroup = approvalCodeGroup;
            this.IsNontaxableVATEU = isNontaxableVATEU;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Invoice identifier.
        /// </summary>
        /// <value>Invoice identifier.</value>
        [DataMember(Name = "InvoiceId", EmitDefaultValue = false)]
        public int InvoiceId { get; set; }

        /// <summary>
        /// Description of the trip.
        /// </summary>
        /// <value>Description of the trip.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Unit of measurement.
        /// </summary>
        /// <value>Unit of measurement.</value>
        [DataMember(Name = "UnitType", EmitDefaultValue = false)]
        public byte[] UnitType { get; set; }

        /// <summary>
        /// Price per unit.
        /// </summary>
        /// <value>Price per unit.</value>
        [DataMember(Name = "UnitPrice", EmitDefaultValue = false)]
        public double UnitPrice { get; set; }

        /// <summary>
        /// Quantity.
        /// </summary>
        /// <value>Quantity.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// The amount of the trip cost. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Travels&#x60; array must equal &#x60;InvoiceAmountsDetails.TravelAmount&#x60;.
        /// </summary>
        /// <value>The amount of the trip cost. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Travels&#x60; array must equal &#x60;InvoiceAmountsDetails.TravelAmount&#x60;.</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Type of the shore (&#x60;1&#x60; - Onshore, &#x60;2&#x60; - Offshore).
        /// </summary>
        /// <value>Type of the shore (&#x60;1&#x60; - Onshore, &#x60;2&#x60; - Offshore).</value>
        [DataMember(Name = "IsOffShore", EmitDefaultValue = true)]
        public bool IsOffShore { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCodeGroup
        /// </summary>
        [DataMember(Name = "ApprovalCodeGroup", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup ApprovalCodeGroup { get; set; }

        /// <summary>
        /// Gets or Sets IsNontaxableVATEU
        /// </summary>
        [DataMember(Name = "isNontaxableVATEU", EmitDefaultValue = true)]
        public bool IsNontaxableVATEU { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceTravel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  IsOffShore: ").Append(IsOffShore).Append("\n");
            sb.Append("  ApprovalCodeGroup: ").Append(ApprovalCodeGroup).Append("\n");
            sb.Append("  IsNontaxableVATEU: ").Append(IsNontaxableVATEU).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesInvoiceTravel);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceTravel instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceTravel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceTravel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    this.InvoiceId.Equals(input.InvoiceId)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    this.UnitPrice.Equals(input.UnitPrice)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.IsOffShore == input.IsOffShore ||
                    this.IsOffShore.Equals(input.IsOffShore)
                ) && 
                (
                    this.ApprovalCodeGroup == input.ApprovalCodeGroup ||
                    (this.ApprovalCodeGroup != null &&
                    this.ApprovalCodeGroup.Equals(input.ApprovalCodeGroup))
                ) && 
                (
                    this.IsNontaxableVATEU == input.IsNontaxableVATEU ||
                    this.IsNontaxableVATEU.Equals(input.IsNontaxableVATEU)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceId.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.UnitType != null)
                {
                    hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOffShore.GetHashCode();
                if (this.ApprovalCodeGroup != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCodeGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsNontaxableVATEU.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
