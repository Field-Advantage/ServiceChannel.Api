/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Information on labor. Add a separate object for each worker. When two or more workers have the same &#x60;SkillLevel&#x60;,&#x60;LaborType&#x60;, and &#x60;HourlyRate&#x60;, use one object and specify &#x60;NumOfTech&#x60;.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.InvoiceLabor")]
    public partial class SCServiceChannelServicesMessagingInvoicesInvoiceLabor : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceLabor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesInvoiceLabor" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="invoiceId">Invoice identifier..</param>
        /// <param name="skillLevel">The skill level of a worker. Valid values: &#x60;1&#x60; - Supervisor, &#x60;2&#x60; - Technician, &#x60;3&#x60; - Helper..</param>
        /// <param name="laborType">The type of the pay rate. Valid values: &#x60;1&#x60; - Regular, &#x60;2&#x60; - Overtime, &#x60;3&#x60; - Double time..</param>
        /// <param name="numOfTech">Number of workers..</param>
        /// <param name="hourlyRate">Worker hourly rate..</param>
        /// <param name="hours">Total hours the worker spent to complete the work order..</param>
        /// <param name="amount">The amount of the labor charge. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Labors&#x60; array must equal &#x60;InvoiceAmountsDetails.LaborAmount&#x60;..</param>
        /// <param name="isOffShore">Type of the shore (&#x60;1&#x60; - Onshore, &#x60;2&#x60; - Offshore). (default to false).</param>
        /// <param name="serviceType">Type of the service (&#x60;1&#x60; - Design Engineering, Architecture, Technical Service, &#x60;2&#x60; - Installation and Supervision, &#x60;3&#x60; - Survey and Troubleshooting)..</param>
        /// <param name="cityPerformed">City where services are performed..</param>
        /// <param name="rateDiscrepancyReason">Rate discrepancy reason..</param>
        /// <param name="agreedRate">Agreed rate..</param>
        /// <param name="approvalCodeGroup">approvalCodeGroup.</param>
        /// <param name="isNontaxableVATEU">isNontaxableVATEU (default to false).</param>
        public SCServiceChannelServicesMessagingInvoicesInvoiceLabor(int id = default(int), int invoiceId = default(int), byte[] skillLevel = default(byte[]), byte[] laborType = default(byte[]), byte[] numOfTech = default(byte[]), double hourlyRate = default(double), double hours = default(double), double amount = default(double), bool isOffShore = false, byte[] serviceType = default(byte[]), string cityPerformed = default(string), string rateDiscrepancyReason = default(string), double agreedRate = default(double), SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup approvalCodeGroup = default(SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup), bool isNontaxableVATEU = false)
        {
            this.Id = id;
            this.InvoiceId = invoiceId;
            this.SkillLevel = skillLevel;
            this.LaborType = laborType;
            this.NumOfTech = numOfTech;
            this.HourlyRate = hourlyRate;
            this.Hours = hours;
            this.Amount = amount;
            this.IsOffShore = isOffShore;
            this.ServiceType = serviceType;
            this.CityPerformed = cityPerformed;
            this.RateDiscrepancyReason = rateDiscrepancyReason;
            this.AgreedRate = agreedRate;
            this.ApprovalCodeGroup = approvalCodeGroup;
            this.IsNontaxableVATEU = isNontaxableVATEU;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Invoice identifier.
        /// </summary>
        /// <value>Invoice identifier.</value>
        [DataMember(Name = "InvoiceId", EmitDefaultValue = false)]
        public int InvoiceId { get; set; }

        /// <summary>
        /// The skill level of a worker. Valid values: &#x60;1&#x60; - Supervisor, &#x60;2&#x60; - Technician, &#x60;3&#x60; - Helper.
        /// </summary>
        /// <value>The skill level of a worker. Valid values: &#x60;1&#x60; - Supervisor, &#x60;2&#x60; - Technician, &#x60;3&#x60; - Helper.</value>
        [DataMember(Name = "SkillLevel", EmitDefaultValue = false)]
        public byte[] SkillLevel { get; set; }

        /// <summary>
        /// The type of the pay rate. Valid values: &#x60;1&#x60; - Regular, &#x60;2&#x60; - Overtime, &#x60;3&#x60; - Double time.
        /// </summary>
        /// <value>The type of the pay rate. Valid values: &#x60;1&#x60; - Regular, &#x60;2&#x60; - Overtime, &#x60;3&#x60; - Double time.</value>
        [DataMember(Name = "LaborType", EmitDefaultValue = false)]
        public byte[] LaborType { get; set; }

        /// <summary>
        /// Number of workers.
        /// </summary>
        /// <value>Number of workers.</value>
        [DataMember(Name = "NumOfTech", EmitDefaultValue = false)]
        public byte[] NumOfTech { get; set; }

        /// <summary>
        /// Worker hourly rate.
        /// </summary>
        /// <value>Worker hourly rate.</value>
        [DataMember(Name = "HourlyRate", EmitDefaultValue = false)]
        public double HourlyRate { get; set; }

        /// <summary>
        /// Total hours the worker spent to complete the work order.
        /// </summary>
        /// <value>Total hours the worker spent to complete the work order.</value>
        [DataMember(Name = "Hours", EmitDefaultValue = false)]
        public double Hours { get; set; }

        /// <summary>
        /// The amount of the labor charge. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Labors&#x60; array must equal &#x60;InvoiceAmountsDetails.LaborAmount&#x60;.
        /// </summary>
        /// <value>The amount of the labor charge. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Labors&#x60; array must equal &#x60;InvoiceAmountsDetails.LaborAmount&#x60;.</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Type of the shore (&#x60;1&#x60; - Onshore, &#x60;2&#x60; - Offshore).
        /// </summary>
        /// <value>Type of the shore (&#x60;1&#x60; - Onshore, &#x60;2&#x60; - Offshore).</value>
        [DataMember(Name = "IsOffShore", EmitDefaultValue = true)]
        public bool IsOffShore { get; set; }

        /// <summary>
        /// Type of the service (&#x60;1&#x60; - Design Engineering, Architecture, Technical Service, &#x60;2&#x60; - Installation and Supervision, &#x60;3&#x60; - Survey and Troubleshooting).
        /// </summary>
        /// <value>Type of the service (&#x60;1&#x60; - Design Engineering, Architecture, Technical Service, &#x60;2&#x60; - Installation and Supervision, &#x60;3&#x60; - Survey and Troubleshooting).</value>
        [DataMember(Name = "ServiceType", EmitDefaultValue = false)]
        public byte[] ServiceType { get; set; }

        /// <summary>
        /// City where services are performed.
        /// </summary>
        /// <value>City where services are performed.</value>
        [DataMember(Name = "CityPerformed", EmitDefaultValue = false)]
        public string CityPerformed { get; set; }

        /// <summary>
        /// Rate discrepancy reason.
        /// </summary>
        /// <value>Rate discrepancy reason.</value>
        [DataMember(Name = "RateDiscrepancyReason", EmitDefaultValue = false)]
        public string RateDiscrepancyReason { get; set; }

        /// <summary>
        /// Agreed rate.
        /// </summary>
        /// <value>Agreed rate.</value>
        [DataMember(Name = "AgreedRate", EmitDefaultValue = false)]
        public double AgreedRate { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCodeGroup
        /// </summary>
        [DataMember(Name = "ApprovalCodeGroup", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup ApprovalCodeGroup { get; set; }

        /// <summary>
        /// Gets or Sets IsRateDiscrepancy
        /// </summary>
        [DataMember(Name = "IsRateDiscrepancy", EmitDefaultValue = true)]
        public bool IsRateDiscrepancy { get; private set; }

        /// <summary>
        /// Returns false as IsRateDiscrepancy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsRateDiscrepancy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsNontaxableVATEU
        /// </summary>
        [DataMember(Name = "isNontaxableVATEU", EmitDefaultValue = true)]
        public bool IsNontaxableVATEU { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceLabor {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  SkillLevel: ").Append(SkillLevel).Append("\n");
            sb.Append("  LaborType: ").Append(LaborType).Append("\n");
            sb.Append("  NumOfTech: ").Append(NumOfTech).Append("\n");
            sb.Append("  HourlyRate: ").Append(HourlyRate).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  IsOffShore: ").Append(IsOffShore).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  CityPerformed: ").Append(CityPerformed).Append("\n");
            sb.Append("  RateDiscrepancyReason: ").Append(RateDiscrepancyReason).Append("\n");
            sb.Append("  AgreedRate: ").Append(AgreedRate).Append("\n");
            sb.Append("  ApprovalCodeGroup: ").Append(ApprovalCodeGroup).Append("\n");
            sb.Append("  IsRateDiscrepancy: ").Append(IsRateDiscrepancy).Append("\n");
            sb.Append("  IsNontaxableVATEU: ").Append(IsNontaxableVATEU).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesInvoiceLabor);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceLabor instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceLabor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceLabor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    this.InvoiceId.Equals(input.InvoiceId)
                ) && 
                (
                    this.SkillLevel == input.SkillLevel ||
                    (this.SkillLevel != null &&
                    this.SkillLevel.Equals(input.SkillLevel))
                ) && 
                (
                    this.LaborType == input.LaborType ||
                    (this.LaborType != null &&
                    this.LaborType.Equals(input.LaborType))
                ) && 
                (
                    this.NumOfTech == input.NumOfTech ||
                    (this.NumOfTech != null &&
                    this.NumOfTech.Equals(input.NumOfTech))
                ) && 
                (
                    this.HourlyRate == input.HourlyRate ||
                    this.HourlyRate.Equals(input.HourlyRate)
                ) && 
                (
                    this.Hours == input.Hours ||
                    this.Hours.Equals(input.Hours)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.IsOffShore == input.IsOffShore ||
                    this.IsOffShore.Equals(input.IsOffShore)
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.CityPerformed == input.CityPerformed ||
                    (this.CityPerformed != null &&
                    this.CityPerformed.Equals(input.CityPerformed))
                ) && 
                (
                    this.RateDiscrepancyReason == input.RateDiscrepancyReason ||
                    (this.RateDiscrepancyReason != null &&
                    this.RateDiscrepancyReason.Equals(input.RateDiscrepancyReason))
                ) && 
                (
                    this.AgreedRate == input.AgreedRate ||
                    this.AgreedRate.Equals(input.AgreedRate)
                ) && 
                (
                    this.ApprovalCodeGroup == input.ApprovalCodeGroup ||
                    (this.ApprovalCodeGroup != null &&
                    this.ApprovalCodeGroup.Equals(input.ApprovalCodeGroup))
                ) && 
                (
                    this.IsRateDiscrepancy == input.IsRateDiscrepancy ||
                    this.IsRateDiscrepancy.Equals(input.IsRateDiscrepancy)
                ) && 
                (
                    this.IsNontaxableVATEU == input.IsNontaxableVATEU ||
                    this.IsNontaxableVATEU.Equals(input.IsNontaxableVATEU)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceId.GetHashCode();
                if (this.SkillLevel != null)
                {
                    hashCode = (hashCode * 59) + this.SkillLevel.GetHashCode();
                }
                if (this.LaborType != null)
                {
                    hashCode = (hashCode * 59) + this.LaborType.GetHashCode();
                }
                if (this.NumOfTech != null)
                {
                    hashCode = (hashCode * 59) + this.NumOfTech.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HourlyRate.GetHashCode();
                hashCode = (hashCode * 59) + this.Hours.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOffShore.GetHashCode();
                if (this.ServiceType != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceType.GetHashCode();
                }
                if (this.CityPerformed != null)
                {
                    hashCode = (hashCode * 59) + this.CityPerformed.GetHashCode();
                }
                if (this.RateDiscrepancyReason != null)
                {
                    hashCode = (hashCode * 59) + this.RateDiscrepancyReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AgreedRate.GetHashCode();
                if (this.ApprovalCodeGroup != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCodeGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsRateDiscrepancy.GetHashCode();
                hashCode = (hashCode * 59) + this.IsNontaxableVATEU.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
