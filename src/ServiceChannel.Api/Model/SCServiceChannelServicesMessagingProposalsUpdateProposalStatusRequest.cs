/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The request object to update a proposal status.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Proposals.UpdateProposalStatusRequest")]
    public partial class SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest : IEquatable<SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines ActionSource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionSourceEnum
        {
            /// <summary>
            /// Enum Standard for value: Standard
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard = 1,

            /// <summary>
            /// Enum DecisionEngine for value: DecisionEngine
            /// </summary>
            [EnumMember(Value = "DecisionEngine")]
            DecisionEngine = 2

        }


        /// <summary>
        /// Gets or Sets ActionSource
        /// </summary>
        [DataMember(Name = "ActionSource", EmitDefaultValue = false)]
        public ActionSourceEnum? ActionSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest" /> class.
        /// </summary>
        /// <param name="comment">Comment on the proposal status update. The comment is added to the work order note..</param>
        /// <param name="providerEmail">Provider’s email address to which a notification about the proposal status change is sent. The default is the email address of the provider the proposal is assigned to..</param>
        /// <param name="userEmail">User’s email address to which a notification about the proposal status change is sent. The default is the email address of the current user..</param>
        /// <param name="rejectReasonCodeId">Numeric identifier of the reason for rejecting the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/reject* request. To retrieve a list of rejection reason codes and their descriptions, use the *GET /proposals/RejectionReasons* method..</param>
        /// <param name="actionSource">actionSource.</param>
        /// <param name="reasonString">Reason for approving the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/approve* request. The entered reason is added to the work order note..</param>
        /// <param name="actor">The Actor is added to the work order note..</param>
        public SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest(string comment = default(string), string providerEmail = default(string), string userEmail = default(string), int rejectReasonCodeId = default(int), ActionSourceEnum? actionSource = default(ActionSourceEnum?), string reasonString = default(string), string actor = default(string))
        {
            this.Comment = comment;
            this.ProviderEmail = providerEmail;
            this.UserEmail = userEmail;
            this.RejectReasonCodeId = rejectReasonCodeId;
            this.ActionSource = actionSource;
            this.ReasonString = reasonString;
            this.Actor = actor;
        }

        /// <summary>
        /// Comment on the proposal status update. The comment is added to the work order note.
        /// </summary>
        /// <value>Comment on the proposal status update. The comment is added to the work order note.</value>
        [DataMember(Name = "Comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Provider’s email address to which a notification about the proposal status change is sent. The default is the email address of the provider the proposal is assigned to.
        /// </summary>
        /// <value>Provider’s email address to which a notification about the proposal status change is sent. The default is the email address of the provider the proposal is assigned to.</value>
        [DataMember(Name = "ProviderEmail", EmitDefaultValue = false)]
        public string ProviderEmail { get; set; }

        /// <summary>
        /// User’s email address to which a notification about the proposal status change is sent. The default is the email address of the current user.
        /// </summary>
        /// <value>User’s email address to which a notification about the proposal status change is sent. The default is the email address of the current user.</value>
        [DataMember(Name = "UserEmail", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Numeric identifier of the reason for rejecting the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/reject* request. To retrieve a list of rejection reason codes and their descriptions, use the *GET /proposals/RejectionReasons* method.
        /// </summary>
        /// <value>Numeric identifier of the reason for rejecting the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/reject* request. To retrieve a list of rejection reason codes and their descriptions, use the *GET /proposals/RejectionReasons* method.</value>
        [DataMember(Name = "RejectReasonCodeId", EmitDefaultValue = false)]
        public int RejectReasonCodeId { get; set; }

        /// <summary>
        /// Reason for approving the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/approve* request. The entered reason is added to the work order note.
        /// </summary>
        /// <value>Reason for approving the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/approve* request. The entered reason is added to the work order note.</value>
        [DataMember(Name = "ReasonString", EmitDefaultValue = false)]
        public string ReasonString { get; set; }

        /// <summary>
        /// The Actor is added to the work order note.
        /// </summary>
        /// <value>The Actor is added to the work order note.</value>
        [DataMember(Name = "Actor", EmitDefaultValue = false)]
        public string Actor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ProviderEmail: ").Append(ProviderEmail).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  RejectReasonCodeId: ").Append(RejectReasonCodeId).Append("\n");
            sb.Append("  ActionSource: ").Append(ActionSource).Append("\n");
            sb.Append("  ReasonString: ").Append(ReasonString).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ProviderEmail == input.ProviderEmail ||
                    (this.ProviderEmail != null &&
                    this.ProviderEmail.Equals(input.ProviderEmail))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.RejectReasonCodeId == input.RejectReasonCodeId ||
                    this.RejectReasonCodeId.Equals(input.RejectReasonCodeId)
                ) && 
                (
                    this.ActionSource == input.ActionSource ||
                    this.ActionSource.Equals(input.ActionSource)
                ) && 
                (
                    this.ReasonString == input.ReasonString ||
                    (this.ReasonString != null &&
                    this.ReasonString.Equals(input.ReasonString))
                ) && 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.ProviderEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderEmail.GetHashCode();
                }
                if (this.UserEmail != null)
                {
                    hashCode = (hashCode * 59) + this.UserEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RejectReasonCodeId.GetHashCode();
                hashCode = (hashCode * 59) + this.ActionSource.GetHashCode();
                if (this.ReasonString != null)
                {
                    hashCode = (hashCode * 59) + this.ReasonString.GetHashCode();
                }
                if (this.Actor != null)
                {
                    hashCode = (hashCode * 59) + this.Actor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
