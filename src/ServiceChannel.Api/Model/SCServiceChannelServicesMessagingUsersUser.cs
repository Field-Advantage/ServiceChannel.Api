/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// User details object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Users.User")]
    public partial class SCServiceChannelServicesMessagingUsersUser : IEquatable<SCServiceChannelServicesMessagingUsersUser>, IValidatableObject
    {
        /// <summary>
        /// Subscriber user type defining their level of access to ServiceChannel:&lt;br /&gt; • &#x60;Corporate&#x60; — a user can work in Service Automation.&lt;br /&gt; • &#x60;Dashboard&#x60; — a user can only access the dashboard assigned to them.&lt;br /&gt;&#x60;0&#x60; is returned for provider users.
        /// </summary>
        /// <value>Subscriber user type defining their level of access to ServiceChannel:&lt;br /&gt; • &#x60;Corporate&#x60; — a user can work in Service Automation.&lt;br /&gt; • &#x60;Dashboard&#x60; — a user can only access the dashboard assigned to them.&lt;br /&gt;&#x60;0&#x60; is returned for provider users.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserTypeEnum
        {
            /// <summary>
            /// Enum Corporate for value: Corporate
            /// </summary>
            [EnumMember(Value = "Corporate")]
            Corporate = 1,

            /// <summary>
            /// Enum Dashboard for value: Dashboard
            /// </summary>
            [EnumMember(Value = "Dashboard")]
            Dashboard = 2,

            /// <summary>
            /// Enum ServiceChannel for value: ServiceChannel
            /// </summary>
            [EnumMember(Value = "ServiceChannel")]
            ServiceChannel = 3

        }


        /// <summary>
        /// Subscriber user type defining their level of access to ServiceChannel:&lt;br /&gt; • &#x60;Corporate&#x60; — a user can work in Service Automation.&lt;br /&gt; • &#x60;Dashboard&#x60; — a user can only access the dashboard assigned to them.&lt;br /&gt;&#x60;0&#x60; is returned for provider users.
        /// </summary>
        /// <value>Subscriber user type defining their level of access to ServiceChannel:&lt;br /&gt; • &#x60;Corporate&#x60; — a user can work in Service Automation.&lt;br /&gt; • &#x60;Dashboard&#x60; — a user can only access the dashboard assigned to them.&lt;br /&gt;&#x60;0&#x60; is returned for provider users.</value>
        [DataMember(Name = "UserType", EmitDefaultValue = false)]
        public UserTypeEnum? UserType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingUsersUser" /> class.
        /// </summary>
        /// <param name="id">Unique user identifier..</param>
        /// <param name="subscriberId">Unique subscriber ID..</param>
        /// <param name="userName">Username of the user.&lt;br /&gt; • For subscriber users, the username appears as **User Id** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, the username is listed as **UserID** under \&quot;Access\&quot; on the \&quot;General\&quot; tab of the user profile page..</param>
        /// <param name="fullName">Full name of the user.&lt;br /&gt; • For subscriber users, the full name appears as **User Name** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, you can see their first and last name under \&quot;Basic\&quot; on the \&quot;General\&quot; tab of the user profile page..</param>
        /// <param name="email">User’s email address..</param>
        /// <param name="psmEmail">Email address through which a user can reset their password..</param>
        /// <param name="disabled">Defines if a user is deactivated. (default to false).</param>
        /// <param name="roles">Secondary roles assigned to a subscriber user that determine their permissions and level of access to various Service Automation modules..</param>
        /// <param name="permissions">Permissions assigned to a subscriber user that determine whether they have full or read-only access to various Service Automation modules..</param>
        /// <param name="userType">Subscriber user type defining their level of access to ServiceChannel:&lt;br /&gt; • &#x60;Corporate&#x60; — a user can work in Service Automation.&lt;br /&gt; • &#x60;Dashboard&#x60; — a user can only access the dashboard assigned to them.&lt;br /&gt;&#x60;0&#x60; is returned for provider users..</param>
        /// <param name="dashboard">dashboard.</param>
        /// <param name="access">access.</param>
        /// <param name="limits">limits.</param>
        /// <param name="feedRole">feedRole.</param>
        /// <param name="mliUserInfo">mliUserInfo.</param>
        /// <param name="mlpUserInfo">mlpUserInfo.</param>
        public SCServiceChannelServicesMessagingUsersUser(int id = default(int), int subscriberId = default(int), string userName = default(string), string fullName = default(string), string email = default(string), string psmEmail = default(string), bool disabled = false, List<string> roles = default(List<string>), List<string> permissions = default(List<string>), UserTypeEnum? userType = default(UserTypeEnum?), SCServiceChannelServicesMessagingUsersDashboardInfo dashboard = default(SCServiceChannelServicesMessagingUsersDashboardInfo), SCServiceChannelServicesMessagingUsersAccessOptions access = default(SCServiceChannelServicesMessagingUsersAccessOptions), SCServiceChannelServicesMessagingUsersLimitOptions limits = default(SCServiceChannelServicesMessagingUsersLimitOptions), string feedRole = default(string), SCServiceChannelServicesMessagingUsersMliUserInfo mliUserInfo = default(SCServiceChannelServicesMessagingUsersMliUserInfo), SCServiceChannelServicesMessagingUsersMlpUserInfo mlpUserInfo = default(SCServiceChannelServicesMessagingUsersMlpUserInfo))
        {
            this.Id = id;
            this.SubscriberId = subscriberId;
            this.UserName = userName;
            this.FullName = fullName;
            this.Email = email;
            this.PsmEmail = psmEmail;
            this.Disabled = disabled;
            this.Roles = roles;
            this.Permissions = permissions;
            this.UserType = userType;
            this.Dashboard = dashboard;
            this.Access = access;
            this.Limits = limits;
            this.FeedRole = feedRole;
            this.MliUserInfo = mliUserInfo;
            this.MlpUserInfo = mlpUserInfo;
        }

        /// <summary>
        /// Unique user identifier.
        /// </summary>
        /// <value>Unique user identifier.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique subscriber ID.
        /// </summary>
        /// <value>Unique subscriber ID.</value>
        [DataMember(Name = "SubscriberId", EmitDefaultValue = false)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Username of the user.&lt;br /&gt; • For subscriber users, the username appears as **User Id** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, the username is listed as **UserID** under \&quot;Access\&quot; on the \&quot;General\&quot; tab of the user profile page.
        /// </summary>
        /// <value>Username of the user.&lt;br /&gt; • For subscriber users, the username appears as **User Id** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, the username is listed as **UserID** under \&quot;Access\&quot; on the \&quot;General\&quot; tab of the user profile page.</value>
        [DataMember(Name = "UserName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Full name of the user.&lt;br /&gt; • For subscriber users, the full name appears as **User Name** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, you can see their first and last name under \&quot;Basic\&quot; on the \&quot;General\&quot; tab of the user profile page.
        /// </summary>
        /// <value>Full name of the user.&lt;br /&gt; • For subscriber users, the full name appears as **User Name** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, you can see their first and last name under \&quot;Basic\&quot; on the \&quot;General\&quot; tab of the user profile page.</value>
        [DataMember(Name = "FullName", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// User’s email address.
        /// </summary>
        /// <value>User’s email address.</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Email address through which a user can reset their password.
        /// </summary>
        /// <value>Email address through which a user can reset their password.</value>
        [DataMember(Name = "PsmEmail", EmitDefaultValue = false)]
        public string PsmEmail { get; set; }

        /// <summary>
        /// Defines if a user is deactivated.
        /// </summary>
        /// <value>Defines if a user is deactivated.</value>
        [DataMember(Name = "Disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Secondary roles assigned to a subscriber user that determine their permissions and level of access to various Service Automation modules.
        /// </summary>
        /// <value>Secondary roles assigned to a subscriber user that determine their permissions and level of access to various Service Automation modules.</value>
        [DataMember(Name = "Roles", EmitDefaultValue = false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Permissions assigned to a subscriber user that determine whether they have full or read-only access to various Service Automation modules.
        /// </summary>
        /// <value>Permissions assigned to a subscriber user that determine whether they have full or read-only access to various Service Automation modules.</value>
        [DataMember(Name = "Permissions", EmitDefaultValue = false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets Dashboard
        /// </summary>
        [DataMember(Name = "Dashboard", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersDashboardInfo Dashboard { get; set; }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "Access", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersAccessOptions Access { get; set; }

        /// <summary>
        /// Gets or Sets Limits
        /// </summary>
        [DataMember(Name = "Limits", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersLimitOptions Limits { get; set; }

        /// <summary>
        /// Gets or Sets FeedRole
        /// </summary>
        [DataMember(Name = "FeedRole", EmitDefaultValue = false)]
        public string FeedRole { get; set; }

        /// <summary>
        /// Gets or Sets MliUserInfo
        /// </summary>
        [DataMember(Name = "MliUserInfo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersMliUserInfo MliUserInfo { get; set; }

        /// <summary>
        /// Gets or Sets MlpUserInfo
        /// </summary>
        [DataMember(Name = "MlpUserInfo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersMlpUserInfo MlpUserInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingUsersUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PsmEmail: ").Append(PsmEmail).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  Dashboard: ").Append(Dashboard).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  FeedRole: ").Append(FeedRole).Append("\n");
            sb.Append("  MliUserInfo: ").Append(MliUserInfo).Append("\n");
            sb.Append("  MlpUserInfo: ").Append(MlpUserInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingUsersUser);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingUsersUser instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingUsersUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingUsersUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SubscriberId == input.SubscriberId ||
                    this.SubscriberId.Equals(input.SubscriberId)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PsmEmail == input.PsmEmail ||
                    (this.PsmEmail != null &&
                    this.PsmEmail.Equals(input.PsmEmail))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.UserType == input.UserType ||
                    this.UserType.Equals(input.UserType)
                ) && 
                (
                    this.Dashboard == input.Dashboard ||
                    (this.Dashboard != null &&
                    this.Dashboard.Equals(input.Dashboard))
                ) && 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.Limits == input.Limits ||
                    (this.Limits != null &&
                    this.Limits.Equals(input.Limits))
                ) && 
                (
                    this.FeedRole == input.FeedRole ||
                    (this.FeedRole != null &&
                    this.FeedRole.Equals(input.FeedRole))
                ) && 
                (
                    this.MliUserInfo == input.MliUserInfo ||
                    (this.MliUserInfo != null &&
                    this.MliUserInfo.Equals(input.MliUserInfo))
                ) && 
                (
                    this.MlpUserInfo == input.MlpUserInfo ||
                    (this.MlpUserInfo != null &&
                    this.MlpUserInfo.Equals(input.MlpUserInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriberId.GetHashCode();
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.PsmEmail != null)
                {
                    hashCode = (hashCode * 59) + this.PsmEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                if (this.Roles != null)
                {
                    hashCode = (hashCode * 59) + this.Roles.GetHashCode();
                }
                if (this.Permissions != null)
                {
                    hashCode = (hashCode * 59) + this.Permissions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserType.GetHashCode();
                if (this.Dashboard != null)
                {
                    hashCode = (hashCode * 59) + this.Dashboard.GetHashCode();
                }
                if (this.Access != null)
                {
                    hashCode = (hashCode * 59) + this.Access.GetHashCode();
                }
                if (this.Limits != null)
                {
                    hashCode = (hashCode * 59) + this.Limits.GetHashCode();
                }
                if (this.FeedRole != null)
                {
                    hashCode = (hashCode * 59) + this.FeedRole.GetHashCode();
                }
                if (this.MliUserInfo != null)
                {
                    hashCode = (hashCode * 59) + this.MliUserInfo.GetHashCode();
                }
                if (this.MlpUserInfo != null)
                {
                    hashCode = (hashCode * 59) + this.MlpUserInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserName (string) pattern
            Regex regexUserName = new Regex(@"^$|(\A\S+).(\S).(\S)\z", RegexOptions.CultureInvariant);
            if (false == regexUserName.Match(this.UserName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserName, must match a pattern of " + regexUserName, new [] { "UserName" });
            }

            yield break;
        }
    }

}
