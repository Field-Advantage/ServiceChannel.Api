/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Attachment object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Location.LocationAttachment")]
    public partial class SCServiceChannelServicesMessagingLocationLocationAttachment : IEquatable<SCServiceChannelServicesMessagingLocationLocationAttachment>, IValidatableObject
    {
        /// <summary>
        /// Numeric identifier of the attachment added. Possible values: &#x60;1&#x60; - EvacuationPlan.
        /// </summary>
        /// <value>Numeric identifier of the attachment added. Possible values: &#x60;1&#x60; - EvacuationPlan.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentTypeEnum
        {
            /// <summary>
            /// Enum EvacuationPlan for value: EvacuationPlan
            /// </summary>
            [EnumMember(Value = "EvacuationPlan")]
            EvacuationPlan = 1

        }


        /// <summary>
        /// Numeric identifier of the attachment added. Possible values: &#x60;1&#x60; - EvacuationPlan.
        /// </summary>
        /// <value>Numeric identifier of the attachment added. Possible values: &#x60;1&#x60; - EvacuationPlan.</value>
        [DataMember(Name = "AttachmentType", EmitDefaultValue = false)]
        public AttachmentTypeEnum? AttachmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingLocationLocationAttachment" /> class.
        /// </summary>
        /// <param name="id">Numeric identifier of the location attachment..</param>
        /// <param name="locationId">Unique ID of the location to which the attachment is added..</param>
        /// <param name="storeId">StoreId.</param>
        /// <param name="fileName">Filename of the evacuation plan map attachment..</param>
        /// <param name="filePath">File’s position in the subscriber’s location..</param>
        /// <param name="description">Description of the evacuation plan map attachment added by the user..</param>
        /// <param name="uploadDate">Date and time when the attachment was added..</param>
        /// <param name="userId">ID of the user who added the attachment to the location..</param>
        /// <param name="userName">Username of the user who added the attachment..</param>
        /// <param name="attachmentType">Numeric identifier of the attachment added. Possible values: &#x60;1&#x60; - EvacuationPlan..</param>
        /// <param name="getFileLink">getFileLink.</param>
        public SCServiceChannelServicesMessagingLocationLocationAttachment(int id = default(int), int locationId = default(int), string storeId = default(string), string fileName = default(string), string filePath = default(string), string description = default(string), DateTime uploadDate = default(DateTime), int userId = default(int), string userName = default(string), AttachmentTypeEnum? attachmentType = default(AttachmentTypeEnum?), string getFileLink = default(string))
        {
            this.Id = id;
            this.LocationId = locationId;
            this.StoreId = storeId;
            this.FileName = fileName;
            this.FilePath = filePath;
            this.Description = description;
            this.UploadDate = uploadDate;
            this.UserId = userId;
            this.UserName = userName;
            this.AttachmentType = attachmentType;
            this.GetFileLink = getFileLink;
        }

        /// <summary>
        /// Numeric identifier of the location attachment.
        /// </summary>
        /// <value>Numeric identifier of the location attachment.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique ID of the location to which the attachment is added.
        /// </summary>
        /// <value>Unique ID of the location to which the attachment is added.</value>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// StoreId
        /// </summary>
        /// <value>StoreId</value>
        [DataMember(Name = "StoreId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Filename of the evacuation plan map attachment.
        /// </summary>
        /// <value>Filename of the evacuation plan map attachment.</value>
        [DataMember(Name = "FileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// File’s position in the subscriber’s location.
        /// </summary>
        /// <value>File’s position in the subscriber’s location.</value>
        [DataMember(Name = "FilePath", EmitDefaultValue = false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Description of the evacuation plan map attachment added by the user.
        /// </summary>
        /// <value>Description of the evacuation plan map attachment added by the user.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Date and time when the attachment was added.
        /// </summary>
        /// <value>Date and time when the attachment was added.</value>
        [DataMember(Name = "UploadDate", EmitDefaultValue = false)]
        public DateTime UploadDate { get; set; }

        /// <summary>
        /// ID of the user who added the attachment to the location.
        /// </summary>
        /// <value>ID of the user who added the attachment to the location.</value>
        [DataMember(Name = "UserId", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Username of the user who added the attachment.
        /// </summary>
        /// <value>Username of the user who added the attachment.</value>
        [DataMember(Name = "UserName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets GetFileLink
        /// </summary>
        [DataMember(Name = "GetFileLink", EmitDefaultValue = false)]
        public string GetFileLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingLocationLocationAttachment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  GetFileLink: ").Append(GetFileLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingLocationLocationAttachment);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingLocationLocationAttachment instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingLocationLocationAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingLocationLocationAttachment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.UploadDate == input.UploadDate ||
                    (this.UploadDate != null &&
                    this.UploadDate.Equals(input.UploadDate))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    this.AttachmentType.Equals(input.AttachmentType)
                ) && 
                (
                    this.GetFileLink == input.GetFileLink ||
                    (this.GetFileLink != null &&
                    this.GetFileLink.Equals(input.GetFileLink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.FilePath != null)
                {
                    hashCode = (hashCode * 59) + this.FilePath.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.UploadDate != null)
                {
                    hashCode = (hashCode * 59) + this.UploadDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AttachmentType.GetHashCode();
                if (this.GetFileLink != null)
                {
                    hashCode = (hashCode * 59) + this.GetFileLink.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
