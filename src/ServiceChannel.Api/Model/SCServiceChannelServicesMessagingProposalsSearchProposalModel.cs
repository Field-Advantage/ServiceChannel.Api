/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingProposalsSearchProposalModel
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Proposals.SearchProposalModel")]
    public partial class SCServiceChannelServicesMessagingProposalsSearchProposalModel : IEquatable<SCServiceChannelServicesMessagingProposalsSearchProposalModel>, IValidatableObject
    {
        /// <summary>
        /// Defines DateType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DateTypeEnum
        {
            /// <summary>
            /// Enum PastMonth for value: PastMonth
            /// </summary>
            [EnumMember(Value = "PastMonth")]
            PastMonth = 1,

            /// <summary>
            /// Enum PastThreeMonths for value: PastThreeMonths
            /// </summary>
            [EnumMember(Value = "PastThreeMonths")]
            PastThreeMonths = 2,

            /// <summary>
            /// Enum PastYear for value: PastYear
            /// </summary>
            [EnumMember(Value = "PastYear")]
            PastYear = 3,

            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 4

        }


        /// <summary>
        /// Gets or Sets DateType
        /// </summary>
        [DataMember(Name = "DateType", EmitDefaultValue = false)]
        public DateTypeEnum? DateType { get; set; }
        /// <summary>
        /// Defines ProposalFilterDateType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProposalFilterDateTypeEnum
        {
            /// <summary>
            /// Enum ProposalDate for value: ProposalDate
            /// </summary>
            [EnumMember(Value = "ProposalDate")]
            ProposalDate = 1,

            /// <summary>
            /// Enum ScheduledDate for value: ScheduledDate
            /// </summary>
            [EnumMember(Value = "ScheduledDate")]
            ScheduledDate = 2,

            /// <summary>
            /// Enum ActionDate for value: ActionDate
            /// </summary>
            [EnumMember(Value = "ActionDate")]
            ActionDate = 3

        }


        /// <summary>
        /// Gets or Sets ProposalFilterDateType
        /// </summary>
        [DataMember(Name = "ProposalFilterDateType", EmitDefaultValue = false)]
        public ProposalFilterDateTypeEnum? ProposalFilterDateType { get; set; }
        /// <summary>
        /// Defines SortBy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortByEnum
        {
            /// <summary>
            /// Enum DateDesc for value: DateDesc
            /// </summary>
            [EnumMember(Value = "DateDesc")]
            DateDesc = 1,

            /// <summary>
            /// Enum DateAsc for value: DateAsc
            /// </summary>
            [EnumMember(Value = "DateAsc")]
            DateAsc = 2,

            /// <summary>
            /// Enum ProposalNumber for value: ProposalNumber
            /// </summary>
            [EnumMember(Value = "ProposalNumber")]
            ProposalNumber = 3,

            /// <summary>
            /// Enum Trade for value: Trade
            /// </summary>
            [EnumMember(Value = "Trade")]
            Trade = 4,

            /// <summary>
            /// Enum LocationId for value: LocationId
            /// </summary>
            [EnumMember(Value = "LocationId")]
            LocationId = 5,

            /// <summary>
            /// Enum Provider for value: Provider
            /// </summary>
            [EnumMember(Value = "Provider")]
            Provider = 6,

            /// <summary>
            /// Enum Status for value: Status
            /// </summary>
            [EnumMember(Value = "Status")]
            Status = 7

        }


        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name = "SortBy", EmitDefaultValue = false)]
        public SortByEnum? SortBy { get; set; }
        /// <summary>
        /// Defines Report
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportEnum
        {
            /// <summary>
            /// Enum Viewable for value: Viewable
            /// </summary>
            [EnumMember(Value = "Viewable")]
            Viewable = 1,

            /// <summary>
            /// Enum Printable for value: Printable
            /// </summary>
            [EnumMember(Value = "Printable")]
            Printable = 2,

            /// <summary>
            /// Enum Excel for value: Excel
            /// </summary>
            [EnumMember(Value = "Excel")]
            Excel = 3

        }


        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [DataMember(Name = "Report", EmitDefaultValue = false)]
        public ReportEnum? Report { get; set; }
        /// <summary>
        /// Defines ProposalStatuses
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProposalStatusesEnum
        {
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,

            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            [EnumMember(Value = "Open")]
            Open = 2,

            /// <summary>
            /// Enum OnHold for value: OnHold
            /// </summary>
            [EnumMember(Value = "OnHold")]
            OnHold = 3,

            /// <summary>
            /// Enum Reviewed for value: Reviewed
            /// </summary>
            [EnumMember(Value = "Reviewed")]
            Reviewed = 4,

            /// <summary>
            /// Enum ApprovedNotScheduled for value: ApprovedNotScheduled
            /// </summary>
            [EnumMember(Value = "ApprovedNotScheduled")]
            ApprovedNotScheduled = 5,

            /// <summary>
            /// Enum ApprovedScheduled for value: ApprovedScheduled
            /// </summary>
            [EnumMember(Value = "ApprovedScheduled")]
            ApprovedScheduled = 6,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 7,

            /// <summary>
            /// Enum PendingExt for value: PendingExt
            /// </summary>
            [EnumMember(Value = "PendingExt")]
            PendingExt = 8

        }

        /// <summary>
        /// Defines SortField
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortFieldEnum
        {
            /// <summary>
            /// Enum LocDate for value: LocDate
            /// </summary>
            [EnumMember(Value = "LocDate")]
            LocDate = 1,

            /// <summary>
            /// Enum ProposalNumber for value: ProposalNumber
            /// </summary>
            [EnumMember(Value = "ProposalNumber")]
            ProposalNumber = 2,

            /// <summary>
            /// Enum Trade for value: Trade
            /// </summary>
            [EnumMember(Value = "Trade")]
            Trade = 3,

            /// <summary>
            /// Enum StoreId for value: StoreId
            /// </summary>
            [EnumMember(Value = "StoreId")]
            StoreId = 4,

            /// <summary>
            /// Enum ProviderName for value: ProviderName
            /// </summary>
            [EnumMember(Value = "ProviderName")]
            ProviderName = 5,

            /// <summary>
            /// Enum Status for value: Status
            /// </summary>
            [EnumMember(Value = "Status")]
            Status = 6,

            /// <summary>
            /// Enum SubscriberName for value: SubscriberName
            /// </summary>
            [EnumMember(Value = "SubscriberName")]
            SubscriberName = 7

        }


        /// <summary>
        /// Gets or Sets SortField
        /// </summary>
        [DataMember(Name = "SortField", EmitDefaultValue = false)]
        public SortFieldEnum? SortField { get; set; }
        /// <summary>
        /// Defines SortOrder
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortOrderEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2

        }


        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "SortOrder", EmitDefaultValue = false)]
        public SortOrderEnum? SortOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingProposalsSearchProposalModel" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="currentLevelProposal">currentLevelProposal (default to false).</param>
        /// <param name="workOrderId">workOrderId.</param>
        /// <param name="proposalId">proposalId.</param>
        /// <param name="purchaseOrderId">purchaseOrderId.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="projects">projects.</param>
        /// <param name="dateType">dateType.</param>
        /// <param name="proposalFilterDateType">proposalFilterDateType.</param>
        /// <param name="proposalDateFrom">proposalDateFrom.</param>
        /// <param name="proposalDateTo">proposalDateTo.</param>
        /// <param name="proposalDateFromString">proposalDateFromString.</param>
        /// <param name="proposalDateToString">proposalDateToString.</param>
        /// <param name="sortBy">sortBy.</param>
        /// <param name="reportWithAttachmentsOnly">reportWithAttachmentsOnly (default to false).</param>
        /// <param name="excludePropAssociatedWithWo">excludePropAssociatedWithWo (default to false).</param>
        /// <param name="report">report.</param>
        /// <param name="priorities">priorities.</param>
        /// <param name="proposalStatuses">proposalStatuses.</param>
        /// <param name="categoriesIdName">categoriesIdName.</param>
        /// <param name="tradesIdName">tradesIdName.</param>
        /// <param name="locations">locations.</param>
        /// <param name="locationShortNames">locationShortNames.</param>
        /// <param name="locationShortAddresses">locationShortAddresses.</param>
        /// <param name="locationCities">locationCities.</param>
        /// <param name="stateIds">stateIds.</param>
        /// <param name="countryIds">countryIds.</param>
        /// <param name="regions">regions.</param>
        /// <param name="districts">districts.</param>
        /// <param name="states">states.</param>
        /// <param name="countries">countries.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="locationNoteHeaders">locationNoteHeaders.</param>
        /// <param name="lineItemReport">lineItemReport (default to false).</param>
        /// <param name="provider">provider.</param>
        /// <param name="changedProposals">changedProposals.</param>
        /// <param name="proposalIids">proposalIids.</param>
        /// <param name="proposalNumber">proposalNumber.</param>
        /// <param name="proposalWO">proposalWO.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="locationId">locationId.</param>
        /// <param name="saveReport">saveReport.</param>
        /// <param name="aLP">aLP.</param>
        /// <param name="labels">labels.</param>
        /// <param name="includeMlpCategory">includeMlpCategory (default to false).</param>
        /// <param name="subscribersIdName">subscribersIdName.</param>
        /// <param name="isAssignedToMe">isAssignedToMe (default to false).</param>
        /// <param name="hasAssignee">hasAssignee (default to false).</param>
        /// <param name="includeOverrideProposals">includeOverrideProposals (default to false).</param>
        /// <param name="amountFrom">amountFrom.</param>
        /// <param name="amountTo">amountTo.</param>
        /// <param name="statusesActiveTab">statusesActiveTab.</param>
        /// <param name="proposalsIds">proposalsIds.</param>
        /// <param name="sortField">sortField.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="currency">currency.</param>
        /// <param name="offset">offset.</param>
        /// <param name="count">count.</param>
        /// <param name="language">language.</param>
        /// <param name="allUsers">allUsers (default to false).</param>
        public SCServiceChannelServicesMessagingProposalsSearchProposalModel(string userId = default(string), bool currentLevelProposal = false, string workOrderId = default(string), string proposalId = default(string), string purchaseOrderId = default(string), string projectId = default(string), List<SCServiceChannelServicesMessagingProjectsProject> projects = default(List<SCServiceChannelServicesMessagingProjectsProject>), DateTypeEnum? dateType = default(DateTypeEnum?), ProposalFilterDateTypeEnum? proposalFilterDateType = default(ProposalFilterDateTypeEnum?), DateTime proposalDateFrom = default(DateTime), DateTime proposalDateTo = default(DateTime), string proposalDateFromString = default(string), string proposalDateToString = default(string), SortByEnum? sortBy = default(SortByEnum?), bool reportWithAttachmentsOnly = false, bool excludePropAssociatedWithWo = false, ReportEnum? report = default(ReportEnum?), List<string> priorities = default(List<string>), List<ProposalStatusesEnum> proposalStatuses = default(List<ProposalStatusesEnum>), List<SCServiceChannelApiModelKeyValueSystemStringSystemString> categoriesIdName = default(List<SCServiceChannelApiModelKeyValueSystemStringSystemString>), List<SCServiceChannelApiModelKeyValueSystemStringSystemString> tradesIdName = default(List<SCServiceChannelApiModelKeyValueSystemStringSystemString>), List<string> locations = default(List<string>), List<string> locationShortNames = default(List<string>), List<string> locationShortAddresses = default(List<string>), List<string> locationCities = default(List<string>), List<int> stateIds = default(List<int>), List<int> countryIds = default(List<int>), List<string> regions = default(List<string>), List<string> districts = default(List<string>), List<string> states = default(List<string>), List<string> countries = default(List<string>), List<SCServiceChannelServicesMessagingProposalsIdNameValue> attributes = default(List<SCServiceChannelServicesMessagingProposalsIdNameValue>), List<string> locationNoteHeaders = default(List<string>), bool lineItemReport = false, string provider = default(string), List<int> changedProposals = default(List<int>), string proposalIids = default(string), string proposalNumber = default(string), string proposalWO = default(string), int providerId = default(int), int locationId = default(int), string saveReport = default(string), int aLP = default(int), List<SCServiceChannelApiModelKeyValueSystemStringSystemString> labels = default(List<SCServiceChannelApiModelKeyValueSystemStringSystemString>), bool includeMlpCategory = false, List<SCServiceChannelApiModelKeyValueSystemInt32SystemString> subscribersIdName = default(List<SCServiceChannelApiModelKeyValueSystemInt32SystemString>), bool isAssignedToMe = false, bool hasAssignee = false, bool includeOverrideProposals = false, double amountFrom = default(double), double amountTo = default(double), string statusesActiveTab = default(string), List<int> proposalsIds = default(List<int>), SortFieldEnum? sortField = default(SortFieldEnum?), SortOrderEnum? sortOrder = default(SortOrderEnum?), SCServiceChannelApiModelCurrencyCurrency currency = default(SCServiceChannelApiModelCurrencyCurrency), int offset = default(int), int count = default(int), string language = default(string), bool allUsers = false)
        {
            this.UserId = userId;
            this.CurrentLevelProposal = currentLevelProposal;
            this.WorkOrderId = workOrderId;
            this.ProposalId = proposalId;
            this.PurchaseOrderId = purchaseOrderId;
            this.ProjectId = projectId;
            this.Projects = projects;
            this.DateType = dateType;
            this.ProposalFilterDateType = proposalFilterDateType;
            this.ProposalDateFrom = proposalDateFrom;
            this.ProposalDateTo = proposalDateTo;
            this.ProposalDateFromString = proposalDateFromString;
            this.ProposalDateToString = proposalDateToString;
            this.SortBy = sortBy;
            this.ReportWithAttachmentsOnly = reportWithAttachmentsOnly;
            this.ExcludePropAssociatedWithWo = excludePropAssociatedWithWo;
            this.Report = report;
            this.Priorities = priorities;
            this.ProposalStatuses = proposalStatuses;
            this.CategoriesIdName = categoriesIdName;
            this.TradesIdName = tradesIdName;
            this.Locations = locations;
            this.LocationShortNames = locationShortNames;
            this.LocationShortAddresses = locationShortAddresses;
            this.LocationCities = locationCities;
            this.StateIds = stateIds;
            this.CountryIds = countryIds;
            this.Regions = regions;
            this.Districts = districts;
            this.States = states;
            this.Countries = countries;
            this.Attributes = attributes;
            this.LocationNoteHeaders = locationNoteHeaders;
            this.LineItemReport = lineItemReport;
            this.Provider = provider;
            this.ChangedProposals = changedProposals;
            this.ProposalIids = proposalIids;
            this.ProposalNumber = proposalNumber;
            this.ProposalWO = proposalWO;
            this.ProviderId = providerId;
            this.LocationId = locationId;
            this.SaveReport = saveReport;
            this.ALP = aLP;
            this.Labels = labels;
            this.IncludeMlpCategory = includeMlpCategory;
            this.SubscribersIdName = subscribersIdName;
            this.IsAssignedToMe = isAssignedToMe;
            this.HasAssignee = hasAssignee;
            this.IncludeOverrideProposals = includeOverrideProposals;
            this.AmountFrom = amountFrom;
            this.AmountTo = amountTo;
            this.StatusesActiveTab = statusesActiveTab;
            this.ProposalsIds = proposalsIds;
            this.SortField = sortField;
            this.SortOrder = sortOrder;
            this.Currency = currency;
            this.Offset = offset;
            this.Count = count;
            this.Language = language;
            this.AllUsers = allUsers;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "UserId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLevelProposal
        /// </summary>
        [DataMember(Name = "CurrentLevelProposal", EmitDefaultValue = true)]
        public bool CurrentLevelProposal { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderId
        /// </summary>
        [DataMember(Name = "WorkOrderId", EmitDefaultValue = false)]
        public string WorkOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name = "ProposalId", EmitDefaultValue = false)]
        public string ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderId
        /// </summary>
        [DataMember(Name = "PurchaseOrderId", EmitDefaultValue = false)]
        public string PurchaseOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "ProjectId", EmitDefaultValue = false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name = "Projects", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingProjectsProject> Projects { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateFrom
        /// </summary>
        [DataMember(Name = "ProposalDateFrom", EmitDefaultValue = false)]
        public DateTime ProposalDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateTo
        /// </summary>
        [DataMember(Name = "ProposalDateTo", EmitDefaultValue = false)]
        public DateTime ProposalDateTo { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateFromString
        /// </summary>
        [DataMember(Name = "ProposalDateFromString", EmitDefaultValue = false)]
        public string ProposalDateFromString { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateToString
        /// </summary>
        [DataMember(Name = "ProposalDateToString", EmitDefaultValue = false)]
        public string ProposalDateToString { get; set; }

        /// <summary>
        /// Gets or Sets ReportWithAttachmentsOnly
        /// </summary>
        [DataMember(Name = "ReportWithAttachmentsOnly", EmitDefaultValue = true)]
        public bool ReportWithAttachmentsOnly { get; set; }

        /// <summary>
        /// Gets or Sets ExcludePropAssociatedWithWo
        /// </summary>
        [DataMember(Name = "ExcludePropAssociatedWithWo", EmitDefaultValue = true)]
        public bool ExcludePropAssociatedWithWo { get; set; }

        /// <summary>
        /// Gets or Sets Priorities
        /// </summary>
        [DataMember(Name = "Priorities", EmitDefaultValue = false)]
        public List<string> Priorities { get; set; }

        /// <summary>
        /// Gets or Sets ProposalStatuses
        /// </summary>
        [DataMember(Name = "ProposalStatuses", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingProposalsSearchProposalModel.ProposalStatusesEnum> ProposalStatuses { get; set; }

        /// <summary>
        /// Gets or Sets CategoriesIdName
        /// </summary>
        [DataMember(Name = "CategoriesIdName", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelKeyValueSystemStringSystemString> CategoriesIdName { get; set; }

        /// <summary>
        /// Gets or Sets TradesIdName
        /// </summary>
        [DataMember(Name = "TradesIdName", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelKeyValueSystemStringSystemString> TradesIdName { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name = "Locations", EmitDefaultValue = false)]
        public List<string> Locations { get; set; }

        /// <summary>
        /// Gets or Sets LocationShortNames
        /// </summary>
        [DataMember(Name = "LocationShortNames", EmitDefaultValue = false)]
        public List<string> LocationShortNames { get; set; }

        /// <summary>
        /// Gets or Sets LocationShortAddresses
        /// </summary>
        [DataMember(Name = "LocationShortAddresses", EmitDefaultValue = false)]
        public List<string> LocationShortAddresses { get; set; }

        /// <summary>
        /// Gets or Sets LocationCities
        /// </summary>
        [DataMember(Name = "LocationCities", EmitDefaultValue = false)]
        public List<string> LocationCities { get; set; }

        /// <summary>
        /// Gets or Sets StateIds
        /// </summary>
        [DataMember(Name = "StateIds", EmitDefaultValue = false)]
        public List<int> StateIds { get; set; }

        /// <summary>
        /// Gets or Sets CountryIds
        /// </summary>
        [DataMember(Name = "CountryIds", EmitDefaultValue = false)]
        public List<int> CountryIds { get; set; }

        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name = "Regions", EmitDefaultValue = false)]
        public List<string> Regions { get; set; }

        /// <summary>
        /// Gets or Sets Districts
        /// </summary>
        [DataMember(Name = "Districts", EmitDefaultValue = false)]
        public List<string> Districts { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name = "States", EmitDefaultValue = false)]
        public List<string> States { get; set; }

        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name = "Countries", EmitDefaultValue = false)]
        public List<string> Countries { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "Attributes", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingProposalsIdNameValue> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets LocationNoteHeaders
        /// </summary>
        [DataMember(Name = "LocationNoteHeaders", EmitDefaultValue = false)]
        public List<string> LocationNoteHeaders { get; set; }

        /// <summary>
        /// Gets or Sets LineItemReport
        /// </summary>
        [DataMember(Name = "LineItemReport", EmitDefaultValue = true)]
        public bool LineItemReport { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "Provider", EmitDefaultValue = false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets ChangedProposals
        /// </summary>
        [DataMember(Name = "ChangedProposals", EmitDefaultValue = false)]
        public List<int> ChangedProposals { get; set; }

        /// <summary>
        /// Gets or Sets ProposalIids
        /// </summary>
        [DataMember(Name = "ProposalIids", EmitDefaultValue = false)]
        public string ProposalIids { get; set; }

        /// <summary>
        /// Gets or Sets ProposalNumber
        /// </summary>
        [DataMember(Name = "ProposalNumber", EmitDefaultValue = false)]
        public string ProposalNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProposalWO
        /// </summary>
        [DataMember(Name = "ProposalWO", EmitDefaultValue = false)]
        public string ProposalWO { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets SaveReport
        /// </summary>
        [DataMember(Name = "SaveReport", EmitDefaultValue = false)]
        public string SaveReport { get; set; }

        /// <summary>
        /// Gets or Sets ALP
        /// </summary>
        [DataMember(Name = "ALP", EmitDefaultValue = false)]
        public int ALP { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "Labels", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelKeyValueSystemStringSystemString> Labels { get; set; }

        /// <summary>
        /// Gets or Sets IncludeMlpCategory
        /// </summary>
        [DataMember(Name = "IncludeMlpCategory", EmitDefaultValue = true)]
        public bool IncludeMlpCategory { get; set; }

        /// <summary>
        /// Gets or Sets SubscribersIdName
        /// </summary>
        [DataMember(Name = "SubscribersIdName", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelKeyValueSystemInt32SystemString> SubscribersIdName { get; set; }

        /// <summary>
        /// Gets or Sets IsAssignedToMe
        /// </summary>
        [DataMember(Name = "IsAssignedToMe", EmitDefaultValue = true)]
        public bool IsAssignedToMe { get; set; }

        /// <summary>
        /// Gets or Sets HasAssignee
        /// </summary>
        [DataMember(Name = "HasAssignee", EmitDefaultValue = true)]
        public bool HasAssignee { get; set; }

        /// <summary>
        /// Gets or Sets IncludeOverrideProposals
        /// </summary>
        [DataMember(Name = "IncludeOverrideProposals", EmitDefaultValue = true)]
        public bool IncludeOverrideProposals { get; set; }

        /// <summary>
        /// Gets or Sets AmountFrom
        /// </summary>
        [DataMember(Name = "AmountFrom", EmitDefaultValue = false)]
        public double AmountFrom { get; set; }

        /// <summary>
        /// Gets or Sets AmountTo
        /// </summary>
        [DataMember(Name = "AmountTo", EmitDefaultValue = false)]
        public double AmountTo { get; set; }

        /// <summary>
        /// Gets or Sets StatusesActiveTab
        /// </summary>
        [DataMember(Name = "StatusesActiveTab", EmitDefaultValue = false)]
        public string StatusesActiveTab { get; set; }

        /// <summary>
        /// Gets or Sets ProposalsIds
        /// </summary>
        [DataMember(Name = "ProposalsIds", EmitDefaultValue = false)]
        public List<int> ProposalsIds { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public SCServiceChannelApiModelCurrencyCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "Offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "Language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets AllUsers
        /// </summary>
        [DataMember(Name = "AllUsers", EmitDefaultValue = true)]
        public bool AllUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsSearchProposalModel {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CurrentLevelProposal: ").Append(CurrentLevelProposal).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  PurchaseOrderId: ").Append(PurchaseOrderId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  DateType: ").Append(DateType).Append("\n");
            sb.Append("  ProposalFilterDateType: ").Append(ProposalFilterDateType).Append("\n");
            sb.Append("  ProposalDateFrom: ").Append(ProposalDateFrom).Append("\n");
            sb.Append("  ProposalDateTo: ").Append(ProposalDateTo).Append("\n");
            sb.Append("  ProposalDateFromString: ").Append(ProposalDateFromString).Append("\n");
            sb.Append("  ProposalDateToString: ").Append(ProposalDateToString).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  ReportWithAttachmentsOnly: ").Append(ReportWithAttachmentsOnly).Append("\n");
            sb.Append("  ExcludePropAssociatedWithWo: ").Append(ExcludePropAssociatedWithWo).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  Priorities: ").Append(Priorities).Append("\n");
            sb.Append("  ProposalStatuses: ").Append(ProposalStatuses).Append("\n");
            sb.Append("  CategoriesIdName: ").Append(CategoriesIdName).Append("\n");
            sb.Append("  TradesIdName: ").Append(TradesIdName).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  LocationShortNames: ").Append(LocationShortNames).Append("\n");
            sb.Append("  LocationShortAddresses: ").Append(LocationShortAddresses).Append("\n");
            sb.Append("  LocationCities: ").Append(LocationCities).Append("\n");
            sb.Append("  StateIds: ").Append(StateIds).Append("\n");
            sb.Append("  CountryIds: ").Append(CountryIds).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Districts: ").Append(Districts).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  LocationNoteHeaders: ").Append(LocationNoteHeaders).Append("\n");
            sb.Append("  LineItemReport: ").Append(LineItemReport).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  ChangedProposals: ").Append(ChangedProposals).Append("\n");
            sb.Append("  ProposalIids: ").Append(ProposalIids).Append("\n");
            sb.Append("  ProposalNumber: ").Append(ProposalNumber).Append("\n");
            sb.Append("  ProposalWO: ").Append(ProposalWO).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  SaveReport: ").Append(SaveReport).Append("\n");
            sb.Append("  ALP: ").Append(ALP).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  IncludeMlpCategory: ").Append(IncludeMlpCategory).Append("\n");
            sb.Append("  SubscribersIdName: ").Append(SubscribersIdName).Append("\n");
            sb.Append("  IsAssignedToMe: ").Append(IsAssignedToMe).Append("\n");
            sb.Append("  HasAssignee: ").Append(HasAssignee).Append("\n");
            sb.Append("  IncludeOverrideProposals: ").Append(IncludeOverrideProposals).Append("\n");
            sb.Append("  AmountFrom: ").Append(AmountFrom).Append("\n");
            sb.Append("  AmountTo: ").Append(AmountTo).Append("\n");
            sb.Append("  StatusesActiveTab: ").Append(StatusesActiveTab).Append("\n");
            sb.Append("  ProposalsIds: ").Append(ProposalsIds).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  AllUsers: ").Append(AllUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingProposalsSearchProposalModel);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsSearchProposalModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingProposalsSearchProposalModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsSearchProposalModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CurrentLevelProposal == input.CurrentLevelProposal ||
                    this.CurrentLevelProposal.Equals(input.CurrentLevelProposal)
                ) && 
                (
                    this.WorkOrderId == input.WorkOrderId ||
                    (this.WorkOrderId != null &&
                    this.WorkOrderId.Equals(input.WorkOrderId))
                ) && 
                (
                    this.ProposalId == input.ProposalId ||
                    (this.ProposalId != null &&
                    this.ProposalId.Equals(input.ProposalId))
                ) && 
                (
                    this.PurchaseOrderId == input.PurchaseOrderId ||
                    (this.PurchaseOrderId != null &&
                    this.PurchaseOrderId.Equals(input.PurchaseOrderId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Projects == input.Projects ||
                    this.Projects != null &&
                    input.Projects != null &&
                    this.Projects.SequenceEqual(input.Projects)
                ) && 
                (
                    this.DateType == input.DateType ||
                    this.DateType.Equals(input.DateType)
                ) && 
                (
                    this.ProposalFilterDateType == input.ProposalFilterDateType ||
                    this.ProposalFilterDateType.Equals(input.ProposalFilterDateType)
                ) && 
                (
                    this.ProposalDateFrom == input.ProposalDateFrom ||
                    (this.ProposalDateFrom != null &&
                    this.ProposalDateFrom.Equals(input.ProposalDateFrom))
                ) && 
                (
                    this.ProposalDateTo == input.ProposalDateTo ||
                    (this.ProposalDateTo != null &&
                    this.ProposalDateTo.Equals(input.ProposalDateTo))
                ) && 
                (
                    this.ProposalDateFromString == input.ProposalDateFromString ||
                    (this.ProposalDateFromString != null &&
                    this.ProposalDateFromString.Equals(input.ProposalDateFromString))
                ) && 
                (
                    this.ProposalDateToString == input.ProposalDateToString ||
                    (this.ProposalDateToString != null &&
                    this.ProposalDateToString.Equals(input.ProposalDateToString))
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    this.SortBy.Equals(input.SortBy)
                ) && 
                (
                    this.ReportWithAttachmentsOnly == input.ReportWithAttachmentsOnly ||
                    this.ReportWithAttachmentsOnly.Equals(input.ReportWithAttachmentsOnly)
                ) && 
                (
                    this.ExcludePropAssociatedWithWo == input.ExcludePropAssociatedWithWo ||
                    this.ExcludePropAssociatedWithWo.Equals(input.ExcludePropAssociatedWithWo)
                ) && 
                (
                    this.Report == input.Report ||
                    this.Report.Equals(input.Report)
                ) && 
                (
                    this.Priorities == input.Priorities ||
                    this.Priorities != null &&
                    input.Priorities != null &&
                    this.Priorities.SequenceEqual(input.Priorities)
                ) && 
                (
                    this.ProposalStatuses == input.ProposalStatuses ||
                    this.ProposalStatuses != null &&
                    input.ProposalStatuses != null &&
                    this.ProposalStatuses.SequenceEqual(input.ProposalStatuses)
                ) && 
                (
                    this.CategoriesIdName == input.CategoriesIdName ||
                    this.CategoriesIdName != null &&
                    input.CategoriesIdName != null &&
                    this.CategoriesIdName.SequenceEqual(input.CategoriesIdName)
                ) && 
                (
                    this.TradesIdName == input.TradesIdName ||
                    this.TradesIdName != null &&
                    input.TradesIdName != null &&
                    this.TradesIdName.SequenceEqual(input.TradesIdName)
                ) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    input.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && 
                (
                    this.LocationShortNames == input.LocationShortNames ||
                    this.LocationShortNames != null &&
                    input.LocationShortNames != null &&
                    this.LocationShortNames.SequenceEqual(input.LocationShortNames)
                ) && 
                (
                    this.LocationShortAddresses == input.LocationShortAddresses ||
                    this.LocationShortAddresses != null &&
                    input.LocationShortAddresses != null &&
                    this.LocationShortAddresses.SequenceEqual(input.LocationShortAddresses)
                ) && 
                (
                    this.LocationCities == input.LocationCities ||
                    this.LocationCities != null &&
                    input.LocationCities != null &&
                    this.LocationCities.SequenceEqual(input.LocationCities)
                ) && 
                (
                    this.StateIds == input.StateIds ||
                    this.StateIds != null &&
                    input.StateIds != null &&
                    this.StateIds.SequenceEqual(input.StateIds)
                ) && 
                (
                    this.CountryIds == input.CountryIds ||
                    this.CountryIds != null &&
                    input.CountryIds != null &&
                    this.CountryIds.SequenceEqual(input.CountryIds)
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions != null &&
                    input.Regions != null &&
                    this.Regions.SequenceEqual(input.Regions)
                ) && 
                (
                    this.Districts == input.Districts ||
                    this.Districts != null &&
                    input.Districts != null &&
                    this.Districts.SequenceEqual(input.Districts)
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    input.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.LocationNoteHeaders == input.LocationNoteHeaders ||
                    this.LocationNoteHeaders != null &&
                    input.LocationNoteHeaders != null &&
                    this.LocationNoteHeaders.SequenceEqual(input.LocationNoteHeaders)
                ) && 
                (
                    this.LineItemReport == input.LineItemReport ||
                    this.LineItemReport.Equals(input.LineItemReport)
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.ChangedProposals == input.ChangedProposals ||
                    this.ChangedProposals != null &&
                    input.ChangedProposals != null &&
                    this.ChangedProposals.SequenceEqual(input.ChangedProposals)
                ) && 
                (
                    this.ProposalIids == input.ProposalIids ||
                    (this.ProposalIids != null &&
                    this.ProposalIids.Equals(input.ProposalIids))
                ) && 
                (
                    this.ProposalNumber == input.ProposalNumber ||
                    (this.ProposalNumber != null &&
                    this.ProposalNumber.Equals(input.ProposalNumber))
                ) && 
                (
                    this.ProposalWO == input.ProposalWO ||
                    (this.ProposalWO != null &&
                    this.ProposalWO.Equals(input.ProposalWO))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId.Equals(input.ProviderId)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.SaveReport == input.SaveReport ||
                    (this.SaveReport != null &&
                    this.SaveReport.Equals(input.SaveReport))
                ) && 
                (
                    this.ALP == input.ALP ||
                    this.ALP.Equals(input.ALP)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.IncludeMlpCategory == input.IncludeMlpCategory ||
                    this.IncludeMlpCategory.Equals(input.IncludeMlpCategory)
                ) && 
                (
                    this.SubscribersIdName == input.SubscribersIdName ||
                    this.SubscribersIdName != null &&
                    input.SubscribersIdName != null &&
                    this.SubscribersIdName.SequenceEqual(input.SubscribersIdName)
                ) && 
                (
                    this.IsAssignedToMe == input.IsAssignedToMe ||
                    this.IsAssignedToMe.Equals(input.IsAssignedToMe)
                ) && 
                (
                    this.HasAssignee == input.HasAssignee ||
                    this.HasAssignee.Equals(input.HasAssignee)
                ) && 
                (
                    this.IncludeOverrideProposals == input.IncludeOverrideProposals ||
                    this.IncludeOverrideProposals.Equals(input.IncludeOverrideProposals)
                ) && 
                (
                    this.AmountFrom == input.AmountFrom ||
                    this.AmountFrom.Equals(input.AmountFrom)
                ) && 
                (
                    this.AmountTo == input.AmountTo ||
                    this.AmountTo.Equals(input.AmountTo)
                ) && 
                (
                    this.StatusesActiveTab == input.StatusesActiveTab ||
                    (this.StatusesActiveTab != null &&
                    this.StatusesActiveTab.Equals(input.StatusesActiveTab))
                ) && 
                (
                    this.ProposalsIds == input.ProposalsIds ||
                    this.ProposalsIds != null &&
                    input.ProposalsIds != null &&
                    this.ProposalsIds.SequenceEqual(input.ProposalsIds)
                ) && 
                (
                    this.SortField == input.SortField ||
                    this.SortField.Equals(input.SortField)
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.AllUsers == input.AllUsers ||
                    this.AllUsers.Equals(input.AllUsers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentLevelProposal.GetHashCode();
                if (this.WorkOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderId.GetHashCode();
                }
                if (this.ProposalId != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalId.GetHashCode();
                }
                if (this.PurchaseOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrderId.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.Projects != null)
                {
                    hashCode = (hashCode * 59) + this.Projects.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DateType.GetHashCode();
                hashCode = (hashCode * 59) + this.ProposalFilterDateType.GetHashCode();
                if (this.ProposalDateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalDateFrom.GetHashCode();
                }
                if (this.ProposalDateTo != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalDateTo.GetHashCode();
                }
                if (this.ProposalDateFromString != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalDateFromString.GetHashCode();
                }
                if (this.ProposalDateToString != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalDateToString.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortBy.GetHashCode();
                hashCode = (hashCode * 59) + this.ReportWithAttachmentsOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludePropAssociatedWithWo.GetHashCode();
                hashCode = (hashCode * 59) + this.Report.GetHashCode();
                if (this.Priorities != null)
                {
                    hashCode = (hashCode * 59) + this.Priorities.GetHashCode();
                }
                if (this.ProposalStatuses != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalStatuses.GetHashCode();
                }
                if (this.CategoriesIdName != null)
                {
                    hashCode = (hashCode * 59) + this.CategoriesIdName.GetHashCode();
                }
                if (this.TradesIdName != null)
                {
                    hashCode = (hashCode * 59) + this.TradesIdName.GetHashCode();
                }
                if (this.Locations != null)
                {
                    hashCode = (hashCode * 59) + this.Locations.GetHashCode();
                }
                if (this.LocationShortNames != null)
                {
                    hashCode = (hashCode * 59) + this.LocationShortNames.GetHashCode();
                }
                if (this.LocationShortAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.LocationShortAddresses.GetHashCode();
                }
                if (this.LocationCities != null)
                {
                    hashCode = (hashCode * 59) + this.LocationCities.GetHashCode();
                }
                if (this.StateIds != null)
                {
                    hashCode = (hashCode * 59) + this.StateIds.GetHashCode();
                }
                if (this.CountryIds != null)
                {
                    hashCode = (hashCode * 59) + this.CountryIds.GetHashCode();
                }
                if (this.Regions != null)
                {
                    hashCode = (hashCode * 59) + this.Regions.GetHashCode();
                }
                if (this.Districts != null)
                {
                    hashCode = (hashCode * 59) + this.Districts.GetHashCode();
                }
                if (this.States != null)
                {
                    hashCode = (hashCode * 59) + this.States.GetHashCode();
                }
                if (this.Countries != null)
                {
                    hashCode = (hashCode * 59) + this.Countries.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.LocationNoteHeaders != null)
                {
                    hashCode = (hashCode * 59) + this.LocationNoteHeaders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LineItemReport.GetHashCode();
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.ChangedProposals != null)
                {
                    hashCode = (hashCode * 59) + this.ChangedProposals.GetHashCode();
                }
                if (this.ProposalIids != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalIids.GetHashCode();
                }
                if (this.ProposalNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalNumber.GetHashCode();
                }
                if (this.ProposalWO != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalWO.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.SaveReport != null)
                {
                    hashCode = (hashCode * 59) + this.SaveReport.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ALP.GetHashCode();
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeMlpCategory.GetHashCode();
                if (this.SubscribersIdName != null)
                {
                    hashCode = (hashCode * 59) + this.SubscribersIdName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAssignedToMe.GetHashCode();
                hashCode = (hashCode * 59) + this.HasAssignee.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeOverrideProposals.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountFrom.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountTo.GetHashCode();
                if (this.StatusesActiveTab != null)
                {
                    hashCode = (hashCode * 59) + this.StatusesActiveTab.GetHashCode();
                }
                if (this.ProposalsIds != null)
                {
                    hashCode = (hashCode * 59) + this.ProposalsIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortField.GetHashCode();
                hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllUsers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
