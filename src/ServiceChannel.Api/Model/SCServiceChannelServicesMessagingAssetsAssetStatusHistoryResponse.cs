/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Assets.AssetStatusHistoryResponse")]
    public partial class SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse : IEquatable<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines InitialStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InitialStatusEnum
        {
            /// <summary>
            /// Enum InUse for value: InUse
            /// </summary>
            [EnumMember(Value = "InUse")]
            InUse = 1,

            /// <summary>
            /// Enum OutForRepair for value: OutForRepair
            /// </summary>
            [EnumMember(Value = "OutForRepair")]
            OutForRepair = 2,

            /// <summary>
            /// Enum ReplacementRecommended for value: ReplacementRecommended
            /// </summary>
            [EnumMember(Value = "ReplacementRecommended")]
            ReplacementRecommended = 3,

            /// <summary>
            /// Enum Repaired for value: Repaired
            /// </summary>
            [EnumMember(Value = "Repaired")]
            Repaired = 4

        }


        /// <summary>
        /// Gets or Sets InitialStatus
        /// </summary>
        [DataMember(Name = "InitialStatus", EmitDefaultValue = false)]
        public InitialStatusEnum? InitialStatus { get; set; }
        /// <summary>
        /// Defines ChangedTo
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChangedToEnum
        {
            /// <summary>
            /// Enum InUse for value: InUse
            /// </summary>
            [EnumMember(Value = "InUse")]
            InUse = 1,

            /// <summary>
            /// Enum OutForRepair for value: OutForRepair
            /// </summary>
            [EnumMember(Value = "OutForRepair")]
            OutForRepair = 2,

            /// <summary>
            /// Enum ReplacementRecommended for value: ReplacementRecommended
            /// </summary>
            [EnumMember(Value = "ReplacementRecommended")]
            ReplacementRecommended = 3,

            /// <summary>
            /// Enum Repaired for value: Repaired
            /// </summary>
            [EnumMember(Value = "Repaired")]
            Repaired = 4

        }


        /// <summary>
        /// Gets or Sets ChangedTo
        /// </summary>
        [DataMember(Name = "ChangedTo", EmitDefaultValue = false)]
        public ChangedToEnum? ChangedTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse" /> class.
        /// </summary>
        /// <param name="assetId">assetId.</param>
        /// <param name="initialStatus">initialStatus.</param>
        /// <param name="initialStatusStr">initialStatusStr.</param>
        /// <param name="changedTo">changedTo.</param>
        /// <param name="changedToStr">changedToStr.</param>
        /// <param name="description">description.</param>
        /// <param name="createUserId">createUserId.</param>
        /// <param name="createUserIdStr">createUserIdStr.</param>
        /// <param name="changeDate">changeDate.</param>
        /// <param name="changeDateStr">changeDateStr.</param>
        /// <param name="replacedByEquipmentId">replacedByEquipmentId.</param>
        /// <param name="replacedByEquipmentTag">replacedByEquipmentTag.</param>
        /// <param name="updatedByApplication">updatedByApplication.</param>
        public SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse(int assetId = default(int), InitialStatusEnum? initialStatus = default(InitialStatusEnum?), string initialStatusStr = default(string), ChangedToEnum? changedTo = default(ChangedToEnum?), string changedToStr = default(string), string description = default(string), int createUserId = default(int), string createUserIdStr = default(string), DateTime changeDate = default(DateTime), string changeDateStr = default(string), int replacedByEquipmentId = default(int), string replacedByEquipmentTag = default(string), byte[] updatedByApplication = default(byte[]))
        {
            this.AssetId = assetId;
            this.InitialStatus = initialStatus;
            this.InitialStatusStr = initialStatusStr;
            this.ChangedTo = changedTo;
            this.ChangedToStr = changedToStr;
            this.Description = description;
            this.CreateUserId = createUserId;
            this.CreateUserIdStr = createUserIdStr;
            this.ChangeDate = changeDate;
            this.ChangeDateStr = changeDateStr;
            this.ReplacedByEquipmentId = replacedByEquipmentId;
            this.ReplacedByEquipmentTag = replacedByEquipmentTag;
            this.UpdatedByApplication = updatedByApplication;
        }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name = "AssetId", EmitDefaultValue = false)]
        public int AssetId { get; set; }

        /// <summary>
        /// Gets or Sets InitialStatusStr
        /// </summary>
        [DataMember(Name = "InitialStatusStr", EmitDefaultValue = false)]
        public string InitialStatusStr { get; set; }

        /// <summary>
        /// Gets or Sets ChangedToStr
        /// </summary>
        [DataMember(Name = "ChangedToStr", EmitDefaultValue = false)]
        public string ChangedToStr { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [DataMember(Name = "CreateUserId", EmitDefaultValue = false)]
        public int CreateUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreateUserIdStr
        /// </summary>
        [DataMember(Name = "CreateUserIdStr", EmitDefaultValue = false)]
        public string CreateUserIdStr { get; set; }

        /// <summary>
        /// Gets or Sets ChangeDate
        /// </summary>
        [DataMember(Name = "ChangeDate", EmitDefaultValue = false)]
        public DateTime ChangeDate { get; set; }

        /// <summary>
        /// Gets or Sets ChangeDateStr
        /// </summary>
        [DataMember(Name = "ChangeDateStr", EmitDefaultValue = false)]
        public string ChangeDateStr { get; set; }

        /// <summary>
        /// Gets or Sets ReplacedByEquipmentId
        /// </summary>
        [DataMember(Name = "ReplacedByEquipment_Id", EmitDefaultValue = false)]
        public int ReplacedByEquipmentId { get; set; }

        /// <summary>
        /// Gets or Sets ReplacedByEquipmentTag
        /// </summary>
        [DataMember(Name = "ReplacedByEquipmentTag", EmitDefaultValue = false)]
        public string ReplacedByEquipmentTag { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedByApplication
        /// </summary>
        [DataMember(Name = "UpdatedByApplication", EmitDefaultValue = false)]
        public byte[] UpdatedByApplication { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedByApplicationStr
        /// </summary>
        [DataMember(Name = "UpdatedByApplicationStr", EmitDefaultValue = false)]
        public string UpdatedByApplicationStr { get; private set; }

        /// <summary>
        /// Returns false as UpdatedByApplicationStr should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedByApplicationStr()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  InitialStatus: ").Append(InitialStatus).Append("\n");
            sb.Append("  InitialStatusStr: ").Append(InitialStatusStr).Append("\n");
            sb.Append("  ChangedTo: ").Append(ChangedTo).Append("\n");
            sb.Append("  ChangedToStr: ").Append(ChangedToStr).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserIdStr: ").Append(CreateUserIdStr).Append("\n");
            sb.Append("  ChangeDate: ").Append(ChangeDate).Append("\n");
            sb.Append("  ChangeDateStr: ").Append(ChangeDateStr).Append("\n");
            sb.Append("  ReplacedByEquipmentId: ").Append(ReplacedByEquipmentId).Append("\n");
            sb.Append("  ReplacedByEquipmentTag: ").Append(ReplacedByEquipmentTag).Append("\n");
            sb.Append("  UpdatedByApplication: ").Append(UpdatedByApplication).Append("\n");
            sb.Append("  UpdatedByApplicationStr: ").Append(UpdatedByApplicationStr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetId == input.AssetId ||
                    this.AssetId.Equals(input.AssetId)
                ) && 
                (
                    this.InitialStatus == input.InitialStatus ||
                    this.InitialStatus.Equals(input.InitialStatus)
                ) && 
                (
                    this.InitialStatusStr == input.InitialStatusStr ||
                    (this.InitialStatusStr != null &&
                    this.InitialStatusStr.Equals(input.InitialStatusStr))
                ) && 
                (
                    this.ChangedTo == input.ChangedTo ||
                    this.ChangedTo.Equals(input.ChangedTo)
                ) && 
                (
                    this.ChangedToStr == input.ChangedToStr ||
                    (this.ChangedToStr != null &&
                    this.ChangedToStr.Equals(input.ChangedToStr))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreateUserId == input.CreateUserId ||
                    this.CreateUserId.Equals(input.CreateUserId)
                ) && 
                (
                    this.CreateUserIdStr == input.CreateUserIdStr ||
                    (this.CreateUserIdStr != null &&
                    this.CreateUserIdStr.Equals(input.CreateUserIdStr))
                ) && 
                (
                    this.ChangeDate == input.ChangeDate ||
                    (this.ChangeDate != null &&
                    this.ChangeDate.Equals(input.ChangeDate))
                ) && 
                (
                    this.ChangeDateStr == input.ChangeDateStr ||
                    (this.ChangeDateStr != null &&
                    this.ChangeDateStr.Equals(input.ChangeDateStr))
                ) && 
                (
                    this.ReplacedByEquipmentId == input.ReplacedByEquipmentId ||
                    this.ReplacedByEquipmentId.Equals(input.ReplacedByEquipmentId)
                ) && 
                (
                    this.ReplacedByEquipmentTag == input.ReplacedByEquipmentTag ||
                    (this.ReplacedByEquipmentTag != null &&
                    this.ReplacedByEquipmentTag.Equals(input.ReplacedByEquipmentTag))
                ) && 
                (
                    this.UpdatedByApplication == input.UpdatedByApplication ||
                    (this.UpdatedByApplication != null &&
                    this.UpdatedByApplication.Equals(input.UpdatedByApplication))
                ) && 
                (
                    this.UpdatedByApplicationStr == input.UpdatedByApplicationStr ||
                    (this.UpdatedByApplicationStr != null &&
                    this.UpdatedByApplicationStr.Equals(input.UpdatedByApplicationStr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                hashCode = (hashCode * 59) + this.InitialStatus.GetHashCode();
                if (this.InitialStatusStr != null)
                {
                    hashCode = (hashCode * 59) + this.InitialStatusStr.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangedTo.GetHashCode();
                if (this.ChangedToStr != null)
                {
                    hashCode = (hashCode * 59) + this.ChangedToStr.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateUserId.GetHashCode();
                if (this.CreateUserIdStr != null)
                {
                    hashCode = (hashCode * 59) + this.CreateUserIdStr.GetHashCode();
                }
                if (this.ChangeDate != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeDate.GetHashCode();
                }
                if (this.ChangeDateStr != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeDateStr.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReplacedByEquipmentId.GetHashCode();
                if (this.ReplacedByEquipmentTag != null)
                {
                    hashCode = (hashCode * 59) + this.ReplacedByEquipmentTag.GetHashCode();
                }
                if (this.UpdatedByApplication != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedByApplication.GetHashCode();
                }
                if (this.UpdatedByApplicationStr != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedByApplicationStr.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
