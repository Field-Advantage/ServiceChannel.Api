/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Request object to update location details.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Location.UpdateLocationExRequest")]
    public partial class SCServiceChannelServicesMessagingLocationUpdateLocationExRequest : IEquatable<SCServiceChannelServicesMessagingLocationUpdateLocationExRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingLocationUpdateLocationExRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SCServiceChannelServicesMessagingLocationUpdateLocationExRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingLocationUpdateLocationExRequest" /> class.
        /// </summary>
        /// <param name="storeId">Numeric location identifier in the client’s system. (required).</param>
        /// <param name="name">Location name. (required).</param>
        /// <param name="latitude">Global position. Latitude..</param>
        /// <param name="longitude">Global position. Longitude..</param>
        /// <param name="distance">Distance from GPS coordinates to the location..</param>
        /// <param name="address1">Additional location address..</param>
        /// <param name="address2">Main location address..</param>
        /// <param name="city">Location city..</param>
        /// <param name="state">State where the location is placed..</param>
        /// <param name="stateId">Numeric identifier of the location’s state..</param>
        /// <param name="region">Part of the country where the location is placed..</param>
        /// <param name="district">Abbreviation of the town or country area where the location is placed..</param>
        /// <param name="zip">Postal code of the location..</param>
        /// <param name="country">Abbreviation of the country name where the location is placed..</param>
        /// <param name="countryId">Numeric identifier of the country of the location..</param>
        /// <param name="closedDate">Last day when the location is open for business..</param>
        /// <param name="openDate">First day when the location is open for business..</param>
        /// <param name="email">Email the location can be contacted at..</param>
        /// <param name="phone">Contact phone number of the location..</param>
        /// <param name="contact">Name of the main person to contact at the location..</param>
        /// <param name="faxNumber">Fax number the location can be contacted at..</param>
        /// <param name="locationTypeId">Numeric identifier of the location type..</param>
        /// <param name="squareValue">Square value.</param>
        /// <param name="squareMeasure">Square measure.</param>
        public SCServiceChannelServicesMessagingLocationUpdateLocationExRequest(string storeId = default(string), string name = default(string), double latitude = default(double), double longitude = default(double), double distance = default(double), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), int stateId = default(int), string region = default(string), string district = default(string), string zip = default(string), string country = default(string), int countryId = default(int), DateTime closedDate = default(DateTime), DateTime openDate = default(DateTime), string email = default(string), string phone = default(string), string contact = default(string), string faxNumber = default(string), int locationTypeId = default(int), double squareValue = default(double), string squareMeasure = default(string))
        {
            // to ensure "storeId" is required (not null)
            if (storeId == null)
            {
                throw new ArgumentNullException("storeId is a required property for SCServiceChannelServicesMessagingLocationUpdateLocationExRequest and cannot be null");
            }
            this.StoreId = storeId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SCServiceChannelServicesMessagingLocationUpdateLocationExRequest and cannot be null");
            }
            this.Name = name;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Distance = distance;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.StateId = stateId;
            this.Region = region;
            this.District = district;
            this.Zip = zip;
            this.Country = country;
            this.CountryId = countryId;
            this.ClosedDate = closedDate;
            this.OpenDate = openDate;
            this.Email = email;
            this.Phone = phone;
            this.Contact = contact;
            this.FaxNumber = faxNumber;
            this.LocationTypeId = locationTypeId;
            this.SquareValue = squareValue;
            this.SquareMeasure = squareMeasure;
        }

        /// <summary>
        /// Numeric location identifier in the client’s system.
        /// </summary>
        /// <value>Numeric location identifier in the client’s system.</value>
        [DataMember(Name = "StoreId", IsRequired = true, EmitDefaultValue = true)]
        public string StoreId { get; set; }

        /// <summary>
        /// Location name.
        /// </summary>
        /// <value>Location name.</value>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Global position. Latitude.
        /// </summary>
        /// <value>Global position. Latitude.</value>
        [DataMember(Name = "Latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Global position. Longitude.
        /// </summary>
        /// <value>Global position. Longitude.</value>
        [DataMember(Name = "Longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Distance from GPS coordinates to the location.
        /// </summary>
        /// <value>Distance from GPS coordinates to the location.</value>
        [DataMember(Name = "Distance", EmitDefaultValue = false)]
        public double Distance { get; set; }

        /// <summary>
        /// Additional location address.
        /// </summary>
        /// <value>Additional location address.</value>
        [DataMember(Name = "Address1", EmitDefaultValue = false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Main location address.
        /// </summary>
        /// <value>Main location address.</value>
        [DataMember(Name = "Address2", EmitDefaultValue = false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Location city.
        /// </summary>
        /// <value>Location city.</value>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// State where the location is placed.
        /// </summary>
        /// <value>State where the location is placed.</value>
        [DataMember(Name = "State", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Numeric identifier of the location’s state.
        /// </summary>
        /// <value>Numeric identifier of the location’s state.</value>
        [DataMember(Name = "StateId", EmitDefaultValue = false)]
        public int StateId { get; set; }

        /// <summary>
        /// Part of the country where the location is placed.
        /// </summary>
        /// <value>Part of the country where the location is placed.</value>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Abbreviation of the town or country area where the location is placed.
        /// </summary>
        /// <value>Abbreviation of the town or country area where the location is placed.</value>
        [DataMember(Name = "District", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        /// Postal code of the location.
        /// </summary>
        /// <value>Postal code of the location.</value>
        [DataMember(Name = "Zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Abbreviation of the country name where the location is placed.
        /// </summary>
        /// <value>Abbreviation of the country name where the location is placed.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Numeric identifier of the country of the location.
        /// </summary>
        /// <value>Numeric identifier of the country of the location.</value>
        [DataMember(Name = "CountryId", EmitDefaultValue = false)]
        public int CountryId { get; set; }

        /// <summary>
        /// Last day when the location is open for business.
        /// </summary>
        /// <value>Last day when the location is open for business.</value>
        [DataMember(Name = "ClosedDate", EmitDefaultValue = false)]
        public DateTime ClosedDate { get; set; }

        /// <summary>
        /// First day when the location is open for business.
        /// </summary>
        /// <value>First day when the location is open for business.</value>
        [DataMember(Name = "OpenDate", EmitDefaultValue = false)]
        public DateTime OpenDate { get; set; }

        /// <summary>
        /// Email the location can be contacted at.
        /// </summary>
        /// <value>Email the location can be contacted at.</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Contact phone number of the location.
        /// </summary>
        /// <value>Contact phone number of the location.</value>
        [DataMember(Name = "Phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Name of the main person to contact at the location.
        /// </summary>
        /// <value>Name of the main person to contact at the location.</value>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public string Contact { get; set; }

        /// <summary>
        /// Fax number the location can be contacted at.
        /// </summary>
        /// <value>Fax number the location can be contacted at.</value>
        [DataMember(Name = "FaxNumber", EmitDefaultValue = false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Numeric identifier of the location type.
        /// </summary>
        /// <value>Numeric identifier of the location type.</value>
        [DataMember(Name = "LocationTypeId", EmitDefaultValue = false)]
        public int LocationTypeId { get; set; }

        /// <summary>
        /// Square value
        /// </summary>
        /// <value>Square value</value>
        [DataMember(Name = "SquareValue", EmitDefaultValue = false)]
        public double SquareValue { get; set; }

        /// <summary>
        /// Square measure
        /// </summary>
        /// <value>Square measure</value>
        [DataMember(Name = "SquareMeasure", EmitDefaultValue = false)]
        public string SquareMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingLocationUpdateLocationExRequest {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  OpenDate: ").Append(OpenDate).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  LocationTypeId: ").Append(LocationTypeId).Append("\n");
            sb.Append("  SquareValue: ").Append(SquareValue).Append("\n");
            sb.Append("  SquareMeasure: ").Append(SquareMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingLocationUpdateLocationExRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingLocationUpdateLocationExRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingLocationUpdateLocationExRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingLocationUpdateLocationExRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Distance == input.Distance ||
                    this.Distance.Equals(input.Distance)
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateId == input.StateId ||
                    this.StateId.Equals(input.StateId)
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    this.CountryId.Equals(input.CountryId)
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.OpenDate == input.OpenDate ||
                    (this.OpenDate != null &&
                    this.OpenDate.Equals(input.OpenDate))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.LocationTypeId == input.LocationTypeId ||
                    this.LocationTypeId.Equals(input.LocationTypeId)
                ) && 
                (
                    this.SquareValue == input.SquareValue ||
                    this.SquareValue.Equals(input.SquareValue)
                ) && 
                (
                    this.SquareMeasure == input.SquareMeasure ||
                    (this.SquareMeasure != null &&
                    this.SquareMeasure.Equals(input.SquareMeasure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                if (this.Address1 != null)
                {
                    hashCode = (hashCode * 59) + this.Address1.GetHashCode();
                }
                if (this.Address2 != null)
                {
                    hashCode = (hashCode * 59) + this.Address2.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StateId.GetHashCode();
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.District != null)
                {
                    hashCode = (hashCode * 59) + this.District.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                if (this.ClosedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedDate.GetHashCode();
                }
                if (this.OpenDate != null)
                {
                    hashCode = (hashCode * 59) + this.OpenDate.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Contact != null)
                {
                    hashCode = (hashCode * 59) + this.Contact.GetHashCode();
                }
                if (this.FaxNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FaxNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocationTypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.SquareValue.GetHashCode();
                if (this.SquareMeasure != null)
                {
                    hashCode = (hashCode * 59) + this.SquareMeasure.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
