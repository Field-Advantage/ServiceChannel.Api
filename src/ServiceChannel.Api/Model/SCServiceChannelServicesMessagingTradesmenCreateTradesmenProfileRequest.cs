/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Tradesmen.CreateTradesmenProfileRequest")]
    public partial class SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest : IEquatable<SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest" /> class.
        /// </summary>
        /// <param name="fullName">Full name of the technician.</param>
        /// <param name="companyName">Name of the provider company.</param>
        /// <param name="fixxbookCompanyId">Optional..</param>
        /// <param name="mobileNumber">Mobile number of the technician.</param>
        /// <param name="email">Email of the technician. Must be unique.</param>
        public SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest(string fullName = default(string), string companyName = default(string), int fixxbookCompanyId = default(int), string mobileNumber = default(string), string email = default(string))
        {
            this.FullName = fullName;
            this.CompanyName = companyName;
            this.FixxbookCompanyId = fixxbookCompanyId;
            this.MobileNumber = mobileNumber;
            this.Email = email;
        }

        /// <summary>
        /// Full name of the technician
        /// </summary>
        /// <value>Full name of the technician</value>
        [DataMember(Name = "FullName", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Name of the provider company
        /// </summary>
        /// <value>Name of the provider company</value>
        [DataMember(Name = "CompanyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Optional.
        /// </summary>
        /// <value>Optional.</value>
        [DataMember(Name = "FixxbookCompanyId", EmitDefaultValue = false)]
        public int FixxbookCompanyId { get; set; }

        /// <summary>
        /// Mobile number of the technician
        /// </summary>
        /// <value>Mobile number of the technician</value>
        [DataMember(Name = "MobileNumber", EmitDefaultValue = false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Email of the technician. Must be unique
        /// </summary>
        /// <value>Email of the technician. Must be unique</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  FixxbookCompanyId: ").Append(FixxbookCompanyId).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingTradesmenCreateTradesmenProfileRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.FixxbookCompanyId == input.FixxbookCompanyId ||
                    this.FixxbookCompanyId.Equals(input.FixxbookCompanyId)
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FixxbookCompanyId.GetHashCode();
                if (this.MobileNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MobileNumber.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
