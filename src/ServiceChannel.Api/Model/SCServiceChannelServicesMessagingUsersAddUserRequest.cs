/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// AddUserRequest class definition
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Users.AddUserRequest")]
    public partial class SCServiceChannelServicesMessagingUsersAddUserRequest : IEquatable<SCServiceChannelServicesMessagingUsersAddUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingUsersAddUserRequest" /> class.
        /// </summary>
        /// <param name="userName">Gets or sets User name..</param>
        /// <param name="id">Get or set User&#39;s identifier (id).</param>
        /// <param name="infoSubscriberId">Gets or sets InfoSubscriberId..</param>
        /// <param name="password">Gets or sets Password..</param>
        /// <param name="email">Gets or sets Email..</param>
        /// <param name="locationAccess">Gets or sets LocationAccess..</param>
        /// <param name="feedRole">Gets or sets FeedRole..</param>
        /// <param name="user">user.</param>
        public SCServiceChannelServicesMessagingUsersAddUserRequest(string userName = default(string), int id = default(int), int infoSubscriberId = default(int), string password = default(string), string email = default(string), string locationAccess = default(string), string feedRole = default(string), SCServiceChannelServicesMessagingUsersUser user = default(SCServiceChannelServicesMessagingUsersUser))
        {
            this.UserName = userName;
            this.Id = id;
            this.InfoSubscriberId = infoSubscriberId;
            this.Password = password;
            this.Email = email;
            this.LocationAccess = locationAccess;
            this.FeedRole = feedRole;
            this.User = user;
        }

        /// <summary>
        /// Gets or sets User name.
        /// </summary>
        /// <value>Gets or sets User name.</value>
        [DataMember(Name = "UserName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Get or set User&#39;s identifier (id)
        /// </summary>
        /// <value>Get or set User&#39;s identifier (id)</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets InfoSubscriberId.
        /// </summary>
        /// <value>Gets or sets InfoSubscriberId.</value>
        [DataMember(Name = "InfoSubscriberId", EmitDefaultValue = false)]
        public int InfoSubscriberId { get; set; }

        /// <summary>
        /// Gets or sets Password.
        /// </summary>
        /// <value>Gets or sets Password.</value>
        [DataMember(Name = "Password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets Email.
        /// </summary>
        /// <value>Gets or sets Email.</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets LocationAccess.
        /// </summary>
        /// <value>Gets or sets LocationAccess.</value>
        [DataMember(Name = "LocationAccess", EmitDefaultValue = false)]
        public string LocationAccess { get; set; }

        /// <summary>
        /// Gets or sets FeedRole.
        /// </summary>
        /// <value>Gets or sets FeedRole.</value>
        [DataMember(Name = "FeedRole", EmitDefaultValue = false)]
        public string FeedRole { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingUsersAddUserRequest {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InfoSubscriberId: ").Append(InfoSubscriberId).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LocationAccess: ").Append(LocationAccess).Append("\n");
            sb.Append("  FeedRole: ").Append(FeedRole).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingUsersAddUserRequest);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingUsersAddUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingUsersAddUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingUsersAddUserRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.InfoSubscriberId == input.InfoSubscriberId ||
                    this.InfoSubscriberId.Equals(input.InfoSubscriberId)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.LocationAccess == input.LocationAccess ||
                    (this.LocationAccess != null &&
                    this.LocationAccess.Equals(input.LocationAccess))
                ) && 
                (
                    this.FeedRole == input.FeedRole ||
                    (this.FeedRole != null &&
                    this.FeedRole.Equals(input.FeedRole))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.InfoSubscriberId.GetHashCode();
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.LocationAccess != null)
                {
                    hashCode = (hashCode * 59) + this.LocationAccess.GetHashCode();
                }
                if (this.FeedRole != null)
                {
                    hashCode = (hashCode * 59) + this.FeedRole.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserName (string) pattern
            Regex regexUserName = new Regex(@"^$|(\A\S+).(\S).(\S)\z", RegexOptions.CultureInvariant);
            if (false == regexUserName.Match(this.UserName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserName, must match a pattern of " + regexUserName, new [] { "UserName" });
            }

            yield break;
        }
    }

}
