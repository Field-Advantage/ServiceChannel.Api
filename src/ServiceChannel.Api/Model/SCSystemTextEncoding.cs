/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCSystemTextEncoding
    /// </summary>
    [DataContract(Name = "System.Text.Encoding")]
    public partial class SCSystemTextEncoding : IEquatable<SCSystemTextEncoding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCSystemTextEncoding" /> class.
        /// </summary>
        /// <param name="encoderFallback">encoderFallback.</param>
        /// <param name="decoderFallback">decoderFallback.</param>
        public SCSystemTextEncoding(SCSystemTextEncoderFallback encoderFallback = default(SCSystemTextEncoderFallback), SCSystemTextDecoderFallback decoderFallback = default(SCSystemTextDecoderFallback))
        {
            this.EncoderFallback = encoderFallback;
            this.DecoderFallback = decoderFallback;
        }

        /// <summary>
        /// Gets or Sets BodyName
        /// </summary>
        [DataMember(Name = "BodyName", EmitDefaultValue = false)]
        public string BodyName { get; private set; }

        /// <summary>
        /// Returns false as BodyName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBodyName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EncodingName
        /// </summary>
        [DataMember(Name = "EncodingName", EmitDefaultValue = false)]
        public string EncodingName { get; private set; }

        /// <summary>
        /// Returns false as EncodingName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEncodingName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets HeaderName
        /// </summary>
        [DataMember(Name = "HeaderName", EmitDefaultValue = false)]
        public string HeaderName { get; private set; }

        /// <summary>
        /// Returns false as HeaderName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHeaderName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets WebName
        /// </summary>
        [DataMember(Name = "WebName", EmitDefaultValue = false)]
        public string WebName { get; private set; }

        /// <summary>
        /// Returns false as WebName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets WindowsCodePage
        /// </summary>
        [DataMember(Name = "WindowsCodePage", EmitDefaultValue = false)]
        public int WindowsCodePage { get; private set; }

        /// <summary>
        /// Returns false as WindowsCodePage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWindowsCodePage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsBrowserDisplay
        /// </summary>
        [DataMember(Name = "IsBrowserDisplay", EmitDefaultValue = true)]
        public bool IsBrowserDisplay { get; private set; }

        /// <summary>
        /// Returns false as IsBrowserDisplay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsBrowserDisplay()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsBrowserSave
        /// </summary>
        [DataMember(Name = "IsBrowserSave", EmitDefaultValue = true)]
        public bool IsBrowserSave { get; private set; }

        /// <summary>
        /// Returns false as IsBrowserSave should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsBrowserSave()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsMailNewsDisplay
        /// </summary>
        [DataMember(Name = "IsMailNewsDisplay", EmitDefaultValue = true)]
        public bool IsMailNewsDisplay { get; private set; }

        /// <summary>
        /// Returns false as IsMailNewsDisplay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMailNewsDisplay()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsMailNewsSave
        /// </summary>
        [DataMember(Name = "IsMailNewsSave", EmitDefaultValue = true)]
        public bool IsMailNewsSave { get; private set; }

        /// <summary>
        /// Returns false as IsMailNewsSave should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMailNewsSave()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsSingleByte
        /// </summary>
        [DataMember(Name = "IsSingleByte", EmitDefaultValue = true)]
        public bool IsSingleByte { get; private set; }

        /// <summary>
        /// Returns false as IsSingleByte should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSingleByte()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EncoderFallback
        /// </summary>
        [DataMember(Name = "EncoderFallback", EmitDefaultValue = false)]
        public SCSystemTextEncoderFallback EncoderFallback { get; set; }

        /// <summary>
        /// Gets or Sets DecoderFallback
        /// </summary>
        [DataMember(Name = "DecoderFallback", EmitDefaultValue = false)]
        public SCSystemTextDecoderFallback DecoderFallback { get; set; }

        /// <summary>
        /// Gets or Sets IsReadOnly
        /// </summary>
        [DataMember(Name = "IsReadOnly", EmitDefaultValue = true)]
        public bool IsReadOnly { get; private set; }

        /// <summary>
        /// Returns false as IsReadOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsReadOnly()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CodePage
        /// </summary>
        [DataMember(Name = "CodePage", EmitDefaultValue = false)]
        public int CodePage { get; private set; }

        /// <summary>
        /// Returns false as CodePage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCodePage()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCSystemTextEncoding {\n");
            sb.Append("  BodyName: ").Append(BodyName).Append("\n");
            sb.Append("  EncodingName: ").Append(EncodingName).Append("\n");
            sb.Append("  HeaderName: ").Append(HeaderName).Append("\n");
            sb.Append("  WebName: ").Append(WebName).Append("\n");
            sb.Append("  WindowsCodePage: ").Append(WindowsCodePage).Append("\n");
            sb.Append("  IsBrowserDisplay: ").Append(IsBrowserDisplay).Append("\n");
            sb.Append("  IsBrowserSave: ").Append(IsBrowserSave).Append("\n");
            sb.Append("  IsMailNewsDisplay: ").Append(IsMailNewsDisplay).Append("\n");
            sb.Append("  IsMailNewsSave: ").Append(IsMailNewsSave).Append("\n");
            sb.Append("  IsSingleByte: ").Append(IsSingleByte).Append("\n");
            sb.Append("  EncoderFallback: ").Append(EncoderFallback).Append("\n");
            sb.Append("  DecoderFallback: ").Append(DecoderFallback).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  CodePage: ").Append(CodePage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCSystemTextEncoding);
        }

        /// <summary>
        /// Returns true if SCSystemTextEncoding instances are equal
        /// </summary>
        /// <param name="input">Instance of SCSystemTextEncoding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCSystemTextEncoding input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BodyName == input.BodyName ||
                    (this.BodyName != null &&
                    this.BodyName.Equals(input.BodyName))
                ) && 
                (
                    this.EncodingName == input.EncodingName ||
                    (this.EncodingName != null &&
                    this.EncodingName.Equals(input.EncodingName))
                ) && 
                (
                    this.HeaderName == input.HeaderName ||
                    (this.HeaderName != null &&
                    this.HeaderName.Equals(input.HeaderName))
                ) && 
                (
                    this.WebName == input.WebName ||
                    (this.WebName != null &&
                    this.WebName.Equals(input.WebName))
                ) && 
                (
                    this.WindowsCodePage == input.WindowsCodePage ||
                    this.WindowsCodePage.Equals(input.WindowsCodePage)
                ) && 
                (
                    this.IsBrowserDisplay == input.IsBrowserDisplay ||
                    this.IsBrowserDisplay.Equals(input.IsBrowserDisplay)
                ) && 
                (
                    this.IsBrowserSave == input.IsBrowserSave ||
                    this.IsBrowserSave.Equals(input.IsBrowserSave)
                ) && 
                (
                    this.IsMailNewsDisplay == input.IsMailNewsDisplay ||
                    this.IsMailNewsDisplay.Equals(input.IsMailNewsDisplay)
                ) && 
                (
                    this.IsMailNewsSave == input.IsMailNewsSave ||
                    this.IsMailNewsSave.Equals(input.IsMailNewsSave)
                ) && 
                (
                    this.IsSingleByte == input.IsSingleByte ||
                    this.IsSingleByte.Equals(input.IsSingleByte)
                ) && 
                (
                    this.EncoderFallback == input.EncoderFallback ||
                    (this.EncoderFallback != null &&
                    this.EncoderFallback.Equals(input.EncoderFallback))
                ) && 
                (
                    this.DecoderFallback == input.DecoderFallback ||
                    (this.DecoderFallback != null &&
                    this.DecoderFallback.Equals(input.DecoderFallback))
                ) && 
                (
                    this.IsReadOnly == input.IsReadOnly ||
                    this.IsReadOnly.Equals(input.IsReadOnly)
                ) && 
                (
                    this.CodePage == input.CodePage ||
                    this.CodePage.Equals(input.CodePage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BodyName != null)
                {
                    hashCode = (hashCode * 59) + this.BodyName.GetHashCode();
                }
                if (this.EncodingName != null)
                {
                    hashCode = (hashCode * 59) + this.EncodingName.GetHashCode();
                }
                if (this.HeaderName != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderName.GetHashCode();
                }
                if (this.WebName != null)
                {
                    hashCode = (hashCode * 59) + this.WebName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WindowsCodePage.GetHashCode();
                hashCode = (hashCode * 59) + this.IsBrowserDisplay.GetHashCode();
                hashCode = (hashCode * 59) + this.IsBrowserSave.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMailNewsDisplay.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMailNewsSave.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSingleByte.GetHashCode();
                if (this.EncoderFallback != null)
                {
                    hashCode = (hashCode * 59) + this.EncoderFallback.GetHashCode();
                }
                if (this.DecoderFallback != null)
                {
                    hashCode = (hashCode * 59) + this.DecoderFallback.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsReadOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.CodePage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
