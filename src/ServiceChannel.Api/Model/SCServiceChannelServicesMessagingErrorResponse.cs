/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The error response object
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.ErrorResponse")]
    public partial class SCServiceChannelServicesMessagingErrorResponse : IEquatable<SCServiceChannelServicesMessagingErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines ErrorCodes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodesEnum
        {
            /// <summary>
            /// Enum NotAllowed for value: NotAllowed
            /// </summary>
            [EnumMember(Value = "NotAllowed")]
            NotAllowed = 1,

            /// <summary>
            /// Enum EmptyProvider for value: EmptyProvider
            /// </summary>
            [EnumMember(Value = "EmptyProvider")]
            EmptyProvider = 2,

            /// <summary>
            /// Enum InvalidProviderId for value: InvalidProviderId
            /// </summary>
            [EnumMember(Value = "InvalidProviderId")]
            InvalidProviderId = 3,

            /// <summary>
            /// Enum UnknownProvider for value: UnknownProvider
            /// </summary>
            [EnumMember(Value = "UnknownProvider")]
            UnknownProvider = 4,

            /// <summary>
            /// Enum ProviderAlreadyExists for value: ProviderAlreadyExists
            /// </summary>
            [EnumMember(Value = "ProviderAlreadyExists")]
            ProviderAlreadyExists = 5,

            /// <summary>
            /// Enum ProviderIdNotExists for value: ProviderIdNotExists
            /// </summary>
            [EnumMember(Value = "ProviderIdNotExists")]
            ProviderIdNotExists = 6,

            /// <summary>
            /// Enum TimeoutExpiredError for value: TimeoutExpiredError
            /// </summary>
            [EnumMember(Value = "TimeoutExpiredError")]
            TimeoutExpiredError = 7,

            /// <summary>
            /// Enum EmptyContract for value: EmptyContract
            /// </summary>
            [EnumMember(Value = "EmptyContract")]
            EmptyContract = 8,

            /// <summary>
            /// Enum ContractUndefined for value: ContractUndefined
            /// </summary>
            [EnumMember(Value = "ContractUndefined")]
            ContractUndefined = 9,

            /// <summary>
            /// Enum EmptySubscriber for value: EmptySubscriber
            /// </summary>
            [EnumMember(Value = "EmptySubscriber")]
            EmptySubscriber = 10,

            /// <summary>
            /// Enum InvalidSubscriberId for value: InvalidSubscriberId
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberId")]
            InvalidSubscriberId = 11,

            /// <summary>
            /// Enum UnknownSubscriber for value: UnknownSubscriber
            /// </summary>
            [EnumMember(Value = "UnknownSubscriber")]
            UnknownSubscriber = 12,

            /// <summary>
            /// Enum InactiveSubscriber for value: InactiveSubscriber
            /// </summary>
            [EnumMember(Value = "InactiveSubscriber")]
            InactiveSubscriber = 13,

            /// <summary>
            /// Enum EmptySubscriberId for value: EmptySubscriberId
            /// </summary>
            [EnumMember(Value = "EmptySubscriberId")]
            EmptySubscriberId = 14,

            /// <summary>
            /// Enum SubscriberIdNotExists for value: SubscriberIdNotExists
            /// </summary>
            [EnumMember(Value = "SubscriberIdNotExists")]
            SubscriberIdNotExists = 15,

            /// <summary>
            /// Enum InternalError for value: InternalError
            /// </summary>
            [EnumMember(Value = "InternalError")]
            InternalError = 16,

            /// <summary>
            /// Enum DataNotFound for value: DataNotFound
            /// </summary>
            [EnumMember(Value = "DataNotFound")]
            DataNotFound = 17,

            /// <summary>
            /// Enum BadRequest for value: BadRequest
            /// </summary>
            [EnumMember(Value = "BadRequest")]
            BadRequest = 18,

            /// <summary>
            /// Enum UnAuthorized for value: UnAuthorized
            /// </summary>
            [EnumMember(Value = "UnAuthorized")]
            UnAuthorized = 19,

            /// <summary>
            /// Enum UnSupportedApplication for value: UnSupportedApplication
            /// </summary>
            [EnumMember(Value = "UnSupportedApplication")]
            UnSupportedApplication = 20,

            /// <summary>
            /// Enum SubsidiaryUserDisabled for value: SubsidiaryUserDisabled
            /// </summary>
            [EnumMember(Value = "SubsidiaryUserDisabled")]
            SubsidiaryUserDisabled = 21,

            /// <summary>
            /// Enum EmptyLocation for value: EmptyLocation
            /// </summary>
            [EnumMember(Value = "EmptyLocation")]
            EmptyLocation = 22,

            /// <summary>
            /// Enum InvalidLocationId for value: InvalidLocationId
            /// </summary>
            [EnumMember(Value = "InvalidLocationId")]
            InvalidLocationId = 23,

            /// <summary>
            /// Enum UnknownLocation for value: UnknownLocation
            /// </summary>
            [EnumMember(Value = "UnknownLocation")]
            UnknownLocation = 24,

            /// <summary>
            /// Enum LocationNotBelongsToSubscriber for value: LocationNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "LocationNotBelongsToSubscriber")]
            LocationNotBelongsToSubscriber = 25,

            /// <summary>
            /// Enum EmptyLocationCountry for value: EmptyLocationCountry
            /// </summary>
            [EnumMember(Value = "EmptyLocationCountry")]
            EmptyLocationCountry = 26,

            /// <summary>
            /// Enum LocationAlreadyExists for value: LocationAlreadyExists
            /// </summary>
            [EnumMember(Value = "LocationAlreadyExists")]
            LocationAlreadyExists = 27,

            /// <summary>
            /// Enum InvalidStoreId for value: InvalidStoreId
            /// </summary>
            [EnumMember(Value = "InvalidStoreId")]
            InvalidStoreId = 28,

            /// <summary>
            /// Enum LocationEmptyState for value: LocationEmptyState
            /// </summary>
            [EnumMember(Value = "LocationEmptyState")]
            LocationEmptyState = 29,

            /// <summary>
            /// Enum NoAccessToLocation for value: NoAccessToLocation
            /// </summary>
            [EnumMember(Value = "NoAccessToLocation")]
            NoAccessToLocation = 30,

            /// <summary>
            /// Enum LocationAddressValidationError for value: LocationAddressValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressValidationError")]
            LocationAddressValidationError = 31,

            /// <summary>
            /// Enum LocationAddressRequestValidationError for value: LocationAddressRequestValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressRequestValidationError")]
            LocationAddressRequestValidationError = 32,

            /// <summary>
            /// Enum InvalidLocationNoteHeader for value: InvalidLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "InvalidLocationNoteHeader")]
            InvalidLocationNoteHeader = 33,

            /// <summary>
            /// Enum NoAccessToUpdateProtectedNote for value: NoAccessToUpdateProtectedNote
            /// </summary>
            [EnumMember(Value = "NoAccessToUpdateProtectedNote")]
            NoAccessToUpdateProtectedNote = 34,

            /// <summary>
            /// Enum InvalidBusinessHoursFormat for value: InvalidBusinessHoursFormat
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursFormat")]
            InvalidBusinessHoursFormat = 35,

            /// <summary>
            /// Enum WorkingHoursIntersect for value: WorkingHoursIntersect
            /// </summary>
            [EnumMember(Value = "WorkingHoursIntersect")]
            WorkingHoursIntersect = 36,

            /// <summary>
            /// Enum InvalidDayOfWeek for value: InvalidDayOfWeek
            /// </summary>
            [EnumMember(Value = "InvalidDayOfWeek")]
            InvalidDayOfWeek = 37,

            /// <summary>
            /// Enum DuplicateDayOfWeek for value: DuplicateDayOfWeek
            /// </summary>
            [EnumMember(Value = "DuplicateDayOfWeek")]
            DuplicateDayOfWeek = 38,

            /// <summary>
            /// Enum InvalidBusinessHoursInitialSetup for value: InvalidBusinessHoursInitialSetup
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursInitialSetup")]
            InvalidBusinessHoursInitialSetup = 39,

            /// <summary>
            /// Enum BusinessHoursIsEmpty for value: BusinessHoursIsEmpty
            /// </summary>
            [EnumMember(Value = "BusinessHoursIsEmpty")]
            BusinessHoursIsEmpty = 40,

            /// <summary>
            /// Enum InvalidHolidayRepeatByType for value: InvalidHolidayRepeatByType
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatByType")]
            InvalidHolidayRepeatByType = 41,

            /// <summary>
            /// Enum EmptyHolidayListOfDays for value: EmptyHolidayListOfDays
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfDays")]
            EmptyHolidayListOfDays = 42,

            /// <summary>
            /// Enum EmptyHolidayListOfMonths for value: EmptyHolidayListOfMonths
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfMonths")]
            EmptyHolidayListOfMonths = 43,

            /// <summary>
            /// Enum InvalidHolidayMonthName for value: InvalidHolidayMonthName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayMonthName")]
            InvalidHolidayMonthName = 44,

            /// <summary>
            /// Enum InvalidHolidayNameLength for value: InvalidHolidayNameLength
            /// </summary>
            [EnumMember(Value = "InvalidHolidayNameLength")]
            InvalidHolidayNameLength = 45,

            /// <summary>
            /// Enum InvalidHolidayRepeatEvery for value: InvalidHolidayRepeatEvery
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatEvery")]
            InvalidHolidayRepeatEvery = 46,

            /// <summary>
            /// Enum DuplicateMonth for value: DuplicateMonth
            /// </summary>
            [EnumMember(Value = "DuplicateMonth")]
            DuplicateMonth = 47,

            /// <summary>
            /// Enum InvalidHolidayFrequency for value: InvalidHolidayFrequency
            /// </summary>
            [EnumMember(Value = "InvalidHolidayFrequency")]
            InvalidHolidayFrequency = 48,

            /// <summary>
            /// Enum InvalidHolidayStartDate for value: InvalidHolidayStartDate
            /// </summary>
            [EnumMember(Value = "InvalidHolidayStartDate")]
            InvalidHolidayStartDate = 49,

            /// <summary>
            /// Enum InvalidCloseAllDay for value: InvalidCloseAllDay
            /// </summary>
            [EnumMember(Value = "InvalidCloseAllDay")]
            InvalidCloseAllDay = 50,

            /// <summary>
            /// Enum HolidayDoesNotExist for value: HolidayDoesNotExist
            /// </summary>
            [EnumMember(Value = "HolidayDoesNotExist")]
            HolidayDoesNotExist = 51,

            /// <summary>
            /// Enum InvalidFormatParameter for value: InvalidFormatParameter
            /// </summary>
            [EnumMember(Value = "InvalidFormatParameter")]
            InvalidFormatParameter = 52,

            /// <summary>
            /// Enum InvalidLocationCity for value: InvalidLocationCity
            /// </summary>
            [EnumMember(Value = "InvalidLocationCity")]
            InvalidLocationCity = 53,

            /// <summary>
            /// Enum InvalidLocationZip for value: InvalidLocationZip
            /// </summary>
            [EnumMember(Value = "InvalidLocationZip")]
            InvalidLocationZip = 54,

            /// <summary>
            /// Enum InvalidLocationLatitude for value: InvalidLocationLatitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLatitude")]
            InvalidLocationLatitude = 55,

            /// <summary>
            /// Enum InvalidLocationLongitude for value: InvalidLocationLongitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLongitude")]
            InvalidLocationLongitude = 56,

            /// <summary>
            /// Enum InvalidLocationEmail for value: InvalidLocationEmail
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmail")]
            InvalidLocationEmail = 57,

            /// <summary>
            /// Enum InvalidLocationName for value: InvalidLocationName
            /// </summary>
            [EnumMember(Value = "InvalidLocationName")]
            InvalidLocationName = 58,

            /// <summary>
            /// Enum InvalidLocationState for value: InvalidLocationState
            /// </summary>
            [EnumMember(Value = "InvalidLocationState")]
            InvalidLocationState = 59,

            /// <summary>
            /// Enum InvalidLocationAddlAddress for value: InvalidLocationAddlAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationAddlAddress")]
            InvalidLocationAddlAddress = 60,

            /// <summary>
            /// Enum InvalidLocationMainAddress for value: InvalidLocationMainAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationMainAddress")]
            InvalidLocationMainAddress = 61,

            /// <summary>
            /// Enum InvalidLocationCountry for value: InvalidLocationCountry
            /// </summary>
            [EnumMember(Value = "InvalidLocationCountry")]
            InvalidLocationCountry = 62,

            /// <summary>
            /// Enum InvalidLocationRegion for value: InvalidLocationRegion
            /// </summary>
            [EnumMember(Value = "InvalidLocationRegion")]
            InvalidLocationRegion = 63,

            /// <summary>
            /// Enum InvalidLocationDistrict for value: InvalidLocationDistrict
            /// </summary>
            [EnumMember(Value = "InvalidLocationDistrict")]
            InvalidLocationDistrict = 64,

            /// <summary>
            /// Enum InvalidLocationPhone for value: InvalidLocationPhone
            /// </summary>
            [EnumMember(Value = "InvalidLocationPhone")]
            InvalidLocationPhone = 65,

            /// <summary>
            /// Enum InvalidLocationContact for value: InvalidLocationContact
            /// </summary>
            [EnumMember(Value = "InvalidLocationContact")]
            InvalidLocationContact = 66,

            /// <summary>
            /// Enum InvalidLocationFaxNumber for value: InvalidLocationFaxNumber
            /// </summary>
            [EnumMember(Value = "InvalidLocationFaxNumber")]
            InvalidLocationFaxNumber = 67,

            /// <summary>
            /// Enum LocationCountryNotFound for value: LocationCountryNotFound
            /// </summary>
            [EnumMember(Value = "LocationCountryNotFound")]
            LocationCountryNotFound = 68,

            /// <summary>
            /// Enum LocationStateNotFound for value: LocationStateNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateNotFound")]
            LocationStateNotFound = 69,

            /// <summary>
            /// Enum LocationCityNotFound for value: LocationCityNotFound
            /// </summary>
            [EnumMember(Value = "LocationCityNotFound")]
            LocationCityNotFound = 70,

            /// <summary>
            /// Enum LocationIdNotExists for value: LocationIdNotExists
            /// </summary>
            [EnumMember(Value = "LocationIdNotExists")]
            LocationIdNotExists = 71,

            /// <summary>
            /// Enum InvalidLocationEmailLength for value: InvalidLocationEmailLength
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmailLength")]
            InvalidLocationEmailLength = 72,

            /// <summary>
            /// Enum LocationStateIdNotFound for value: LocationStateIdNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateIdNotFound")]
            LocationStateIdNotFound = 73,

            /// <summary>
            /// Enum IncorrectCombinationStateAndStateId for value: IncorrectCombinationStateAndStateId
            /// </summary>
            [EnumMember(Value = "IncorrectCombinationStateAndStateId")]
            IncorrectCombinationStateAndStateId = 74,

            /// <summary>
            /// Enum InvalidSubscriberIds for value: InvalidSubscriberIds
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberIds")]
            InvalidSubscriberIds = 75,

            /// <summary>
            /// Enum InvalidLocalizationSettings for value: InvalidLocalizationSettings
            /// </summary>
            [EnumMember(Value = "InvalidLocalizationSettings")]
            InvalidLocalizationSettings = 76,

            /// <summary>
            /// Enum LandlordResponsibilityNotFound for value: LandlordResponsibilityNotFound
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityNotFound")]
            LandlordResponsibilityNotFound = 77,

            /// <summary>
            /// Enum LandlordResponsibilityAlreadyExists for value: LandlordResponsibilityAlreadyExists
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityAlreadyExists")]
            LandlordResponsibilityAlreadyExists = 78,

            /// <summary>
            /// Enum EmptyLocationIds for value: EmptyLocationIds
            /// </summary>
            [EnumMember(Value = "EmptyLocationIds")]
            EmptyLocationIds = 79,

            /// <summary>
            /// Enum AttachmentNotExist for value: AttachmentNotExist
            /// </summary>
            [EnumMember(Value = "AttachmentNotExist")]
            AttachmentNotExist = 80,

            /// <summary>
            /// Enum InvalidTradeId for value: InvalidTradeId
            /// </summary>
            [EnumMember(Value = "InvalidTradeId")]
            InvalidTradeId = 81,

            /// <summary>
            /// Enum InvalidCategoryId for value: InvalidCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidCategoryId")]
            InvalidCategoryId = 82,

            /// <summary>
            /// Enum InvalidOverrideCategoryId for value: InvalidOverrideCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidOverrideCategoryId")]
            InvalidOverrideCategoryId = 83,

            /// <summary>
            /// Enum InvalidOverridePriorityId for value: InvalidOverridePriorityId
            /// </summary>
            [EnumMember(Value = "InvalidOverridePriorityId")]
            InvalidOverridePriorityId = 84,

            /// <summary>
            /// Enum LeaseNoteExceedMaxLength for value: LeaseNoteExceedMaxLength
            /// </summary>
            [EnumMember(Value = "LeaseNoteExceedMaxLength")]
            LeaseNoteExceedMaxLength = 85,

            /// <summary>
            /// Enum InvalidOverrideProviderRank for value: InvalidOverrideProviderRank
            /// </summary>
            [EnumMember(Value = "InvalidOverrideProviderRank")]
            InvalidOverrideProviderRank = 86,

            /// <summary>
            /// Enum InvalidOverrideNTE for value: InvalidOverrideNTE
            /// </summary>
            [EnumMember(Value = "InvalidOverrideNTE")]
            InvalidOverrideNTE = 87,

            /// <summary>
            /// Enum EmptyTrade for value: EmptyTrade
            /// </summary>
            [EnumMember(Value = "EmptyTrade")]
            EmptyTrade = 88,

            /// <summary>
            /// Enum InvalidTrade for value: InvalidTrade
            /// </summary>
            [EnumMember(Value = "InvalidTrade")]
            InvalidTrade = 89,

            /// <summary>
            /// Enum TradeNotBelongsToSubscriber for value: TradeNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "TradeNotBelongsToSubscriber")]
            TradeNotBelongsToSubscriber = 90,

            /// <summary>
            /// Enum InvalidPrimaryTrade for value: InvalidPrimaryTrade
            /// </summary>
            [EnumMember(Value = "InvalidPrimaryTrade")]
            InvalidPrimaryTrade = 91,

            /// <summary>
            /// Enum InvalidTradeForSubscriber for value: InvalidTradeForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidTradeForSubscriber")]
            InvalidTradeForSubscriber = 92,

            /// <summary>
            /// Enum InvalidCategoryForSubscriber for value: InvalidCategoryForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidCategoryForSubscriber")]
            InvalidCategoryForSubscriber = 93,

            /// <summary>
            /// Enum GlCodeAlreadyExists for value: GlCodeAlreadyExists
            /// </summary>
            [EnumMember(Value = "GlCodeAlreadyExists")]
            GlCodeAlreadyExists = 94,

            /// <summary>
            /// Enum GlCodeNotExists for value: GlCodeNotExists
            /// </summary>
            [EnumMember(Value = "GlCodeNotExists")]
            GlCodeNotExists = 95,

            /// <summary>
            /// Enum InvalidGlCodeUpdate for value: InvalidGlCodeUpdate
            /// </summary>
            [EnumMember(Value = "InvalidGlCodeUpdate")]
            InvalidGlCodeUpdate = 96,

            /// <summary>
            /// Enum EmptyGlCode for value: EmptyGlCode
            /// </summary>
            [EnumMember(Value = "EmptyGlCode")]
            EmptyGlCode = 97,

            /// <summary>
            /// Enum TradeAlreadyExists for value: TradeAlreadyExists
            /// </summary>
            [EnumMember(Value = "TradeAlreadyExists")]
            TradeAlreadyExists = 98,

            /// <summary>
            /// Enum InvalidNTETrade for value: InvalidNTETrade
            /// </summary>
            [EnumMember(Value = "InvalidNTETrade")]
            InvalidNTETrade = 99,

            /// <summary>
            /// Enum TradeNotExists for value: TradeNotExists
            /// </summary>
            [EnumMember(Value = "TradeNotExists")]
            TradeNotExists = 100,

            /// <summary>
            /// Enum TradeAlreadyInUse for value: TradeAlreadyInUse
            /// </summary>
            [EnumMember(Value = "TradeAlreadyInUse")]
            TradeAlreadyInUse = 101,

            /// <summary>
            /// Enum EmptyUser for value: EmptyUser
            /// </summary>
            [EnumMember(Value = "EmptyUser")]
            EmptyUser = 102,

            /// <summary>
            /// Enum EmptyCreatedBy for value: EmptyCreatedBy
            /// </summary>
            [EnumMember(Value = "EmptyCreatedBy")]
            EmptyCreatedBy = 103,

            /// <summary>
            /// Enum InvalidUserName for value: InvalidUserName
            /// </summary>
            [EnumMember(Value = "InvalidUserName")]
            InvalidUserName = 104,

            /// <summary>
            /// Enum NotProviderUser for value: NotProviderUser
            /// </summary>
            [EnumMember(Value = "NotProviderUser")]
            NotProviderUser = 105,

            /// <summary>
            /// Enum UserHasNoPermissions for value: UserHasNoPermissions
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissions")]
            UserHasNoPermissions = 106,

            /// <summary>
            /// Enum RestrictedAccount for value: RestrictedAccount
            /// </summary>
            [EnumMember(Value = "RestrictedAccount")]
            RestrictedAccount = 107,

            /// <summary>
            /// Enum UserAlreadyExists for value: UserAlreadyExists
            /// </summary>
            [EnumMember(Value = "UserAlreadyExists")]
            UserAlreadyExists = 108,

            /// <summary>
            /// Enum UserHasNoPermissionsEditWO for value: UserHasNoPermissionsEditWO
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissionsEditWO")]
            UserHasNoPermissionsEditWO = 109,

            /// <summary>
            /// Enum UserEmailAddressIsMissing for value: UserEmailAddressIsMissing
            /// </summary>
            [EnumMember(Value = "UserEmailAddressIsMissing")]
            UserEmailAddressIsMissing = 110,

            /// <summary>
            /// Enum InvalidSubsriberProviderId for value: InvalidSubsriberProviderId
            /// </summary>
            [EnumMember(Value = "InvalidSubsriberProviderId")]
            InvalidSubsriberProviderId = 111,

            /// <summary>
            /// Enum LanguageNameNotFound for value: LanguageNameNotFound
            /// </summary>
            [EnumMember(Value = "LanguageNameNotFound")]
            LanguageNameNotFound = 112,

            /// <summary>
            /// Enum InvalidLanguageId for value: InvalidLanguageId
            /// </summary>
            [EnumMember(Value = "InvalidLanguageId")]
            InvalidLanguageId = 113,

            /// <summary>
            /// Enum LanguageIdNotFound for value: LanguageIdNotFound
            /// </summary>
            [EnumMember(Value = "LanguageIdNotFound")]
            LanguageIdNotFound = 114,

            /// <summary>
            /// Enum UseBothSubscriberIdProviderId for value: UseBothSubscriberIdProviderId
            /// </summary>
            [EnumMember(Value = "UseBothSubscriberIdProviderId")]
            UseBothSubscriberIdProviderId = 115,

            /// <summary>
            /// Enum EmptyWoProblem for value: EmptyWoProblem
            /// </summary>
            [EnumMember(Value = "EmptyWoProblem")]
            EmptyWoProblem = 116,

            /// <summary>
            /// Enum InvalidWoProblemSource for value: InvalidWoProblemSource
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemSource")]
            InvalidWoProblemSource = 117,

            /// <summary>
            /// Enum InvalidWoProblemDescription for value: InvalidWoProblemDescription
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemDescription")]
            InvalidWoProblemDescription = 118,

            /// <summary>
            /// Enum InvalidWoProblemCode for value: InvalidWoProblemCode
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemCode")]
            InvalidWoProblemCode = 119,

            /// <summary>
            /// Enum InvalidWoStatus for value: InvalidWoStatus
            /// </summary>
            [EnumMember(Value = "InvalidWoStatus")]
            InvalidWoStatus = 120,

            /// <summary>
            /// Enum InvalidWoNte for value: InvalidWoNte
            /// </summary>
            [EnumMember(Value = "InvalidWoNte")]
            InvalidWoNte = 121,

            /// <summary>
            /// Enum InvalidWoCaller for value: InvalidWoCaller
            /// </summary>
            [EnumMember(Value = "InvalidWoCaller")]
            InvalidWoCaller = 122,

            /// <summary>
            /// Enum InvalidWoCallDate for value: InvalidWoCallDate
            /// </summary>
            [EnumMember(Value = "InvalidWoCallDate")]
            InvalidWoCallDate = 123,

            /// <summary>
            /// Enum InvalidWoScheduledDate for value: InvalidWoScheduledDate
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDate")]
            InvalidWoScheduledDate = 124,

            /// <summary>
            /// Enum InvalidWoScheduledDateGreaterThanMaxAllowed for value: InvalidWoScheduledDateGreaterThanMaxAllowed
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDateGreaterThanMaxAllowed")]
            InvalidWoScheduledDateGreaterThanMaxAllowed = 125,

            /// <summary>
            /// Enum EmptyWoCategory for value: EmptyWoCategory
            /// </summary>
            [EnumMember(Value = "EmptyWoCategory")]
            EmptyWoCategory = 126,

            /// <summary>
            /// Enum InvalidWoCategory for value: InvalidWoCategory
            /// </summary>
            [EnumMember(Value = "InvalidWoCategory")]
            InvalidWoCategory = 127,

            /// <summary>
            /// Enum EmptyWoPriority for value: EmptyWoPriority
            /// </summary>
            [EnumMember(Value = "EmptyWoPriority")]
            EmptyWoPriority = 128,

            /// <summary>
            /// Enum InvalidWoPriority for value: InvalidWoPriority
            /// </summary>
            [EnumMember(Value = "InvalidWoPriority")]
            InvalidWoPriority = 129,

            /// <summary>
            /// Enum InvalidWoCurrency for value: InvalidWoCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWoCurrency")]
            InvalidWoCurrency = 130,

            /// <summary>
            /// Enum InvalidWoSetupId for value: InvalidWoSetupId
            /// </summary>
            [EnumMember(Value = "InvalidWoSetupId")]
            InvalidWoSetupId = 131,

            /// <summary>
            /// Enum AttachmentsRequired for value: AttachmentsRequired
            /// </summary>
            [EnumMember(Value = "AttachmentsRequired")]
            AttachmentsRequired = 132,

            /// <summary>
            /// Enum InvalidWoIdentifier for value: InvalidWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifier")]
            InvalidWoIdentifier = 133,

            /// <summary>
            /// Enum EquipmentRequired for value: EquipmentRequired
            /// </summary>
            [EnumMember(Value = "EquipmentRequired")]
            EquipmentRequired = 134,

            /// <summary>
            /// Enum WoNteOverflow for value: WoNteOverflow
            /// </summary>
            [EnumMember(Value = "WoNteOverflow")]
            WoNteOverflow = 135,

            /// <summary>
            /// Enum InvalidWoPurchaseNumber for value: InvalidWoPurchaseNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoPurchaseNumber")]
            InvalidWoPurchaseNumber = 136,

            /// <summary>
            /// Enum InvalidWoStateForUpdate for value: InvalidWoStateForUpdate
            /// </summary>
            [EnumMember(Value = "InvalidWoStateForUpdate")]
            InvalidWoStateForUpdate = 137,

            /// <summary>
            /// Enum InvalidPagingParameter for value: InvalidPagingParameter
            /// </summary>
            [EnumMember(Value = "InvalidPagingParameter")]
            InvalidPagingParameter = 138,

            /// <summary>
            /// Enum InvalidWoNumber for value: InvalidWoNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoNumber")]
            InvalidWoNumber = 139,

            /// <summary>
            /// Enum CheckInDenied for value: CheckInDenied
            /// </summary>
            [EnumMember(Value = "CheckInDenied")]
            CheckInDenied = 140,

            /// <summary>
            /// Enum CheckOutDenied for value: CheckOutDenied
            /// </summary>
            [EnumMember(Value = "CheckOutDenied")]
            CheckOutDenied = 141,

            /// <summary>
            /// Enum WoScheduledDateLessThenReassignDate for value: WoScheduledDateLessThenReassignDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenReassignDate")]
            WoScheduledDateLessThenReassignDate = 142,

            /// <summary>
            /// Enum WoScheduledDateLessThenCallDate for value: WoScheduledDateLessThenCallDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenCallDate")]
            WoScheduledDateLessThenCallDate = 143,

            /// <summary>
            /// Enum InvalidWoActionReason for value: InvalidWoActionReason
            /// </summary>
            [EnumMember(Value = "InvalidWoActionReason")]
            InvalidWoActionReason = 144,

            /// <summary>
            /// Enum EmptySubscriberProperty for value: EmptySubscriberProperty
            /// </summary>
            [EnumMember(Value = "EmptySubscriberProperty")]
            EmptySubscriberProperty = 145,

            /// <summary>
            /// Enum WorkOrderUpdateError for value: WorkOrderUpdateError
            /// </summary>
            [EnumMember(Value = "WorkOrderUpdateError")]
            WorkOrderUpdateError = 146,

            /// <summary>
            /// Enum MissedWoNteDetails for value: MissedWoNteDetails
            /// </summary>
            [EnumMember(Value = "MissedWoNteDetails")]
            MissedWoNteDetails = 147,

            /// <summary>
            /// Enum InvalidLinkedWoIdentifier for value: InvalidLinkedWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidLinkedWoIdentifier")]
            InvalidLinkedWoIdentifier = 148,

            /// <summary>
            /// Enum WoIsOnHold for value: WoIsOnHold
            /// </summary>
            [EnumMember(Value = "WoIsOnHold")]
            WoIsOnHold = 149,

            /// <summary>
            /// Enum InvalidWoTrade for value: InvalidWoTrade
            /// </summary>
            [EnumMember(Value = "InvalidWoTrade")]
            InvalidWoTrade = 150,

            /// <summary>
            /// Enum InvalidStarScore for value: InvalidStarScore
            /// </summary>
            [EnumMember(Value = "InvalidStarScore")]
            InvalidStarScore = 151,

            /// <summary>
            /// Enum WorkOrderAlreadyRated for value: WorkOrderAlreadyRated
            /// </summary>
            [EnumMember(Value = "WorkOrderAlreadyRated")]
            WorkOrderAlreadyRated = 152,

            /// <summary>
            /// Enum AttachmentThumbnailNotAvailable for value: AttachmentThumbnailNotAvailable
            /// </summary>
            [EnumMember(Value = "AttachmentThumbnailNotAvailable")]
            AttachmentThumbnailNotAvailable = 153,

            /// <summary>
            /// Enum InvalidWoIdentifierOrPin for value: InvalidWoIdentifierOrPin
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifierOrPin")]
            InvalidWoIdentifierOrPin = 154,

            /// <summary>
            /// Enum InvalidTimeZoneHeader for value: InvalidTimeZoneHeader
            /// </summary>
            [EnumMember(Value = "InvalidTimeZoneHeader")]
            InvalidTimeZoneHeader = 155,

            /// <summary>
            /// Enum RefrigerantWasUsedShouldBeYesOrNo for value: RefrigerantWasUsedShouldBeYesOrNo
            /// </summary>
            [EnumMember(Value = "RefrigerantWasUsedShouldBeYesOrNo")]
            RefrigerantWasUsedShouldBeYesOrNo = 156,

            /// <summary>
            /// Enum CheckInDeniedOutsideGeolocation for value: CheckInDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckInDeniedOutsideGeolocation")]
            CheckInDeniedOutsideGeolocation = 157,

            /// <summary>
            /// Enum CheckOutDeniedOutsideGeolocation for value: CheckOutDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckOutDeniedOutsideGeolocation")]
            CheckOutDeniedOutsideGeolocation = 158,

            /// <summary>
            /// Enum LeakDetectorAuditShouldBeCreated for value: LeakDetectorAuditShouldBeCreated
            /// </summary>
            [EnumMember(Value = "LeakDetectorAuditShouldBeCreated")]
            LeakDetectorAuditShouldBeCreated = 159,

            /// <summary>
            /// Enum CheckInOutPremature for value: CheckInOutPremature
            /// </summary>
            [EnumMember(Value = "CheckInOutPremature")]
            CheckInOutPremature = 160,

            /// <summary>
            /// Enum WorkOrderAttachmentsSizeExceeded for value: WorkOrderAttachmentsSizeExceeded
            /// </summary>
            [EnumMember(Value = "WorkOrderAttachmentsSizeExceeded")]
            WorkOrderAttachmentsSizeExceeded = 161,

            /// <summary>
            /// Enum WorkOrderNotFound for value: WorkOrderNotFound
            /// </summary>
            [EnumMember(Value = "WorkOrderNotFound")]
            WorkOrderNotFound = 162,

            /// <summary>
            /// Enum WorkOrderCreateError for value: WorkOrderCreateError
            /// </summary>
            [EnumMember(Value = "WorkOrderCreateError")]
            WorkOrderCreateError = 163,

            /// <summary>
            /// Enum InvalidSetupId for value: InvalidSetupId
            /// </summary>
            [EnumMember(Value = "InvalidSetupId")]
            InvalidSetupId = 164,

            /// <summary>
            /// Enum IssueListNotFound for value: IssueListNotFound
            /// </summary>
            [EnumMember(Value = "IssueListNotFound")]
            IssueListNotFound = 165,

            /// <summary>
            /// Enum InvalidIssueListField for value: InvalidIssueListField
            /// </summary>
            [EnumMember(Value = "InvalidIssueListField")]
            InvalidIssueListField = 166,

            /// <summary>
            /// Enum InactiveTemplateType for value: InactiveTemplateType
            /// </summary>
            [EnumMember(Value = "InactiveTemplateType")]
            InactiveTemplateType = 167,

            /// <summary>
            /// Enum SiteAuditNotFound for value: SiteAuditNotFound
            /// </summary>
            [EnumMember(Value = "SiteAuditNotFound")]
            SiteAuditNotFound = 168,

            /// <summary>
            /// Enum SiteAuditUpdateError for value: SiteAuditUpdateError
            /// </summary>
            [EnumMember(Value = "SiteAuditUpdateError")]
            SiteAuditUpdateError = 169,

            /// <summary>
            /// Enum InvalidSiteAuditParameters for value: InvalidSiteAuditParameters
            /// </summary>
            [EnumMember(Value = "InvalidSiteAuditParameters")]
            InvalidSiteAuditParameters = 170,

            /// <summary>
            /// Enum InvalidAdditionalApprovalCode for value: InvalidAdditionalApprovalCode
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCode")]
            InvalidAdditionalApprovalCode = 171,

            /// <summary>
            /// Enum InvalidAdditionalApprovalCodeValue for value: InvalidAdditionalApprovalCodeValue
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCodeValue")]
            InvalidAdditionalApprovalCodeValue = 172,

            /// <summary>
            /// Enum AdditionalApprovalCodeIsDisabled for value: AdditionalApprovalCodeIsDisabled
            /// </summary>
            [EnumMember(Value = "AdditionalApprovalCodeIsDisabled")]
            AdditionalApprovalCodeIsDisabled = 173,

            /// <summary>
            /// Enum InvalidOtherDesc for value: InvalidOtherDesc
            /// </summary>
            [EnumMember(Value = "InvalidOtherDesc")]
            InvalidOtherDesc = 174,

            /// <summary>
            /// Enum InvalidTax2Name for value: InvalidTax2Name
            /// </summary>
            [EnumMember(Value = "InvalidTax2Name")]
            InvalidTax2Name = 175,

            /// <summary>
            /// Enum InvoiceInconsistentAmounts for value: InvoiceInconsistentAmounts
            /// </summary>
            [EnumMember(Value = "InvoiceInconsistentAmounts")]
            InvoiceInconsistentAmounts = 176,

            /// <summary>
            /// Enum InvoiceInvalidTotal for value: InvoiceInvalidTotal
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTotal")]
            InvoiceInvalidTotal = 177,

            /// <summary>
            /// Enum InvoiceTotalGreaterNte for value: InvoiceTotalGreaterNte
            /// </summary>
            [EnumMember(Value = "InvoiceTotalGreaterNte")]
            InvoiceTotalGreaterNte = 178,

            /// <summary>
            /// Enum InvoiceExists for value: InvoiceExists
            /// </summary>
            [EnumMember(Value = "InvoiceExists")]
            InvoiceExists = 179,

            /// <summary>
            /// Enum CreatingInvoiceError for value: CreatingInvoiceError
            /// </summary>
            [EnumMember(Value = "CreatingInvoiceError")]
            CreatingInvoiceError = 180,

            /// <summary>
            /// Enum DuplInvNumber for value: DuplInvNumber
            /// </summary>
            [EnumMember(Value = "DuplInvNumber")]
            DuplInvNumber = 181,

            /// <summary>
            /// Enum InvoiceTotalNull for value: InvoiceTotalNull
            /// </summary>
            [EnumMember(Value = "InvoiceTotalNull")]
            InvoiceTotalNull = 182,

            /// <summary>
            /// Enum InvComplDateNull for value: InvComplDateNull
            /// </summary>
            [EnumMember(Value = "InvComplDateNull")]
            InvComplDateNull = 183,

            /// <summary>
            /// Enum InvDateLessComplDate for value: InvDateLessComplDate
            /// </summary>
            [EnumMember(Value = "InvDateLessComplDate")]
            InvDateLessComplDate = 184,

            /// <summary>
            /// Enum InvoiceNotAuto for value: InvoiceNotAuto
            /// </summary>
            [EnumMember(Value = "InvoiceNotAuto")]
            InvoiceNotAuto = 185,

            /// <summary>
            /// Enum ESignatureRequired for value: ESignatureRequired
            /// </summary>
            [EnumMember(Value = "ESignatureRequired")]
            ESignatureRequired = 186,

            /// <summary>
            /// Enum InvWoNotFound for value: InvWoNotFound
            /// </summary>
            [EnumMember(Value = "InvWoNotFound")]
            InvWoNotFound = 187,

            /// <summary>
            /// Enum InvWrongWoCurr for value: InvWrongWoCurr
            /// </summary>
            [EnumMember(Value = "InvWrongWoCurr")]
            InvWrongWoCurr = 188,

            /// <summary>
            /// Enum InvWoCurrNotFound for value: InvWoCurrNotFound
            /// </summary>
            [EnumMember(Value = "InvWoCurrNotFound")]
            InvWoCurrNotFound = 189,

            /// <summary>
            /// Enum InvoicingDisabled for value: InvoicingDisabled
            /// </summary>
            [EnumMember(Value = "InvoicingDisabled")]
            InvoicingDisabled = 190,

            /// <summary>
            /// Enum InvCreationUnexpectedRes for value: InvCreationUnexpectedRes
            /// </summary>
            [EnumMember(Value = "InvCreationUnexpectedRes")]
            InvCreationUnexpectedRes = 191,

            /// <summary>
            /// Enum InvoiceInvalidLaborAmount for value: InvoiceInvalidLaborAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborAmount")]
            InvoiceInvalidLaborAmount = 192,

            /// <summary>
            /// Enum InvoiceInvalidMaterialAmount for value: InvoiceInvalidMaterialAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialAmount")]
            InvoiceInvalidMaterialAmount = 193,

            /// <summary>
            /// Enum InvDateOld for value: InvDateOld
            /// </summary>
            [EnumMember(Value = "InvDateOld")]
            InvDateOld = 194,

            /// <summary>
            /// Enum InvDateGreater for value: InvDateGreater
            /// </summary>
            [EnumMember(Value = "InvDateGreater")]
            InvDateGreater = 195,

            /// <summary>
            /// Enum InvoiceMaterialDescriptionLengthOverflow for value: InvoiceMaterialDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialDescriptionLengthOverflow")]
            InvoiceMaterialDescriptionLengthOverflow = 196,

            /// <summary>
            /// Enum InvoiceTaxNotValidated for value: InvoiceTaxNotValidated
            /// </summary>
            [EnumMember(Value = "InvoiceTaxNotValidated")]
            InvoiceTaxNotValidated = 197,

            /// <summary>
            /// Enum InvoiceMaterialPartNumberLengthOverflow for value: InvoiceMaterialPartNumberLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialPartNumberLengthOverflow")]
            InvoiceMaterialPartNumberLengthOverflow = 198,

            /// <summary>
            /// Enum TaxValidationError for value: TaxValidationError
            /// </summary>
            [EnumMember(Value = "TaxValidationError")]
            TaxValidationError = 199,

            /// <summary>
            /// Enum TaxExemptionError for value: TaxExemptionError
            /// </summary>
            [EnumMember(Value = "TaxExemptionError")]
            TaxExemptionError = 200,

            /// <summary>
            /// Enum InvalidInvoiceNumber for value: InvalidInvoiceNumber
            /// </summary>
            [EnumMember(Value = "InvalidInvoiceNumber")]
            InvalidInvoiceNumber = 201,

            /// <summary>
            /// Enum GetApprovalLevelsError for value: GetApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsError")]
            GetApprovalLevelsError = 202,

            /// <summary>
            /// Enum InvoiceAddUsersToMliLevelsError for value: InvoiceAddUsersToMliLevelsError
            /// </summary>
            [EnumMember(Value = "InvoiceAddUsersToMliLevelsError")]
            InvoiceAddUsersToMliLevelsError = 203,

            /// <summary>
            /// Enum InvoiceAddDeleteLocationsToMliLevelUserError for value: InvoiceAddDeleteLocationsToMliLevelUserError
            /// </summary>
            [EnumMember(Value = "InvoiceAddDeleteLocationsToMliLevelUserError")]
            InvoiceAddDeleteLocationsToMliLevelUserError = 204,

            /// <summary>
            /// Enum InvoiceUpdateMLiLevelError for value: InvoiceUpdateMLiLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceUpdateMLiLevelError")]
            InvoiceUpdateMLiLevelError = 205,

            /// <summary>
            /// Enum InvoiceDeleteMliLevelError for value: InvoiceDeleteMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteMliLevelError")]
            InvoiceDeleteMliLevelError = 206,

            /// <summary>
            /// Enum InvoiceDeleteUsersFromMliLevelError for value: InvoiceDeleteUsersFromMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteUsersFromMliLevelError")]
            InvoiceDeleteUsersFromMliLevelError = 207,

            /// <summary>
            /// Enum ApprovalLevelNameLengthOverflow for value: ApprovalLevelNameLengthOverflow
            /// </summary>
            [EnumMember(Value = "ApprovalLevelNameLengthOverflow")]
            ApprovalLevelNameLengthOverflow = 208,

            /// <summary>
            /// Enum GstTaxError for value: GstTaxError
            /// </summary>
            [EnumMember(Value = "GstTaxError")]
            GstTaxError = 209,

            /// <summary>
            /// Enum Tax2Error for value: Tax2Error
            /// </summary>
            [EnumMember(Value = "Tax2Error")]
            Tax2Error = 210,

            /// <summary>
            /// Enum GetApprovalLevelsAndLocationsByUserError for value: GetApprovalLevelsAndLocationsByUserError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsAndLocationsByUserError")]
            GetApprovalLevelsAndLocationsByUserError = 211,

            /// <summary>
            /// Enum GetAssignedUserShortInfoError for value: GetAssignedUserShortInfoError
            /// </summary>
            [EnumMember(Value = "GetAssignedUserShortInfoError")]
            GetAssignedUserShortInfoError = 212,

            /// <summary>
            /// Enum AssignAllLocationsToApprovalLevelAndUserError for value: AssignAllLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "AssignAllLocationsToApprovalLevelAndUserError")]
            AssignAllLocationsToApprovalLevelAndUserError = 213,

            /// <summary>
            /// Enum GetLocationsForApprovalLevelAndAssignedUserError for value: GetLocationsForApprovalLevelAndAssignedUserError
            /// </summary>
            [EnumMember(Value = "GetLocationsForApprovalLevelAndAssignedUserError")]
            GetLocationsForApprovalLevelAndAssignedUserError = 214,

            /// <summary>
            /// Enum GetLocationsBySubscriberError for value: GetLocationsBySubscriberError
            /// </summary>
            [EnumMember(Value = "GetLocationsBySubscriberError")]
            GetLocationsBySubscriberError = 215,

            /// <summary>
            /// Enum AssignUserWithLocationsToApprovalLevelError for value: AssignUserWithLocationsToApprovalLevelError
            /// </summary>
            [EnumMember(Value = "AssignUserWithLocationsToApprovalLevelError")]
            AssignUserWithLocationsToApprovalLevelError = 216,

            /// <summary>
            /// Enum ReAssignUserWithLocationsToNewApprovalLevelError for value: ReAssignUserWithLocationsToNewApprovalLevelError
            /// </summary>
            [EnumMember(Value = "ReAssignUserWithLocationsToNewApprovalLevelError")]
            ReAssignUserWithLocationsToNewApprovalLevelError = 217,

            /// <summary>
            /// Enum ReAssignLocationsToApprovalLevelAndUserError for value: ReAssignLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "ReAssignLocationsToApprovalLevelAndUserError")]
            ReAssignLocationsToApprovalLevelAndUserError = 218,

            /// <summary>
            /// Enum OutstandingBalance for value: OutstandingBalance
            /// </summary>
            [EnumMember(Value = "OutstandingBalance")]
            OutstandingBalance = 219,

            /// <summary>
            /// Enum InvoiceTaxDetailsEmpty for value: InvoiceTaxDetailsEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsEmpty")]
            InvoiceTaxDetailsEmpty = 220,

            /// <summary>
            /// Enum InvoiceTaxDetailsIncorrectSum for value: InvoiceTaxDetailsIncorrectSum
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsIncorrectSum")]
            InvoiceTaxDetailsIncorrectSum = 221,

            /// <summary>
            /// Enum MultipleUsersForLocationIsNotAllowed for value: MultipleUsersForLocationIsNotAllowed
            /// </summary>
            [EnumMember(Value = "MultipleUsersForLocationIsNotAllowed")]
            MultipleUsersForLocationIsNotAllowed = 222,

            /// <summary>
            /// Enum UserAssignedToOtherLevel for value: UserAssignedToOtherLevel
            /// </summary>
            [EnumMember(Value = "UserAssignedToOtherLevel")]
            UserAssignedToOtherLevel = 223,

            /// <summary>
            /// Enum UserDoesNotExist for value: UserDoesNotExist
            /// </summary>
            [EnumMember(Value = "UserDoesNotExist")]
            UserDoesNotExist = 224,

            /// <summary>
            /// Enum LaborLineItemRequired for value: LaborLineItemRequired
            /// </summary>
            [EnumMember(Value = "LaborLineItemRequired")]
            LaborLineItemRequired = 225,

            /// <summary>
            /// Enum MaterialLineItemRequired for value: MaterialLineItemRequired
            /// </summary>
            [EnumMember(Value = "MaterialLineItemRequired")]
            MaterialLineItemRequired = 226,

            /// <summary>
            /// Enum InvoiceDoesntExist for value: InvoiceDoesntExist
            /// </summary>
            [EnumMember(Value = "InvoiceDoesntExist")]
            InvoiceDoesntExist = 227,

            /// <summary>
            /// Enum InvoiceStarUnstarFailed for value: InvoiceStarUnstarFailed
            /// </summary>
            [EnumMember(Value = "InvoiceStarUnstarFailed")]
            InvoiceStarUnstarFailed = 228,

            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidInvoiceStatusError for value: InvoiceBatchUpdateInvalidInvoiceStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidInvoiceStatusError")]
            InvoiceBatchUpdateInvalidInvoiceStatusError = 229,

            /// <summary>
            /// Enum InvoiceBatchUpdateLimitExceededError for value: InvoiceBatchUpdateLimitExceededError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateLimitExceededError")]
            InvoiceBatchUpdateLimitExceededError = 230,

            /// <summary>
            /// Enum InvoiceNotAvailableForCurrentUser for value: InvoiceNotAvailableForCurrentUser
            /// </summary>
            [EnumMember(Value = "InvoiceNotAvailableForCurrentUser")]
            InvoiceNotAvailableForCurrentUser = 231,

            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidRuleSetStructure for value: InvoiceBatchUpdateInvalidRuleSetStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidRuleSetStructure")]
            InvoiceBatchUpdateInvalidRuleSetStructure = 232,

            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidMliStructure for value: InvoiceBatchUpdateInvalidMliStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidMliStructure")]
            InvoiceBatchUpdateInvalidMliStructure = 233,

            /// <summary>
            /// Enum InvoiceBatchUpdateStatusError for value: InvoiceBatchUpdateStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateStatusError")]
            InvoiceBatchUpdateStatusError = 234,

            /// <summary>
            /// Enum InvoiceMaterialUnitTypeInvalid for value: InvoiceMaterialUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialUnitTypeInvalid")]
            InvoiceMaterialUnitTypeInvalid = 235,

            /// <summary>
            /// Enum ExistingBatchNumber for value: ExistingBatchNumber
            /// </summary>
            [EnumMember(Value = "ExistingBatchNumber")]
            ExistingBatchNumber = 236,

            /// <summary>
            /// Enum InvoiceResolutionTextRequired for value: InvoiceResolutionTextRequired
            /// </summary>
            [EnumMember(Value = "InvoiceResolutionTextRequired")]
            InvoiceResolutionTextRequired = 237,

            /// <summary>
            /// Enum GetInvoiceDefaultApprovalCodesError for value: GetInvoiceDefaultApprovalCodesError
            /// </summary>
            [EnumMember(Value = "GetInvoiceDefaultApprovalCodesError")]
            GetInvoiceDefaultApprovalCodesError = 238,

            /// <summary>
            /// Enum InvoiceInvalidTravelAmount for value: InvoiceInvalidTravelAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelAmount")]
            InvoiceInvalidTravelAmount = 239,

            /// <summary>
            /// Enum InvoiceTravelDescriptionLengthOverflow for value: InvoiceTravelDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceTravelDescriptionLengthOverflow")]
            InvoiceTravelDescriptionLengthOverflow = 240,

            /// <summary>
            /// Enum InvoiceTravelUnitTypeInvalid for value: InvoiceTravelUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceTravelUnitTypeInvalid")]
            InvoiceTravelUnitTypeInvalid = 241,

            /// <summary>
            /// Enum TravelLineItemRequired for value: TravelLineItemRequired
            /// </summary>
            [EnumMember(Value = "TravelLineItemRequired")]
            TravelLineItemRequired = 242,

            /// <summary>
            /// Enum TravelDetailsDisabled for value: TravelDetailsDisabled
            /// </summary>
            [EnumMember(Value = "TravelDetailsDisabled")]
            TravelDetailsDisabled = 243,

            /// <summary>
            /// Enum OnOffShoreDisabled for value: OnOffShoreDisabled
            /// </summary>
            [EnumMember(Value = "OnOffShoreDisabled")]
            OnOffShoreDisabled = 244,

            /// <summary>
            /// Enum InvoiceInvalidLaborCount for value: InvoiceInvalidLaborCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborCount")]
            InvoiceInvalidLaborCount = 245,

            /// <summary>
            /// Enum InvoiceInvalidMaterialCount for value: InvoiceInvalidMaterialCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialCount")]
            InvoiceInvalidMaterialCount = 246,

            /// <summary>
            /// Enum InvoiceInvalidTravelCount for value: InvoiceInvalidTravelCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelCount")]
            InvoiceInvalidTravelCount = 247,

            /// <summary>
            /// Enum SubscriberNotRegisteredForTaxValidation for value: SubscriberNotRegisteredForTaxValidation
            /// </summary>
            [EnumMember(Value = "SubscriberNotRegisteredForTaxValidation")]
            SubscriberNotRegisteredForTaxValidation = 248,

            /// <summary>
            /// Enum ManyDecimalsInAmountError for value: ManyDecimalsInAmountError
            /// </summary>
            [EnumMember(Value = "ManyDecimalsInAmountError")]
            ManyDecimalsInAmountError = 249,

            /// <summary>
            /// Enum DecimalPartQstTaxError for value: DecimalPartQstTaxError
            /// </summary>
            [EnumMember(Value = "DecimalPartQstTaxError")]
            DecimalPartQstTaxError = 250,

            /// <summary>
            /// Enum LaborRatesDiscrepancy for value: LaborRatesDiscrepancy
            /// </summary>
            [EnumMember(Value = "LaborRatesDiscrepancy")]
            LaborRatesDiscrepancy = 251,

            /// <summary>
            /// Enum PayInvoicesError for value: PayInvoicesError
            /// </summary>
            [EnumMember(Value = "PayInvoicesError")]
            PayInvoicesError = 252,

            /// <summary>
            /// Enum InvoiceNumberRequirementsError for value: InvoiceNumberRequirementsError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRequirementsError")]
            InvoiceNumberRequirementsError = 253,

            /// <summary>
            /// Enum InvoiceNumberIncorrect for value: InvoiceNumberIncorrect
            /// </summary>
            [EnumMember(Value = "InvoiceNumberIncorrect")]
            InvoiceNumberIncorrect = 254,

            /// <summary>
            /// Enum InvoiceNumberRegExPatternError for value: InvoiceNumberRegExPatternError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRegExPatternError")]
            InvoiceNumberRegExPatternError = 255,

            /// <summary>
            /// Enum GetInvoicesPendingApprovalByLocationError for value: GetInvoicesPendingApprovalByLocationError
            /// </summary>
            [EnumMember(Value = "GetInvoicesPendingApprovalByLocationError")]
            GetInvoicesPendingApprovalByLocationError = 256,

            /// <summary>
            /// Enum ReAssignInvoicesToUsersFailed for value: ReAssignInvoicesToUsersFailed
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesToUsersFailed")]
            ReAssignInvoicesToUsersFailed = 257,

            /// <summary>
            /// Enum ReAssignInvoicesUsersMatched for value: ReAssignInvoicesUsersMatched
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesUsersMatched")]
            ReAssignInvoicesUsersMatched = 258,

            /// <summary>
            /// Enum GetUsersForReassignInvoiceError for value: GetUsersForReassignInvoiceError
            /// </summary>
            [EnumMember(Value = "GetUsersForReassignInvoiceError")]
            GetUsersForReassignInvoiceError = 259,

            /// <summary>
            /// Enum InvalidTimeRangeActivity for value: InvalidTimeRangeActivity
            /// </summary>
            [EnumMember(Value = "InvalidTimeRangeActivity")]
            InvalidTimeRangeActivity = 260,

            /// <summary>
            /// Enum OutsourcedSourceInvoiceNotFound for value: OutsourcedSourceInvoiceNotFound
            /// </summary>
            [EnumMember(Value = "OutsourcedSourceInvoiceNotFound")]
            OutsourcedSourceInvoiceNotFound = 261,

            /// <summary>
            /// Enum OthersLineItemsDisabled for value: OthersLineItemsDisabled
            /// </summary>
            [EnumMember(Value = "OthersLineItemsDisabled")]
            OthersLineItemsDisabled = 262,

            /// <summary>
            /// Enum InvoiceInvalidOtherAmount for value: InvoiceInvalidOtherAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherAmount")]
            InvoiceInvalidOtherAmount = 263,

            /// <summary>
            /// Enum InvoiceInvalidOtherCount for value: InvoiceInvalidOtherCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherCount")]
            InvoiceInvalidOtherCount = 264,

            /// <summary>
            /// Enum InvoiceOtherDescriptionLengthOverflow for value: InvoiceOtherDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceOtherDescriptionLengthOverflow")]
            InvoiceOtherDescriptionLengthOverflow = 265,

            /// <summary>
            /// Enum OtherLineItemRequired for value: OtherLineItemRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemRequired")]
            OtherLineItemRequired = 266,

            /// <summary>
            /// Enum OtherLineItemsNotNegativeValueRequired for value: OtherLineItemsNotNegativeValueRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemsNotNegativeValueRequired")]
            OtherLineItemsNotNegativeValueRequired = 267,

            /// <summary>
            /// Enum InvalidLaborSkillLevel for value: InvalidLaborSkillLevel
            /// </summary>
            [EnumMember(Value = "InvalidLaborSkillLevel")]
            InvalidLaborSkillLevel = 268,

            /// <summary>
            /// Enum InvalidLaborType for value: InvalidLaborType
            /// </summary>
            [EnumMember(Value = "InvalidLaborType")]
            InvalidLaborType = 269,

            /// <summary>
            /// Enum InvalidTechnicianQuantity for value: InvalidTechnicianQuantity
            /// </summary>
            [EnumMember(Value = "InvalidTechnicianQuantity")]
            InvalidTechnicianQuantity = 270,

            /// <summary>
            /// Enum GetInvoicesCommonCategoriesError for value: GetInvoicesCommonCategoriesError
            /// </summary>
            [EnumMember(Value = "GetInvoicesCommonCategoriesError")]
            GetInvoicesCommonCategoriesError = 271,

            /// <summary>
            /// Enum InvoiceExplainDisputeEmpty for value: InvoiceExplainDisputeEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceExplainDisputeEmpty")]
            InvoiceExplainDisputeEmpty = 272,

            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeHeaderError for value: InvoiceAdditionalApprovalCodeHeaderError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeHeaderError")]
            InvoiceAdditionalApprovalCodeHeaderError = 273,

            /// <summary>
            /// Enum TemplateParseSuccess for value: TemplateParseSuccess
            /// </summary>
            [EnumMember(Value = "TemplateParseSuccess")]
            TemplateParseSuccess = 274,

            /// <summary>
            /// Enum TemplateIncorrectHeaderError for value: TemplateIncorrectHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectHeaderError")]
            TemplateIncorrectHeaderError = 275,

            /// <summary>
            /// Enum TemplateEmptyTemplateError for value: TemplateEmptyTemplateError
            /// </summary>
            [EnumMember(Value = "TemplateEmptyTemplateError")]
            TemplateEmptyTemplateError = 276,

            /// <summary>
            /// Enum TemplateWrongFieldsCountError for value: TemplateWrongFieldsCountError
            /// </summary>
            [EnumMember(Value = "TemplateWrongFieldsCountError")]
            TemplateWrongFieldsCountError = 277,

            /// <summary>
            /// Enum TemplateFieldNotFoundError for value: TemplateFieldNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateFieldNotFoundError")]
            TemplateFieldNotFoundError = 278,

            /// <summary>
            /// Enum TemplateFieldRequiredError for value: TemplateFieldRequiredError
            /// </summary>
            [EnumMember(Value = "TemplateFieldRequiredError")]
            TemplateFieldRequiredError = 279,

            /// <summary>
            /// Enum TemplateParseIntError for value: TemplateParseIntError
            /// </summary>
            [EnumMember(Value = "TemplateParseIntError")]
            TemplateParseIntError = 280,

            /// <summary>
            /// Enum TemplateFieldSizeError for value: TemplateFieldSizeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldSizeError")]
            TemplateFieldSizeError = 281,

            /// <summary>
            /// Enum TemplateInvalidValueError for value: TemplateInvalidValueError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidValueError")]
            TemplateInvalidValueError = 282,

            /// <summary>
            /// Enum TemplateFieldFormatError for value: TemplateFieldFormatError
            /// </summary>
            [EnumMember(Value = "TemplateFieldFormatError")]
            TemplateFieldFormatError = 283,

            /// <summary>
            /// Enum TemplateFieldMaxRangeError for value: TemplateFieldMaxRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMaxRangeError")]
            TemplateFieldMaxRangeError = 284,

            /// <summary>
            /// Enum TemplateFieldMinRangeError for value: TemplateFieldMinRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMinRangeError")]
            TemplateFieldMinRangeError = 285,

            /// <summary>
            /// Enum TemplateProviderNotEntered for value: TemplateProviderNotEntered
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotEntered")]
            TemplateProviderNotEntered = 286,

            /// <summary>
            /// Enum TemplateInvalidSubscriberError for value: TemplateInvalidSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberError")]
            TemplateInvalidSubscriberError = 287,

            /// <summary>
            /// Enum TemplateVendorNotFoundError for value: TemplateVendorNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateVendorNotFoundError")]
            TemplateVendorNotFoundError = 288,

            /// <summary>
            /// Enum TemplateMissedProviderError for value: TemplateMissedProviderError
            /// </summary>
            [EnumMember(Value = "TemplateMissedProviderError")]
            TemplateMissedProviderError = 289,

            /// <summary>
            /// Enum TemplateProviderNotFoundError for value: TemplateProviderNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotFoundError")]
            TemplateProviderNotFoundError = 290,

            /// <summary>
            /// Enum TemplateProviderSubsccriberLinkError for value: TemplateProviderSubsccriberLinkError
            /// </summary>
            [EnumMember(Value = "TemplateProviderSubsccriberLinkError")]
            TemplateProviderSubsccriberLinkError = 291,

            /// <summary>
            /// Enum TemplateTradeDispatchRankError for value: TemplateTradeDispatchRankError
            /// </summary>
            [EnumMember(Value = "TemplateTradeDispatchRankError")]
            TemplateTradeDispatchRankError = 292,

            /// <summary>
            /// Enum TemplateInvalidTradeForSubscriberError for value: TemplateInvalidTradeForSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidTradeForSubscriberError")]
            TemplateInvalidTradeForSubscriberError = 293,

            /// <summary>
            /// Enum TemplateStoreNotFoundError for value: TemplateStoreNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateStoreNotFoundError")]
            TemplateStoreNotFoundError = 294,

            /// <summary>
            /// Enum TemplateNotStoresForStateError for value: TemplateNotStoresForStateError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForStateError")]
            TemplateNotStoresForStateError = 295,

            /// <summary>
            /// Enum TemplateNotStoresForCountryError for value: TemplateNotStoresForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForCountryError")]
            TemplateNotStoresForCountryError = 296,

            /// <summary>
            /// Enum TemplateNotStoresForDistrictError for value: TemplateNotStoresForDistrictError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForDistrictError")]
            TemplateNotStoresForDistrictError = 297,

            /// <summary>
            /// Enum TemplateNotStoresForRegionError for value: TemplateNotStoresForRegionError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForRegionError")]
            TemplateNotStoresForRegionError = 298,

            /// <summary>
            /// Enum TemplateMultiplePimaryProvidersForTradeStoreError for value: TemplateMultiplePimaryProvidersForTradeStoreError
            /// </summary>
            [EnumMember(Value = "TemplateMultiplePimaryProvidersForTradeStoreError")]
            TemplateMultiplePimaryProvidersForTradeStoreError = 299,

            /// <summary>
            /// Enum TemplateDuplicatePrimaryRelationshipError for value: TemplateDuplicatePrimaryRelationshipError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatePrimaryRelationshipError")]
            TemplateDuplicatePrimaryRelationshipError = 300,

            /// <summary>
            /// Enum TemplateAmbiguousDataError for value: TemplateAmbiguousDataError
            /// </summary>
            [EnumMember(Value = "TemplateAmbiguousDataError")]
            TemplateAmbiguousDataError = 301,

            /// <summary>
            /// Enum TemplateIncorrectSubscriber for value: TemplateIncorrectSubscriber
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectSubscriber")]
            TemplateIncorrectSubscriber = 302,

            /// <summary>
            /// Enum TemplateDuplicateRanking for value: TemplateDuplicateRanking
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRanking")]
            TemplateDuplicateRanking = 303,

            /// <summary>
            /// Enum TemplateLongitudeRangeError for value: TemplateLongitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLongitudeRangeError")]
            TemplateLongitudeRangeError = 304,

            /// <summary>
            /// Enum TemplateLatitudeRangeError for value: TemplateLatitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLatitudeRangeError")]
            TemplateLatitudeRangeError = 305,

            /// <summary>
            /// Enum TemplateInvalidStateError for value: TemplateInvalidStateError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateError")]
            TemplateInvalidStateError = 306,

            /// <summary>
            /// Enum TemplateMissedSubscriberError for value: TemplateMissedSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateMissedSubscriberError")]
            TemplateMissedSubscriberError = 307,

            /// <summary>
            /// Enum TemplateMissedStoreIdError for value: TemplateMissedStoreIdError
            /// </summary>
            [EnumMember(Value = "TemplateMissedStoreIdError")]
            TemplateMissedStoreIdError = 308,

            /// <summary>
            /// Enum TemplateInvalidSubscriberIdError for value: TemplateInvalidSubscriberIdError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberIdError")]
            TemplateInvalidSubscriberIdError = 309,

            /// <summary>
            /// Enum TemplateOpenCloseDateError for value: TemplateOpenCloseDateError
            /// </summary>
            [EnumMember(Value = "TemplateOpenCloseDateError")]
            TemplateOpenCloseDateError = 310,

            /// <summary>
            /// Enum TemplateInvalidCountryError for value: TemplateInvalidCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCountryError")]
            TemplateInvalidCountryError = 311,

            /// <summary>
            /// Enum TemplateInvalidStateForCountryError for value: TemplateInvalidStateForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateForCountryError")]
            TemplateInvalidStateForCountryError = 312,

            /// <summary>
            /// Enum TemplateInvalidLocationTypeError for value: TemplateInvalidLocationTypeError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationTypeError")]
            TemplateInvalidLocationTypeError = 313,

            /// <summary>
            /// Enum TemplateMissingFullAndShortNameError for value: TemplateMissingFullAndShortNameError
            /// </summary>
            [EnumMember(Value = "TemplateMissingFullAndShortNameError")]
            TemplateMissingFullAndShortNameError = 314,

            /// <summary>
            /// Enum TemplateMissingCountryError for value: TemplateMissingCountryError
            /// </summary>
            [EnumMember(Value = "TemplateMissingCountryError")]
            TemplateMissingCountryError = 315,

            /// <summary>
            /// Enum TemplateDuplicatedDataError for value: TemplateDuplicatedDataError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedDataError")]
            TemplateDuplicatedDataError = 316,

            /// <summary>
            /// Enum TemplateParentLocationNotFoundError for value: TemplateParentLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateParentLocationNotFoundError")]
            TemplateParentLocationNotFoundError = 317,

            /// <summary>
            /// Enum TemplateParseDateTimeError for value: TemplateParseDateTimeError
            /// </summary>
            [EnumMember(Value = "TemplateParseDateTimeError")]
            TemplateParseDateTimeError = 318,

            /// <summary>
            /// Enum TemplateParseDecimalError for value: TemplateParseDecimalError
            /// </summary>
            [EnumMember(Value = "TemplateParseDecimalError")]
            TemplateParseDecimalError = 319,

            /// <summary>
            /// Enum TemplateSquareValueRangeError for value: TemplateSquareValueRangeError
            /// </summary>
            [EnumMember(Value = "TemplateSquareValueRangeError")]
            TemplateSquareValueRangeError = 320,

            /// <summary>
            /// Enum TemplateInvalidSquareMeasureError for value: TemplateInvalidSquareMeasureError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSquareMeasureError")]
            TemplateInvalidSquareMeasureError = 321,

            /// <summary>
            /// Enum TemplateTypeLabelCanNotBeUpdatedError for value: TemplateTypeLabelCanNotBeUpdatedError
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelCanNotBeUpdatedError")]
            TemplateTypeLabelCanNotBeUpdatedError = 322,

            /// <summary>
            /// Enum TemplateTypeLabelHaveToBeLocationForNotInventory for value: TemplateTypeLabelHaveToBeLocationForNotInventory
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelHaveToBeLocationForNotInventory")]
            TemplateTypeLabelHaveToBeLocationForNotInventory = 323,

            /// <summary>
            /// Enum TemplateInvalidPrimarySupplyLocation for value: TemplateInvalidPrimarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPrimarySupplyLocation")]
            TemplateInvalidPrimarySupplyLocation = 324,

            /// <summary>
            /// Enum TemplateInvalidHomestoreLocationNumber for value: TemplateInvalidHomestoreLocationNumber
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHomestoreLocationNumber")]
            TemplateInvalidHomestoreLocationNumber = 325,

            /// <summary>
            /// Enum TemplateErrorDuringCreation for value: TemplateErrorDuringCreation
            /// </summary>
            [EnumMember(Value = "TemplateErrorDuringCreation")]
            TemplateErrorDuringCreation = 326,

            /// <summary>
            /// Enum TemplateLocationNotFoundError for value: TemplateLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotFoundError")]
            TemplateLocationNotFoundError = 327,

            /// <summary>
            /// Enum TemplateDuplicatedLocationFoundError for value: TemplateDuplicatedLocationFoundError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationFoundError")]
            TemplateDuplicatedLocationFoundError = 328,

            /// <summary>
            /// Enum TemplateInvalidLocationHeaderError for value: TemplateInvalidLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationHeaderError")]
            TemplateInvalidLocationHeaderError = 329,

            /// <summary>
            /// Enum TemplateDuplicatedLocationHeaderError for value: TemplateDuplicatedLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaderError")]
            TemplateDuplicatedLocationHeaderError = 330,

            /// <summary>
            /// Enum TemplateHeaderContainsEmptyFieldsError for value: TemplateHeaderContainsEmptyFieldsError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsEmptyFieldsError")]
            TemplateHeaderContainsEmptyFieldsError = 331,

            /// <summary>
            /// Enum TemplateLocHeadersShortHeaderError for value: TemplateLocHeadersShortHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateLocHeadersShortHeaderError")]
            TemplateLocHeadersShortHeaderError = 332,

            /// <summary>
            /// Enum TemplateHeaderContainsDuplicatesError for value: TemplateHeaderContainsDuplicatesError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsDuplicatesError")]
            TemplateHeaderContainsDuplicatesError = 333,

            /// <summary>
            /// Enum TemplateLocationNotesStoreIdFieldLengthError for value: TemplateLocationNotesStoreIdFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesStoreIdFieldLengthError")]
            TemplateLocationNotesStoreIdFieldLengthError = 334,

            /// <summary>
            /// Enum TemplateLocationNotesNoteValueFieldLengthError for value: TemplateLocationNotesNoteValueFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesNoteValueFieldLengthError")]
            TemplateLocationNotesNoteValueFieldLengthError = 335,

            /// <summary>
            /// Enum TemplateErrorInvalidZipCode for value: TemplateErrorInvalidZipCode
            /// </summary>
            [EnumMember(Value = "TemplateErrorInvalidZipCode")]
            TemplateErrorInvalidZipCode = 336,

            /// <summary>
            /// Enum TemplateMissingLocationNoteHeader for value: TemplateMissingLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteHeader")]
            TemplateMissingLocationNoteHeader = 337,

            /// <summary>
            /// Enum TemplateMissingLocationNoteIdHeader for value: TemplateMissingLocationNoteIdHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteIdHeader")]
            TemplateMissingLocationNoteIdHeader = 338,

            /// <summary>
            /// Enum TemplateInvalidSecondarySupplyLocation for value: TemplateInvalidSecondarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSecondarySupplyLocation")]
            TemplateInvalidSecondarySupplyLocation = 339,

            /// <summary>
            /// Enum TemplateLocationWasNotCreated for value: TemplateLocationWasNotCreated
            /// </summary>
            [EnumMember(Value = "TemplateLocationWasNotCreated")]
            TemplateLocationWasNotCreated = 340,

            /// <summary>
            /// Enum TemplateTruckNameIsEmpty for value: TemplateTruckNameIsEmpty
            /// </summary>
            [EnumMember(Value = "TemplateTruckNameIsEmpty")]
            TemplateTruckNameIsEmpty = 341,

            /// <summary>
            /// Enum TemplateWrongFormat for value: TemplateWrongFormat
            /// </summary>
            [EnumMember(Value = "TemplateWrongFormat")]
            TemplateWrongFormat = 342,

            /// <summary>
            /// Enum TemplateSubscriberNotFound for value: TemplateSubscriberNotFound
            /// </summary>
            [EnumMember(Value = "TemplateSubscriberNotFound")]
            TemplateSubscriberNotFound = 343,

            /// <summary>
            /// Enum TemplateDuplicatedLocationHeaders for value: TemplateDuplicatedLocationHeaders
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaders")]
            TemplateDuplicatedLocationHeaders = 344,

            /// <summary>
            /// Enum TemplateInvalidHeaders for value: TemplateInvalidHeaders
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHeaders")]
            TemplateInvalidHeaders = 345,

            /// <summary>
            /// Enum TemplateInvalidPhoneError for value: TemplateInvalidPhoneError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPhoneError")]
            TemplateInvalidPhoneError = 346,

            /// <summary>
            /// Enum TemplateDuplicateTelecomRecordError for value: TemplateDuplicateTelecomRecordError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateTelecomRecordError")]
            TemplateDuplicateTelecomRecordError = 347,

            /// <summary>
            /// Enum TemplateTelecomRecordExistsError for value: TemplateTelecomRecordExistsError
            /// </summary>
            [EnumMember(Value = "TemplateTelecomRecordExistsError")]
            TemplateTelecomRecordExistsError = 348,

            /// <summary>
            /// Enum TemplateInvalidCategory for value: TemplateInvalidCategory
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCategory")]
            TemplateInvalidCategory = 349,

            /// <summary>
            /// Enum TemplateDifferentRanksForProviderAssignments for value: TemplateDifferentRanksForProviderAssignments
            /// </summary>
            [EnumMember(Value = "TemplateDifferentRanksForProviderAssignments")]
            TemplateDifferentRanksForProviderAssignments = 350,

            /// <summary>
            /// Enum TemplateDuplicateRankError for value: TemplateDuplicateRankError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRankError")]
            TemplateDuplicateRankError = 351,

            /// <summary>
            /// Enum TemplateProviderNonCompliant for value: TemplateProviderNonCompliant
            /// </summary>
            [EnumMember(Value = "TemplateProviderNonCompliant")]
            TemplateProviderNonCompliant = 352,

            /// <summary>
            /// Enum TemplateLocationIsClosed for value: TemplateLocationIsClosed
            /// </summary>
            [EnumMember(Value = "TemplateLocationIsClosed")]
            TemplateLocationIsClosed = 353,

            /// <summary>
            /// Enum TemplateProviderWarning for value: TemplateProviderWarning
            /// </summary>
            [EnumMember(Value = "TemplateProviderWarning")]
            TemplateProviderWarning = 354,

            /// <summary>
            /// Enum EmptyRequest for value: EmptyRequest
            /// </summary>
            [EnumMember(Value = "EmptyRequest")]
            EmptyRequest = 355,

            /// <summary>
            /// Enum InvoiceOtherUnitTypeInvalid for value: InvoiceOtherUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceOtherUnitTypeInvalid")]
            InvoiceOtherUnitTypeInvalid = 356,

            /// <summary>
            /// Enum InvalidNumberOfParameters for value: InvalidNumberOfParameters
            /// </summary>
            [EnumMember(Value = "InvalidNumberOfParameters")]
            InvalidNumberOfParameters = 357,

            /// <summary>
            /// Enum EmptyLocationOrTradeList for value: EmptyLocationOrTradeList
            /// </summary>
            [EnumMember(Value = "EmptyLocationOrTradeList")]
            EmptyLocationOrTradeList = 358,

            /// <summary>
            /// Enum StoreIdRequiredError for value: StoreIdRequiredError
            /// </summary>
            [EnumMember(Value = "StoreIdRequiredError")]
            StoreIdRequiredError = 359,

            /// <summary>
            /// Enum InvalidUserIdError for value: InvalidUserIdError
            /// </summary>
            [EnumMember(Value = "InvalidUserIdError")]
            InvalidUserIdError = 360,

            /// <summary>
            /// Enum InvalidStoreIdError for value: InvalidStoreIdError
            /// </summary>
            [EnumMember(Value = "InvalidStoreIdError")]
            InvalidStoreIdError = 361,

            /// <summary>
            /// Enum AmbigiousError for value: AmbigiousError
            /// </summary>
            [EnumMember(Value = "AmbigiousError")]
            AmbigiousError = 362,

            /// <summary>
            /// Enum MliHierarchyFiledsCountError for value: MliHierarchyFiledsCountError
            /// </summary>
            [EnumMember(Value = "MliHierarchyFiledsCountError")]
            MliHierarchyFiledsCountError = 363,

            /// <summary>
            /// Enum MliHierarchyMaxUserNameError for value: MliHierarchyMaxUserNameError
            /// </summary>
            [EnumMember(Value = "MliHierarchyMaxUserNameError")]
            MliHierarchyMaxUserNameError = 364,

            /// <summary>
            /// Enum MliHierarchyDuplicateUserError for value: MliHierarchyDuplicateUserError
            /// </summary>
            [EnumMember(Value = "MliHierarchyDuplicateUserError")]
            MliHierarchyDuplicateUserError = 365,

            /// <summary>
            /// Enum MLiHirarchyUserExistInOtherLevelError for value: MLiHirarchyUserExistInOtherLevelError
            /// </summary>
            [EnumMember(Value = "MLiHirarchyUserExistInOtherLevelError")]
            MLiHirarchyUserExistInOtherLevelError = 366,

            /// <summary>
            /// Enum MissingLevelsError for value: MissingLevelsError
            /// </summary>
            [EnumMember(Value = "MissingLevelsError")]
            MissingLevelsError = 367,

            /// <summary>
            /// Enum DuplicateApprovalLevelsError for value: DuplicateApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "DuplicateApprovalLevelsError")]
            DuplicateApprovalLevelsError = 368,

            /// <summary>
            /// Enum InvalidMliLocations for value: InvalidMliLocations
            /// </summary>
            [EnumMember(Value = "InvalidMliLocations")]
            InvalidMliLocations = 369,

            /// <summary>
            /// Enum InvalidMlpLocations for value: InvalidMlpLocations
            /// </summary>
            [EnumMember(Value = "InvalidMlpLocations")]
            InvalidMlpLocations = 370,

            /// <summary>
            /// Enum ApprovalLevelUsedInRulsetError for value: ApprovalLevelUsedInRulsetError
            /// </summary>
            [EnumMember(Value = "ApprovalLevelUsedInRulsetError")]
            ApprovalLevelUsedInRulsetError = 371,

            /// <summary>
            /// Enum GLCodeAmbiguous for value: GLCodeAmbiguous
            /// </summary>
            [EnumMember(Value = "GLCodeAmbiguous")]
            GLCodeAmbiguous = 372,

            /// <summary>
            /// Enum GlCodeInvalidResponce for value: GlCodeInvalidResponce
            /// </summary>
            [EnumMember(Value = "GlCodeInvalidResponce")]
            GlCodeInvalidResponce = 373,

            /// <summary>
            /// Enum GetRuleSetListError for value: GetRuleSetListError
            /// </summary>
            [EnumMember(Value = "GetRuleSetListError")]
            GetRuleSetListError = 374,

            /// <summary>
            /// Enum RuleSetDuplicateNameError for value: RuleSetDuplicateNameError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateNameError")]
            RuleSetDuplicateNameError = 375,

            /// <summary>
            /// Enum RuleSetDuplicateActionError for value: RuleSetDuplicateActionError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateActionError")]
            RuleSetDuplicateActionError = 376,

            /// <summary>
            /// Enum RuleSetConflictedActionError for value: RuleSetConflictedActionError
            /// </summary>
            [EnumMember(Value = "RuleSetConflictedActionError")]
            RuleSetConflictedActionError = 377,

            /// <summary>
            /// Enum RuleSetRuleSetDoesNotExistsError for value: RuleSetRuleSetDoesNotExistsError
            /// </summary>
            [EnumMember(Value = "RuleSetRuleSetDoesNotExistsError")]
            RuleSetRuleSetDoesNotExistsError = 378,

            /// <summary>
            /// Enum RuleSetTradeDoesNotExistError for value: RuleSetTradeDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetTradeDoesNotExistError")]
            RuleSetTradeDoesNotExistError = 379,

            /// <summary>
            /// Enum RuleSetCategoryDoesNotExistError for value: RuleSetCategoryDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetCategoryDoesNotExistError")]
            RuleSetCategoryDoesNotExistError = 380,

            /// <summary>
            /// Enum RuleSetMliLevelDoesNotExistError for value: RuleSetMliLevelDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetMliLevelDoesNotExistError")]
            RuleSetMliLevelDoesNotExistError = 381,

            /// <summary>
            /// Enum GetRuleSet for value: GetRuleSet
            /// </summary>
            [EnumMember(Value = "GetRuleSet")]
            GetRuleSet = 382,

            /// <summary>
            /// Enum CreateUpdateRuleSetError for value: CreateUpdateRuleSetError
            /// </summary>
            [EnumMember(Value = "CreateUpdateRuleSetError")]
            CreateUpdateRuleSetError = 383,

            /// <summary>
            /// Enum DeleteRuleSet for value: DeleteRuleSet
            /// </summary>
            [EnumMember(Value = "DeleteRuleSet")]
            DeleteRuleSet = 384,

            /// <summary>
            /// Enum GetRuleSetCategoriesTradesCountError for value: GetRuleSetCategoriesTradesCountError
            /// </summary>
            [EnumMember(Value = "GetRuleSetCategoriesTradesCountError")]
            GetRuleSetCategoriesTradesCountError = 385,

            /// <summary>
            /// Enum GetRuleSetByInvoice for value: GetRuleSetByInvoice
            /// </summary>
            [EnumMember(Value = "GetRuleSetByInvoice")]
            GetRuleSetByInvoice = 386,

            /// <summary>
            /// Enum GetCategoryTradeIdsAreSelectedError for value: GetCategoryTradeIdsAreSelectedError
            /// </summary>
            [EnumMember(Value = "GetCategoryTradeIdsAreSelectedError")]
            GetCategoryTradeIdsAreSelectedError = 387,

            /// <summary>
            /// Enum ProposalAboveMlpLimitError for value: ProposalAboveMlpLimitError
            /// </summary>
            [EnumMember(Value = "ProposalAboveMlpLimitError")]
            ProposalAboveMlpLimitError = 388,

            /// <summary>
            /// Enum ProposalNextLevelHasNoAvailableActionsError for value: ProposalNextLevelHasNoAvailableActionsError
            /// </summary>
            [EnumMember(Value = "ProposalNextLevelHasNoAvailableActionsError")]
            ProposalNextLevelHasNoAvailableActionsError = 389,

            /// <summary>
            /// Enum DefaultRuleSetError for value: DefaultRuleSetError
            /// </summary>
            [EnumMember(Value = "DefaultRuleSetError")]
            DefaultRuleSetError = 390,

            /// <summary>
            /// Enum UserFilterGetError for value: UserFilterGetError
            /// </summary>
            [EnumMember(Value = "UserFilterGetError")]
            UserFilterGetError = 391,

            /// <summary>
            /// Enum UserFilterCreateUpdateError for value: UserFilterCreateUpdateError
            /// </summary>
            [EnumMember(Value = "UserFilterCreateUpdateError")]
            UserFilterCreateUpdateError = 392,

            /// <summary>
            /// Enum UserFilterDeleteError for value: UserFilterDeleteError
            /// </summary>
            [EnumMember(Value = "UserFilterDeleteError")]
            UserFilterDeleteError = 393,

            /// <summary>
            /// Enum UserFilterSetAsDefaultError for value: UserFilterSetAsDefaultError
            /// </summary>
            [EnumMember(Value = "UserFilterSetAsDefaultError")]
            UserFilterSetAsDefaultError = 394,

            /// <summary>
            /// Enum InvoiceFilterFromAlpProviderError for value: InvoiceFilterFromAlpProviderError
            /// </summary>
            [EnumMember(Value = "InvoiceFilterFromAlpProviderError")]
            InvoiceFilterFromAlpProviderError = 395,

            /// <summary>
            /// Enum PaymenowScProviderIdOrFbCompanyIdMustBeProvided for value: PaymenowScProviderIdOrFbCompanyIdMustBeProvided
            /// </summary>
            [EnumMember(Value = "PaymenowScProviderIdOrFbCompanyIdMustBeProvided")]
            PaymenowScProviderIdOrFbCompanyIdMustBeProvided = 396,

            /// <summary>
            /// Enum PaymenowBannersForProvidersOnly for value: PaymenowBannersForProvidersOnly
            /// </summary>
            [EnumMember(Value = "PaymenowBannersForProvidersOnly")]
            PaymenowBannersForProvidersOnly = 397,

            /// <summary>
            /// Enum PaymenowFeatureDisabled for value: PaymenowFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymenowFeatureDisabled")]
            PaymenowFeatureDisabled = 398,

            /// <summary>
            /// Enum PaymenowBannerInfoNotFound for value: PaymenowBannerInfoNotFound
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInfoNotFound")]
            PaymenowBannerInfoNotFound = 399,

            /// <summary>
            /// Enum PaymenowBannerInvalidNavigationUrl for value: PaymenowBannerInvalidNavigationUrl
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInvalidNavigationUrl")]
            PaymenowBannerInvalidNavigationUrl = 400,

            /// <summary>
            /// Enum PaymenowRequestedProvidersIsNotAssigned for value: PaymenowRequestedProvidersIsNotAssigned
            /// </summary>
            [EnumMember(Value = "PaymenowRequestedProvidersIsNotAssigned")]
            PaymenowRequestedProvidersIsNotAssigned = 401,

            /// <summary>
            /// Enum PaymenowEmptyRequestedProviders for value: PaymenowEmptyRequestedProviders
            /// </summary>
            [EnumMember(Value = "PaymenowEmptyRequestedProviders")]
            PaymenowEmptyRequestedProviders = 402,

            /// <summary>
            /// Enum PaymentManagerFeatureDisabled for value: PaymentManagerFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabled")]
            PaymentManagerFeatureDisabled = 403,

            /// <summary>
            /// Enum PaymentManagerFeatureDisabledForSubscriber for value: PaymentManagerFeatureDisabledForSubscriber
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabledForSubscriber")]
            PaymentManagerFeatureDisabledForSubscriber = 404,

            /// <summary>
            /// Enum PaymentSystemCurrentlyUnavailable for value: PaymentSystemCurrentlyUnavailable
            /// </summary>
            [EnumMember(Value = "PaymentSystemCurrentlyUnavailable")]
            PaymentSystemCurrentlyUnavailable = 405,

            /// <summary>
            /// Enum CurrencyNotSupported for value: CurrencyNotSupported
            /// </summary>
            [EnumMember(Value = "CurrencyNotSupported")]
            CurrencyNotSupported = 406,

            /// <summary>
            /// Enum PaymentSystemAccountNotFound for value: PaymentSystemAccountNotFound
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountNotFound")]
            PaymentSystemAccountNotFound = 407,

            /// <summary>
            /// Enum FeatureIsOff for value: FeatureIsOff
            /// </summary>
            [EnumMember(Value = "FeatureIsOff")]
            FeatureIsOff = 408,

            /// <summary>
            /// Enum EarlyPayFeatureWithoutPaymentManagetFeatureError for value: EarlyPayFeatureWithoutPaymentManagetFeatureError
            /// </summary>
            [EnumMember(Value = "EarlyPayFeatureWithoutPaymentManagetFeatureError")]
            EarlyPayFeatureWithoutPaymentManagetFeatureError = 409,

            /// <summary>
            /// Enum FtpTestError for value: FtpTestError
            /// </summary>
            [EnumMember(Value = "FtpTestError")]
            FtpTestError = 410,

            /// <summary>
            /// Enum AcceptTermsAndConditionsRequestInvalid for value: AcceptTermsAndConditionsRequestInvalid
            /// </summary>
            [EnumMember(Value = "AcceptTermsAndConditionsRequestInvalid")]
            AcceptTermsAndConditionsRequestInvalid = 411,

            /// <summary>
            /// Enum PaymentSystemAccountError for value: PaymentSystemAccountError
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountError")]
            PaymentSystemAccountError = 412,

            /// <summary>
            /// Enum SendReportToFTP for value: SendReportToFTP
            /// </summary>
            [EnumMember(Value = "SendReportToFTP")]
            SendReportToFTP = 413,

            /// <summary>
            /// Enum SchedulingError for value: SchedulingError
            /// </summary>
            [EnumMember(Value = "SchedulingError")]
            SchedulingError = 414,

            /// <summary>
            /// Enum BadPaymentData for value: BadPaymentData
            /// </summary>
            [EnumMember(Value = "BadPaymentData")]
            BadPaymentData = 415,

            /// <summary>
            /// Enum InvoicesCanNotBeRepaid for value: InvoicesCanNotBeRepaid
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRepaid")]
            InvoicesCanNotBeRepaid = 416,

            /// <summary>
            /// Enum InvoicesCanNotBeRescheduled for value: InvoicesCanNotBeRescheduled
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRescheduled")]
            InvoicesCanNotBeRescheduled = 417,

            /// <summary>
            /// Enum InvalidBillingAddress for value: InvalidBillingAddress
            /// </summary>
            [EnumMember(Value = "InvalidBillingAddress")]
            InvalidBillingAddress = 418,

            /// <summary>
            /// Enum PaymentManagerGeneralSettingsNotFound for value: PaymentManagerGeneralSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerGeneralSettingsNotFound")]
            PaymentManagerGeneralSettingsNotFound = 419,

            /// <summary>
            /// Enum PaymentManagerEInvoiceSettingsNotFound for value: PaymentManagerEInvoiceSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerEInvoiceSettingsNotFound")]
            PaymentManagerEInvoiceSettingsNotFound = 420,

            /// <summary>
            /// Enum BadgeVerificationFailed for value: BadgeVerificationFailed
            /// </summary>
            [EnumMember(Value = "BadgeVerificationFailed")]
            BadgeVerificationFailed = 421,

            /// <summary>
            /// Enum BadgeTempPassEmpty for value: BadgeTempPassEmpty
            /// </summary>
            [EnumMember(Value = "BadgeTempPassEmpty")]
            BadgeTempPassEmpty = 422,

            /// <summary>
            /// Enum BadgeScanRequired for value: BadgeScanRequired
            /// </summary>
            [EnumMember(Value = "BadgeScanRequired")]
            BadgeScanRequired = 423,

            /// <summary>
            /// Enum SolvedIssueSubmitFailed for value: SolvedIssueSubmitFailed
            /// </summary>
            [EnumMember(Value = "SolvedIssueSubmitFailed")]
            SolvedIssueSubmitFailed = 424,

            /// <summary>
            /// Enum SolvedIssueInvalidLocationId for value: SolvedIssueInvalidLocationId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidLocationId")]
            SolvedIssueInvalidLocationId = 425,

            /// <summary>
            /// Enum SolvedIssueInvalidCategoryId for value: SolvedIssueInvalidCategoryId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidCategoryId")]
            SolvedIssueInvalidCategoryId = 426,

            /// <summary>
            /// Enum SolvedIssueInvalidTradeId for value: SolvedIssueInvalidTradeId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidTradeId")]
            SolvedIssueInvalidTradeId = 427,

            /// <summary>
            /// Enum SolvedIssueInvalidPriorityId for value: SolvedIssueInvalidPriorityId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidPriorityId")]
            SolvedIssueInvalidPriorityId = 428,

            /// <summary>
            /// Enum SolvedIssueInvalidSource for value: SolvedIssueInvalidSource
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidSource")]
            SolvedIssueInvalidSource = 429,

            /// <summary>
            /// Enum SolvedIssueInvalidProblemCode for value: SolvedIssueInvalidProblemCode
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidProblemCode")]
            SolvedIssueInvalidProblemCode = 430,

            /// <summary>
            /// Enum SolvedIssueInvalidType for value: SolvedIssueInvalidType
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidType")]
            SolvedIssueInvalidType = 431,

            /// <summary>
            /// Enum SubmitFeedbackErrorWoStatus for value: SubmitFeedbackErrorWoStatus
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackErrorWoStatus")]
            SubmitFeedbackErrorWoStatus = 432,

            /// <summary>
            /// Enum SubmitFeedbackInvalidAnswer for value: SubmitFeedbackInvalidAnswer
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidAnswer")]
            SubmitFeedbackInvalidAnswer = 433,

            /// <summary>
            /// Enum SubmitFeedbackInvalidTrackingNumber for value: SubmitFeedbackInvalidTrackingNumber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidTrackingNumber")]
            SubmitFeedbackInvalidTrackingNumber = 434,

            /// <summary>
            /// Enum SubmitFeedbackInvalidSubscriber for value: SubmitFeedbackInvalidSubscriber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSubscriber")]
            SubmitFeedbackInvalidSubscriber = 435,

            /// <summary>
            /// Enum SubmitFeedbackInvalidScore for value: SubmitFeedbackInvalidScore
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidScore")]
            SubmitFeedbackInvalidScore = 436,

            /// <summary>
            /// Enum SubmitFeedbackUnsatisfactoryCommentRequired for value: SubmitFeedbackUnsatisfactoryCommentRequired
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackUnsatisfactoryCommentRequired")]
            SubmitFeedbackUnsatisfactoryCommentRequired = 437,

            /// <summary>
            /// Enum SubmitFeedbackInvalidReviewId for value: SubmitFeedbackInvalidReviewId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidReviewId")]
            SubmitFeedbackInvalidReviewId = 438,

            /// <summary>
            /// Enum SubmitFeedbackInvalidSetupId for value: SubmitFeedbackInvalidSetupId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSetupId")]
            SubmitFeedbackInvalidSetupId = 439,

            /// <summary>
            /// Enum FeedbackSetupInvalidSetupId for value: FeedbackSetupInvalidSetupId
            /// </summary>
            [EnumMember(Value = "FeedbackSetupInvalidSetupId")]
            FeedbackSetupInvalidSetupId = 440,

            /// <summary>
            /// Enum S3SaveError for value: S3SaveError
            /// </summary>
            [EnumMember(Value = "S3SaveError")]
            S3SaveError = 441,

            /// <summary>
            /// Enum AbsSaveError for value: AbsSaveError
            /// </summary>
            [EnumMember(Value = "AbsSaveError")]
            AbsSaveError = 442,

            /// <summary>
            /// Enum GoodDataLoginFailed for value: GoodDataLoginFailed
            /// </summary>
            [EnumMember(Value = "GoodDataLoginFailed")]
            GoodDataLoginFailed = 443,

            /// <summary>
            /// Enum GoodDataElementUriError for value: GoodDataElementUriError
            /// </summary>
            [EnumMember(Value = "GoodDataElementUriError")]
            GoodDataElementUriError = 444,

            /// <summary>
            /// Enum GoodDataReportResultUriError for value: GoodDataReportResultUriError
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultUriError")]
            GoodDataReportResultUriError = 445,

            /// <summary>
            /// Enum GoodDataReportResultEmpty for value: GoodDataReportResultEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultEmpty")]
            GoodDataReportResultEmpty = 446,

            /// <summary>
            /// Enum GoodDataDesReportResCountError for value: GoodDataDesReportResCountError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResCountError")]
            GoodDataDesReportResCountError = 447,

            /// <summary>
            /// Enum GoodDataDesReportResConvertError for value: GoodDataDesReportResConvertError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResConvertError")]
            GoodDataDesReportResConvertError = 448,

            /// <summary>
            /// Enum GoodDataDesDisplayFormAttributeEmpty for value: GoodDataDesDisplayFormAttributeEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataDesDisplayFormAttributeEmpty")]
            GoodDataDesDisplayFormAttributeEmpty = 449,

            /// <summary>
            /// Enum InvalidProposalAmountLimit for value: InvalidProposalAmountLimit
            /// </summary>
            [EnumMember(Value = "InvalidProposalAmountLimit")]
            InvalidProposalAmountLimit = 450,

            /// <summary>
            /// Enum GetApprovalProposalReasonsError for value: GetApprovalProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetApprovalProposalReasonsError")]
            GetApprovalProposalReasonsError = 451,

            /// <summary>
            /// Enum GetEmailRecipientsError for value: GetEmailRecipientsError
            /// </summary>
            [EnumMember(Value = "GetEmailRecipientsError")]
            GetEmailRecipientsError = 452,

            /// <summary>
            /// Enum GetAssignProposalReasonsError for value: GetAssignProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetAssignProposalReasonsError")]
            GetAssignProposalReasonsError = 453,

            /// <summary>
            /// Enum AssetTypeDuplicateNameError for value: AssetTypeDuplicateNameError
            /// </summary>
            [EnumMember(Value = "AssetTypeDuplicateNameError")]
            AssetTypeDuplicateNameError = 454,

            /// <summary>
            /// Enum AssetTypeDoesntExistError for value: AssetTypeDoesntExistError
            /// </summary>
            [EnumMember(Value = "AssetTypeDoesntExistError")]
            AssetTypeDoesntExistError = 455,

            /// <summary>
            /// Enum AssetTypeFailUpdateRefrigerantPurpose for value: AssetTypeFailUpdateRefrigerantPurpose
            /// </summary>
            [EnumMember(Value = "AssetTypeFailUpdateRefrigerantPurpose")]
            AssetTypeFailUpdateRefrigerantPurpose = 456,

            /// <summary>
            /// Enum AssetTypeDeleteFailed for value: AssetTypeDeleteFailed
            /// </summary>
            [EnumMember(Value = "AssetTypeDeleteFailed")]
            AssetTypeDeleteFailed = 457,

            /// <summary>
            /// Enum ExistingAssetsFoundForAssetType for value: ExistingAssetsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingAssetsFoundForAssetType")]
            ExistingAssetsFoundForAssetType = 458,

            /// <summary>
            /// Enum CantModifyAssetTypeParentId for value: CantModifyAssetTypeParentId
            /// </summary>
            [EnumMember(Value = "CantModifyAssetTypeParentId")]
            CantModifyAssetTypeParentId = 459,

            /// <summary>
            /// Enum InvalidAssetTypeName for value: InvalidAssetTypeName
            /// </summary>
            [EnumMember(Value = "InvalidAssetTypeName")]
            InvalidAssetTypeName = 460,

            /// <summary>
            /// Enum AssetTypeInheritanceError for value: AssetTypeInheritanceError
            /// </summary>
            [EnumMember(Value = "AssetTypeInheritanceError")]
            AssetTypeInheritanceError = 461,

            /// <summary>
            /// Enum ExistingProposalsFoundForAssetType for value: ExistingProposalsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingProposalsFoundForAssetType")]
            ExistingProposalsFoundForAssetType = 462,

            /// <summary>
            /// Enum InstallPurchaseDateOverflow for value: InstallPurchaseDateOverflow
            /// </summary>
            [EnumMember(Value = "InstallPurchaseDateOverflow")]
            InstallPurchaseDateOverflow = 463,

            /// <summary>
            /// Enum WOexistsWithSomeAssets for value: WOexistsWithSomeAssets
            /// </summary>
            [EnumMember(Value = "WOexistsWithSomeAssets")]
            WOexistsWithSomeAssets = 464,

            /// <summary>
            /// Enum PartsChangeFailed for value: PartsChangeFailed
            /// </summary>
            [EnumMember(Value = "PartsChangeFailed")]
            PartsChangeFailed = 465,

            /// <summary>
            /// Enum PartsReasonCodeError for value: PartsReasonCodeError
            /// </summary>
            [EnumMember(Value = "PartsReasonCodeError")]
            PartsReasonCodeError = 466,

            /// <summary>
            /// Enum PartsUseDateError for value: PartsUseDateError
            /// </summary>
            [EnumMember(Value = "PartsUseDateError")]
            PartsUseDateError = 467,

            /// <summary>
            /// Enum PartsRefrigerantAlreadyExists for value: PartsRefrigerantAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsRefrigerantAlreadyExists")]
            PartsRefrigerantAlreadyExists = 468,

            /// <summary>
            /// Enum PartsChargeHistoryAlreadyExists for value: PartsChargeHistoryAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsChargeHistoryAlreadyExists")]
            PartsChargeHistoryAlreadyExists = 469,

            /// <summary>
            /// Enum PartsNotFound for value: PartsNotFound
            /// </summary>
            [EnumMember(Value = "PartsNotFound")]
            PartsNotFound = 470,

            /// <summary>
            /// Enum BulkPartUseIncorrectWorkOrder for value: BulkPartUseIncorrectWorkOrder
            /// </summary>
            [EnumMember(Value = "BulkPartUseIncorrectWorkOrder")]
            BulkPartUseIncorrectWorkOrder = 471,

            /// <summary>
            /// Enum BulkPartsByIdsNotFound for value: BulkPartsByIdsNotFound
            /// </summary>
            [EnumMember(Value = "BulkPartsByIdsNotFound")]
            BulkPartsByIdsNotFound = 472,

            /// <summary>
            /// Enum BulkPartsMultipleWosError for value: BulkPartsMultipleWosError
            /// </summary>
            [EnumMember(Value = "BulkPartsMultipleWosError")]
            BulkPartsMultipleWosError = 473,

            /// <summary>
            /// Enum BulkPartsIncorrectIsRefrigerantParam for value: BulkPartsIncorrectIsRefrigerantParam
            /// </summary>
            [EnumMember(Value = "BulkPartsIncorrectIsRefrigerantParam")]
            BulkPartsIncorrectIsRefrigerantParam = 474,

            /// <summary>
            /// Enum BulkPartsIsRefrigerantCanNotbeChanged for value: BulkPartsIsRefrigerantCanNotbeChanged
            /// </summary>
            [EnumMember(Value = "BulkPartsIsRefrigerantCanNotbeChanged")]
            BulkPartsIsRefrigerantCanNotbeChanged = 475,

            /// <summary>
            /// Enum BulkPartsReasonCodeChangeError for value: BulkPartsReasonCodeChangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeChangeError")]
            BulkPartsReasonCodeChangeError = 476,

            /// <summary>
            /// Enum BulkPartsInvalidAssetAndReasonCodeParams for value: BulkPartsInvalidAssetAndReasonCodeParams
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetAndReasonCodeParams")]
            BulkPartsInvalidAssetAndReasonCodeParams = 477,

            /// <summary>
            /// Enum BulkPartsInvalidAssetId for value: BulkPartsInvalidAssetId
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetId")]
            BulkPartsInvalidAssetId = 478,

            /// <summary>
            /// Enum BulkPartsInvalidInitialChargeCode for value: BulkPartsInvalidInitialChargeCode
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidInitialChargeCode")]
            BulkPartsInvalidInitialChargeCode = 479,

            /// <summary>
            /// Enum BulkPartsAssetDoesntContainCharge for value: BulkPartsAssetDoesntContainCharge
            /// </summary>
            [EnumMember(Value = "BulkPartsAssetDoesntContainCharge")]
            BulkPartsAssetDoesntContainCharge = 480,

            /// <summary>
            /// Enum BulkPartsIsInventoryFlagError for value: BulkPartsIsInventoryFlagError
            /// </summary>
            [EnumMember(Value = "BulkPartsIsInventoryFlagError")]
            BulkPartsIsInventoryFlagError = 481,

            /// <summary>
            /// Enum BulkPartsLeakAlreadyInProcessError for value: BulkPartsLeakAlreadyInProcessError
            /// </summary>
            [EnumMember(Value = "BulkPartsLeakAlreadyInProcessError")]
            BulkPartsLeakAlreadyInProcessError = 482,

            /// <summary>
            /// Enum BulkPartsInvalidDateRangeError for value: BulkPartsInvalidDateRangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidDateRangeError")]
            BulkPartsInvalidDateRangeError = 483,

            /// <summary>
            /// Enum BulkPartsMoeNumberRequiredError for value: BulkPartsMoeNumberRequiredError
            /// </summary>
            [EnumMember(Value = "BulkPartsMoeNumberRequiredError")]
            BulkPartsMoeNumberRequiredError = 484,

            /// <summary>
            /// Enum BulkPartsSystemChargeExceeded for value: BulkPartsSystemChargeExceeded
            /// </summary>
            [EnumMember(Value = "BulkPartsSystemChargeExceeded")]
            BulkPartsSystemChargeExceeded = 485,

            /// <summary>
            /// Enum BulkRefrigerantuUageBlocked for value: BulkRefrigerantuUageBlocked
            /// </summary>
            [EnumMember(Value = "BulkRefrigerantuUageBlocked")]
            BulkRefrigerantuUageBlocked = 486,

            /// <summary>
            /// Enum BulkIDsNotBeNull for value: BulkIDsNotBeNull
            /// </summary>
            [EnumMember(Value = "BulkIDsNotBeNull")]
            BulkIDsNotBeNull = 487,

            /// <summary>
            /// Enum BulkPartRemovalNotAllowedOnRetrofitRetireWO for value: BulkPartRemovalNotAllowedOnRetrofitRetireWO
            /// </summary>
            [EnumMember(Value = "BulkPartRemovalNotAllowedOnRetrofitRetireWO")]
            BulkPartRemovalNotAllowedOnRetrofitRetireWO = 488,

            /// <summary>
            /// Enum BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation for value: BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation
            /// </summary>
            [EnumMember(Value = "BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation")]
            BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation = 489,

            /// <summary>
            /// Enum BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged for value: BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged
            /// </summary>
            [EnumMember(Value = "BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged")]
            BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged = 490,

            /// <summary>
            /// Enum BulkInitialChargeSystemExpansionNotAllowed for value: BulkInitialChargeSystemExpansionNotAllowed
            /// </summary>
            [EnumMember(Value = "BulkInitialChargeSystemExpansionNotAllowed")]
            BulkInitialChargeSystemExpansionNotAllowed = 491,

            /// <summary>
            /// Enum BulkInventoryPartIdCanNotBeChanged for value: BulkInventoryPartIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryPartIdCanNotBeChanged")]
            BulkInventoryPartIdCanNotBeChanged = 492,

            /// <summary>
            /// Enum BulkInventoryLocationIdCanNotBeChanged for value: BulkInventoryLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryLocationIdCanNotBeChanged")]
            BulkInventoryLocationIdCanNotBeChanged = 493,

            /// <summary>
            /// Enum BulkPartsDuplicatedRequest for value: BulkPartsDuplicatedRequest
            /// </summary>
            [EnumMember(Value = "BulkPartsDuplicatedRequest")]
            BulkPartsDuplicatedRequest = 494,

            /// <summary>
            /// Enum BulkChangePartsIncorrectRefrigerantType for value: BulkChangePartsIncorrectRefrigerantType
            /// </summary>
            [EnumMember(Value = "BulkChangePartsIncorrectRefrigerantType")]
            BulkChangePartsIncorrectRefrigerantType = 495,

            /// <summary>
            /// Enum BulkPartsWorkOrderInProcessing for value: BulkPartsWorkOrderInProcessing
            /// </summary>
            [EnumMember(Value = "BulkPartsWorkOrderInProcessing")]
            BulkPartsWorkOrderInProcessing = 496,

            /// <summary>
            /// Enum BulkPartsRetroRetireIsInProgressOnThisDate for value: BulkPartsRetroRetireIsInProgressOnThisDate
            /// </summary>
            [EnumMember(Value = "BulkPartsRetroRetireIsInProgressOnThisDate")]
            BulkPartsRetroRetireIsInProgressOnThisDate = 497,

            /// <summary>
            /// Enum BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord for value: BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord
            /// </summary>
            [EnumMember(Value = "BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord")]
            BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord = 498,

            /// <summary>
            /// Enum RetrofitRetireCanNotBeRemoved for value: RetrofitRetireCanNotBeRemoved
            /// </summary>
            [EnumMember(Value = "RetrofitRetireCanNotBeRemoved")]
            RetrofitRetireCanNotBeRemoved = 499,

            /// <summary>
            /// Enum RetroRetirePartsCantbeChanged for value: RetroRetirePartsCantbeChanged
            /// </summary>
            [EnumMember(Value = "RetroRetirePartsCantbeChanged")]
            RetroRetirePartsCantbeChanged = 500,

            /// <summary>
            /// Enum BulkPartsInventoryApiFailed for value: BulkPartsInventoryApiFailed
            /// </summary>
            [EnumMember(Value = "BulkPartsInventoryApiFailed")]
            BulkPartsInventoryApiFailed = 501,

            /// <summary>
            /// Enum BadNotificationSubscriptionEventType for value: BadNotificationSubscriptionEventType
            /// </summary>
            [EnumMember(Value = "BadNotificationSubscriptionEventType")]
            BadNotificationSubscriptionEventType = 502,

            /// <summary>
            /// Enum RefrigerantUseDateOutOfTheLeakProcessDateRange for value: RefrigerantUseDateOutOfTheLeakProcessDateRange
            /// </summary>
            [EnumMember(Value = "RefrigerantUseDateOutOfTheLeakProcessDateRange")]
            RefrigerantUseDateOutOfTheLeakProcessDateRange = 503,

            /// <summary>
            /// Enum InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors for value: InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors
            /// </summary>
            [EnumMember(Value = "InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors")]
            InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors = 504,

            /// <summary>
            /// Enum BulkExternalWoCurrentlyDoesntExists for value: BulkExternalWoCurrentlyDoesntExists
            /// </summary>
            [EnumMember(Value = "BulkExternalWoCurrentlyDoesntExists")]
            BulkExternalWoCurrentlyDoesntExists = 505,

            /// <summary>
            /// Enum BulkConnectorOnlyExternalClientAssetsCanBeProcessed for value: BulkConnectorOnlyExternalClientAssetsCanBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyExternalClientAssetsCanBeProcessed")]
            BulkConnectorOnlyExternalClientAssetsCanBeProcessed = 506,

            /// <summary>
            /// Enum BulkConnectorOnlyClientAssetsCouldBeProcessed for value: BulkConnectorOnlyClientAssetsCouldBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyClientAssetsCouldBeProcessed")]
            BulkConnectorOnlyClientAssetsCouldBeProcessed = 507,

            /// <summary>
            /// Enum LeakRecordHasWrongDateValue for value: LeakRecordHasWrongDateValue
            /// </summary>
            [EnumMember(Value = "LeakRecordHasWrongDateValue")]
            LeakRecordHasWrongDateValue = 508,

            /// <summary>
            /// Enum HasUncompliedLeakRecordInAnoutherWO for value: HasUncompliedLeakRecordInAnoutherWO
            /// </summary>
            [EnumMember(Value = "HasUncompliedLeakRecordInAnoutherWO")]
            HasUncompliedLeakRecordInAnoutherWO = 509,

            /// <summary>
            /// Enum HasUncompletedWOOnAnotherLeakRecord for value: HasUncompletedWOOnAnotherLeakRecord
            /// </summary>
            [EnumMember(Value = "HasUncompletedWOOnAnotherLeakRecord")]
            HasUncompletedWOOnAnotherLeakRecord = 510,

            /// <summary>
            /// Enum OnlyOneAssetWorkOrderPair for value: OnlyOneAssetWorkOrderPair
            /// </summary>
            [EnumMember(Value = "OnlyOneAssetWorkOrderPair")]
            OnlyOneAssetWorkOrderPair = 511,

            /// <summary>
            /// Enum OneLeakRecordMustBeOnCompletedWO for value: OneLeakRecordMustBeOnCompletedWO
            /// </summary>
            [EnumMember(Value = "OneLeakRecordMustBeOnCompletedWO")]
            OneLeakRecordMustBeOnCompletedWO = 512,

            /// <summary>
            /// Enum LeakRecordNotFaund for value: LeakRecordNotFaund
            /// </summary>
            [EnumMember(Value = "LeakRecordNotFaund")]
            LeakRecordNotFaund = 513,

            /// <summary>
            /// Enum AssetIDWoIdIsRequired for value: AssetIDWoIdIsRequired
            /// </summary>
            [EnumMember(Value = "AssetIDWoIdIsRequired")]
            AssetIDWoIdIsRequired = 514,

            /// <summary>
            /// Enum BulkPartsReasonCodeRetrofit for value: BulkPartsReasonCodeRetrofit
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeRetrofit")]
            BulkPartsReasonCodeRetrofit = 515,

            /// <summary>
            /// Enum MlpImportLevelError for value: MlpImportLevelError
            /// </summary>
            [EnumMember(Value = "MlpImportLevelError")]
            MlpImportLevelError = 516,

            /// <summary>
            /// Enum UpdateMlpUserLevelError for value: UpdateMlpUserLevelError
            /// </summary>
            [EnumMember(Value = "UpdateMlpUserLevelError")]
            UpdateMlpUserLevelError = 517,

            /// <summary>
            /// Enum InvalidHolidayName for value: InvalidHolidayName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayName")]
            InvalidHolidayName = 518,

            /// <summary>
            /// Enum DuplicateHolidayName for value: DuplicateHolidayName
            /// </summary>
            [EnumMember(Value = "DuplicateHolidayName")]
            DuplicateHolidayName = 519,

            /// <summary>
            /// Enum HolidaysDeleteFailed for value: HolidaysDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysDeleteFailed")]
            HolidaysDeleteFailed = 520,

            /// <summary>
            /// Enum HolidaysExcludeInsertFailed for value: HolidaysExcludeInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeInsertFailed")]
            HolidaysExcludeInsertFailed = 521,

            /// <summary>
            /// Enum HolidaysUpdateFailed for value: HolidaysUpdateFailed
            /// </summary>
            [EnumMember(Value = "HolidaysUpdateFailed")]
            HolidaysUpdateFailed = 522,

            /// <summary>
            /// Enum HolidaysInsertFailed for value: HolidaysInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysInsertFailed")]
            HolidaysInsertFailed = 523,

            /// <summary>
            /// Enum HolidaysExcludeDeleteFailed for value: HolidaysExcludeDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeDeleteFailed")]
            HolidaysExcludeDeleteFailed = 524,

            /// <summary>
            /// Enum BusinessHoursDeleteFailed for value: BusinessHoursDeleteFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursDeleteFailed")]
            BusinessHoursDeleteFailed = 525,

            /// <summary>
            /// Enum BusinessHoursUpdateFailed for value: BusinessHoursUpdateFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursUpdateFailed")]
            BusinessHoursUpdateFailed = 526,

            /// <summary>
            /// Enum BusinessHoursInsertFailed for value: BusinessHoursInsertFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursInsertFailed")]
            BusinessHoursInsertFailed = 527,

            /// <summary>
            /// Enum InvalidTime for value: InvalidTime
            /// </summary>
            [EnumMember(Value = "InvalidTime")]
            InvalidTime = 528,

            /// <summary>
            /// Enum HolidayForDeleteNotFound for value: HolidayForDeleteNotFound
            /// </summary>
            [EnumMember(Value = "HolidayForDeleteNotFound")]
            HolidayForDeleteNotFound = 529,

            /// <summary>
            /// Enum InvalidChecklistId for value: InvalidChecklistId
            /// </summary>
            [EnumMember(Value = "InvalidChecklistId")]
            InvalidChecklistId = 530,

            /// <summary>
            /// Enum NoLinkBetweenSubscriberAndProvider for value: NoLinkBetweenSubscriberAndProvider
            /// </summary>
            [EnumMember(Value = "NoLinkBetweenSubscriberAndProvider")]
            NoLinkBetweenSubscriberAndProvider = 531,

            /// <summary>
            /// Enum WorkforceCreateContractorError for value: WorkforceCreateContractorError
            /// </summary>
            [EnumMember(Value = "WorkforceCreateContractorError")]
            WorkforceCreateContractorError = 532,

            /// <summary>
            /// Enum InvalidCertificateId for value: InvalidCertificateId
            /// </summary>
            [EnumMember(Value = "InvalidCertificateId")]
            InvalidCertificateId = 533,

            /// <summary>
            /// Enum MaxThresholdExceeded for value: MaxThresholdExceeded
            /// </summary>
            [EnumMember(Value = "MaxThresholdExceeded")]
            MaxThresholdExceeded = 534,

            /// <summary>
            /// Enum MaxTriggerRateExceeded for value: MaxTriggerRateExceeded
            /// </summary>
            [EnumMember(Value = "MaxTriggerRateExceeded")]
            MaxTriggerRateExceeded = 535,

            /// <summary>
            /// Enum LeakPriorityIsRequired for value: LeakPriorityIsRequired
            /// </summary>
            [EnumMember(Value = "LeakPriorityIsRequired")]
            LeakPriorityIsRequired = 536,

            /// <summary>
            /// Enum MissingRTSettings for value: MissingRTSettings
            /// </summary>
            [EnumMember(Value = "MissingRTSettings")]
            MissingRTSettings = 537,

            /// <summary>
            /// Enum ResolutionCodesLimitExceeded for value: ResolutionCodesLimitExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodesLimitExceeded")]
            ResolutionCodesLimitExceeded = 538,

            /// <summary>
            /// Enum ResolutionCodesAreRequired for value: ResolutionCodesAreRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodesAreRequired")]
            ResolutionCodesAreRequired = 539,

            /// <summary>
            /// Enum RootCauseIsRequired for value: RootCauseIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseIsRequired")]
            RootCauseIsRequired = 540,

            /// <summary>
            /// Enum RootCauseTextIsRequired for value: RootCauseTextIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseTextIsRequired")]
            RootCauseTextIsRequired = 541,

            /// <summary>
            /// Enum NoAccessToSetRootCauseText for value: NoAccessToSetRootCauseText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetRootCauseText")]
            NoAccessToSetRootCauseText = 542,

            /// <summary>
            /// Enum RootCauseTextMaxLengthExceeded for value: RootCauseTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "RootCauseTextMaxLengthExceeded")]
            RootCauseTextMaxLengthExceeded = 543,

            /// <summary>
            /// Enum ResolutionCodeTextIsRequired for value: ResolutionCodeTextIsRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextIsRequired")]
            ResolutionCodeTextIsRequired = 544,

            /// <summary>
            /// Enum NoAccessToSetResolutionCodeText for value: NoAccessToSetResolutionCodeText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetResolutionCodeText")]
            NoAccessToSetResolutionCodeText = 545,

            /// <summary>
            /// Enum ResolutionCodeTextMaxLengthExceeded for value: ResolutionCodeTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMaxLengthExceeded")]
            ResolutionCodeTextMaxLengthExceeded = 546,

            /// <summary>
            /// Enum ResolutionCodeTextMustBeUnique for value: ResolutionCodeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMustBeUnique")]
            ResolutionCodeTextMustBeUnique = 547,

            /// <summary>
            /// Enum ResolutionCodeWithoutFreeTextMustBeUnique for value: ResolutionCodeWithoutFreeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeWithoutFreeTextMustBeUnique")]
            ResolutionCodeWithoutFreeTextMustBeUnique = 548,

            /// <summary>
            /// Enum PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber for value: PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber
            /// </summary>
            [EnumMember(Value = "PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber")]
            PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber = 549,

            /// <summary>
            /// Enum ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider for value: ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider
            /// </summary>
            [EnumMember(Value = "ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider")]
            ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider = 550,

            /// <summary>
            /// Enum AssetCategoriesLimitExceeded for value: AssetCategoriesLimitExceeded
            /// </summary>
            [EnumMember(Value = "AssetCategoriesLimitExceeded")]
            AssetCategoriesLimitExceeded = 551,

            /// <summary>
            /// Enum NoAccessToAssetCategories for value: NoAccessToAssetCategories
            /// </summary>
            [EnumMember(Value = "NoAccessToAssetCategories")]
            NoAccessToAssetCategories = 552,

            /// <summary>
            /// Enum AssetCategoriesAreRequired for value: AssetCategoriesAreRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoriesAreRequired")]
            AssetCategoriesAreRequired = 553,

            /// <summary>
            /// Enum InvalidAssetCategoryId for value: InvalidAssetCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidAssetCategoryId")]
            InvalidAssetCategoryId = 554,

            /// <summary>
            /// Enum NoAssetCategoriesOnWorkOrder for value: NoAssetCategoriesOnWorkOrder
            /// </summary>
            [EnumMember(Value = "NoAssetCategoriesOnWorkOrder")]
            NoAssetCategoriesOnWorkOrder = 555,

            /// <summary>
            /// Enum RootCausesMustBeForAllWorkOrderAssetCategories for value: RootCausesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "RootCausesMustBeForAllWorkOrderAssetCategories")]
            RootCausesMustBeForAllWorkOrderAssetCategories = 556,

            /// <summary>
            /// Enum RootCauseTextMustBeUnique for value: RootCauseTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "RootCauseTextMustBeUnique")]
            RootCauseTextMustBeUnique = 557,

            /// <summary>
            /// Enum AssetCategoryIsRequired for value: AssetCategoryIsRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoryIsRequired")]
            AssetCategoryIsRequired = 558,

            /// <summary>
            /// Enum MultipleRootCausesMethodMustBeUsed for value: MultipleRootCausesMethodMustBeUsed
            /// </summary>
            [EnumMember(Value = "MultipleRootCausesMethodMustBeUsed")]
            MultipleRootCausesMethodMustBeUsed = 559,

            /// <summary>
            /// Enum ResolutionCodesMustBeForAllWorkOrderAssetCategories for value: ResolutionCodesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "ResolutionCodesMustBeForAllWorkOrderAssetCategories")]
            ResolutionCodesMustBeForAllWorkOrderAssetCategories = 560,

            /// <summary>
            /// Enum UnknownStoreId for value: UnknownStoreId
            /// </summary>
            [EnumMember(Value = "UnknownStoreId")]
            UnknownStoreId = 561,

            /// <summary>
            /// Enum UsesRefrigerantAttributeNotChanged for value: UsesRefrigerantAttributeNotChanged
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantAttributeNotChanged")]
            UsesRefrigerantAttributeNotChanged = 562,

            /// <summary>
            /// Enum AssetTagDuplicate for value: AssetTagDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagDuplicate")]
            AssetTagDuplicate = 563,

            /// <summary>
            /// Enum AssetTagIdDuplicate for value: AssetTagIdDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagIdDuplicate")]
            AssetTagIdDuplicate = 564,

            /// <summary>
            /// Enum UnknownEquipmentType for value: UnknownEquipmentType
            /// </summary>
            [EnumMember(Value = "UnknownEquipmentType")]
            UnknownEquipmentType = 565,

            /// <summary>
            /// Enum ParentIdInOtherLocation for value: ParentIdInOtherLocation
            /// </summary>
            [EnumMember(Value = "ParentIdInOtherLocation")]
            ParentIdInOtherLocation = 566,

            /// <summary>
            /// Enum UnknownBrandName for value: UnknownBrandName
            /// </summary>
            [EnumMember(Value = "UnknownBrandName")]
            UnknownBrandName = 567,

            /// <summary>
            /// Enum CARBRequiredManufacturedDate for value: CARBRequiredManufacturedDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredManufacturedDate")]
            CARBRequiredManufacturedDate = 568,

            /// <summary>
            /// Enum CARBRequiredInstallDate for value: CARBRequiredInstallDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredInstallDate")]
            CARBRequiredInstallDate = 569,

            /// <summary>
            /// Enum TradeNotFound for value: TradeNotFound
            /// </summary>
            [EnumMember(Value = "TradeNotFound")]
            TradeNotFound = 570,

            /// <summary>
            /// Enum AssetDoesntExist for value: AssetDoesntExist
            /// </summary>
            [EnumMember(Value = "AssetDoesntExist")]
            AssetDoesntExist = 571,

            /// <summary>
            /// Enum AssetIsNotRefrigerant for value: AssetIsNotRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetIsNotRefrigerant")]
            AssetIsNotRefrigerant = 572,

            /// <summary>
            /// Enum AssetCantContainRefrigerant for value: AssetCantContainRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetCantContainRefrigerant")]
            AssetCantContainRefrigerant = 573,

            /// <summary>
            /// Enum OnlyRackAssetsContainingCircuits for value: OnlyRackAssetsContainingCircuits
            /// </summary>
            [EnumMember(Value = "OnlyRackAssetsContainingCircuits")]
            OnlyRackAssetsContainingCircuits = 574,

            /// <summary>
            /// Enum ConnectorAssetTagIdCanNotBeChanged for value: ConnectorAssetTagIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetTagIdCanNotBeChanged")]
            ConnectorAssetTagIdCanNotBeChanged = 575,

            /// <summary>
            /// Enum ConnectorAssetLocationIdCanNotBeChanged for value: ConnectorAssetLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetLocationIdCanNotBeChanged")]
            ConnectorAssetLocationIdCanNotBeChanged = 576,

            /// <summary>
            /// Enum AssetTagCantBeUpdated for value: AssetTagCantBeUpdated
            /// </summary>
            [EnumMember(Value = "AssetTagCantBeUpdated")]
            AssetTagCantBeUpdated = 577,

            /// <summary>
            /// Enum AssetTypeIsNotonfiguredToManageRTAssets for value: AssetTypeIsNotСonfiguredToManageRTAssets
            /// </summary>
            [EnumMember(Value = "AssetTypeIsNotСonfiguredToManageRTAssets")]
            AssetTypeIsNotonfiguredToManageRTAssets = 578,

            /// <summary>
            /// Enum RefrigerantTrackingNotAvailableForLocation for value: RefrigerantTrackingNotAvailableForLocation
            /// </summary>
            [EnumMember(Value = "RefrigerantTrackingNotAvailableForLocation")]
            RefrigerantTrackingNotAvailableForLocation = 579,

            /// <summary>
            /// Enum UsesRefrigerantRequiredByAssetTypeSettings for value: UsesRefrigerantRequiredByAssetTypeSettings
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantRequiredByAssetTypeSettings")]
            UsesRefrigerantRequiredByAssetTypeSettings = 580,

            /// <summary>
            /// Enum AssetLocationTradeDoesntCorrespondToWO for value: AssetLocationTradeDoesntCorrespondToWO
            /// </summary>
            [EnumMember(Value = "AssetLocationTradeDoesntCorrespondToWO")]
            AssetLocationTradeDoesntCorrespondToWO = 581,

            /// <summary>
            /// Enum AssetLocationSelectedPMmodule for value: AssetLocationSelectedPMmodule
            /// </summary>
            [EnumMember(Value = "AssetLocationSelectedPMmodule")]
            AssetLocationSelectedPMmodule = 582,

            /// <summary>
            /// Enum UpdateAssetRepairStatusValidation for value: UpdateAssetRepairStatusValidation
            /// </summary>
            [EnumMember(Value = "UpdateAssetRepairStatusValidation")]
            UpdateAssetRepairStatusValidation = 583,

            /// <summary>
            /// Enum HasCircuitsCantBeChange for value: HasCircuitsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasCircuitsCantBeChange")]
            HasCircuitsCantBeChange = 584,

            /// <summary>
            /// Enum HasComponentsCantBeChange for value: HasComponentsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasComponentsCantBeChange")]
            HasComponentsCantBeChange = 585,

            /// <summary>
            /// Enum CircuitCanNotBeConnectedToCircuit for value: CircuitCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "CircuitCanNotBeConnectedToCircuit")]
            CircuitCanNotBeConnectedToCircuit = 586,

            /// <summary>
            /// Enum RTCircuitCanNotBeConnectedToNonRTAsset for value: RTCircuitCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTCircuitCanNotBeConnectedToNonRTAsset")]
            RTCircuitCanNotBeConnectedToNonRTAsset = 587,

            /// <summary>
            /// Enum RTComponentCanNotBeConnectedToNonRTAsset for value: RTComponentCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTComponentCanNotBeConnectedToNonRTAsset")]
            RTComponentCanNotBeConnectedToNonRTAsset = 588,

            /// <summary>
            /// Enum ComponentCanNotBeConnectedToComponent for value: ComponentCanNotBeConnectedToComponent
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToComponent")]
            ComponentCanNotBeConnectedToComponent = 589,

            /// <summary>
            /// Enum NonRTComponentCanNotBeConnectedToRtAsset for value: NonRTComponentCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTComponentCanNotBeConnectedToRtAsset")]
            NonRTComponentCanNotBeConnectedToRtAsset = 590,

            /// <summary>
            /// Enum NonRTCircuitCanNotBeConnectedToRtAsset for value: NonRTCircuitCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTCircuitCanNotBeConnectedToRtAsset")]
            NonRTCircuitCanNotBeConnectedToRtAsset = 591,

            /// <summary>
            /// Enum ComponentCanNotBeConnectedToCircuit for value: ComponentCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToCircuit")]
            ComponentCanNotBeConnectedToCircuit = 592,

            /// <summary>
            /// Enum ParentAssetShouldHaveEitherComponentsNorCircuits for value: ParentAssetShouldHaveEitherComponentsNorCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetShouldHaveEitherComponentsNorCircuits")]
            ParentAssetShouldHaveEitherComponentsNorCircuits = 593,

            /// <summary>
            /// Enum ParentAssetCantHaveComponents for value: ParentAssetCantHaveComponents
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveComponents")]
            ParentAssetCantHaveComponents = 594,

            /// <summary>
            /// Enum ParentAssetCantHaveCircuits for value: ParentAssetCantHaveCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveCircuits")]
            ParentAssetCantHaveCircuits = 595,

            /// <summary>
            /// Enum MultipleAssetsFoundForTheRequestedTagId for value: MultipleAssetsFoundForTheRequestedTagId
            /// </summary>
            [EnumMember(Value = "MultipleAssetsFoundForTheRequestedTagId")]
            MultipleAssetsFoundForTheRequestedTagId = 596,

            /// <summary>
            /// Enum DeclineWorkOrderFailed for value: DeclineWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "DeclineWorkOrderFailed")]
            DeclineWorkOrderFailed = 597,

            /// <summary>
            /// Enum AcceptWorkOrderFailed for value: AcceptWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "AcceptWorkOrderFailed")]
            AcceptWorkOrderFailed = 598,

            /// <summary>
            /// Enum WorkOrderWasAccepted for value: WorkOrderWasAccepted
            /// </summary>
            [EnumMember(Value = "WorkOrderWasAccepted")]
            WorkOrderWasAccepted = 599,

            /// <summary>
            /// Enum SaveMliAuditReportSetting for value: SaveMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSetting")]
            SaveMliAuditReportSetting = 600,

            /// <summary>
            /// Enum GetMliAuditReportSetting for value: GetMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "GetMliAuditReportSetting")]
            GetMliAuditReportSetting = 601,

            /// <summary>
            /// Enum SaveMliAuditReportResult for value: SaveMliAuditReportResult
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportResult")]
            SaveMliAuditReportResult = 602,

            /// <summary>
            /// Enum SaveMliAuditReportSendEmailStatus for value: SaveMliAuditReportSendEmailStatus
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSendEmailStatus")]
            SaveMliAuditReportSendEmailStatus = 603,

            /// <summary>
            /// Enum SaveMliAuditReportFilePath for value: SaveMliAuditReportFilePath
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportFilePath")]
            SaveMliAuditReportFilePath = 604,

            /// <summary>
            /// Enum GetSubscribersEnabledSchedule for value: GetSubscribersEnabledSchedule
            /// </summary>
            [EnumMember(Value = "GetSubscribersEnabledSchedule")]
            GetSubscribersEnabledSchedule = 605,

            /// <summary>
            /// Enum SaveMliAuditInfoError for value: SaveMliAuditInfoError
            /// </summary>
            [EnumMember(Value = "SaveMliAuditInfoError")]
            SaveMliAuditInfoError = 606,

            /// <summary>
            /// Enum TaxValidationAddNewCompanySettingsError for value: TaxValidationAddNewCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationAddNewCompanySettingsError")]
            TaxValidationAddNewCompanySettingsError = 607,

            /// <summary>
            /// Enum TaxValidationUpdateCompanySettingsError for value: TaxValidationUpdateCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationUpdateCompanySettingsError")]
            TaxValidationUpdateCompanySettingsError = 608,

            /// <summary>
            /// Enum ProjectAssociationError for value: ProjectAssociationError
            /// </summary>
            [EnumMember(Value = "ProjectAssociationError")]
            ProjectAssociationError = 609,

            /// <summary>
            /// Enum GetProjectsInvoiceAmountsError for value: GetProjectsInvoiceAmountsError
            /// </summary>
            [EnumMember(Value = "GetProjectsInvoiceAmountsError")]
            GetProjectsInvoiceAmountsError = 610,

            /// <summary>
            /// Enum TaxCodeNotUniqueError for value: TaxCodeNotUniqueError
            /// </summary>
            [EnumMember(Value = "TaxCodeNotUniqueError")]
            TaxCodeNotUniqueError = 611,

            /// <summary>
            /// Enum FieldLengthIsTooLongError for value: FieldLengthIsTooLongError
            /// </summary>
            [EnumMember(Value = "FieldLengthIsTooLongError")]
            FieldLengthIsTooLongError = 612,

            /// <summary>
            /// Enum SetTaxCodesBulkError for value: SetTaxCodesBulkError
            /// </summary>
            [EnumMember(Value = "SetTaxCodesBulkError")]
            SetTaxCodesBulkError = 613,

            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeValueError for value: InvoiceAdditionalApprovalCodeValueError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeValueError")]
            InvoiceAdditionalApprovalCodeValueError = 614,

            /// <summary>
            /// Enum BulkUpdateInvoicePaymentError for value: BulkUpdateInvoicePaymentError
            /// </summary>
            [EnumMember(Value = "BulkUpdateInvoicePaymentError")]
            BulkUpdateInvoicePaymentError = 615,

            /// <summary>
            /// Enum ContractServiceExist for value: ContractServiceExist
            /// </summary>
            [EnumMember(Value = "ContractServiceExist")]
            ContractServiceExist = 616,

            /// <summary>
            /// Enum ContractServiceCantChangeTrade for value: ContractServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeTrade")]
            ContractServiceCantChangeTrade = 617,

            /// <summary>
            /// Enum ContractServiceCantChangeCategory for value: ContractServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeCategory")]
            ContractServiceCantChangeCategory = 618,

            /// <summary>
            /// Enum ContractServiceCantChangeProvider for value: ContractServiceCantChangeProvider
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeProvider")]
            ContractServiceCantChangeProvider = 619,

            /// <summary>
            /// Enum ContractServicePMServiceCantChangeTrade for value: ContractServicePMServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeTrade")]
            ContractServicePMServiceCantChangeTrade = 620,

            /// <summary>
            /// Enum ContractServicePMServiceCantChangeCategory for value: ContractServicePMServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeCategory")]
            ContractServicePMServiceCantChangeCategory = 621,

            /// <summary>
            /// Enum WorkRequestDescriptionIsRequired for value: WorkRequestDescriptionIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestDescriptionIsRequired")]
            WorkRequestDescriptionIsRequired = 622,

            /// <summary>
            /// Enum WorkRequestCallDateIsRequired for value: WorkRequestCallDateIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateIsRequired")]
            WorkRequestCallDateIsRequired = 623,

            /// <summary>
            /// Enum WorkRequestIssueIsRequired for value: WorkRequestIssueIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueIsRequired")]
            WorkRequestIssueIsRequired = 624,

            /// <summary>
            /// Enum WorkRequestCallDateHasWrongFormat for value: WorkRequestCallDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateHasWrongFormat")]
            WorkRequestCallDateHasWrongFormat = 625,

            /// <summary>
            /// Enum WorkRequestScheduledDateHasWrongFormat for value: WorkRequestScheduledDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateHasWrongFormat")]
            WorkRequestScheduledDateHasWrongFormat = 626,

            /// <summary>
            /// Enum InvalidWorkRequestStatus for value: InvalidWorkRequestStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestStatus")]
            InvalidWorkRequestStatus = 627,

            /// <summary>
            /// Enum InvalidWorkRequestExtendedStatus for value: InvalidWorkRequestExtendedStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestExtendedStatus")]
            InvalidWorkRequestExtendedStatus = 628,

            /// <summary>
            /// Enum InvalidWorkRequestCategory for value: InvalidWorkRequestCategory
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCategory")]
            InvalidWorkRequestCategory = 629,

            /// <summary>
            /// Enum InvalidWorkRequestPriority for value: InvalidWorkRequestPriority
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestPriority")]
            InvalidWorkRequestPriority = 630,

            /// <summary>
            /// Enum InvalidWorkRequestCurrency for value: InvalidWorkRequestCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCurrency")]
            InvalidWorkRequestCurrency = 631,

            /// <summary>
            /// Enum InvalidWorkRequestIssueSetup for value: InvalidWorkRequestIssueSetup
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueSetup")]
            InvalidWorkRequestIssueSetup = 632,

            /// <summary>
            /// Enum InvalidWorkRequestIssueArea for value: InvalidWorkRequestIssueArea
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueArea")]
            InvalidWorkRequestIssueArea = 633,

            /// <summary>
            /// Enum InvalidWorkRequestAsset for value: InvalidWorkRequestAsset
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestAsset")]
            InvalidWorkRequestAsset = 634,

            /// <summary>
            /// Enum WorkRequestAttachmentFileNameIsRequired for value: WorkRequestAttachmentFileNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentFileNameIsRequired")]
            WorkRequestAttachmentFileNameIsRequired = 635,

            /// <summary>
            /// Enum WorkRequestAttachmentOriginalNameIsRequired for value: WorkRequestAttachmentOriginalNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentOriginalNameIsRequired")]
            WorkRequestAttachmentOriginalNameIsRequired = 636,

            /// <summary>
            /// Enum WorkRequestIssueProblemCodeIsRequired for value: WorkRequestIssueProblemCodeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemCodeIsRequired")]
            WorkRequestIssueProblemCodeIsRequired = 637,

            /// <summary>
            /// Enum WorkRequestIssueProblemTypeIsRequired for value: WorkRequestIssueProblemTypeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemTypeIsRequired")]
            WorkRequestIssueProblemTypeIsRequired = 638,

            /// <summary>
            /// Enum WorkRequestScheduledDateMustBeGreaterThanCallDate for value: WorkRequestScheduledDateMustBeGreaterThanCallDate
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateMustBeGreaterThanCallDate")]
            WorkRequestScheduledDateMustBeGreaterThanCallDate = 639,

            /// <summary>
            /// Enum InvalidWorkRequestId for value: InvalidWorkRequestId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestId")]
            InvalidWorkRequestId = 640,

            /// <summary>
            /// Enum WorkRequestSearchCallDateFromHasWrongFormat for value: WorkRequestSearchCallDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateFromHasWrongFormat")]
            WorkRequestSearchCallDateFromHasWrongFormat = 641,

            /// <summary>
            /// Enum WorkRequestSearchCallDateToHasWrongFormat for value: WorkRequestSearchCallDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateToHasWrongFormat")]
            WorkRequestSearchCallDateToHasWrongFormat = 642,

            /// <summary>
            /// Enum WorkRequestSearchScheduledDateFromHasWrongFormat for value: WorkRequestSearchScheduledDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateFromHasWrongFormat")]
            WorkRequestSearchScheduledDateFromHasWrongFormat = 643,

            /// <summary>
            /// Enum WorkRequestSearchScheduledDateToHasWrongFormat for value: WorkRequestSearchScheduledDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateToHasWrongFormat")]
            WorkRequestSearchScheduledDateToHasWrongFormat = 644,

            /// <summary>
            /// Enum WorkRequestSearchClosedDateFromHasWrongFormat for value: WorkRequestSearchClosedDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateFromHasWrongFormat")]
            WorkRequestSearchClosedDateFromHasWrongFormat = 645,

            /// <summary>
            /// Enum WorkRequestSearchClosedDateToHasWrongFormat for value: WorkRequestSearchClosedDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateToHasWrongFormat")]
            WorkRequestSearchClosedDateToHasWrongFormat = 646,

            /// <summary>
            /// Enum WorkOrderIsAlreadyCreatedForWorkRequest for value: WorkOrderIsAlreadyCreatedForWorkRequest
            /// </summary>
            [EnumMember(Value = "WorkOrderIsAlreadyCreatedForWorkRequest")]
            WorkOrderIsAlreadyCreatedForWorkRequest = 647,

            /// <summary>
            /// Enum WorkRequestIsClosed for value: WorkRequestIsClosed
            /// </summary>
            [EnumMember(Value = "WorkRequestIsClosed")]
            WorkRequestIsClosed = 648,

            /// <summary>
            /// Enum WorkRequestClosedReasonIsRequiredForClosedStatus for value: WorkRequestClosedReasonIsRequiredForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsRequiredForClosedStatus")]
            WorkRequestClosedReasonIsRequiredForClosedStatus = 649,

            /// <summary>
            /// Enum WorkOrderIdIsRequiredForThisClosedReason for value: WorkOrderIdIsRequiredForThisClosedReason
            /// </summary>
            [EnumMember(Value = "WorkOrderIdIsRequiredForThisClosedReason")]
            WorkOrderIdIsRequiredForThisClosedReason = 650,

            /// <summary>
            /// Enum InvalidWorkRequestClosedReason for value: InvalidWorkRequestClosedReason
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestClosedReason")]
            InvalidWorkRequestClosedReason = 651,

            /// <summary>
            /// Enum WorkRequestClosedReasonIsOnlyForClosedStatus for value: WorkRequestClosedReasonIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsOnlyForClosedStatus")]
            WorkRequestClosedReasonIsOnlyForClosedStatus = 652,

            /// <summary>
            /// Enum InvalidWorkRequestWorkOrderId for value: InvalidWorkRequestWorkOrderId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestWorkOrderId")]
            InvalidWorkRequestWorkOrderId = 653,

            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForClosedStatus for value: WorkRequestWorkOrderIdIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForClosedStatus")]
            WorkRequestWorkOrderIdIsOnlyForClosedStatus = 654,

            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForCertainClosedReason for value: WorkRequestWorkOrderIdIsOnlyForCertainClosedReason
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForCertainClosedReason")]
            WorkRequestWorkOrderIdIsOnlyForCertainClosedReason = 655,

            /// <summary>
            /// Enum InvalidWorkOrderSourceType for value: InvalidWorkOrderSourceType
            /// </summary>
            [EnumMember(Value = "InvalidWorkOrderSourceType")]
            InvalidWorkOrderSourceType = 656,

            /// <summary>
            /// Enum DeclineReasonIdIsRequired for value: DeclineReasonIdIsRequired
            /// </summary>
            [EnumMember(Value = "DeclineReasonIdIsRequired")]
            DeclineReasonIdIsRequired = 657,

            /// <summary>
            /// Enum DeclineReasonDoesntAllowCustomText for value: DeclineReasonDoesntAllowCustomText
            /// </summary>
            [EnumMember(Value = "DeclineReasonDoesntAllowCustomText")]
            DeclineReasonDoesntAllowCustomText = 658,

            /// <summary>
            /// Enum InvalidDeclineReasonId for value: InvalidDeclineReasonId
            /// </summary>
            [EnumMember(Value = "InvalidDeclineReasonId")]
            InvalidDeclineReasonId = 659,

            /// <summary>
            /// Enum MultipleWorkOrdersForPurchaseNumber for value: MultipleWorkOrdersForPurchaseNumber
            /// </summary>
            [EnumMember(Value = "MultipleWorkOrdersForPurchaseNumber")]
            MultipleWorkOrdersForPurchaseNumber = 660,

            /// <summary>
            /// Enum InvoiceMaterialMakupInvalid for value: InvoiceMaterialMakupInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialMakupInvalid")]
            InvoiceMaterialMakupInvalid = 661,

            /// <summary>
            /// Enum MaterialMarkUpDiscrepancyReasonShouldBeStated for value: MaterialMarkUpDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialMarkUpDiscrepancyReasonShouldBeStated")]
            MaterialMarkUpDiscrepancyReasonShouldBeStated = 662,

            /// <summary>
            /// Enum MaterialPriceDiscrepancyReasonShouldBeStated for value: MaterialPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialPriceDiscrepancyReasonShouldBeStated")]
            MaterialPriceDiscrepancyReasonShouldBeStated = 663,

            /// <summary>
            /// Enum OtherPriceDiscrepancyReasonShouldBeStated for value: OtherPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "OtherPriceDiscrepancyReasonShouldBeStated")]
            OtherPriceDiscrepancyReasonShouldBeStated = 664

        }

        /// <summary>
        /// The code of the first error found
        /// </summary>
        /// <value>The code of the first error found</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            /// <summary>
            /// Enum NotAllowed for value: NotAllowed
            /// </summary>
            [EnumMember(Value = "NotAllowed")]
            NotAllowed = 1,

            /// <summary>
            /// Enum EmptyProvider for value: EmptyProvider
            /// </summary>
            [EnumMember(Value = "EmptyProvider")]
            EmptyProvider = 2,

            /// <summary>
            /// Enum InvalidProviderId for value: InvalidProviderId
            /// </summary>
            [EnumMember(Value = "InvalidProviderId")]
            InvalidProviderId = 3,

            /// <summary>
            /// Enum UnknownProvider for value: UnknownProvider
            /// </summary>
            [EnumMember(Value = "UnknownProvider")]
            UnknownProvider = 4,

            /// <summary>
            /// Enum ProviderAlreadyExists for value: ProviderAlreadyExists
            /// </summary>
            [EnumMember(Value = "ProviderAlreadyExists")]
            ProviderAlreadyExists = 5,

            /// <summary>
            /// Enum ProviderIdNotExists for value: ProviderIdNotExists
            /// </summary>
            [EnumMember(Value = "ProviderIdNotExists")]
            ProviderIdNotExists = 6,

            /// <summary>
            /// Enum TimeoutExpiredError for value: TimeoutExpiredError
            /// </summary>
            [EnumMember(Value = "TimeoutExpiredError")]
            TimeoutExpiredError = 7,

            /// <summary>
            /// Enum EmptyContract for value: EmptyContract
            /// </summary>
            [EnumMember(Value = "EmptyContract")]
            EmptyContract = 8,

            /// <summary>
            /// Enum ContractUndefined for value: ContractUndefined
            /// </summary>
            [EnumMember(Value = "ContractUndefined")]
            ContractUndefined = 9,

            /// <summary>
            /// Enum EmptySubscriber for value: EmptySubscriber
            /// </summary>
            [EnumMember(Value = "EmptySubscriber")]
            EmptySubscriber = 10,

            /// <summary>
            /// Enum InvalidSubscriberId for value: InvalidSubscriberId
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberId")]
            InvalidSubscriberId = 11,

            /// <summary>
            /// Enum UnknownSubscriber for value: UnknownSubscriber
            /// </summary>
            [EnumMember(Value = "UnknownSubscriber")]
            UnknownSubscriber = 12,

            /// <summary>
            /// Enum InactiveSubscriber for value: InactiveSubscriber
            /// </summary>
            [EnumMember(Value = "InactiveSubscriber")]
            InactiveSubscriber = 13,

            /// <summary>
            /// Enum EmptySubscriberId for value: EmptySubscriberId
            /// </summary>
            [EnumMember(Value = "EmptySubscriberId")]
            EmptySubscriberId = 14,

            /// <summary>
            /// Enum SubscriberIdNotExists for value: SubscriberIdNotExists
            /// </summary>
            [EnumMember(Value = "SubscriberIdNotExists")]
            SubscriberIdNotExists = 15,

            /// <summary>
            /// Enum InternalError for value: InternalError
            /// </summary>
            [EnumMember(Value = "InternalError")]
            InternalError = 16,

            /// <summary>
            /// Enum DataNotFound for value: DataNotFound
            /// </summary>
            [EnumMember(Value = "DataNotFound")]
            DataNotFound = 17,

            /// <summary>
            /// Enum BadRequest for value: BadRequest
            /// </summary>
            [EnumMember(Value = "BadRequest")]
            BadRequest = 18,

            /// <summary>
            /// Enum UnAuthorized for value: UnAuthorized
            /// </summary>
            [EnumMember(Value = "UnAuthorized")]
            UnAuthorized = 19,

            /// <summary>
            /// Enum UnSupportedApplication for value: UnSupportedApplication
            /// </summary>
            [EnumMember(Value = "UnSupportedApplication")]
            UnSupportedApplication = 20,

            /// <summary>
            /// Enum SubsidiaryUserDisabled for value: SubsidiaryUserDisabled
            /// </summary>
            [EnumMember(Value = "SubsidiaryUserDisabled")]
            SubsidiaryUserDisabled = 21,

            /// <summary>
            /// Enum EmptyLocation for value: EmptyLocation
            /// </summary>
            [EnumMember(Value = "EmptyLocation")]
            EmptyLocation = 22,

            /// <summary>
            /// Enum InvalidLocationId for value: InvalidLocationId
            /// </summary>
            [EnumMember(Value = "InvalidLocationId")]
            InvalidLocationId = 23,

            /// <summary>
            /// Enum UnknownLocation for value: UnknownLocation
            /// </summary>
            [EnumMember(Value = "UnknownLocation")]
            UnknownLocation = 24,

            /// <summary>
            /// Enum LocationNotBelongsToSubscriber for value: LocationNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "LocationNotBelongsToSubscriber")]
            LocationNotBelongsToSubscriber = 25,

            /// <summary>
            /// Enum EmptyLocationCountry for value: EmptyLocationCountry
            /// </summary>
            [EnumMember(Value = "EmptyLocationCountry")]
            EmptyLocationCountry = 26,

            /// <summary>
            /// Enum LocationAlreadyExists for value: LocationAlreadyExists
            /// </summary>
            [EnumMember(Value = "LocationAlreadyExists")]
            LocationAlreadyExists = 27,

            /// <summary>
            /// Enum InvalidStoreId for value: InvalidStoreId
            /// </summary>
            [EnumMember(Value = "InvalidStoreId")]
            InvalidStoreId = 28,

            /// <summary>
            /// Enum LocationEmptyState for value: LocationEmptyState
            /// </summary>
            [EnumMember(Value = "LocationEmptyState")]
            LocationEmptyState = 29,

            /// <summary>
            /// Enum NoAccessToLocation for value: NoAccessToLocation
            /// </summary>
            [EnumMember(Value = "NoAccessToLocation")]
            NoAccessToLocation = 30,

            /// <summary>
            /// Enum LocationAddressValidationError for value: LocationAddressValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressValidationError")]
            LocationAddressValidationError = 31,

            /// <summary>
            /// Enum LocationAddressRequestValidationError for value: LocationAddressRequestValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressRequestValidationError")]
            LocationAddressRequestValidationError = 32,

            /// <summary>
            /// Enum InvalidLocationNoteHeader for value: InvalidLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "InvalidLocationNoteHeader")]
            InvalidLocationNoteHeader = 33,

            /// <summary>
            /// Enum NoAccessToUpdateProtectedNote for value: NoAccessToUpdateProtectedNote
            /// </summary>
            [EnumMember(Value = "NoAccessToUpdateProtectedNote")]
            NoAccessToUpdateProtectedNote = 34,

            /// <summary>
            /// Enum InvalidBusinessHoursFormat for value: InvalidBusinessHoursFormat
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursFormat")]
            InvalidBusinessHoursFormat = 35,

            /// <summary>
            /// Enum WorkingHoursIntersect for value: WorkingHoursIntersect
            /// </summary>
            [EnumMember(Value = "WorkingHoursIntersect")]
            WorkingHoursIntersect = 36,

            /// <summary>
            /// Enum InvalidDayOfWeek for value: InvalidDayOfWeek
            /// </summary>
            [EnumMember(Value = "InvalidDayOfWeek")]
            InvalidDayOfWeek = 37,

            /// <summary>
            /// Enum DuplicateDayOfWeek for value: DuplicateDayOfWeek
            /// </summary>
            [EnumMember(Value = "DuplicateDayOfWeek")]
            DuplicateDayOfWeek = 38,

            /// <summary>
            /// Enum InvalidBusinessHoursInitialSetup for value: InvalidBusinessHoursInitialSetup
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursInitialSetup")]
            InvalidBusinessHoursInitialSetup = 39,

            /// <summary>
            /// Enum BusinessHoursIsEmpty for value: BusinessHoursIsEmpty
            /// </summary>
            [EnumMember(Value = "BusinessHoursIsEmpty")]
            BusinessHoursIsEmpty = 40,

            /// <summary>
            /// Enum InvalidHolidayRepeatByType for value: InvalidHolidayRepeatByType
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatByType")]
            InvalidHolidayRepeatByType = 41,

            /// <summary>
            /// Enum EmptyHolidayListOfDays for value: EmptyHolidayListOfDays
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfDays")]
            EmptyHolidayListOfDays = 42,

            /// <summary>
            /// Enum EmptyHolidayListOfMonths for value: EmptyHolidayListOfMonths
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfMonths")]
            EmptyHolidayListOfMonths = 43,

            /// <summary>
            /// Enum InvalidHolidayMonthName for value: InvalidHolidayMonthName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayMonthName")]
            InvalidHolidayMonthName = 44,

            /// <summary>
            /// Enum InvalidHolidayNameLength for value: InvalidHolidayNameLength
            /// </summary>
            [EnumMember(Value = "InvalidHolidayNameLength")]
            InvalidHolidayNameLength = 45,

            /// <summary>
            /// Enum InvalidHolidayRepeatEvery for value: InvalidHolidayRepeatEvery
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatEvery")]
            InvalidHolidayRepeatEvery = 46,

            /// <summary>
            /// Enum DuplicateMonth for value: DuplicateMonth
            /// </summary>
            [EnumMember(Value = "DuplicateMonth")]
            DuplicateMonth = 47,

            /// <summary>
            /// Enum InvalidHolidayFrequency for value: InvalidHolidayFrequency
            /// </summary>
            [EnumMember(Value = "InvalidHolidayFrequency")]
            InvalidHolidayFrequency = 48,

            /// <summary>
            /// Enum InvalidHolidayStartDate for value: InvalidHolidayStartDate
            /// </summary>
            [EnumMember(Value = "InvalidHolidayStartDate")]
            InvalidHolidayStartDate = 49,

            /// <summary>
            /// Enum InvalidCloseAllDay for value: InvalidCloseAllDay
            /// </summary>
            [EnumMember(Value = "InvalidCloseAllDay")]
            InvalidCloseAllDay = 50,

            /// <summary>
            /// Enum HolidayDoesNotExist for value: HolidayDoesNotExist
            /// </summary>
            [EnumMember(Value = "HolidayDoesNotExist")]
            HolidayDoesNotExist = 51,

            /// <summary>
            /// Enum InvalidFormatParameter for value: InvalidFormatParameter
            /// </summary>
            [EnumMember(Value = "InvalidFormatParameter")]
            InvalidFormatParameter = 52,

            /// <summary>
            /// Enum InvalidLocationCity for value: InvalidLocationCity
            /// </summary>
            [EnumMember(Value = "InvalidLocationCity")]
            InvalidLocationCity = 53,

            /// <summary>
            /// Enum InvalidLocationZip for value: InvalidLocationZip
            /// </summary>
            [EnumMember(Value = "InvalidLocationZip")]
            InvalidLocationZip = 54,

            /// <summary>
            /// Enum InvalidLocationLatitude for value: InvalidLocationLatitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLatitude")]
            InvalidLocationLatitude = 55,

            /// <summary>
            /// Enum InvalidLocationLongitude for value: InvalidLocationLongitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLongitude")]
            InvalidLocationLongitude = 56,

            /// <summary>
            /// Enum InvalidLocationEmail for value: InvalidLocationEmail
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmail")]
            InvalidLocationEmail = 57,

            /// <summary>
            /// Enum InvalidLocationName for value: InvalidLocationName
            /// </summary>
            [EnumMember(Value = "InvalidLocationName")]
            InvalidLocationName = 58,

            /// <summary>
            /// Enum InvalidLocationState for value: InvalidLocationState
            /// </summary>
            [EnumMember(Value = "InvalidLocationState")]
            InvalidLocationState = 59,

            /// <summary>
            /// Enum InvalidLocationAddlAddress for value: InvalidLocationAddlAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationAddlAddress")]
            InvalidLocationAddlAddress = 60,

            /// <summary>
            /// Enum InvalidLocationMainAddress for value: InvalidLocationMainAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationMainAddress")]
            InvalidLocationMainAddress = 61,

            /// <summary>
            /// Enum InvalidLocationCountry for value: InvalidLocationCountry
            /// </summary>
            [EnumMember(Value = "InvalidLocationCountry")]
            InvalidLocationCountry = 62,

            /// <summary>
            /// Enum InvalidLocationRegion for value: InvalidLocationRegion
            /// </summary>
            [EnumMember(Value = "InvalidLocationRegion")]
            InvalidLocationRegion = 63,

            /// <summary>
            /// Enum InvalidLocationDistrict for value: InvalidLocationDistrict
            /// </summary>
            [EnumMember(Value = "InvalidLocationDistrict")]
            InvalidLocationDistrict = 64,

            /// <summary>
            /// Enum InvalidLocationPhone for value: InvalidLocationPhone
            /// </summary>
            [EnumMember(Value = "InvalidLocationPhone")]
            InvalidLocationPhone = 65,

            /// <summary>
            /// Enum InvalidLocationContact for value: InvalidLocationContact
            /// </summary>
            [EnumMember(Value = "InvalidLocationContact")]
            InvalidLocationContact = 66,

            /// <summary>
            /// Enum InvalidLocationFaxNumber for value: InvalidLocationFaxNumber
            /// </summary>
            [EnumMember(Value = "InvalidLocationFaxNumber")]
            InvalidLocationFaxNumber = 67,

            /// <summary>
            /// Enum LocationCountryNotFound for value: LocationCountryNotFound
            /// </summary>
            [EnumMember(Value = "LocationCountryNotFound")]
            LocationCountryNotFound = 68,

            /// <summary>
            /// Enum LocationStateNotFound for value: LocationStateNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateNotFound")]
            LocationStateNotFound = 69,

            /// <summary>
            /// Enum LocationCityNotFound for value: LocationCityNotFound
            /// </summary>
            [EnumMember(Value = "LocationCityNotFound")]
            LocationCityNotFound = 70,

            /// <summary>
            /// Enum LocationIdNotExists for value: LocationIdNotExists
            /// </summary>
            [EnumMember(Value = "LocationIdNotExists")]
            LocationIdNotExists = 71,

            /// <summary>
            /// Enum InvalidLocationEmailLength for value: InvalidLocationEmailLength
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmailLength")]
            InvalidLocationEmailLength = 72,

            /// <summary>
            /// Enum LocationStateIdNotFound for value: LocationStateIdNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateIdNotFound")]
            LocationStateIdNotFound = 73,

            /// <summary>
            /// Enum IncorrectCombinationStateAndStateId for value: IncorrectCombinationStateAndStateId
            /// </summary>
            [EnumMember(Value = "IncorrectCombinationStateAndStateId")]
            IncorrectCombinationStateAndStateId = 74,

            /// <summary>
            /// Enum InvalidSubscriberIds for value: InvalidSubscriberIds
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberIds")]
            InvalidSubscriberIds = 75,

            /// <summary>
            /// Enum InvalidLocalizationSettings for value: InvalidLocalizationSettings
            /// </summary>
            [EnumMember(Value = "InvalidLocalizationSettings")]
            InvalidLocalizationSettings = 76,

            /// <summary>
            /// Enum LandlordResponsibilityNotFound for value: LandlordResponsibilityNotFound
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityNotFound")]
            LandlordResponsibilityNotFound = 77,

            /// <summary>
            /// Enum LandlordResponsibilityAlreadyExists for value: LandlordResponsibilityAlreadyExists
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityAlreadyExists")]
            LandlordResponsibilityAlreadyExists = 78,

            /// <summary>
            /// Enum EmptyLocationIds for value: EmptyLocationIds
            /// </summary>
            [EnumMember(Value = "EmptyLocationIds")]
            EmptyLocationIds = 79,

            /// <summary>
            /// Enum AttachmentNotExist for value: AttachmentNotExist
            /// </summary>
            [EnumMember(Value = "AttachmentNotExist")]
            AttachmentNotExist = 80,

            /// <summary>
            /// Enum InvalidTradeId for value: InvalidTradeId
            /// </summary>
            [EnumMember(Value = "InvalidTradeId")]
            InvalidTradeId = 81,

            /// <summary>
            /// Enum InvalidCategoryId for value: InvalidCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidCategoryId")]
            InvalidCategoryId = 82,

            /// <summary>
            /// Enum InvalidOverrideCategoryId for value: InvalidOverrideCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidOverrideCategoryId")]
            InvalidOverrideCategoryId = 83,

            /// <summary>
            /// Enum InvalidOverridePriorityId for value: InvalidOverridePriorityId
            /// </summary>
            [EnumMember(Value = "InvalidOverridePriorityId")]
            InvalidOverridePriorityId = 84,

            /// <summary>
            /// Enum LeaseNoteExceedMaxLength for value: LeaseNoteExceedMaxLength
            /// </summary>
            [EnumMember(Value = "LeaseNoteExceedMaxLength")]
            LeaseNoteExceedMaxLength = 85,

            /// <summary>
            /// Enum InvalidOverrideProviderRank for value: InvalidOverrideProviderRank
            /// </summary>
            [EnumMember(Value = "InvalidOverrideProviderRank")]
            InvalidOverrideProviderRank = 86,

            /// <summary>
            /// Enum InvalidOverrideNTE for value: InvalidOverrideNTE
            /// </summary>
            [EnumMember(Value = "InvalidOverrideNTE")]
            InvalidOverrideNTE = 87,

            /// <summary>
            /// Enum EmptyTrade for value: EmptyTrade
            /// </summary>
            [EnumMember(Value = "EmptyTrade")]
            EmptyTrade = 88,

            /// <summary>
            /// Enum InvalidTrade for value: InvalidTrade
            /// </summary>
            [EnumMember(Value = "InvalidTrade")]
            InvalidTrade = 89,

            /// <summary>
            /// Enum TradeNotBelongsToSubscriber for value: TradeNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "TradeNotBelongsToSubscriber")]
            TradeNotBelongsToSubscriber = 90,

            /// <summary>
            /// Enum InvalidPrimaryTrade for value: InvalidPrimaryTrade
            /// </summary>
            [EnumMember(Value = "InvalidPrimaryTrade")]
            InvalidPrimaryTrade = 91,

            /// <summary>
            /// Enum InvalidTradeForSubscriber for value: InvalidTradeForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidTradeForSubscriber")]
            InvalidTradeForSubscriber = 92,

            /// <summary>
            /// Enum InvalidCategoryForSubscriber for value: InvalidCategoryForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidCategoryForSubscriber")]
            InvalidCategoryForSubscriber = 93,

            /// <summary>
            /// Enum GlCodeAlreadyExists for value: GlCodeAlreadyExists
            /// </summary>
            [EnumMember(Value = "GlCodeAlreadyExists")]
            GlCodeAlreadyExists = 94,

            /// <summary>
            /// Enum GlCodeNotExists for value: GlCodeNotExists
            /// </summary>
            [EnumMember(Value = "GlCodeNotExists")]
            GlCodeNotExists = 95,

            /// <summary>
            /// Enum InvalidGlCodeUpdate for value: InvalidGlCodeUpdate
            /// </summary>
            [EnumMember(Value = "InvalidGlCodeUpdate")]
            InvalidGlCodeUpdate = 96,

            /// <summary>
            /// Enum EmptyGlCode for value: EmptyGlCode
            /// </summary>
            [EnumMember(Value = "EmptyGlCode")]
            EmptyGlCode = 97,

            /// <summary>
            /// Enum TradeAlreadyExists for value: TradeAlreadyExists
            /// </summary>
            [EnumMember(Value = "TradeAlreadyExists")]
            TradeAlreadyExists = 98,

            /// <summary>
            /// Enum InvalidNTETrade for value: InvalidNTETrade
            /// </summary>
            [EnumMember(Value = "InvalidNTETrade")]
            InvalidNTETrade = 99,

            /// <summary>
            /// Enum TradeNotExists for value: TradeNotExists
            /// </summary>
            [EnumMember(Value = "TradeNotExists")]
            TradeNotExists = 100,

            /// <summary>
            /// Enum TradeAlreadyInUse for value: TradeAlreadyInUse
            /// </summary>
            [EnumMember(Value = "TradeAlreadyInUse")]
            TradeAlreadyInUse = 101,

            /// <summary>
            /// Enum EmptyUser for value: EmptyUser
            /// </summary>
            [EnumMember(Value = "EmptyUser")]
            EmptyUser = 102,

            /// <summary>
            /// Enum EmptyCreatedBy for value: EmptyCreatedBy
            /// </summary>
            [EnumMember(Value = "EmptyCreatedBy")]
            EmptyCreatedBy = 103,

            /// <summary>
            /// Enum InvalidUserName for value: InvalidUserName
            /// </summary>
            [EnumMember(Value = "InvalidUserName")]
            InvalidUserName = 104,

            /// <summary>
            /// Enum NotProviderUser for value: NotProviderUser
            /// </summary>
            [EnumMember(Value = "NotProviderUser")]
            NotProviderUser = 105,

            /// <summary>
            /// Enum UserHasNoPermissions for value: UserHasNoPermissions
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissions")]
            UserHasNoPermissions = 106,

            /// <summary>
            /// Enum RestrictedAccount for value: RestrictedAccount
            /// </summary>
            [EnumMember(Value = "RestrictedAccount")]
            RestrictedAccount = 107,

            /// <summary>
            /// Enum UserAlreadyExists for value: UserAlreadyExists
            /// </summary>
            [EnumMember(Value = "UserAlreadyExists")]
            UserAlreadyExists = 108,

            /// <summary>
            /// Enum UserHasNoPermissionsEditWO for value: UserHasNoPermissionsEditWO
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissionsEditWO")]
            UserHasNoPermissionsEditWO = 109,

            /// <summary>
            /// Enum UserEmailAddressIsMissing for value: UserEmailAddressIsMissing
            /// </summary>
            [EnumMember(Value = "UserEmailAddressIsMissing")]
            UserEmailAddressIsMissing = 110,

            /// <summary>
            /// Enum InvalidSubsriberProviderId for value: InvalidSubsriberProviderId
            /// </summary>
            [EnumMember(Value = "InvalidSubsriberProviderId")]
            InvalidSubsriberProviderId = 111,

            /// <summary>
            /// Enum LanguageNameNotFound for value: LanguageNameNotFound
            /// </summary>
            [EnumMember(Value = "LanguageNameNotFound")]
            LanguageNameNotFound = 112,

            /// <summary>
            /// Enum InvalidLanguageId for value: InvalidLanguageId
            /// </summary>
            [EnumMember(Value = "InvalidLanguageId")]
            InvalidLanguageId = 113,

            /// <summary>
            /// Enum LanguageIdNotFound for value: LanguageIdNotFound
            /// </summary>
            [EnumMember(Value = "LanguageIdNotFound")]
            LanguageIdNotFound = 114,

            /// <summary>
            /// Enum UseBothSubscriberIdProviderId for value: UseBothSubscriberIdProviderId
            /// </summary>
            [EnumMember(Value = "UseBothSubscriberIdProviderId")]
            UseBothSubscriberIdProviderId = 115,

            /// <summary>
            /// Enum EmptyWoProblem for value: EmptyWoProblem
            /// </summary>
            [EnumMember(Value = "EmptyWoProblem")]
            EmptyWoProblem = 116,

            /// <summary>
            /// Enum InvalidWoProblemSource for value: InvalidWoProblemSource
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemSource")]
            InvalidWoProblemSource = 117,

            /// <summary>
            /// Enum InvalidWoProblemDescription for value: InvalidWoProblemDescription
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemDescription")]
            InvalidWoProblemDescription = 118,

            /// <summary>
            /// Enum InvalidWoProblemCode for value: InvalidWoProblemCode
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemCode")]
            InvalidWoProblemCode = 119,

            /// <summary>
            /// Enum InvalidWoStatus for value: InvalidWoStatus
            /// </summary>
            [EnumMember(Value = "InvalidWoStatus")]
            InvalidWoStatus = 120,

            /// <summary>
            /// Enum InvalidWoNte for value: InvalidWoNte
            /// </summary>
            [EnumMember(Value = "InvalidWoNte")]
            InvalidWoNte = 121,

            /// <summary>
            /// Enum InvalidWoCaller for value: InvalidWoCaller
            /// </summary>
            [EnumMember(Value = "InvalidWoCaller")]
            InvalidWoCaller = 122,

            /// <summary>
            /// Enum InvalidWoCallDate for value: InvalidWoCallDate
            /// </summary>
            [EnumMember(Value = "InvalidWoCallDate")]
            InvalidWoCallDate = 123,

            /// <summary>
            /// Enum InvalidWoScheduledDate for value: InvalidWoScheduledDate
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDate")]
            InvalidWoScheduledDate = 124,

            /// <summary>
            /// Enum InvalidWoScheduledDateGreaterThanMaxAllowed for value: InvalidWoScheduledDateGreaterThanMaxAllowed
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDateGreaterThanMaxAllowed")]
            InvalidWoScheduledDateGreaterThanMaxAllowed = 125,

            /// <summary>
            /// Enum EmptyWoCategory for value: EmptyWoCategory
            /// </summary>
            [EnumMember(Value = "EmptyWoCategory")]
            EmptyWoCategory = 126,

            /// <summary>
            /// Enum InvalidWoCategory for value: InvalidWoCategory
            /// </summary>
            [EnumMember(Value = "InvalidWoCategory")]
            InvalidWoCategory = 127,

            /// <summary>
            /// Enum EmptyWoPriority for value: EmptyWoPriority
            /// </summary>
            [EnumMember(Value = "EmptyWoPriority")]
            EmptyWoPriority = 128,

            /// <summary>
            /// Enum InvalidWoPriority for value: InvalidWoPriority
            /// </summary>
            [EnumMember(Value = "InvalidWoPriority")]
            InvalidWoPriority = 129,

            /// <summary>
            /// Enum InvalidWoCurrency for value: InvalidWoCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWoCurrency")]
            InvalidWoCurrency = 130,

            /// <summary>
            /// Enum InvalidWoSetupId for value: InvalidWoSetupId
            /// </summary>
            [EnumMember(Value = "InvalidWoSetupId")]
            InvalidWoSetupId = 131,

            /// <summary>
            /// Enum AttachmentsRequired for value: AttachmentsRequired
            /// </summary>
            [EnumMember(Value = "AttachmentsRequired")]
            AttachmentsRequired = 132,

            /// <summary>
            /// Enum InvalidWoIdentifier for value: InvalidWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifier")]
            InvalidWoIdentifier = 133,

            /// <summary>
            /// Enum EquipmentRequired for value: EquipmentRequired
            /// </summary>
            [EnumMember(Value = "EquipmentRequired")]
            EquipmentRequired = 134,

            /// <summary>
            /// Enum WoNteOverflow for value: WoNteOverflow
            /// </summary>
            [EnumMember(Value = "WoNteOverflow")]
            WoNteOverflow = 135,

            /// <summary>
            /// Enum InvalidWoPurchaseNumber for value: InvalidWoPurchaseNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoPurchaseNumber")]
            InvalidWoPurchaseNumber = 136,

            /// <summary>
            /// Enum InvalidWoStateForUpdate for value: InvalidWoStateForUpdate
            /// </summary>
            [EnumMember(Value = "InvalidWoStateForUpdate")]
            InvalidWoStateForUpdate = 137,

            /// <summary>
            /// Enum InvalidPagingParameter for value: InvalidPagingParameter
            /// </summary>
            [EnumMember(Value = "InvalidPagingParameter")]
            InvalidPagingParameter = 138,

            /// <summary>
            /// Enum InvalidWoNumber for value: InvalidWoNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoNumber")]
            InvalidWoNumber = 139,

            /// <summary>
            /// Enum CheckInDenied for value: CheckInDenied
            /// </summary>
            [EnumMember(Value = "CheckInDenied")]
            CheckInDenied = 140,

            /// <summary>
            /// Enum CheckOutDenied for value: CheckOutDenied
            /// </summary>
            [EnumMember(Value = "CheckOutDenied")]
            CheckOutDenied = 141,

            /// <summary>
            /// Enum WoScheduledDateLessThenReassignDate for value: WoScheduledDateLessThenReassignDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenReassignDate")]
            WoScheduledDateLessThenReassignDate = 142,

            /// <summary>
            /// Enum WoScheduledDateLessThenCallDate for value: WoScheduledDateLessThenCallDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenCallDate")]
            WoScheduledDateLessThenCallDate = 143,

            /// <summary>
            /// Enum InvalidWoActionReason for value: InvalidWoActionReason
            /// </summary>
            [EnumMember(Value = "InvalidWoActionReason")]
            InvalidWoActionReason = 144,

            /// <summary>
            /// Enum EmptySubscriberProperty for value: EmptySubscriberProperty
            /// </summary>
            [EnumMember(Value = "EmptySubscriberProperty")]
            EmptySubscriberProperty = 145,

            /// <summary>
            /// Enum WorkOrderUpdateError for value: WorkOrderUpdateError
            /// </summary>
            [EnumMember(Value = "WorkOrderUpdateError")]
            WorkOrderUpdateError = 146,

            /// <summary>
            /// Enum MissedWoNteDetails for value: MissedWoNteDetails
            /// </summary>
            [EnumMember(Value = "MissedWoNteDetails")]
            MissedWoNteDetails = 147,

            /// <summary>
            /// Enum InvalidLinkedWoIdentifier for value: InvalidLinkedWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidLinkedWoIdentifier")]
            InvalidLinkedWoIdentifier = 148,

            /// <summary>
            /// Enum WoIsOnHold for value: WoIsOnHold
            /// </summary>
            [EnumMember(Value = "WoIsOnHold")]
            WoIsOnHold = 149,

            /// <summary>
            /// Enum InvalidWoTrade for value: InvalidWoTrade
            /// </summary>
            [EnumMember(Value = "InvalidWoTrade")]
            InvalidWoTrade = 150,

            /// <summary>
            /// Enum InvalidStarScore for value: InvalidStarScore
            /// </summary>
            [EnumMember(Value = "InvalidStarScore")]
            InvalidStarScore = 151,

            /// <summary>
            /// Enum WorkOrderAlreadyRated for value: WorkOrderAlreadyRated
            /// </summary>
            [EnumMember(Value = "WorkOrderAlreadyRated")]
            WorkOrderAlreadyRated = 152,

            /// <summary>
            /// Enum AttachmentThumbnailNotAvailable for value: AttachmentThumbnailNotAvailable
            /// </summary>
            [EnumMember(Value = "AttachmentThumbnailNotAvailable")]
            AttachmentThumbnailNotAvailable = 153,

            /// <summary>
            /// Enum InvalidWoIdentifierOrPin for value: InvalidWoIdentifierOrPin
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifierOrPin")]
            InvalidWoIdentifierOrPin = 154,

            /// <summary>
            /// Enum InvalidTimeZoneHeader for value: InvalidTimeZoneHeader
            /// </summary>
            [EnumMember(Value = "InvalidTimeZoneHeader")]
            InvalidTimeZoneHeader = 155,

            /// <summary>
            /// Enum RefrigerantWasUsedShouldBeYesOrNo for value: RefrigerantWasUsedShouldBeYesOrNo
            /// </summary>
            [EnumMember(Value = "RefrigerantWasUsedShouldBeYesOrNo")]
            RefrigerantWasUsedShouldBeYesOrNo = 156,

            /// <summary>
            /// Enum CheckInDeniedOutsideGeolocation for value: CheckInDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckInDeniedOutsideGeolocation")]
            CheckInDeniedOutsideGeolocation = 157,

            /// <summary>
            /// Enum CheckOutDeniedOutsideGeolocation for value: CheckOutDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckOutDeniedOutsideGeolocation")]
            CheckOutDeniedOutsideGeolocation = 158,

            /// <summary>
            /// Enum LeakDetectorAuditShouldBeCreated for value: LeakDetectorAuditShouldBeCreated
            /// </summary>
            [EnumMember(Value = "LeakDetectorAuditShouldBeCreated")]
            LeakDetectorAuditShouldBeCreated = 159,

            /// <summary>
            /// Enum CheckInOutPremature for value: CheckInOutPremature
            /// </summary>
            [EnumMember(Value = "CheckInOutPremature")]
            CheckInOutPremature = 160,

            /// <summary>
            /// Enum WorkOrderAttachmentsSizeExceeded for value: WorkOrderAttachmentsSizeExceeded
            /// </summary>
            [EnumMember(Value = "WorkOrderAttachmentsSizeExceeded")]
            WorkOrderAttachmentsSizeExceeded = 161,

            /// <summary>
            /// Enum WorkOrderNotFound for value: WorkOrderNotFound
            /// </summary>
            [EnumMember(Value = "WorkOrderNotFound")]
            WorkOrderNotFound = 162,

            /// <summary>
            /// Enum WorkOrderCreateError for value: WorkOrderCreateError
            /// </summary>
            [EnumMember(Value = "WorkOrderCreateError")]
            WorkOrderCreateError = 163,

            /// <summary>
            /// Enum InvalidSetupId for value: InvalidSetupId
            /// </summary>
            [EnumMember(Value = "InvalidSetupId")]
            InvalidSetupId = 164,

            /// <summary>
            /// Enum IssueListNotFound for value: IssueListNotFound
            /// </summary>
            [EnumMember(Value = "IssueListNotFound")]
            IssueListNotFound = 165,

            /// <summary>
            /// Enum InvalidIssueListField for value: InvalidIssueListField
            /// </summary>
            [EnumMember(Value = "InvalidIssueListField")]
            InvalidIssueListField = 166,

            /// <summary>
            /// Enum InactiveTemplateType for value: InactiveTemplateType
            /// </summary>
            [EnumMember(Value = "InactiveTemplateType")]
            InactiveTemplateType = 167,

            /// <summary>
            /// Enum SiteAuditNotFound for value: SiteAuditNotFound
            /// </summary>
            [EnumMember(Value = "SiteAuditNotFound")]
            SiteAuditNotFound = 168,

            /// <summary>
            /// Enum SiteAuditUpdateError for value: SiteAuditUpdateError
            /// </summary>
            [EnumMember(Value = "SiteAuditUpdateError")]
            SiteAuditUpdateError = 169,

            /// <summary>
            /// Enum InvalidSiteAuditParameters for value: InvalidSiteAuditParameters
            /// </summary>
            [EnumMember(Value = "InvalidSiteAuditParameters")]
            InvalidSiteAuditParameters = 170,

            /// <summary>
            /// Enum InvalidAdditionalApprovalCode for value: InvalidAdditionalApprovalCode
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCode")]
            InvalidAdditionalApprovalCode = 171,

            /// <summary>
            /// Enum InvalidAdditionalApprovalCodeValue for value: InvalidAdditionalApprovalCodeValue
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCodeValue")]
            InvalidAdditionalApprovalCodeValue = 172,

            /// <summary>
            /// Enum AdditionalApprovalCodeIsDisabled for value: AdditionalApprovalCodeIsDisabled
            /// </summary>
            [EnumMember(Value = "AdditionalApprovalCodeIsDisabled")]
            AdditionalApprovalCodeIsDisabled = 173,

            /// <summary>
            /// Enum InvalidOtherDesc for value: InvalidOtherDesc
            /// </summary>
            [EnumMember(Value = "InvalidOtherDesc")]
            InvalidOtherDesc = 174,

            /// <summary>
            /// Enum InvalidTax2Name for value: InvalidTax2Name
            /// </summary>
            [EnumMember(Value = "InvalidTax2Name")]
            InvalidTax2Name = 175,

            /// <summary>
            /// Enum InvoiceInconsistentAmounts for value: InvoiceInconsistentAmounts
            /// </summary>
            [EnumMember(Value = "InvoiceInconsistentAmounts")]
            InvoiceInconsistentAmounts = 176,

            /// <summary>
            /// Enum InvoiceInvalidTotal for value: InvoiceInvalidTotal
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTotal")]
            InvoiceInvalidTotal = 177,

            /// <summary>
            /// Enum InvoiceTotalGreaterNte for value: InvoiceTotalGreaterNte
            /// </summary>
            [EnumMember(Value = "InvoiceTotalGreaterNte")]
            InvoiceTotalGreaterNte = 178,

            /// <summary>
            /// Enum InvoiceExists for value: InvoiceExists
            /// </summary>
            [EnumMember(Value = "InvoiceExists")]
            InvoiceExists = 179,

            /// <summary>
            /// Enum CreatingInvoiceError for value: CreatingInvoiceError
            /// </summary>
            [EnumMember(Value = "CreatingInvoiceError")]
            CreatingInvoiceError = 180,

            /// <summary>
            /// Enum DuplInvNumber for value: DuplInvNumber
            /// </summary>
            [EnumMember(Value = "DuplInvNumber")]
            DuplInvNumber = 181,

            /// <summary>
            /// Enum InvoiceTotalNull for value: InvoiceTotalNull
            /// </summary>
            [EnumMember(Value = "InvoiceTotalNull")]
            InvoiceTotalNull = 182,

            /// <summary>
            /// Enum InvComplDateNull for value: InvComplDateNull
            /// </summary>
            [EnumMember(Value = "InvComplDateNull")]
            InvComplDateNull = 183,

            /// <summary>
            /// Enum InvDateLessComplDate for value: InvDateLessComplDate
            /// </summary>
            [EnumMember(Value = "InvDateLessComplDate")]
            InvDateLessComplDate = 184,

            /// <summary>
            /// Enum InvoiceNotAuto for value: InvoiceNotAuto
            /// </summary>
            [EnumMember(Value = "InvoiceNotAuto")]
            InvoiceNotAuto = 185,

            /// <summary>
            /// Enum ESignatureRequired for value: ESignatureRequired
            /// </summary>
            [EnumMember(Value = "ESignatureRequired")]
            ESignatureRequired = 186,

            /// <summary>
            /// Enum InvWoNotFound for value: InvWoNotFound
            /// </summary>
            [EnumMember(Value = "InvWoNotFound")]
            InvWoNotFound = 187,

            /// <summary>
            /// Enum InvWrongWoCurr for value: InvWrongWoCurr
            /// </summary>
            [EnumMember(Value = "InvWrongWoCurr")]
            InvWrongWoCurr = 188,

            /// <summary>
            /// Enum InvWoCurrNotFound for value: InvWoCurrNotFound
            /// </summary>
            [EnumMember(Value = "InvWoCurrNotFound")]
            InvWoCurrNotFound = 189,

            /// <summary>
            /// Enum InvoicingDisabled for value: InvoicingDisabled
            /// </summary>
            [EnumMember(Value = "InvoicingDisabled")]
            InvoicingDisabled = 190,

            /// <summary>
            /// Enum InvCreationUnexpectedRes for value: InvCreationUnexpectedRes
            /// </summary>
            [EnumMember(Value = "InvCreationUnexpectedRes")]
            InvCreationUnexpectedRes = 191,

            /// <summary>
            /// Enum InvoiceInvalidLaborAmount for value: InvoiceInvalidLaborAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborAmount")]
            InvoiceInvalidLaborAmount = 192,

            /// <summary>
            /// Enum InvoiceInvalidMaterialAmount for value: InvoiceInvalidMaterialAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialAmount")]
            InvoiceInvalidMaterialAmount = 193,

            /// <summary>
            /// Enum InvDateOld for value: InvDateOld
            /// </summary>
            [EnumMember(Value = "InvDateOld")]
            InvDateOld = 194,

            /// <summary>
            /// Enum InvDateGreater for value: InvDateGreater
            /// </summary>
            [EnumMember(Value = "InvDateGreater")]
            InvDateGreater = 195,

            /// <summary>
            /// Enum InvoiceMaterialDescriptionLengthOverflow for value: InvoiceMaterialDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialDescriptionLengthOverflow")]
            InvoiceMaterialDescriptionLengthOverflow = 196,

            /// <summary>
            /// Enum InvoiceTaxNotValidated for value: InvoiceTaxNotValidated
            /// </summary>
            [EnumMember(Value = "InvoiceTaxNotValidated")]
            InvoiceTaxNotValidated = 197,

            /// <summary>
            /// Enum InvoiceMaterialPartNumberLengthOverflow for value: InvoiceMaterialPartNumberLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialPartNumberLengthOverflow")]
            InvoiceMaterialPartNumberLengthOverflow = 198,

            /// <summary>
            /// Enum TaxValidationError for value: TaxValidationError
            /// </summary>
            [EnumMember(Value = "TaxValidationError")]
            TaxValidationError = 199,

            /// <summary>
            /// Enum TaxExemptionError for value: TaxExemptionError
            /// </summary>
            [EnumMember(Value = "TaxExemptionError")]
            TaxExemptionError = 200,

            /// <summary>
            /// Enum InvalidInvoiceNumber for value: InvalidInvoiceNumber
            /// </summary>
            [EnumMember(Value = "InvalidInvoiceNumber")]
            InvalidInvoiceNumber = 201,

            /// <summary>
            /// Enum GetApprovalLevelsError for value: GetApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsError")]
            GetApprovalLevelsError = 202,

            /// <summary>
            /// Enum InvoiceAddUsersToMliLevelsError for value: InvoiceAddUsersToMliLevelsError
            /// </summary>
            [EnumMember(Value = "InvoiceAddUsersToMliLevelsError")]
            InvoiceAddUsersToMliLevelsError = 203,

            /// <summary>
            /// Enum InvoiceAddDeleteLocationsToMliLevelUserError for value: InvoiceAddDeleteLocationsToMliLevelUserError
            /// </summary>
            [EnumMember(Value = "InvoiceAddDeleteLocationsToMliLevelUserError")]
            InvoiceAddDeleteLocationsToMliLevelUserError = 204,

            /// <summary>
            /// Enum InvoiceUpdateMLiLevelError for value: InvoiceUpdateMLiLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceUpdateMLiLevelError")]
            InvoiceUpdateMLiLevelError = 205,

            /// <summary>
            /// Enum InvoiceDeleteMliLevelError for value: InvoiceDeleteMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteMliLevelError")]
            InvoiceDeleteMliLevelError = 206,

            /// <summary>
            /// Enum InvoiceDeleteUsersFromMliLevelError for value: InvoiceDeleteUsersFromMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteUsersFromMliLevelError")]
            InvoiceDeleteUsersFromMliLevelError = 207,

            /// <summary>
            /// Enum ApprovalLevelNameLengthOverflow for value: ApprovalLevelNameLengthOverflow
            /// </summary>
            [EnumMember(Value = "ApprovalLevelNameLengthOverflow")]
            ApprovalLevelNameLengthOverflow = 208,

            /// <summary>
            /// Enum GstTaxError for value: GstTaxError
            /// </summary>
            [EnumMember(Value = "GstTaxError")]
            GstTaxError = 209,

            /// <summary>
            /// Enum Tax2Error for value: Tax2Error
            /// </summary>
            [EnumMember(Value = "Tax2Error")]
            Tax2Error = 210,

            /// <summary>
            /// Enum GetApprovalLevelsAndLocationsByUserError for value: GetApprovalLevelsAndLocationsByUserError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsAndLocationsByUserError")]
            GetApprovalLevelsAndLocationsByUserError = 211,

            /// <summary>
            /// Enum GetAssignedUserShortInfoError for value: GetAssignedUserShortInfoError
            /// </summary>
            [EnumMember(Value = "GetAssignedUserShortInfoError")]
            GetAssignedUserShortInfoError = 212,

            /// <summary>
            /// Enum AssignAllLocationsToApprovalLevelAndUserError for value: AssignAllLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "AssignAllLocationsToApprovalLevelAndUserError")]
            AssignAllLocationsToApprovalLevelAndUserError = 213,

            /// <summary>
            /// Enum GetLocationsForApprovalLevelAndAssignedUserError for value: GetLocationsForApprovalLevelAndAssignedUserError
            /// </summary>
            [EnumMember(Value = "GetLocationsForApprovalLevelAndAssignedUserError")]
            GetLocationsForApprovalLevelAndAssignedUserError = 214,

            /// <summary>
            /// Enum GetLocationsBySubscriberError for value: GetLocationsBySubscriberError
            /// </summary>
            [EnumMember(Value = "GetLocationsBySubscriberError")]
            GetLocationsBySubscriberError = 215,

            /// <summary>
            /// Enum AssignUserWithLocationsToApprovalLevelError for value: AssignUserWithLocationsToApprovalLevelError
            /// </summary>
            [EnumMember(Value = "AssignUserWithLocationsToApprovalLevelError")]
            AssignUserWithLocationsToApprovalLevelError = 216,

            /// <summary>
            /// Enum ReAssignUserWithLocationsToNewApprovalLevelError for value: ReAssignUserWithLocationsToNewApprovalLevelError
            /// </summary>
            [EnumMember(Value = "ReAssignUserWithLocationsToNewApprovalLevelError")]
            ReAssignUserWithLocationsToNewApprovalLevelError = 217,

            /// <summary>
            /// Enum ReAssignLocationsToApprovalLevelAndUserError for value: ReAssignLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "ReAssignLocationsToApprovalLevelAndUserError")]
            ReAssignLocationsToApprovalLevelAndUserError = 218,

            /// <summary>
            /// Enum OutstandingBalance for value: OutstandingBalance
            /// </summary>
            [EnumMember(Value = "OutstandingBalance")]
            OutstandingBalance = 219,

            /// <summary>
            /// Enum InvoiceTaxDetailsEmpty for value: InvoiceTaxDetailsEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsEmpty")]
            InvoiceTaxDetailsEmpty = 220,

            /// <summary>
            /// Enum InvoiceTaxDetailsIncorrectSum for value: InvoiceTaxDetailsIncorrectSum
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsIncorrectSum")]
            InvoiceTaxDetailsIncorrectSum = 221,

            /// <summary>
            /// Enum MultipleUsersForLocationIsNotAllowed for value: MultipleUsersForLocationIsNotAllowed
            /// </summary>
            [EnumMember(Value = "MultipleUsersForLocationIsNotAllowed")]
            MultipleUsersForLocationIsNotAllowed = 222,

            /// <summary>
            /// Enum UserAssignedToOtherLevel for value: UserAssignedToOtherLevel
            /// </summary>
            [EnumMember(Value = "UserAssignedToOtherLevel")]
            UserAssignedToOtherLevel = 223,

            /// <summary>
            /// Enum UserDoesNotExist for value: UserDoesNotExist
            /// </summary>
            [EnumMember(Value = "UserDoesNotExist")]
            UserDoesNotExist = 224,

            /// <summary>
            /// Enum LaborLineItemRequired for value: LaborLineItemRequired
            /// </summary>
            [EnumMember(Value = "LaborLineItemRequired")]
            LaborLineItemRequired = 225,

            /// <summary>
            /// Enum MaterialLineItemRequired for value: MaterialLineItemRequired
            /// </summary>
            [EnumMember(Value = "MaterialLineItemRequired")]
            MaterialLineItemRequired = 226,

            /// <summary>
            /// Enum InvoiceDoesntExist for value: InvoiceDoesntExist
            /// </summary>
            [EnumMember(Value = "InvoiceDoesntExist")]
            InvoiceDoesntExist = 227,

            /// <summary>
            /// Enum InvoiceStarUnstarFailed for value: InvoiceStarUnstarFailed
            /// </summary>
            [EnumMember(Value = "InvoiceStarUnstarFailed")]
            InvoiceStarUnstarFailed = 228,

            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidInvoiceStatusError for value: InvoiceBatchUpdateInvalidInvoiceStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidInvoiceStatusError")]
            InvoiceBatchUpdateInvalidInvoiceStatusError = 229,

            /// <summary>
            /// Enum InvoiceBatchUpdateLimitExceededError for value: InvoiceBatchUpdateLimitExceededError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateLimitExceededError")]
            InvoiceBatchUpdateLimitExceededError = 230,

            /// <summary>
            /// Enum InvoiceNotAvailableForCurrentUser for value: InvoiceNotAvailableForCurrentUser
            /// </summary>
            [EnumMember(Value = "InvoiceNotAvailableForCurrentUser")]
            InvoiceNotAvailableForCurrentUser = 231,

            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidRuleSetStructure for value: InvoiceBatchUpdateInvalidRuleSetStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidRuleSetStructure")]
            InvoiceBatchUpdateInvalidRuleSetStructure = 232,

            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidMliStructure for value: InvoiceBatchUpdateInvalidMliStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidMliStructure")]
            InvoiceBatchUpdateInvalidMliStructure = 233,

            /// <summary>
            /// Enum InvoiceBatchUpdateStatusError for value: InvoiceBatchUpdateStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateStatusError")]
            InvoiceBatchUpdateStatusError = 234,

            /// <summary>
            /// Enum InvoiceMaterialUnitTypeInvalid for value: InvoiceMaterialUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialUnitTypeInvalid")]
            InvoiceMaterialUnitTypeInvalid = 235,

            /// <summary>
            /// Enum ExistingBatchNumber for value: ExistingBatchNumber
            /// </summary>
            [EnumMember(Value = "ExistingBatchNumber")]
            ExistingBatchNumber = 236,

            /// <summary>
            /// Enum InvoiceResolutionTextRequired for value: InvoiceResolutionTextRequired
            /// </summary>
            [EnumMember(Value = "InvoiceResolutionTextRequired")]
            InvoiceResolutionTextRequired = 237,

            /// <summary>
            /// Enum GetInvoiceDefaultApprovalCodesError for value: GetInvoiceDefaultApprovalCodesError
            /// </summary>
            [EnumMember(Value = "GetInvoiceDefaultApprovalCodesError")]
            GetInvoiceDefaultApprovalCodesError = 238,

            /// <summary>
            /// Enum InvoiceInvalidTravelAmount for value: InvoiceInvalidTravelAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelAmount")]
            InvoiceInvalidTravelAmount = 239,

            /// <summary>
            /// Enum InvoiceTravelDescriptionLengthOverflow for value: InvoiceTravelDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceTravelDescriptionLengthOverflow")]
            InvoiceTravelDescriptionLengthOverflow = 240,

            /// <summary>
            /// Enum InvoiceTravelUnitTypeInvalid for value: InvoiceTravelUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceTravelUnitTypeInvalid")]
            InvoiceTravelUnitTypeInvalid = 241,

            /// <summary>
            /// Enum TravelLineItemRequired for value: TravelLineItemRequired
            /// </summary>
            [EnumMember(Value = "TravelLineItemRequired")]
            TravelLineItemRequired = 242,

            /// <summary>
            /// Enum TravelDetailsDisabled for value: TravelDetailsDisabled
            /// </summary>
            [EnumMember(Value = "TravelDetailsDisabled")]
            TravelDetailsDisabled = 243,

            /// <summary>
            /// Enum OnOffShoreDisabled for value: OnOffShoreDisabled
            /// </summary>
            [EnumMember(Value = "OnOffShoreDisabled")]
            OnOffShoreDisabled = 244,

            /// <summary>
            /// Enum InvoiceInvalidLaborCount for value: InvoiceInvalidLaborCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborCount")]
            InvoiceInvalidLaborCount = 245,

            /// <summary>
            /// Enum InvoiceInvalidMaterialCount for value: InvoiceInvalidMaterialCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialCount")]
            InvoiceInvalidMaterialCount = 246,

            /// <summary>
            /// Enum InvoiceInvalidTravelCount for value: InvoiceInvalidTravelCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelCount")]
            InvoiceInvalidTravelCount = 247,

            /// <summary>
            /// Enum SubscriberNotRegisteredForTaxValidation for value: SubscriberNotRegisteredForTaxValidation
            /// </summary>
            [EnumMember(Value = "SubscriberNotRegisteredForTaxValidation")]
            SubscriberNotRegisteredForTaxValidation = 248,

            /// <summary>
            /// Enum ManyDecimalsInAmountError for value: ManyDecimalsInAmountError
            /// </summary>
            [EnumMember(Value = "ManyDecimalsInAmountError")]
            ManyDecimalsInAmountError = 249,

            /// <summary>
            /// Enum DecimalPartQstTaxError for value: DecimalPartQstTaxError
            /// </summary>
            [EnumMember(Value = "DecimalPartQstTaxError")]
            DecimalPartQstTaxError = 250,

            /// <summary>
            /// Enum LaborRatesDiscrepancy for value: LaborRatesDiscrepancy
            /// </summary>
            [EnumMember(Value = "LaborRatesDiscrepancy")]
            LaborRatesDiscrepancy = 251,

            /// <summary>
            /// Enum PayInvoicesError for value: PayInvoicesError
            /// </summary>
            [EnumMember(Value = "PayInvoicesError")]
            PayInvoicesError = 252,

            /// <summary>
            /// Enum InvoiceNumberRequirementsError for value: InvoiceNumberRequirementsError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRequirementsError")]
            InvoiceNumberRequirementsError = 253,

            /// <summary>
            /// Enum InvoiceNumberIncorrect for value: InvoiceNumberIncorrect
            /// </summary>
            [EnumMember(Value = "InvoiceNumberIncorrect")]
            InvoiceNumberIncorrect = 254,

            /// <summary>
            /// Enum InvoiceNumberRegExPatternError for value: InvoiceNumberRegExPatternError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRegExPatternError")]
            InvoiceNumberRegExPatternError = 255,

            /// <summary>
            /// Enum GetInvoicesPendingApprovalByLocationError for value: GetInvoicesPendingApprovalByLocationError
            /// </summary>
            [EnumMember(Value = "GetInvoicesPendingApprovalByLocationError")]
            GetInvoicesPendingApprovalByLocationError = 256,

            /// <summary>
            /// Enum ReAssignInvoicesToUsersFailed for value: ReAssignInvoicesToUsersFailed
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesToUsersFailed")]
            ReAssignInvoicesToUsersFailed = 257,

            /// <summary>
            /// Enum ReAssignInvoicesUsersMatched for value: ReAssignInvoicesUsersMatched
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesUsersMatched")]
            ReAssignInvoicesUsersMatched = 258,

            /// <summary>
            /// Enum GetUsersForReassignInvoiceError for value: GetUsersForReassignInvoiceError
            /// </summary>
            [EnumMember(Value = "GetUsersForReassignInvoiceError")]
            GetUsersForReassignInvoiceError = 259,

            /// <summary>
            /// Enum InvalidTimeRangeActivity for value: InvalidTimeRangeActivity
            /// </summary>
            [EnumMember(Value = "InvalidTimeRangeActivity")]
            InvalidTimeRangeActivity = 260,

            /// <summary>
            /// Enum OutsourcedSourceInvoiceNotFound for value: OutsourcedSourceInvoiceNotFound
            /// </summary>
            [EnumMember(Value = "OutsourcedSourceInvoiceNotFound")]
            OutsourcedSourceInvoiceNotFound = 261,

            /// <summary>
            /// Enum OthersLineItemsDisabled for value: OthersLineItemsDisabled
            /// </summary>
            [EnumMember(Value = "OthersLineItemsDisabled")]
            OthersLineItemsDisabled = 262,

            /// <summary>
            /// Enum InvoiceInvalidOtherAmount for value: InvoiceInvalidOtherAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherAmount")]
            InvoiceInvalidOtherAmount = 263,

            /// <summary>
            /// Enum InvoiceInvalidOtherCount for value: InvoiceInvalidOtherCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherCount")]
            InvoiceInvalidOtherCount = 264,

            /// <summary>
            /// Enum InvoiceOtherDescriptionLengthOverflow for value: InvoiceOtherDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceOtherDescriptionLengthOverflow")]
            InvoiceOtherDescriptionLengthOverflow = 265,

            /// <summary>
            /// Enum OtherLineItemRequired for value: OtherLineItemRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemRequired")]
            OtherLineItemRequired = 266,

            /// <summary>
            /// Enum OtherLineItemsNotNegativeValueRequired for value: OtherLineItemsNotNegativeValueRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemsNotNegativeValueRequired")]
            OtherLineItemsNotNegativeValueRequired = 267,

            /// <summary>
            /// Enum InvalidLaborSkillLevel for value: InvalidLaborSkillLevel
            /// </summary>
            [EnumMember(Value = "InvalidLaborSkillLevel")]
            InvalidLaborSkillLevel = 268,

            /// <summary>
            /// Enum InvalidLaborType for value: InvalidLaborType
            /// </summary>
            [EnumMember(Value = "InvalidLaborType")]
            InvalidLaborType = 269,

            /// <summary>
            /// Enum InvalidTechnicianQuantity for value: InvalidTechnicianQuantity
            /// </summary>
            [EnumMember(Value = "InvalidTechnicianQuantity")]
            InvalidTechnicianQuantity = 270,

            /// <summary>
            /// Enum GetInvoicesCommonCategoriesError for value: GetInvoicesCommonCategoriesError
            /// </summary>
            [EnumMember(Value = "GetInvoicesCommonCategoriesError")]
            GetInvoicesCommonCategoriesError = 271,

            /// <summary>
            /// Enum InvoiceExplainDisputeEmpty for value: InvoiceExplainDisputeEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceExplainDisputeEmpty")]
            InvoiceExplainDisputeEmpty = 272,

            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeHeaderError for value: InvoiceAdditionalApprovalCodeHeaderError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeHeaderError")]
            InvoiceAdditionalApprovalCodeHeaderError = 273,

            /// <summary>
            /// Enum TemplateParseSuccess for value: TemplateParseSuccess
            /// </summary>
            [EnumMember(Value = "TemplateParseSuccess")]
            TemplateParseSuccess = 274,

            /// <summary>
            /// Enum TemplateIncorrectHeaderError for value: TemplateIncorrectHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectHeaderError")]
            TemplateIncorrectHeaderError = 275,

            /// <summary>
            /// Enum TemplateEmptyTemplateError for value: TemplateEmptyTemplateError
            /// </summary>
            [EnumMember(Value = "TemplateEmptyTemplateError")]
            TemplateEmptyTemplateError = 276,

            /// <summary>
            /// Enum TemplateWrongFieldsCountError for value: TemplateWrongFieldsCountError
            /// </summary>
            [EnumMember(Value = "TemplateWrongFieldsCountError")]
            TemplateWrongFieldsCountError = 277,

            /// <summary>
            /// Enum TemplateFieldNotFoundError for value: TemplateFieldNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateFieldNotFoundError")]
            TemplateFieldNotFoundError = 278,

            /// <summary>
            /// Enum TemplateFieldRequiredError for value: TemplateFieldRequiredError
            /// </summary>
            [EnumMember(Value = "TemplateFieldRequiredError")]
            TemplateFieldRequiredError = 279,

            /// <summary>
            /// Enum TemplateParseIntError for value: TemplateParseIntError
            /// </summary>
            [EnumMember(Value = "TemplateParseIntError")]
            TemplateParseIntError = 280,

            /// <summary>
            /// Enum TemplateFieldSizeError for value: TemplateFieldSizeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldSizeError")]
            TemplateFieldSizeError = 281,

            /// <summary>
            /// Enum TemplateInvalidValueError for value: TemplateInvalidValueError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidValueError")]
            TemplateInvalidValueError = 282,

            /// <summary>
            /// Enum TemplateFieldFormatError for value: TemplateFieldFormatError
            /// </summary>
            [EnumMember(Value = "TemplateFieldFormatError")]
            TemplateFieldFormatError = 283,

            /// <summary>
            /// Enum TemplateFieldMaxRangeError for value: TemplateFieldMaxRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMaxRangeError")]
            TemplateFieldMaxRangeError = 284,

            /// <summary>
            /// Enum TemplateFieldMinRangeError for value: TemplateFieldMinRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMinRangeError")]
            TemplateFieldMinRangeError = 285,

            /// <summary>
            /// Enum TemplateProviderNotEntered for value: TemplateProviderNotEntered
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotEntered")]
            TemplateProviderNotEntered = 286,

            /// <summary>
            /// Enum TemplateInvalidSubscriberError for value: TemplateInvalidSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberError")]
            TemplateInvalidSubscriberError = 287,

            /// <summary>
            /// Enum TemplateVendorNotFoundError for value: TemplateVendorNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateVendorNotFoundError")]
            TemplateVendorNotFoundError = 288,

            /// <summary>
            /// Enum TemplateMissedProviderError for value: TemplateMissedProviderError
            /// </summary>
            [EnumMember(Value = "TemplateMissedProviderError")]
            TemplateMissedProviderError = 289,

            /// <summary>
            /// Enum TemplateProviderNotFoundError for value: TemplateProviderNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotFoundError")]
            TemplateProviderNotFoundError = 290,

            /// <summary>
            /// Enum TemplateProviderSubsccriberLinkError for value: TemplateProviderSubsccriberLinkError
            /// </summary>
            [EnumMember(Value = "TemplateProviderSubsccriberLinkError")]
            TemplateProviderSubsccriberLinkError = 291,

            /// <summary>
            /// Enum TemplateTradeDispatchRankError for value: TemplateTradeDispatchRankError
            /// </summary>
            [EnumMember(Value = "TemplateTradeDispatchRankError")]
            TemplateTradeDispatchRankError = 292,

            /// <summary>
            /// Enum TemplateInvalidTradeForSubscriberError for value: TemplateInvalidTradeForSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidTradeForSubscriberError")]
            TemplateInvalidTradeForSubscriberError = 293,

            /// <summary>
            /// Enum TemplateStoreNotFoundError for value: TemplateStoreNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateStoreNotFoundError")]
            TemplateStoreNotFoundError = 294,

            /// <summary>
            /// Enum TemplateNotStoresForStateError for value: TemplateNotStoresForStateError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForStateError")]
            TemplateNotStoresForStateError = 295,

            /// <summary>
            /// Enum TemplateNotStoresForCountryError for value: TemplateNotStoresForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForCountryError")]
            TemplateNotStoresForCountryError = 296,

            /// <summary>
            /// Enum TemplateNotStoresForDistrictError for value: TemplateNotStoresForDistrictError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForDistrictError")]
            TemplateNotStoresForDistrictError = 297,

            /// <summary>
            /// Enum TemplateNotStoresForRegionError for value: TemplateNotStoresForRegionError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForRegionError")]
            TemplateNotStoresForRegionError = 298,

            /// <summary>
            /// Enum TemplateMultiplePimaryProvidersForTradeStoreError for value: TemplateMultiplePimaryProvidersForTradeStoreError
            /// </summary>
            [EnumMember(Value = "TemplateMultiplePimaryProvidersForTradeStoreError")]
            TemplateMultiplePimaryProvidersForTradeStoreError = 299,

            /// <summary>
            /// Enum TemplateDuplicatePrimaryRelationshipError for value: TemplateDuplicatePrimaryRelationshipError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatePrimaryRelationshipError")]
            TemplateDuplicatePrimaryRelationshipError = 300,

            /// <summary>
            /// Enum TemplateAmbiguousDataError for value: TemplateAmbiguousDataError
            /// </summary>
            [EnumMember(Value = "TemplateAmbiguousDataError")]
            TemplateAmbiguousDataError = 301,

            /// <summary>
            /// Enum TemplateIncorrectSubscriber for value: TemplateIncorrectSubscriber
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectSubscriber")]
            TemplateIncorrectSubscriber = 302,

            /// <summary>
            /// Enum TemplateDuplicateRanking for value: TemplateDuplicateRanking
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRanking")]
            TemplateDuplicateRanking = 303,

            /// <summary>
            /// Enum TemplateLongitudeRangeError for value: TemplateLongitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLongitudeRangeError")]
            TemplateLongitudeRangeError = 304,

            /// <summary>
            /// Enum TemplateLatitudeRangeError for value: TemplateLatitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLatitudeRangeError")]
            TemplateLatitudeRangeError = 305,

            /// <summary>
            /// Enum TemplateInvalidStateError for value: TemplateInvalidStateError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateError")]
            TemplateInvalidStateError = 306,

            /// <summary>
            /// Enum TemplateMissedSubscriberError for value: TemplateMissedSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateMissedSubscriberError")]
            TemplateMissedSubscriberError = 307,

            /// <summary>
            /// Enum TemplateMissedStoreIdError for value: TemplateMissedStoreIdError
            /// </summary>
            [EnumMember(Value = "TemplateMissedStoreIdError")]
            TemplateMissedStoreIdError = 308,

            /// <summary>
            /// Enum TemplateInvalidSubscriberIdError for value: TemplateInvalidSubscriberIdError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberIdError")]
            TemplateInvalidSubscriberIdError = 309,

            /// <summary>
            /// Enum TemplateOpenCloseDateError for value: TemplateOpenCloseDateError
            /// </summary>
            [EnumMember(Value = "TemplateOpenCloseDateError")]
            TemplateOpenCloseDateError = 310,

            /// <summary>
            /// Enum TemplateInvalidCountryError for value: TemplateInvalidCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCountryError")]
            TemplateInvalidCountryError = 311,

            /// <summary>
            /// Enum TemplateInvalidStateForCountryError for value: TemplateInvalidStateForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateForCountryError")]
            TemplateInvalidStateForCountryError = 312,

            /// <summary>
            /// Enum TemplateInvalidLocationTypeError for value: TemplateInvalidLocationTypeError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationTypeError")]
            TemplateInvalidLocationTypeError = 313,

            /// <summary>
            /// Enum TemplateMissingFullAndShortNameError for value: TemplateMissingFullAndShortNameError
            /// </summary>
            [EnumMember(Value = "TemplateMissingFullAndShortNameError")]
            TemplateMissingFullAndShortNameError = 314,

            /// <summary>
            /// Enum TemplateMissingCountryError for value: TemplateMissingCountryError
            /// </summary>
            [EnumMember(Value = "TemplateMissingCountryError")]
            TemplateMissingCountryError = 315,

            /// <summary>
            /// Enum TemplateDuplicatedDataError for value: TemplateDuplicatedDataError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedDataError")]
            TemplateDuplicatedDataError = 316,

            /// <summary>
            /// Enum TemplateParentLocationNotFoundError for value: TemplateParentLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateParentLocationNotFoundError")]
            TemplateParentLocationNotFoundError = 317,

            /// <summary>
            /// Enum TemplateParseDateTimeError for value: TemplateParseDateTimeError
            /// </summary>
            [EnumMember(Value = "TemplateParseDateTimeError")]
            TemplateParseDateTimeError = 318,

            /// <summary>
            /// Enum TemplateParseDecimalError for value: TemplateParseDecimalError
            /// </summary>
            [EnumMember(Value = "TemplateParseDecimalError")]
            TemplateParseDecimalError = 319,

            /// <summary>
            /// Enum TemplateSquareValueRangeError for value: TemplateSquareValueRangeError
            /// </summary>
            [EnumMember(Value = "TemplateSquareValueRangeError")]
            TemplateSquareValueRangeError = 320,

            /// <summary>
            /// Enum TemplateInvalidSquareMeasureError for value: TemplateInvalidSquareMeasureError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSquareMeasureError")]
            TemplateInvalidSquareMeasureError = 321,

            /// <summary>
            /// Enum TemplateTypeLabelCanNotBeUpdatedError for value: TemplateTypeLabelCanNotBeUpdatedError
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelCanNotBeUpdatedError")]
            TemplateTypeLabelCanNotBeUpdatedError = 322,

            /// <summary>
            /// Enum TemplateTypeLabelHaveToBeLocationForNotInventory for value: TemplateTypeLabelHaveToBeLocationForNotInventory
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelHaveToBeLocationForNotInventory")]
            TemplateTypeLabelHaveToBeLocationForNotInventory = 323,

            /// <summary>
            /// Enum TemplateInvalidPrimarySupplyLocation for value: TemplateInvalidPrimarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPrimarySupplyLocation")]
            TemplateInvalidPrimarySupplyLocation = 324,

            /// <summary>
            /// Enum TemplateInvalidHomestoreLocationNumber for value: TemplateInvalidHomestoreLocationNumber
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHomestoreLocationNumber")]
            TemplateInvalidHomestoreLocationNumber = 325,

            /// <summary>
            /// Enum TemplateErrorDuringCreation for value: TemplateErrorDuringCreation
            /// </summary>
            [EnumMember(Value = "TemplateErrorDuringCreation")]
            TemplateErrorDuringCreation = 326,

            /// <summary>
            /// Enum TemplateLocationNotFoundError for value: TemplateLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotFoundError")]
            TemplateLocationNotFoundError = 327,

            /// <summary>
            /// Enum TemplateDuplicatedLocationFoundError for value: TemplateDuplicatedLocationFoundError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationFoundError")]
            TemplateDuplicatedLocationFoundError = 328,

            /// <summary>
            /// Enum TemplateInvalidLocationHeaderError for value: TemplateInvalidLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationHeaderError")]
            TemplateInvalidLocationHeaderError = 329,

            /// <summary>
            /// Enum TemplateDuplicatedLocationHeaderError for value: TemplateDuplicatedLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaderError")]
            TemplateDuplicatedLocationHeaderError = 330,

            /// <summary>
            /// Enum TemplateHeaderContainsEmptyFieldsError for value: TemplateHeaderContainsEmptyFieldsError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsEmptyFieldsError")]
            TemplateHeaderContainsEmptyFieldsError = 331,

            /// <summary>
            /// Enum TemplateLocHeadersShortHeaderError for value: TemplateLocHeadersShortHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateLocHeadersShortHeaderError")]
            TemplateLocHeadersShortHeaderError = 332,

            /// <summary>
            /// Enum TemplateHeaderContainsDuplicatesError for value: TemplateHeaderContainsDuplicatesError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsDuplicatesError")]
            TemplateHeaderContainsDuplicatesError = 333,

            /// <summary>
            /// Enum TemplateLocationNotesStoreIdFieldLengthError for value: TemplateLocationNotesStoreIdFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesStoreIdFieldLengthError")]
            TemplateLocationNotesStoreIdFieldLengthError = 334,

            /// <summary>
            /// Enum TemplateLocationNotesNoteValueFieldLengthError for value: TemplateLocationNotesNoteValueFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesNoteValueFieldLengthError")]
            TemplateLocationNotesNoteValueFieldLengthError = 335,

            /// <summary>
            /// Enum TemplateErrorInvalidZipCode for value: TemplateErrorInvalidZipCode
            /// </summary>
            [EnumMember(Value = "TemplateErrorInvalidZipCode")]
            TemplateErrorInvalidZipCode = 336,

            /// <summary>
            /// Enum TemplateMissingLocationNoteHeader for value: TemplateMissingLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteHeader")]
            TemplateMissingLocationNoteHeader = 337,

            /// <summary>
            /// Enum TemplateMissingLocationNoteIdHeader for value: TemplateMissingLocationNoteIdHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteIdHeader")]
            TemplateMissingLocationNoteIdHeader = 338,

            /// <summary>
            /// Enum TemplateInvalidSecondarySupplyLocation for value: TemplateInvalidSecondarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSecondarySupplyLocation")]
            TemplateInvalidSecondarySupplyLocation = 339,

            /// <summary>
            /// Enum TemplateLocationWasNotCreated for value: TemplateLocationWasNotCreated
            /// </summary>
            [EnumMember(Value = "TemplateLocationWasNotCreated")]
            TemplateLocationWasNotCreated = 340,

            /// <summary>
            /// Enum TemplateTruckNameIsEmpty for value: TemplateTruckNameIsEmpty
            /// </summary>
            [EnumMember(Value = "TemplateTruckNameIsEmpty")]
            TemplateTruckNameIsEmpty = 341,

            /// <summary>
            /// Enum TemplateWrongFormat for value: TemplateWrongFormat
            /// </summary>
            [EnumMember(Value = "TemplateWrongFormat")]
            TemplateWrongFormat = 342,

            /// <summary>
            /// Enum TemplateSubscriberNotFound for value: TemplateSubscriberNotFound
            /// </summary>
            [EnumMember(Value = "TemplateSubscriberNotFound")]
            TemplateSubscriberNotFound = 343,

            /// <summary>
            /// Enum TemplateDuplicatedLocationHeaders for value: TemplateDuplicatedLocationHeaders
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaders")]
            TemplateDuplicatedLocationHeaders = 344,

            /// <summary>
            /// Enum TemplateInvalidHeaders for value: TemplateInvalidHeaders
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHeaders")]
            TemplateInvalidHeaders = 345,

            /// <summary>
            /// Enum TemplateInvalidPhoneError for value: TemplateInvalidPhoneError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPhoneError")]
            TemplateInvalidPhoneError = 346,

            /// <summary>
            /// Enum TemplateDuplicateTelecomRecordError for value: TemplateDuplicateTelecomRecordError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateTelecomRecordError")]
            TemplateDuplicateTelecomRecordError = 347,

            /// <summary>
            /// Enum TemplateTelecomRecordExistsError for value: TemplateTelecomRecordExistsError
            /// </summary>
            [EnumMember(Value = "TemplateTelecomRecordExistsError")]
            TemplateTelecomRecordExistsError = 348,

            /// <summary>
            /// Enum TemplateInvalidCategory for value: TemplateInvalidCategory
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCategory")]
            TemplateInvalidCategory = 349,

            /// <summary>
            /// Enum TemplateDifferentRanksForProviderAssignments for value: TemplateDifferentRanksForProviderAssignments
            /// </summary>
            [EnumMember(Value = "TemplateDifferentRanksForProviderAssignments")]
            TemplateDifferentRanksForProviderAssignments = 350,

            /// <summary>
            /// Enum TemplateDuplicateRankError for value: TemplateDuplicateRankError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRankError")]
            TemplateDuplicateRankError = 351,

            /// <summary>
            /// Enum TemplateProviderNonCompliant for value: TemplateProviderNonCompliant
            /// </summary>
            [EnumMember(Value = "TemplateProviderNonCompliant")]
            TemplateProviderNonCompliant = 352,

            /// <summary>
            /// Enum TemplateLocationIsClosed for value: TemplateLocationIsClosed
            /// </summary>
            [EnumMember(Value = "TemplateLocationIsClosed")]
            TemplateLocationIsClosed = 353,

            /// <summary>
            /// Enum TemplateProviderWarning for value: TemplateProviderWarning
            /// </summary>
            [EnumMember(Value = "TemplateProviderWarning")]
            TemplateProviderWarning = 354,

            /// <summary>
            /// Enum EmptyRequest for value: EmptyRequest
            /// </summary>
            [EnumMember(Value = "EmptyRequest")]
            EmptyRequest = 355,

            /// <summary>
            /// Enum InvoiceOtherUnitTypeInvalid for value: InvoiceOtherUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceOtherUnitTypeInvalid")]
            InvoiceOtherUnitTypeInvalid = 356,

            /// <summary>
            /// Enum InvalidNumberOfParameters for value: InvalidNumberOfParameters
            /// </summary>
            [EnumMember(Value = "InvalidNumberOfParameters")]
            InvalidNumberOfParameters = 357,

            /// <summary>
            /// Enum EmptyLocationOrTradeList for value: EmptyLocationOrTradeList
            /// </summary>
            [EnumMember(Value = "EmptyLocationOrTradeList")]
            EmptyLocationOrTradeList = 358,

            /// <summary>
            /// Enum StoreIdRequiredError for value: StoreIdRequiredError
            /// </summary>
            [EnumMember(Value = "StoreIdRequiredError")]
            StoreIdRequiredError = 359,

            /// <summary>
            /// Enum InvalidUserIdError for value: InvalidUserIdError
            /// </summary>
            [EnumMember(Value = "InvalidUserIdError")]
            InvalidUserIdError = 360,

            /// <summary>
            /// Enum InvalidStoreIdError for value: InvalidStoreIdError
            /// </summary>
            [EnumMember(Value = "InvalidStoreIdError")]
            InvalidStoreIdError = 361,

            /// <summary>
            /// Enum AmbigiousError for value: AmbigiousError
            /// </summary>
            [EnumMember(Value = "AmbigiousError")]
            AmbigiousError = 362,

            /// <summary>
            /// Enum MliHierarchyFiledsCountError for value: MliHierarchyFiledsCountError
            /// </summary>
            [EnumMember(Value = "MliHierarchyFiledsCountError")]
            MliHierarchyFiledsCountError = 363,

            /// <summary>
            /// Enum MliHierarchyMaxUserNameError for value: MliHierarchyMaxUserNameError
            /// </summary>
            [EnumMember(Value = "MliHierarchyMaxUserNameError")]
            MliHierarchyMaxUserNameError = 364,

            /// <summary>
            /// Enum MliHierarchyDuplicateUserError for value: MliHierarchyDuplicateUserError
            /// </summary>
            [EnumMember(Value = "MliHierarchyDuplicateUserError")]
            MliHierarchyDuplicateUserError = 365,

            /// <summary>
            /// Enum MLiHirarchyUserExistInOtherLevelError for value: MLiHirarchyUserExistInOtherLevelError
            /// </summary>
            [EnumMember(Value = "MLiHirarchyUserExistInOtherLevelError")]
            MLiHirarchyUserExistInOtherLevelError = 366,

            /// <summary>
            /// Enum MissingLevelsError for value: MissingLevelsError
            /// </summary>
            [EnumMember(Value = "MissingLevelsError")]
            MissingLevelsError = 367,

            /// <summary>
            /// Enum DuplicateApprovalLevelsError for value: DuplicateApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "DuplicateApprovalLevelsError")]
            DuplicateApprovalLevelsError = 368,

            /// <summary>
            /// Enum InvalidMliLocations for value: InvalidMliLocations
            /// </summary>
            [EnumMember(Value = "InvalidMliLocations")]
            InvalidMliLocations = 369,

            /// <summary>
            /// Enum InvalidMlpLocations for value: InvalidMlpLocations
            /// </summary>
            [EnumMember(Value = "InvalidMlpLocations")]
            InvalidMlpLocations = 370,

            /// <summary>
            /// Enum ApprovalLevelUsedInRulsetError for value: ApprovalLevelUsedInRulsetError
            /// </summary>
            [EnumMember(Value = "ApprovalLevelUsedInRulsetError")]
            ApprovalLevelUsedInRulsetError = 371,

            /// <summary>
            /// Enum GLCodeAmbiguous for value: GLCodeAmbiguous
            /// </summary>
            [EnumMember(Value = "GLCodeAmbiguous")]
            GLCodeAmbiguous = 372,

            /// <summary>
            /// Enum GlCodeInvalidResponce for value: GlCodeInvalidResponce
            /// </summary>
            [EnumMember(Value = "GlCodeInvalidResponce")]
            GlCodeInvalidResponce = 373,

            /// <summary>
            /// Enum GetRuleSetListError for value: GetRuleSetListError
            /// </summary>
            [EnumMember(Value = "GetRuleSetListError")]
            GetRuleSetListError = 374,

            /// <summary>
            /// Enum RuleSetDuplicateNameError for value: RuleSetDuplicateNameError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateNameError")]
            RuleSetDuplicateNameError = 375,

            /// <summary>
            /// Enum RuleSetDuplicateActionError for value: RuleSetDuplicateActionError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateActionError")]
            RuleSetDuplicateActionError = 376,

            /// <summary>
            /// Enum RuleSetConflictedActionError for value: RuleSetConflictedActionError
            /// </summary>
            [EnumMember(Value = "RuleSetConflictedActionError")]
            RuleSetConflictedActionError = 377,

            /// <summary>
            /// Enum RuleSetRuleSetDoesNotExistsError for value: RuleSetRuleSetDoesNotExistsError
            /// </summary>
            [EnumMember(Value = "RuleSetRuleSetDoesNotExistsError")]
            RuleSetRuleSetDoesNotExistsError = 378,

            /// <summary>
            /// Enum RuleSetTradeDoesNotExistError for value: RuleSetTradeDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetTradeDoesNotExistError")]
            RuleSetTradeDoesNotExistError = 379,

            /// <summary>
            /// Enum RuleSetCategoryDoesNotExistError for value: RuleSetCategoryDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetCategoryDoesNotExistError")]
            RuleSetCategoryDoesNotExistError = 380,

            /// <summary>
            /// Enum RuleSetMliLevelDoesNotExistError for value: RuleSetMliLevelDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetMliLevelDoesNotExistError")]
            RuleSetMliLevelDoesNotExistError = 381,

            /// <summary>
            /// Enum GetRuleSet for value: GetRuleSet
            /// </summary>
            [EnumMember(Value = "GetRuleSet")]
            GetRuleSet = 382,

            /// <summary>
            /// Enum CreateUpdateRuleSetError for value: CreateUpdateRuleSetError
            /// </summary>
            [EnumMember(Value = "CreateUpdateRuleSetError")]
            CreateUpdateRuleSetError = 383,

            /// <summary>
            /// Enum DeleteRuleSet for value: DeleteRuleSet
            /// </summary>
            [EnumMember(Value = "DeleteRuleSet")]
            DeleteRuleSet = 384,

            /// <summary>
            /// Enum GetRuleSetCategoriesTradesCountError for value: GetRuleSetCategoriesTradesCountError
            /// </summary>
            [EnumMember(Value = "GetRuleSetCategoriesTradesCountError")]
            GetRuleSetCategoriesTradesCountError = 385,

            /// <summary>
            /// Enum GetRuleSetByInvoice for value: GetRuleSetByInvoice
            /// </summary>
            [EnumMember(Value = "GetRuleSetByInvoice")]
            GetRuleSetByInvoice = 386,

            /// <summary>
            /// Enum GetCategoryTradeIdsAreSelectedError for value: GetCategoryTradeIdsAreSelectedError
            /// </summary>
            [EnumMember(Value = "GetCategoryTradeIdsAreSelectedError")]
            GetCategoryTradeIdsAreSelectedError = 387,

            /// <summary>
            /// Enum ProposalAboveMlpLimitError for value: ProposalAboveMlpLimitError
            /// </summary>
            [EnumMember(Value = "ProposalAboveMlpLimitError")]
            ProposalAboveMlpLimitError = 388,

            /// <summary>
            /// Enum ProposalNextLevelHasNoAvailableActionsError for value: ProposalNextLevelHasNoAvailableActionsError
            /// </summary>
            [EnumMember(Value = "ProposalNextLevelHasNoAvailableActionsError")]
            ProposalNextLevelHasNoAvailableActionsError = 389,

            /// <summary>
            /// Enum DefaultRuleSetError for value: DefaultRuleSetError
            /// </summary>
            [EnumMember(Value = "DefaultRuleSetError")]
            DefaultRuleSetError = 390,

            /// <summary>
            /// Enum UserFilterGetError for value: UserFilterGetError
            /// </summary>
            [EnumMember(Value = "UserFilterGetError")]
            UserFilterGetError = 391,

            /// <summary>
            /// Enum UserFilterCreateUpdateError for value: UserFilterCreateUpdateError
            /// </summary>
            [EnumMember(Value = "UserFilterCreateUpdateError")]
            UserFilterCreateUpdateError = 392,

            /// <summary>
            /// Enum UserFilterDeleteError for value: UserFilterDeleteError
            /// </summary>
            [EnumMember(Value = "UserFilterDeleteError")]
            UserFilterDeleteError = 393,

            /// <summary>
            /// Enum UserFilterSetAsDefaultError for value: UserFilterSetAsDefaultError
            /// </summary>
            [EnumMember(Value = "UserFilterSetAsDefaultError")]
            UserFilterSetAsDefaultError = 394,

            /// <summary>
            /// Enum InvoiceFilterFromAlpProviderError for value: InvoiceFilterFromAlpProviderError
            /// </summary>
            [EnumMember(Value = "InvoiceFilterFromAlpProviderError")]
            InvoiceFilterFromAlpProviderError = 395,

            /// <summary>
            /// Enum PaymenowScProviderIdOrFbCompanyIdMustBeProvided for value: PaymenowScProviderIdOrFbCompanyIdMustBeProvided
            /// </summary>
            [EnumMember(Value = "PaymenowScProviderIdOrFbCompanyIdMustBeProvided")]
            PaymenowScProviderIdOrFbCompanyIdMustBeProvided = 396,

            /// <summary>
            /// Enum PaymenowBannersForProvidersOnly for value: PaymenowBannersForProvidersOnly
            /// </summary>
            [EnumMember(Value = "PaymenowBannersForProvidersOnly")]
            PaymenowBannersForProvidersOnly = 397,

            /// <summary>
            /// Enum PaymenowFeatureDisabled for value: PaymenowFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymenowFeatureDisabled")]
            PaymenowFeatureDisabled = 398,

            /// <summary>
            /// Enum PaymenowBannerInfoNotFound for value: PaymenowBannerInfoNotFound
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInfoNotFound")]
            PaymenowBannerInfoNotFound = 399,

            /// <summary>
            /// Enum PaymenowBannerInvalidNavigationUrl for value: PaymenowBannerInvalidNavigationUrl
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInvalidNavigationUrl")]
            PaymenowBannerInvalidNavigationUrl = 400,

            /// <summary>
            /// Enum PaymenowRequestedProvidersIsNotAssigned for value: PaymenowRequestedProvidersIsNotAssigned
            /// </summary>
            [EnumMember(Value = "PaymenowRequestedProvidersIsNotAssigned")]
            PaymenowRequestedProvidersIsNotAssigned = 401,

            /// <summary>
            /// Enum PaymenowEmptyRequestedProviders for value: PaymenowEmptyRequestedProviders
            /// </summary>
            [EnumMember(Value = "PaymenowEmptyRequestedProviders")]
            PaymenowEmptyRequestedProviders = 402,

            /// <summary>
            /// Enum PaymentManagerFeatureDisabled for value: PaymentManagerFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabled")]
            PaymentManagerFeatureDisabled = 403,

            /// <summary>
            /// Enum PaymentManagerFeatureDisabledForSubscriber for value: PaymentManagerFeatureDisabledForSubscriber
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabledForSubscriber")]
            PaymentManagerFeatureDisabledForSubscriber = 404,

            /// <summary>
            /// Enum PaymentSystemCurrentlyUnavailable for value: PaymentSystemCurrentlyUnavailable
            /// </summary>
            [EnumMember(Value = "PaymentSystemCurrentlyUnavailable")]
            PaymentSystemCurrentlyUnavailable = 405,

            /// <summary>
            /// Enum CurrencyNotSupported for value: CurrencyNotSupported
            /// </summary>
            [EnumMember(Value = "CurrencyNotSupported")]
            CurrencyNotSupported = 406,

            /// <summary>
            /// Enum PaymentSystemAccountNotFound for value: PaymentSystemAccountNotFound
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountNotFound")]
            PaymentSystemAccountNotFound = 407,

            /// <summary>
            /// Enum FeatureIsOff for value: FeatureIsOff
            /// </summary>
            [EnumMember(Value = "FeatureIsOff")]
            FeatureIsOff = 408,

            /// <summary>
            /// Enum EarlyPayFeatureWithoutPaymentManagetFeatureError for value: EarlyPayFeatureWithoutPaymentManagetFeatureError
            /// </summary>
            [EnumMember(Value = "EarlyPayFeatureWithoutPaymentManagetFeatureError")]
            EarlyPayFeatureWithoutPaymentManagetFeatureError = 409,

            /// <summary>
            /// Enum FtpTestError for value: FtpTestError
            /// </summary>
            [EnumMember(Value = "FtpTestError")]
            FtpTestError = 410,

            /// <summary>
            /// Enum AcceptTermsAndConditionsRequestInvalid for value: AcceptTermsAndConditionsRequestInvalid
            /// </summary>
            [EnumMember(Value = "AcceptTermsAndConditionsRequestInvalid")]
            AcceptTermsAndConditionsRequestInvalid = 411,

            /// <summary>
            /// Enum PaymentSystemAccountError for value: PaymentSystemAccountError
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountError")]
            PaymentSystemAccountError = 412,

            /// <summary>
            /// Enum SendReportToFTP for value: SendReportToFTP
            /// </summary>
            [EnumMember(Value = "SendReportToFTP")]
            SendReportToFTP = 413,

            /// <summary>
            /// Enum SchedulingError for value: SchedulingError
            /// </summary>
            [EnumMember(Value = "SchedulingError")]
            SchedulingError = 414,

            /// <summary>
            /// Enum BadPaymentData for value: BadPaymentData
            /// </summary>
            [EnumMember(Value = "BadPaymentData")]
            BadPaymentData = 415,

            /// <summary>
            /// Enum InvoicesCanNotBeRepaid for value: InvoicesCanNotBeRepaid
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRepaid")]
            InvoicesCanNotBeRepaid = 416,

            /// <summary>
            /// Enum InvoicesCanNotBeRescheduled for value: InvoicesCanNotBeRescheduled
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRescheduled")]
            InvoicesCanNotBeRescheduled = 417,

            /// <summary>
            /// Enum InvalidBillingAddress for value: InvalidBillingAddress
            /// </summary>
            [EnumMember(Value = "InvalidBillingAddress")]
            InvalidBillingAddress = 418,

            /// <summary>
            /// Enum PaymentManagerGeneralSettingsNotFound for value: PaymentManagerGeneralSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerGeneralSettingsNotFound")]
            PaymentManagerGeneralSettingsNotFound = 419,

            /// <summary>
            /// Enum PaymentManagerEInvoiceSettingsNotFound for value: PaymentManagerEInvoiceSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerEInvoiceSettingsNotFound")]
            PaymentManagerEInvoiceSettingsNotFound = 420,

            /// <summary>
            /// Enum BadgeVerificationFailed for value: BadgeVerificationFailed
            /// </summary>
            [EnumMember(Value = "BadgeVerificationFailed")]
            BadgeVerificationFailed = 421,

            /// <summary>
            /// Enum BadgeTempPassEmpty for value: BadgeTempPassEmpty
            /// </summary>
            [EnumMember(Value = "BadgeTempPassEmpty")]
            BadgeTempPassEmpty = 422,

            /// <summary>
            /// Enum BadgeScanRequired for value: BadgeScanRequired
            /// </summary>
            [EnumMember(Value = "BadgeScanRequired")]
            BadgeScanRequired = 423,

            /// <summary>
            /// Enum SolvedIssueSubmitFailed for value: SolvedIssueSubmitFailed
            /// </summary>
            [EnumMember(Value = "SolvedIssueSubmitFailed")]
            SolvedIssueSubmitFailed = 424,

            /// <summary>
            /// Enum SolvedIssueInvalidLocationId for value: SolvedIssueInvalidLocationId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidLocationId")]
            SolvedIssueInvalidLocationId = 425,

            /// <summary>
            /// Enum SolvedIssueInvalidCategoryId for value: SolvedIssueInvalidCategoryId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidCategoryId")]
            SolvedIssueInvalidCategoryId = 426,

            /// <summary>
            /// Enum SolvedIssueInvalidTradeId for value: SolvedIssueInvalidTradeId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidTradeId")]
            SolvedIssueInvalidTradeId = 427,

            /// <summary>
            /// Enum SolvedIssueInvalidPriorityId for value: SolvedIssueInvalidPriorityId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidPriorityId")]
            SolvedIssueInvalidPriorityId = 428,

            /// <summary>
            /// Enum SolvedIssueInvalidSource for value: SolvedIssueInvalidSource
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidSource")]
            SolvedIssueInvalidSource = 429,

            /// <summary>
            /// Enum SolvedIssueInvalidProblemCode for value: SolvedIssueInvalidProblemCode
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidProblemCode")]
            SolvedIssueInvalidProblemCode = 430,

            /// <summary>
            /// Enum SolvedIssueInvalidType for value: SolvedIssueInvalidType
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidType")]
            SolvedIssueInvalidType = 431,

            /// <summary>
            /// Enum SubmitFeedbackErrorWoStatus for value: SubmitFeedbackErrorWoStatus
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackErrorWoStatus")]
            SubmitFeedbackErrorWoStatus = 432,

            /// <summary>
            /// Enum SubmitFeedbackInvalidAnswer for value: SubmitFeedbackInvalidAnswer
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidAnswer")]
            SubmitFeedbackInvalidAnswer = 433,

            /// <summary>
            /// Enum SubmitFeedbackInvalidTrackingNumber for value: SubmitFeedbackInvalidTrackingNumber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidTrackingNumber")]
            SubmitFeedbackInvalidTrackingNumber = 434,

            /// <summary>
            /// Enum SubmitFeedbackInvalidSubscriber for value: SubmitFeedbackInvalidSubscriber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSubscriber")]
            SubmitFeedbackInvalidSubscriber = 435,

            /// <summary>
            /// Enum SubmitFeedbackInvalidScore for value: SubmitFeedbackInvalidScore
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidScore")]
            SubmitFeedbackInvalidScore = 436,

            /// <summary>
            /// Enum SubmitFeedbackUnsatisfactoryCommentRequired for value: SubmitFeedbackUnsatisfactoryCommentRequired
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackUnsatisfactoryCommentRequired")]
            SubmitFeedbackUnsatisfactoryCommentRequired = 437,

            /// <summary>
            /// Enum SubmitFeedbackInvalidReviewId for value: SubmitFeedbackInvalidReviewId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidReviewId")]
            SubmitFeedbackInvalidReviewId = 438,

            /// <summary>
            /// Enum SubmitFeedbackInvalidSetupId for value: SubmitFeedbackInvalidSetupId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSetupId")]
            SubmitFeedbackInvalidSetupId = 439,

            /// <summary>
            /// Enum FeedbackSetupInvalidSetupId for value: FeedbackSetupInvalidSetupId
            /// </summary>
            [EnumMember(Value = "FeedbackSetupInvalidSetupId")]
            FeedbackSetupInvalidSetupId = 440,

            /// <summary>
            /// Enum S3SaveError for value: S3SaveError
            /// </summary>
            [EnumMember(Value = "S3SaveError")]
            S3SaveError = 441,

            /// <summary>
            /// Enum AbsSaveError for value: AbsSaveError
            /// </summary>
            [EnumMember(Value = "AbsSaveError")]
            AbsSaveError = 442,

            /// <summary>
            /// Enum GoodDataLoginFailed for value: GoodDataLoginFailed
            /// </summary>
            [EnumMember(Value = "GoodDataLoginFailed")]
            GoodDataLoginFailed = 443,

            /// <summary>
            /// Enum GoodDataElementUriError for value: GoodDataElementUriError
            /// </summary>
            [EnumMember(Value = "GoodDataElementUriError")]
            GoodDataElementUriError = 444,

            /// <summary>
            /// Enum GoodDataReportResultUriError for value: GoodDataReportResultUriError
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultUriError")]
            GoodDataReportResultUriError = 445,

            /// <summary>
            /// Enum GoodDataReportResultEmpty for value: GoodDataReportResultEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultEmpty")]
            GoodDataReportResultEmpty = 446,

            /// <summary>
            /// Enum GoodDataDesReportResCountError for value: GoodDataDesReportResCountError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResCountError")]
            GoodDataDesReportResCountError = 447,

            /// <summary>
            /// Enum GoodDataDesReportResConvertError for value: GoodDataDesReportResConvertError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResConvertError")]
            GoodDataDesReportResConvertError = 448,

            /// <summary>
            /// Enum GoodDataDesDisplayFormAttributeEmpty for value: GoodDataDesDisplayFormAttributeEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataDesDisplayFormAttributeEmpty")]
            GoodDataDesDisplayFormAttributeEmpty = 449,

            /// <summary>
            /// Enum InvalidProposalAmountLimit for value: InvalidProposalAmountLimit
            /// </summary>
            [EnumMember(Value = "InvalidProposalAmountLimit")]
            InvalidProposalAmountLimit = 450,

            /// <summary>
            /// Enum GetApprovalProposalReasonsError for value: GetApprovalProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetApprovalProposalReasonsError")]
            GetApprovalProposalReasonsError = 451,

            /// <summary>
            /// Enum GetEmailRecipientsError for value: GetEmailRecipientsError
            /// </summary>
            [EnumMember(Value = "GetEmailRecipientsError")]
            GetEmailRecipientsError = 452,

            /// <summary>
            /// Enum GetAssignProposalReasonsError for value: GetAssignProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetAssignProposalReasonsError")]
            GetAssignProposalReasonsError = 453,

            /// <summary>
            /// Enum AssetTypeDuplicateNameError for value: AssetTypeDuplicateNameError
            /// </summary>
            [EnumMember(Value = "AssetTypeDuplicateNameError")]
            AssetTypeDuplicateNameError = 454,

            /// <summary>
            /// Enum AssetTypeDoesntExistError for value: AssetTypeDoesntExistError
            /// </summary>
            [EnumMember(Value = "AssetTypeDoesntExistError")]
            AssetTypeDoesntExistError = 455,

            /// <summary>
            /// Enum AssetTypeFailUpdateRefrigerantPurpose for value: AssetTypeFailUpdateRefrigerantPurpose
            /// </summary>
            [EnumMember(Value = "AssetTypeFailUpdateRefrigerantPurpose")]
            AssetTypeFailUpdateRefrigerantPurpose = 456,

            /// <summary>
            /// Enum AssetTypeDeleteFailed for value: AssetTypeDeleteFailed
            /// </summary>
            [EnumMember(Value = "AssetTypeDeleteFailed")]
            AssetTypeDeleteFailed = 457,

            /// <summary>
            /// Enum ExistingAssetsFoundForAssetType for value: ExistingAssetsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingAssetsFoundForAssetType")]
            ExistingAssetsFoundForAssetType = 458,

            /// <summary>
            /// Enum CantModifyAssetTypeParentId for value: CantModifyAssetTypeParentId
            /// </summary>
            [EnumMember(Value = "CantModifyAssetTypeParentId")]
            CantModifyAssetTypeParentId = 459,

            /// <summary>
            /// Enum InvalidAssetTypeName for value: InvalidAssetTypeName
            /// </summary>
            [EnumMember(Value = "InvalidAssetTypeName")]
            InvalidAssetTypeName = 460,

            /// <summary>
            /// Enum AssetTypeInheritanceError for value: AssetTypeInheritanceError
            /// </summary>
            [EnumMember(Value = "AssetTypeInheritanceError")]
            AssetTypeInheritanceError = 461,

            /// <summary>
            /// Enum ExistingProposalsFoundForAssetType for value: ExistingProposalsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingProposalsFoundForAssetType")]
            ExistingProposalsFoundForAssetType = 462,

            /// <summary>
            /// Enum InstallPurchaseDateOverflow for value: InstallPurchaseDateOverflow
            /// </summary>
            [EnumMember(Value = "InstallPurchaseDateOverflow")]
            InstallPurchaseDateOverflow = 463,

            /// <summary>
            /// Enum WOexistsWithSomeAssets for value: WOexistsWithSomeAssets
            /// </summary>
            [EnumMember(Value = "WOexistsWithSomeAssets")]
            WOexistsWithSomeAssets = 464,

            /// <summary>
            /// Enum PartsChangeFailed for value: PartsChangeFailed
            /// </summary>
            [EnumMember(Value = "PartsChangeFailed")]
            PartsChangeFailed = 465,

            /// <summary>
            /// Enum PartsReasonCodeError for value: PartsReasonCodeError
            /// </summary>
            [EnumMember(Value = "PartsReasonCodeError")]
            PartsReasonCodeError = 466,

            /// <summary>
            /// Enum PartsUseDateError for value: PartsUseDateError
            /// </summary>
            [EnumMember(Value = "PartsUseDateError")]
            PartsUseDateError = 467,

            /// <summary>
            /// Enum PartsRefrigerantAlreadyExists for value: PartsRefrigerantAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsRefrigerantAlreadyExists")]
            PartsRefrigerantAlreadyExists = 468,

            /// <summary>
            /// Enum PartsChargeHistoryAlreadyExists for value: PartsChargeHistoryAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsChargeHistoryAlreadyExists")]
            PartsChargeHistoryAlreadyExists = 469,

            /// <summary>
            /// Enum PartsNotFound for value: PartsNotFound
            /// </summary>
            [EnumMember(Value = "PartsNotFound")]
            PartsNotFound = 470,

            /// <summary>
            /// Enum BulkPartUseIncorrectWorkOrder for value: BulkPartUseIncorrectWorkOrder
            /// </summary>
            [EnumMember(Value = "BulkPartUseIncorrectWorkOrder")]
            BulkPartUseIncorrectWorkOrder = 471,

            /// <summary>
            /// Enum BulkPartsByIdsNotFound for value: BulkPartsByIdsNotFound
            /// </summary>
            [EnumMember(Value = "BulkPartsByIdsNotFound")]
            BulkPartsByIdsNotFound = 472,

            /// <summary>
            /// Enum BulkPartsMultipleWosError for value: BulkPartsMultipleWosError
            /// </summary>
            [EnumMember(Value = "BulkPartsMultipleWosError")]
            BulkPartsMultipleWosError = 473,

            /// <summary>
            /// Enum BulkPartsIncorrectIsRefrigerantParam for value: BulkPartsIncorrectIsRefrigerantParam
            /// </summary>
            [EnumMember(Value = "BulkPartsIncorrectIsRefrigerantParam")]
            BulkPartsIncorrectIsRefrigerantParam = 474,

            /// <summary>
            /// Enum BulkPartsIsRefrigerantCanNotbeChanged for value: BulkPartsIsRefrigerantCanNotbeChanged
            /// </summary>
            [EnumMember(Value = "BulkPartsIsRefrigerantCanNotbeChanged")]
            BulkPartsIsRefrigerantCanNotbeChanged = 475,

            /// <summary>
            /// Enum BulkPartsReasonCodeChangeError for value: BulkPartsReasonCodeChangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeChangeError")]
            BulkPartsReasonCodeChangeError = 476,

            /// <summary>
            /// Enum BulkPartsInvalidAssetAndReasonCodeParams for value: BulkPartsInvalidAssetAndReasonCodeParams
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetAndReasonCodeParams")]
            BulkPartsInvalidAssetAndReasonCodeParams = 477,

            /// <summary>
            /// Enum BulkPartsInvalidAssetId for value: BulkPartsInvalidAssetId
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetId")]
            BulkPartsInvalidAssetId = 478,

            /// <summary>
            /// Enum BulkPartsInvalidInitialChargeCode for value: BulkPartsInvalidInitialChargeCode
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidInitialChargeCode")]
            BulkPartsInvalidInitialChargeCode = 479,

            /// <summary>
            /// Enum BulkPartsAssetDoesntContainCharge for value: BulkPartsAssetDoesntContainCharge
            /// </summary>
            [EnumMember(Value = "BulkPartsAssetDoesntContainCharge")]
            BulkPartsAssetDoesntContainCharge = 480,

            /// <summary>
            /// Enum BulkPartsIsInventoryFlagError for value: BulkPartsIsInventoryFlagError
            /// </summary>
            [EnumMember(Value = "BulkPartsIsInventoryFlagError")]
            BulkPartsIsInventoryFlagError = 481,

            /// <summary>
            /// Enum BulkPartsLeakAlreadyInProcessError for value: BulkPartsLeakAlreadyInProcessError
            /// </summary>
            [EnumMember(Value = "BulkPartsLeakAlreadyInProcessError")]
            BulkPartsLeakAlreadyInProcessError = 482,

            /// <summary>
            /// Enum BulkPartsInvalidDateRangeError for value: BulkPartsInvalidDateRangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidDateRangeError")]
            BulkPartsInvalidDateRangeError = 483,

            /// <summary>
            /// Enum BulkPartsMoeNumberRequiredError for value: BulkPartsMoeNumberRequiredError
            /// </summary>
            [EnumMember(Value = "BulkPartsMoeNumberRequiredError")]
            BulkPartsMoeNumberRequiredError = 484,

            /// <summary>
            /// Enum BulkPartsSystemChargeExceeded for value: BulkPartsSystemChargeExceeded
            /// </summary>
            [EnumMember(Value = "BulkPartsSystemChargeExceeded")]
            BulkPartsSystemChargeExceeded = 485,

            /// <summary>
            /// Enum BulkRefrigerantuUageBlocked for value: BulkRefrigerantuUageBlocked
            /// </summary>
            [EnumMember(Value = "BulkRefrigerantuUageBlocked")]
            BulkRefrigerantuUageBlocked = 486,

            /// <summary>
            /// Enum BulkIDsNotBeNull for value: BulkIDsNotBeNull
            /// </summary>
            [EnumMember(Value = "BulkIDsNotBeNull")]
            BulkIDsNotBeNull = 487,

            /// <summary>
            /// Enum BulkPartRemovalNotAllowedOnRetrofitRetireWO for value: BulkPartRemovalNotAllowedOnRetrofitRetireWO
            /// </summary>
            [EnumMember(Value = "BulkPartRemovalNotAllowedOnRetrofitRetireWO")]
            BulkPartRemovalNotAllowedOnRetrofitRetireWO = 488,

            /// <summary>
            /// Enum BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation for value: BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation
            /// </summary>
            [EnumMember(Value = "BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation")]
            BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation = 489,

            /// <summary>
            /// Enum BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged for value: BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged
            /// </summary>
            [EnumMember(Value = "BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged")]
            BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged = 490,

            /// <summary>
            /// Enum BulkInitialChargeSystemExpansionNotAllowed for value: BulkInitialChargeSystemExpansionNotAllowed
            /// </summary>
            [EnumMember(Value = "BulkInitialChargeSystemExpansionNotAllowed")]
            BulkInitialChargeSystemExpansionNotAllowed = 491,

            /// <summary>
            /// Enum BulkInventoryPartIdCanNotBeChanged for value: BulkInventoryPartIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryPartIdCanNotBeChanged")]
            BulkInventoryPartIdCanNotBeChanged = 492,

            /// <summary>
            /// Enum BulkInventoryLocationIdCanNotBeChanged for value: BulkInventoryLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryLocationIdCanNotBeChanged")]
            BulkInventoryLocationIdCanNotBeChanged = 493,

            /// <summary>
            /// Enum BulkPartsDuplicatedRequest for value: BulkPartsDuplicatedRequest
            /// </summary>
            [EnumMember(Value = "BulkPartsDuplicatedRequest")]
            BulkPartsDuplicatedRequest = 494,

            /// <summary>
            /// Enum BulkChangePartsIncorrectRefrigerantType for value: BulkChangePartsIncorrectRefrigerantType
            /// </summary>
            [EnumMember(Value = "BulkChangePartsIncorrectRefrigerantType")]
            BulkChangePartsIncorrectRefrigerantType = 495,

            /// <summary>
            /// Enum BulkPartsWorkOrderInProcessing for value: BulkPartsWorkOrderInProcessing
            /// </summary>
            [EnumMember(Value = "BulkPartsWorkOrderInProcessing")]
            BulkPartsWorkOrderInProcessing = 496,

            /// <summary>
            /// Enum BulkPartsRetroRetireIsInProgressOnThisDate for value: BulkPartsRetroRetireIsInProgressOnThisDate
            /// </summary>
            [EnumMember(Value = "BulkPartsRetroRetireIsInProgressOnThisDate")]
            BulkPartsRetroRetireIsInProgressOnThisDate = 497,

            /// <summary>
            /// Enum BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord for value: BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord
            /// </summary>
            [EnumMember(Value = "BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord")]
            BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord = 498,

            /// <summary>
            /// Enum RetrofitRetireCanNotBeRemoved for value: RetrofitRetireCanNotBeRemoved
            /// </summary>
            [EnumMember(Value = "RetrofitRetireCanNotBeRemoved")]
            RetrofitRetireCanNotBeRemoved = 499,

            /// <summary>
            /// Enum RetroRetirePartsCantbeChanged for value: RetroRetirePartsCantbeChanged
            /// </summary>
            [EnumMember(Value = "RetroRetirePartsCantbeChanged")]
            RetroRetirePartsCantbeChanged = 500,

            /// <summary>
            /// Enum BulkPartsInventoryApiFailed for value: BulkPartsInventoryApiFailed
            /// </summary>
            [EnumMember(Value = "BulkPartsInventoryApiFailed")]
            BulkPartsInventoryApiFailed = 501,

            /// <summary>
            /// Enum BadNotificationSubscriptionEventType for value: BadNotificationSubscriptionEventType
            /// </summary>
            [EnumMember(Value = "BadNotificationSubscriptionEventType")]
            BadNotificationSubscriptionEventType = 502,

            /// <summary>
            /// Enum RefrigerantUseDateOutOfTheLeakProcessDateRange for value: RefrigerantUseDateOutOfTheLeakProcessDateRange
            /// </summary>
            [EnumMember(Value = "RefrigerantUseDateOutOfTheLeakProcessDateRange")]
            RefrigerantUseDateOutOfTheLeakProcessDateRange = 503,

            /// <summary>
            /// Enum InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors for value: InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors
            /// </summary>
            [EnumMember(Value = "InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors")]
            InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors = 504,

            /// <summary>
            /// Enum BulkExternalWoCurrentlyDoesntExists for value: BulkExternalWoCurrentlyDoesntExists
            /// </summary>
            [EnumMember(Value = "BulkExternalWoCurrentlyDoesntExists")]
            BulkExternalWoCurrentlyDoesntExists = 505,

            /// <summary>
            /// Enum BulkConnectorOnlyExternalClientAssetsCanBeProcessed for value: BulkConnectorOnlyExternalClientAssetsCanBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyExternalClientAssetsCanBeProcessed")]
            BulkConnectorOnlyExternalClientAssetsCanBeProcessed = 506,

            /// <summary>
            /// Enum BulkConnectorOnlyClientAssetsCouldBeProcessed for value: BulkConnectorOnlyClientAssetsCouldBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyClientAssetsCouldBeProcessed")]
            BulkConnectorOnlyClientAssetsCouldBeProcessed = 507,

            /// <summary>
            /// Enum LeakRecordHasWrongDateValue for value: LeakRecordHasWrongDateValue
            /// </summary>
            [EnumMember(Value = "LeakRecordHasWrongDateValue")]
            LeakRecordHasWrongDateValue = 508,

            /// <summary>
            /// Enum HasUncompliedLeakRecordInAnoutherWO for value: HasUncompliedLeakRecordInAnoutherWO
            /// </summary>
            [EnumMember(Value = "HasUncompliedLeakRecordInAnoutherWO")]
            HasUncompliedLeakRecordInAnoutherWO = 509,

            /// <summary>
            /// Enum HasUncompletedWOOnAnotherLeakRecord for value: HasUncompletedWOOnAnotherLeakRecord
            /// </summary>
            [EnumMember(Value = "HasUncompletedWOOnAnotherLeakRecord")]
            HasUncompletedWOOnAnotherLeakRecord = 510,

            /// <summary>
            /// Enum OnlyOneAssetWorkOrderPair for value: OnlyOneAssetWorkOrderPair
            /// </summary>
            [EnumMember(Value = "OnlyOneAssetWorkOrderPair")]
            OnlyOneAssetWorkOrderPair = 511,

            /// <summary>
            /// Enum OneLeakRecordMustBeOnCompletedWO for value: OneLeakRecordMustBeOnCompletedWO
            /// </summary>
            [EnumMember(Value = "OneLeakRecordMustBeOnCompletedWO")]
            OneLeakRecordMustBeOnCompletedWO = 512,

            /// <summary>
            /// Enum LeakRecordNotFaund for value: LeakRecordNotFaund
            /// </summary>
            [EnumMember(Value = "LeakRecordNotFaund")]
            LeakRecordNotFaund = 513,

            /// <summary>
            /// Enum AssetIDWoIdIsRequired for value: AssetIDWoIdIsRequired
            /// </summary>
            [EnumMember(Value = "AssetIDWoIdIsRequired")]
            AssetIDWoIdIsRequired = 514,

            /// <summary>
            /// Enum BulkPartsReasonCodeRetrofit for value: BulkPartsReasonCodeRetrofit
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeRetrofit")]
            BulkPartsReasonCodeRetrofit = 515,

            /// <summary>
            /// Enum MlpImportLevelError for value: MlpImportLevelError
            /// </summary>
            [EnumMember(Value = "MlpImportLevelError")]
            MlpImportLevelError = 516,

            /// <summary>
            /// Enum UpdateMlpUserLevelError for value: UpdateMlpUserLevelError
            /// </summary>
            [EnumMember(Value = "UpdateMlpUserLevelError")]
            UpdateMlpUserLevelError = 517,

            /// <summary>
            /// Enum InvalidHolidayName for value: InvalidHolidayName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayName")]
            InvalidHolidayName = 518,

            /// <summary>
            /// Enum DuplicateHolidayName for value: DuplicateHolidayName
            /// </summary>
            [EnumMember(Value = "DuplicateHolidayName")]
            DuplicateHolidayName = 519,

            /// <summary>
            /// Enum HolidaysDeleteFailed for value: HolidaysDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysDeleteFailed")]
            HolidaysDeleteFailed = 520,

            /// <summary>
            /// Enum HolidaysExcludeInsertFailed for value: HolidaysExcludeInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeInsertFailed")]
            HolidaysExcludeInsertFailed = 521,

            /// <summary>
            /// Enum HolidaysUpdateFailed for value: HolidaysUpdateFailed
            /// </summary>
            [EnumMember(Value = "HolidaysUpdateFailed")]
            HolidaysUpdateFailed = 522,

            /// <summary>
            /// Enum HolidaysInsertFailed for value: HolidaysInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysInsertFailed")]
            HolidaysInsertFailed = 523,

            /// <summary>
            /// Enum HolidaysExcludeDeleteFailed for value: HolidaysExcludeDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeDeleteFailed")]
            HolidaysExcludeDeleteFailed = 524,

            /// <summary>
            /// Enum BusinessHoursDeleteFailed for value: BusinessHoursDeleteFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursDeleteFailed")]
            BusinessHoursDeleteFailed = 525,

            /// <summary>
            /// Enum BusinessHoursUpdateFailed for value: BusinessHoursUpdateFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursUpdateFailed")]
            BusinessHoursUpdateFailed = 526,

            /// <summary>
            /// Enum BusinessHoursInsertFailed for value: BusinessHoursInsertFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursInsertFailed")]
            BusinessHoursInsertFailed = 527,

            /// <summary>
            /// Enum InvalidTime for value: InvalidTime
            /// </summary>
            [EnumMember(Value = "InvalidTime")]
            InvalidTime = 528,

            /// <summary>
            /// Enum HolidayForDeleteNotFound for value: HolidayForDeleteNotFound
            /// </summary>
            [EnumMember(Value = "HolidayForDeleteNotFound")]
            HolidayForDeleteNotFound = 529,

            /// <summary>
            /// Enum InvalidChecklistId for value: InvalidChecklistId
            /// </summary>
            [EnumMember(Value = "InvalidChecklistId")]
            InvalidChecklistId = 530,

            /// <summary>
            /// Enum NoLinkBetweenSubscriberAndProvider for value: NoLinkBetweenSubscriberAndProvider
            /// </summary>
            [EnumMember(Value = "NoLinkBetweenSubscriberAndProvider")]
            NoLinkBetweenSubscriberAndProvider = 531,

            /// <summary>
            /// Enum WorkforceCreateContractorError for value: WorkforceCreateContractorError
            /// </summary>
            [EnumMember(Value = "WorkforceCreateContractorError")]
            WorkforceCreateContractorError = 532,

            /// <summary>
            /// Enum InvalidCertificateId for value: InvalidCertificateId
            /// </summary>
            [EnumMember(Value = "InvalidCertificateId")]
            InvalidCertificateId = 533,

            /// <summary>
            /// Enum MaxThresholdExceeded for value: MaxThresholdExceeded
            /// </summary>
            [EnumMember(Value = "MaxThresholdExceeded")]
            MaxThresholdExceeded = 534,

            /// <summary>
            /// Enum MaxTriggerRateExceeded for value: MaxTriggerRateExceeded
            /// </summary>
            [EnumMember(Value = "MaxTriggerRateExceeded")]
            MaxTriggerRateExceeded = 535,

            /// <summary>
            /// Enum LeakPriorityIsRequired for value: LeakPriorityIsRequired
            /// </summary>
            [EnumMember(Value = "LeakPriorityIsRequired")]
            LeakPriorityIsRequired = 536,

            /// <summary>
            /// Enum MissingRTSettings for value: MissingRTSettings
            /// </summary>
            [EnumMember(Value = "MissingRTSettings")]
            MissingRTSettings = 537,

            /// <summary>
            /// Enum ResolutionCodesLimitExceeded for value: ResolutionCodesLimitExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodesLimitExceeded")]
            ResolutionCodesLimitExceeded = 538,

            /// <summary>
            /// Enum ResolutionCodesAreRequired for value: ResolutionCodesAreRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodesAreRequired")]
            ResolutionCodesAreRequired = 539,

            /// <summary>
            /// Enum RootCauseIsRequired for value: RootCauseIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseIsRequired")]
            RootCauseIsRequired = 540,

            /// <summary>
            /// Enum RootCauseTextIsRequired for value: RootCauseTextIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseTextIsRequired")]
            RootCauseTextIsRequired = 541,

            /// <summary>
            /// Enum NoAccessToSetRootCauseText for value: NoAccessToSetRootCauseText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetRootCauseText")]
            NoAccessToSetRootCauseText = 542,

            /// <summary>
            /// Enum RootCauseTextMaxLengthExceeded for value: RootCauseTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "RootCauseTextMaxLengthExceeded")]
            RootCauseTextMaxLengthExceeded = 543,

            /// <summary>
            /// Enum ResolutionCodeTextIsRequired for value: ResolutionCodeTextIsRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextIsRequired")]
            ResolutionCodeTextIsRequired = 544,

            /// <summary>
            /// Enum NoAccessToSetResolutionCodeText for value: NoAccessToSetResolutionCodeText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetResolutionCodeText")]
            NoAccessToSetResolutionCodeText = 545,

            /// <summary>
            /// Enum ResolutionCodeTextMaxLengthExceeded for value: ResolutionCodeTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMaxLengthExceeded")]
            ResolutionCodeTextMaxLengthExceeded = 546,

            /// <summary>
            /// Enum ResolutionCodeTextMustBeUnique for value: ResolutionCodeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMustBeUnique")]
            ResolutionCodeTextMustBeUnique = 547,

            /// <summary>
            /// Enum ResolutionCodeWithoutFreeTextMustBeUnique for value: ResolutionCodeWithoutFreeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeWithoutFreeTextMustBeUnique")]
            ResolutionCodeWithoutFreeTextMustBeUnique = 548,

            /// <summary>
            /// Enum PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber for value: PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber
            /// </summary>
            [EnumMember(Value = "PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber")]
            PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber = 549,

            /// <summary>
            /// Enum ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider for value: ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider
            /// </summary>
            [EnumMember(Value = "ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider")]
            ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider = 550,

            /// <summary>
            /// Enum AssetCategoriesLimitExceeded for value: AssetCategoriesLimitExceeded
            /// </summary>
            [EnumMember(Value = "AssetCategoriesLimitExceeded")]
            AssetCategoriesLimitExceeded = 551,

            /// <summary>
            /// Enum NoAccessToAssetCategories for value: NoAccessToAssetCategories
            /// </summary>
            [EnumMember(Value = "NoAccessToAssetCategories")]
            NoAccessToAssetCategories = 552,

            /// <summary>
            /// Enum AssetCategoriesAreRequired for value: AssetCategoriesAreRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoriesAreRequired")]
            AssetCategoriesAreRequired = 553,

            /// <summary>
            /// Enum InvalidAssetCategoryId for value: InvalidAssetCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidAssetCategoryId")]
            InvalidAssetCategoryId = 554,

            /// <summary>
            /// Enum NoAssetCategoriesOnWorkOrder for value: NoAssetCategoriesOnWorkOrder
            /// </summary>
            [EnumMember(Value = "NoAssetCategoriesOnWorkOrder")]
            NoAssetCategoriesOnWorkOrder = 555,

            /// <summary>
            /// Enum RootCausesMustBeForAllWorkOrderAssetCategories for value: RootCausesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "RootCausesMustBeForAllWorkOrderAssetCategories")]
            RootCausesMustBeForAllWorkOrderAssetCategories = 556,

            /// <summary>
            /// Enum RootCauseTextMustBeUnique for value: RootCauseTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "RootCauseTextMustBeUnique")]
            RootCauseTextMustBeUnique = 557,

            /// <summary>
            /// Enum AssetCategoryIsRequired for value: AssetCategoryIsRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoryIsRequired")]
            AssetCategoryIsRequired = 558,

            /// <summary>
            /// Enum MultipleRootCausesMethodMustBeUsed for value: MultipleRootCausesMethodMustBeUsed
            /// </summary>
            [EnumMember(Value = "MultipleRootCausesMethodMustBeUsed")]
            MultipleRootCausesMethodMustBeUsed = 559,

            /// <summary>
            /// Enum ResolutionCodesMustBeForAllWorkOrderAssetCategories for value: ResolutionCodesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "ResolutionCodesMustBeForAllWorkOrderAssetCategories")]
            ResolutionCodesMustBeForAllWorkOrderAssetCategories = 560,

            /// <summary>
            /// Enum UnknownStoreId for value: UnknownStoreId
            /// </summary>
            [EnumMember(Value = "UnknownStoreId")]
            UnknownStoreId = 561,

            /// <summary>
            /// Enum UsesRefrigerantAttributeNotChanged for value: UsesRefrigerantAttributeNotChanged
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantAttributeNotChanged")]
            UsesRefrigerantAttributeNotChanged = 562,

            /// <summary>
            /// Enum AssetTagDuplicate for value: AssetTagDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagDuplicate")]
            AssetTagDuplicate = 563,

            /// <summary>
            /// Enum AssetTagIdDuplicate for value: AssetTagIdDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagIdDuplicate")]
            AssetTagIdDuplicate = 564,

            /// <summary>
            /// Enum UnknownEquipmentType for value: UnknownEquipmentType
            /// </summary>
            [EnumMember(Value = "UnknownEquipmentType")]
            UnknownEquipmentType = 565,

            /// <summary>
            /// Enum ParentIdInOtherLocation for value: ParentIdInOtherLocation
            /// </summary>
            [EnumMember(Value = "ParentIdInOtherLocation")]
            ParentIdInOtherLocation = 566,

            /// <summary>
            /// Enum UnknownBrandName for value: UnknownBrandName
            /// </summary>
            [EnumMember(Value = "UnknownBrandName")]
            UnknownBrandName = 567,

            /// <summary>
            /// Enum CARBRequiredManufacturedDate for value: CARBRequiredManufacturedDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredManufacturedDate")]
            CARBRequiredManufacturedDate = 568,

            /// <summary>
            /// Enum CARBRequiredInstallDate for value: CARBRequiredInstallDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredInstallDate")]
            CARBRequiredInstallDate = 569,

            /// <summary>
            /// Enum TradeNotFound for value: TradeNotFound
            /// </summary>
            [EnumMember(Value = "TradeNotFound")]
            TradeNotFound = 570,

            /// <summary>
            /// Enum AssetDoesntExist for value: AssetDoesntExist
            /// </summary>
            [EnumMember(Value = "AssetDoesntExist")]
            AssetDoesntExist = 571,

            /// <summary>
            /// Enum AssetIsNotRefrigerant for value: AssetIsNotRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetIsNotRefrigerant")]
            AssetIsNotRefrigerant = 572,

            /// <summary>
            /// Enum AssetCantContainRefrigerant for value: AssetCantContainRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetCantContainRefrigerant")]
            AssetCantContainRefrigerant = 573,

            /// <summary>
            /// Enum OnlyRackAssetsContainingCircuits for value: OnlyRackAssetsContainingCircuits
            /// </summary>
            [EnumMember(Value = "OnlyRackAssetsContainingCircuits")]
            OnlyRackAssetsContainingCircuits = 574,

            /// <summary>
            /// Enum ConnectorAssetTagIdCanNotBeChanged for value: ConnectorAssetTagIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetTagIdCanNotBeChanged")]
            ConnectorAssetTagIdCanNotBeChanged = 575,

            /// <summary>
            /// Enum ConnectorAssetLocationIdCanNotBeChanged for value: ConnectorAssetLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetLocationIdCanNotBeChanged")]
            ConnectorAssetLocationIdCanNotBeChanged = 576,

            /// <summary>
            /// Enum AssetTagCantBeUpdated for value: AssetTagCantBeUpdated
            /// </summary>
            [EnumMember(Value = "AssetTagCantBeUpdated")]
            AssetTagCantBeUpdated = 577,

            /// <summary>
            /// Enum AssetTypeIsNotonfiguredToManageRTAssets for value: AssetTypeIsNotСonfiguredToManageRTAssets
            /// </summary>
            [EnumMember(Value = "AssetTypeIsNotСonfiguredToManageRTAssets")]
            AssetTypeIsNotonfiguredToManageRTAssets = 578,

            /// <summary>
            /// Enum RefrigerantTrackingNotAvailableForLocation for value: RefrigerantTrackingNotAvailableForLocation
            /// </summary>
            [EnumMember(Value = "RefrigerantTrackingNotAvailableForLocation")]
            RefrigerantTrackingNotAvailableForLocation = 579,

            /// <summary>
            /// Enum UsesRefrigerantRequiredByAssetTypeSettings for value: UsesRefrigerantRequiredByAssetTypeSettings
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantRequiredByAssetTypeSettings")]
            UsesRefrigerantRequiredByAssetTypeSettings = 580,

            /// <summary>
            /// Enum AssetLocationTradeDoesntCorrespondToWO for value: AssetLocationTradeDoesntCorrespondToWO
            /// </summary>
            [EnumMember(Value = "AssetLocationTradeDoesntCorrespondToWO")]
            AssetLocationTradeDoesntCorrespondToWO = 581,

            /// <summary>
            /// Enum AssetLocationSelectedPMmodule for value: AssetLocationSelectedPMmodule
            /// </summary>
            [EnumMember(Value = "AssetLocationSelectedPMmodule")]
            AssetLocationSelectedPMmodule = 582,

            /// <summary>
            /// Enum UpdateAssetRepairStatusValidation for value: UpdateAssetRepairStatusValidation
            /// </summary>
            [EnumMember(Value = "UpdateAssetRepairStatusValidation")]
            UpdateAssetRepairStatusValidation = 583,

            /// <summary>
            /// Enum HasCircuitsCantBeChange for value: HasCircuitsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasCircuitsCantBeChange")]
            HasCircuitsCantBeChange = 584,

            /// <summary>
            /// Enum HasComponentsCantBeChange for value: HasComponentsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasComponentsCantBeChange")]
            HasComponentsCantBeChange = 585,

            /// <summary>
            /// Enum CircuitCanNotBeConnectedToCircuit for value: CircuitCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "CircuitCanNotBeConnectedToCircuit")]
            CircuitCanNotBeConnectedToCircuit = 586,

            /// <summary>
            /// Enum RTCircuitCanNotBeConnectedToNonRTAsset for value: RTCircuitCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTCircuitCanNotBeConnectedToNonRTAsset")]
            RTCircuitCanNotBeConnectedToNonRTAsset = 587,

            /// <summary>
            /// Enum RTComponentCanNotBeConnectedToNonRTAsset for value: RTComponentCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTComponentCanNotBeConnectedToNonRTAsset")]
            RTComponentCanNotBeConnectedToNonRTAsset = 588,

            /// <summary>
            /// Enum ComponentCanNotBeConnectedToComponent for value: ComponentCanNotBeConnectedToComponent
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToComponent")]
            ComponentCanNotBeConnectedToComponent = 589,

            /// <summary>
            /// Enum NonRTComponentCanNotBeConnectedToRtAsset for value: NonRTComponentCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTComponentCanNotBeConnectedToRtAsset")]
            NonRTComponentCanNotBeConnectedToRtAsset = 590,

            /// <summary>
            /// Enum NonRTCircuitCanNotBeConnectedToRtAsset for value: NonRTCircuitCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTCircuitCanNotBeConnectedToRtAsset")]
            NonRTCircuitCanNotBeConnectedToRtAsset = 591,

            /// <summary>
            /// Enum ComponentCanNotBeConnectedToCircuit for value: ComponentCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToCircuit")]
            ComponentCanNotBeConnectedToCircuit = 592,

            /// <summary>
            /// Enum ParentAssetShouldHaveEitherComponentsNorCircuits for value: ParentAssetShouldHaveEitherComponentsNorCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetShouldHaveEitherComponentsNorCircuits")]
            ParentAssetShouldHaveEitherComponentsNorCircuits = 593,

            /// <summary>
            /// Enum ParentAssetCantHaveComponents for value: ParentAssetCantHaveComponents
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveComponents")]
            ParentAssetCantHaveComponents = 594,

            /// <summary>
            /// Enum ParentAssetCantHaveCircuits for value: ParentAssetCantHaveCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveCircuits")]
            ParentAssetCantHaveCircuits = 595,

            /// <summary>
            /// Enum MultipleAssetsFoundForTheRequestedTagId for value: MultipleAssetsFoundForTheRequestedTagId
            /// </summary>
            [EnumMember(Value = "MultipleAssetsFoundForTheRequestedTagId")]
            MultipleAssetsFoundForTheRequestedTagId = 596,

            /// <summary>
            /// Enum DeclineWorkOrderFailed for value: DeclineWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "DeclineWorkOrderFailed")]
            DeclineWorkOrderFailed = 597,

            /// <summary>
            /// Enum AcceptWorkOrderFailed for value: AcceptWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "AcceptWorkOrderFailed")]
            AcceptWorkOrderFailed = 598,

            /// <summary>
            /// Enum WorkOrderWasAccepted for value: WorkOrderWasAccepted
            /// </summary>
            [EnumMember(Value = "WorkOrderWasAccepted")]
            WorkOrderWasAccepted = 599,

            /// <summary>
            /// Enum SaveMliAuditReportSetting for value: SaveMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSetting")]
            SaveMliAuditReportSetting = 600,

            /// <summary>
            /// Enum GetMliAuditReportSetting for value: GetMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "GetMliAuditReportSetting")]
            GetMliAuditReportSetting = 601,

            /// <summary>
            /// Enum SaveMliAuditReportResult for value: SaveMliAuditReportResult
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportResult")]
            SaveMliAuditReportResult = 602,

            /// <summary>
            /// Enum SaveMliAuditReportSendEmailStatus for value: SaveMliAuditReportSendEmailStatus
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSendEmailStatus")]
            SaveMliAuditReportSendEmailStatus = 603,

            /// <summary>
            /// Enum SaveMliAuditReportFilePath for value: SaveMliAuditReportFilePath
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportFilePath")]
            SaveMliAuditReportFilePath = 604,

            /// <summary>
            /// Enum GetSubscribersEnabledSchedule for value: GetSubscribersEnabledSchedule
            /// </summary>
            [EnumMember(Value = "GetSubscribersEnabledSchedule")]
            GetSubscribersEnabledSchedule = 605,

            /// <summary>
            /// Enum SaveMliAuditInfoError for value: SaveMliAuditInfoError
            /// </summary>
            [EnumMember(Value = "SaveMliAuditInfoError")]
            SaveMliAuditInfoError = 606,

            /// <summary>
            /// Enum TaxValidationAddNewCompanySettingsError for value: TaxValidationAddNewCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationAddNewCompanySettingsError")]
            TaxValidationAddNewCompanySettingsError = 607,

            /// <summary>
            /// Enum TaxValidationUpdateCompanySettingsError for value: TaxValidationUpdateCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationUpdateCompanySettingsError")]
            TaxValidationUpdateCompanySettingsError = 608,

            /// <summary>
            /// Enum ProjectAssociationError for value: ProjectAssociationError
            /// </summary>
            [EnumMember(Value = "ProjectAssociationError")]
            ProjectAssociationError = 609,

            /// <summary>
            /// Enum GetProjectsInvoiceAmountsError for value: GetProjectsInvoiceAmountsError
            /// </summary>
            [EnumMember(Value = "GetProjectsInvoiceAmountsError")]
            GetProjectsInvoiceAmountsError = 610,

            /// <summary>
            /// Enum TaxCodeNotUniqueError for value: TaxCodeNotUniqueError
            /// </summary>
            [EnumMember(Value = "TaxCodeNotUniqueError")]
            TaxCodeNotUniqueError = 611,

            /// <summary>
            /// Enum FieldLengthIsTooLongError for value: FieldLengthIsTooLongError
            /// </summary>
            [EnumMember(Value = "FieldLengthIsTooLongError")]
            FieldLengthIsTooLongError = 612,

            /// <summary>
            /// Enum SetTaxCodesBulkError for value: SetTaxCodesBulkError
            /// </summary>
            [EnumMember(Value = "SetTaxCodesBulkError")]
            SetTaxCodesBulkError = 613,

            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeValueError for value: InvoiceAdditionalApprovalCodeValueError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeValueError")]
            InvoiceAdditionalApprovalCodeValueError = 614,

            /// <summary>
            /// Enum BulkUpdateInvoicePaymentError for value: BulkUpdateInvoicePaymentError
            /// </summary>
            [EnumMember(Value = "BulkUpdateInvoicePaymentError")]
            BulkUpdateInvoicePaymentError = 615,

            /// <summary>
            /// Enum ContractServiceExist for value: ContractServiceExist
            /// </summary>
            [EnumMember(Value = "ContractServiceExist")]
            ContractServiceExist = 616,

            /// <summary>
            /// Enum ContractServiceCantChangeTrade for value: ContractServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeTrade")]
            ContractServiceCantChangeTrade = 617,

            /// <summary>
            /// Enum ContractServiceCantChangeCategory for value: ContractServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeCategory")]
            ContractServiceCantChangeCategory = 618,

            /// <summary>
            /// Enum ContractServiceCantChangeProvider for value: ContractServiceCantChangeProvider
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeProvider")]
            ContractServiceCantChangeProvider = 619,

            /// <summary>
            /// Enum ContractServicePMServiceCantChangeTrade for value: ContractServicePMServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeTrade")]
            ContractServicePMServiceCantChangeTrade = 620,

            /// <summary>
            /// Enum ContractServicePMServiceCantChangeCategory for value: ContractServicePMServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeCategory")]
            ContractServicePMServiceCantChangeCategory = 621,

            /// <summary>
            /// Enum WorkRequestDescriptionIsRequired for value: WorkRequestDescriptionIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestDescriptionIsRequired")]
            WorkRequestDescriptionIsRequired = 622,

            /// <summary>
            /// Enum WorkRequestCallDateIsRequired for value: WorkRequestCallDateIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateIsRequired")]
            WorkRequestCallDateIsRequired = 623,

            /// <summary>
            /// Enum WorkRequestIssueIsRequired for value: WorkRequestIssueIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueIsRequired")]
            WorkRequestIssueIsRequired = 624,

            /// <summary>
            /// Enum WorkRequestCallDateHasWrongFormat for value: WorkRequestCallDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateHasWrongFormat")]
            WorkRequestCallDateHasWrongFormat = 625,

            /// <summary>
            /// Enum WorkRequestScheduledDateHasWrongFormat for value: WorkRequestScheduledDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateHasWrongFormat")]
            WorkRequestScheduledDateHasWrongFormat = 626,

            /// <summary>
            /// Enum InvalidWorkRequestStatus for value: InvalidWorkRequestStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestStatus")]
            InvalidWorkRequestStatus = 627,

            /// <summary>
            /// Enum InvalidWorkRequestExtendedStatus for value: InvalidWorkRequestExtendedStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestExtendedStatus")]
            InvalidWorkRequestExtendedStatus = 628,

            /// <summary>
            /// Enum InvalidWorkRequestCategory for value: InvalidWorkRequestCategory
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCategory")]
            InvalidWorkRequestCategory = 629,

            /// <summary>
            /// Enum InvalidWorkRequestPriority for value: InvalidWorkRequestPriority
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestPriority")]
            InvalidWorkRequestPriority = 630,

            /// <summary>
            /// Enum InvalidWorkRequestCurrency for value: InvalidWorkRequestCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCurrency")]
            InvalidWorkRequestCurrency = 631,

            /// <summary>
            /// Enum InvalidWorkRequestIssueSetup for value: InvalidWorkRequestIssueSetup
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueSetup")]
            InvalidWorkRequestIssueSetup = 632,

            /// <summary>
            /// Enum InvalidWorkRequestIssueArea for value: InvalidWorkRequestIssueArea
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueArea")]
            InvalidWorkRequestIssueArea = 633,

            /// <summary>
            /// Enum InvalidWorkRequestAsset for value: InvalidWorkRequestAsset
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestAsset")]
            InvalidWorkRequestAsset = 634,

            /// <summary>
            /// Enum WorkRequestAttachmentFileNameIsRequired for value: WorkRequestAttachmentFileNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentFileNameIsRequired")]
            WorkRequestAttachmentFileNameIsRequired = 635,

            /// <summary>
            /// Enum WorkRequestAttachmentOriginalNameIsRequired for value: WorkRequestAttachmentOriginalNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentOriginalNameIsRequired")]
            WorkRequestAttachmentOriginalNameIsRequired = 636,

            /// <summary>
            /// Enum WorkRequestIssueProblemCodeIsRequired for value: WorkRequestIssueProblemCodeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemCodeIsRequired")]
            WorkRequestIssueProblemCodeIsRequired = 637,

            /// <summary>
            /// Enum WorkRequestIssueProblemTypeIsRequired for value: WorkRequestIssueProblemTypeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemTypeIsRequired")]
            WorkRequestIssueProblemTypeIsRequired = 638,

            /// <summary>
            /// Enum WorkRequestScheduledDateMustBeGreaterThanCallDate for value: WorkRequestScheduledDateMustBeGreaterThanCallDate
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateMustBeGreaterThanCallDate")]
            WorkRequestScheduledDateMustBeGreaterThanCallDate = 639,

            /// <summary>
            /// Enum InvalidWorkRequestId for value: InvalidWorkRequestId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestId")]
            InvalidWorkRequestId = 640,

            /// <summary>
            /// Enum WorkRequestSearchCallDateFromHasWrongFormat for value: WorkRequestSearchCallDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateFromHasWrongFormat")]
            WorkRequestSearchCallDateFromHasWrongFormat = 641,

            /// <summary>
            /// Enum WorkRequestSearchCallDateToHasWrongFormat for value: WorkRequestSearchCallDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateToHasWrongFormat")]
            WorkRequestSearchCallDateToHasWrongFormat = 642,

            /// <summary>
            /// Enum WorkRequestSearchScheduledDateFromHasWrongFormat for value: WorkRequestSearchScheduledDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateFromHasWrongFormat")]
            WorkRequestSearchScheduledDateFromHasWrongFormat = 643,

            /// <summary>
            /// Enum WorkRequestSearchScheduledDateToHasWrongFormat for value: WorkRequestSearchScheduledDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateToHasWrongFormat")]
            WorkRequestSearchScheduledDateToHasWrongFormat = 644,

            /// <summary>
            /// Enum WorkRequestSearchClosedDateFromHasWrongFormat for value: WorkRequestSearchClosedDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateFromHasWrongFormat")]
            WorkRequestSearchClosedDateFromHasWrongFormat = 645,

            /// <summary>
            /// Enum WorkRequestSearchClosedDateToHasWrongFormat for value: WorkRequestSearchClosedDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateToHasWrongFormat")]
            WorkRequestSearchClosedDateToHasWrongFormat = 646,

            /// <summary>
            /// Enum WorkOrderIsAlreadyCreatedForWorkRequest for value: WorkOrderIsAlreadyCreatedForWorkRequest
            /// </summary>
            [EnumMember(Value = "WorkOrderIsAlreadyCreatedForWorkRequest")]
            WorkOrderIsAlreadyCreatedForWorkRequest = 647,

            /// <summary>
            /// Enum WorkRequestIsClosed for value: WorkRequestIsClosed
            /// </summary>
            [EnumMember(Value = "WorkRequestIsClosed")]
            WorkRequestIsClosed = 648,

            /// <summary>
            /// Enum WorkRequestClosedReasonIsRequiredForClosedStatus for value: WorkRequestClosedReasonIsRequiredForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsRequiredForClosedStatus")]
            WorkRequestClosedReasonIsRequiredForClosedStatus = 649,

            /// <summary>
            /// Enum WorkOrderIdIsRequiredForThisClosedReason for value: WorkOrderIdIsRequiredForThisClosedReason
            /// </summary>
            [EnumMember(Value = "WorkOrderIdIsRequiredForThisClosedReason")]
            WorkOrderIdIsRequiredForThisClosedReason = 650,

            /// <summary>
            /// Enum InvalidWorkRequestClosedReason for value: InvalidWorkRequestClosedReason
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestClosedReason")]
            InvalidWorkRequestClosedReason = 651,

            /// <summary>
            /// Enum WorkRequestClosedReasonIsOnlyForClosedStatus for value: WorkRequestClosedReasonIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsOnlyForClosedStatus")]
            WorkRequestClosedReasonIsOnlyForClosedStatus = 652,

            /// <summary>
            /// Enum InvalidWorkRequestWorkOrderId for value: InvalidWorkRequestWorkOrderId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestWorkOrderId")]
            InvalidWorkRequestWorkOrderId = 653,

            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForClosedStatus for value: WorkRequestWorkOrderIdIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForClosedStatus")]
            WorkRequestWorkOrderIdIsOnlyForClosedStatus = 654,

            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForCertainClosedReason for value: WorkRequestWorkOrderIdIsOnlyForCertainClosedReason
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForCertainClosedReason")]
            WorkRequestWorkOrderIdIsOnlyForCertainClosedReason = 655,

            /// <summary>
            /// Enum InvalidWorkOrderSourceType for value: InvalidWorkOrderSourceType
            /// </summary>
            [EnumMember(Value = "InvalidWorkOrderSourceType")]
            InvalidWorkOrderSourceType = 656,

            /// <summary>
            /// Enum DeclineReasonIdIsRequired for value: DeclineReasonIdIsRequired
            /// </summary>
            [EnumMember(Value = "DeclineReasonIdIsRequired")]
            DeclineReasonIdIsRequired = 657,

            /// <summary>
            /// Enum DeclineReasonDoesntAllowCustomText for value: DeclineReasonDoesntAllowCustomText
            /// </summary>
            [EnumMember(Value = "DeclineReasonDoesntAllowCustomText")]
            DeclineReasonDoesntAllowCustomText = 658,

            /// <summary>
            /// Enum InvalidDeclineReasonId for value: InvalidDeclineReasonId
            /// </summary>
            [EnumMember(Value = "InvalidDeclineReasonId")]
            InvalidDeclineReasonId = 659,

            /// <summary>
            /// Enum MultipleWorkOrdersForPurchaseNumber for value: MultipleWorkOrdersForPurchaseNumber
            /// </summary>
            [EnumMember(Value = "MultipleWorkOrdersForPurchaseNumber")]
            MultipleWorkOrdersForPurchaseNumber = 660,

            /// <summary>
            /// Enum InvoiceMaterialMakupInvalid for value: InvoiceMaterialMakupInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialMakupInvalid")]
            InvoiceMaterialMakupInvalid = 661,

            /// <summary>
            /// Enum MaterialMarkUpDiscrepancyReasonShouldBeStated for value: MaterialMarkUpDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialMarkUpDiscrepancyReasonShouldBeStated")]
            MaterialMarkUpDiscrepancyReasonShouldBeStated = 662,

            /// <summary>
            /// Enum MaterialPriceDiscrepancyReasonShouldBeStated for value: MaterialPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialPriceDiscrepancyReasonShouldBeStated")]
            MaterialPriceDiscrepancyReasonShouldBeStated = 663,

            /// <summary>
            /// Enum OtherPriceDiscrepancyReasonShouldBeStated for value: OtherPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "OtherPriceDiscrepancyReasonShouldBeStated")]
            OtherPriceDiscrepancyReasonShouldBeStated = 664

        }


        /// <summary>
        /// The code of the first error found
        /// </summary>
        /// <value>The code of the first error found</value>
        [DataMember(Name = "ErrorCode", EmitDefaultValue = false)]
        public ErrorCodeEnum? ErrorCode { get; set; }

        /// <summary>
        /// Returns false as ErrorCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrorCode()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingErrorResponse" /> class.
        /// </summary>
        /// <param name="errorCodes">The list of error codes. Go to https://developer.servicechannel.com/basics/general/response-codes/#internal-error-codes-and-messages to map error codes to error reasons..</param>
        /// <param name="errorMessage">The description of all errors..</param>
        /// <param name="data">data.</param>
        public SCServiceChannelServicesMessagingErrorResponse(List<ErrorCodesEnum> errorCodes = default(List<ErrorCodesEnum>), string errorMessage = default(string), Object data = default(Object))
        {
            this.ErrorCodes = errorCodes;
            this.ErrorMessage = errorMessage;
            this.Data = data;
        }

        /// <summary>
        /// The list of error codes. Go to https://developer.servicechannel.com/basics/general/response-codes/#internal-error-codes-and-messages to map error codes to error reasons.
        /// </summary>
        /// <value>The list of error codes. Go to https://developer.servicechannel.com/basics/general/response-codes/#internal-error-codes-and-messages to map error codes to error reasons.</value>
        [DataMember(Name = "ErrorCodes", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingErrorResponse.ErrorCodesEnum> ErrorCodes { get; set; }

        /// <summary>
        /// The description of all errors.
        /// </summary>
        /// <value>The description of all errors.</value>
        [DataMember(Name = "ErrorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "Data", EmitDefaultValue = false)]
        public Object Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingErrorResponse {\n");
            sb.Append("  ErrorCodes: ").Append(ErrorCodes).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingErrorResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingErrorResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ErrorCodes == input.ErrorCodes ||
                    this.ErrorCodes != null &&
                    input.ErrorCodes != null &&
                    this.ErrorCodes.SequenceEqual(input.ErrorCodes)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCodes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
