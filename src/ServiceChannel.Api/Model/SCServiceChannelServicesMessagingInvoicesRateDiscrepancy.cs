/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Rate Discrepancy Item
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.RateDiscrepancy")]
    public partial class SCServiceChannelServicesMessagingInvoicesRateDiscrepancy : IEquatable<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesRateDiscrepancy" /> class.
        /// </summary>
        /// <param name="skillLevel">Get or set skill level (1 - Supervisor, 2 - Technician, 3 - Helper)..</param>
        /// <param name="skillLevelName">Get or set skill level name.</param>
        /// <param name="laborType">Get or set type of the labor (1 - Regular, 2 - Overtime, 3 - Double Time)..</param>
        /// <param name="laborTypeName">Get or set labor type name..</param>
        /// <param name="hourlyRate">Get or set hourly rate..</param>
        /// <param name="agreedRate">Get or set agreed hourly rate..</param>
        /// <param name="numOfTech">Get or set number of techs..</param>
        /// <param name="laborHours">Get or set spent hours..</param>
        /// <param name="rateDiscrepancyReason">Get or set rate discrepancy reason..</param>
        public SCServiceChannelServicesMessagingInvoicesRateDiscrepancy(int skillLevel = default(int), string skillLevelName = default(string), int laborType = default(int), string laborTypeName = default(string), double hourlyRate = default(double), double agreedRate = default(double), byte[] numOfTech = default(byte[]), double laborHours = default(double), string rateDiscrepancyReason = default(string))
        {
            this.SkillLevel = skillLevel;
            this.SkillLevelName = skillLevelName;
            this.LaborType = laborType;
            this.LaborTypeName = laborTypeName;
            this.HourlyRate = hourlyRate;
            this.AgreedRate = agreedRate;
            this.NumOfTech = numOfTech;
            this.LaborHours = laborHours;
            this.RateDiscrepancyReason = rateDiscrepancyReason;
        }

        /// <summary>
        /// Get or set skill level (1 - Supervisor, 2 - Technician, 3 - Helper).
        /// </summary>
        /// <value>Get or set skill level (1 - Supervisor, 2 - Technician, 3 - Helper).</value>
        [DataMember(Name = "SkillLevel", EmitDefaultValue = false)]
        public int SkillLevel { get; set; }

        /// <summary>
        /// Get or set skill level name
        /// </summary>
        /// <value>Get or set skill level name</value>
        [DataMember(Name = "SkillLevelName", EmitDefaultValue = false)]
        public string SkillLevelName { get; set; }

        /// <summary>
        /// Get or set type of the labor (1 - Regular, 2 - Overtime, 3 - Double Time).
        /// </summary>
        /// <value>Get or set type of the labor (1 - Regular, 2 - Overtime, 3 - Double Time).</value>
        [DataMember(Name = "LaborType", EmitDefaultValue = false)]
        public int LaborType { get; set; }

        /// <summary>
        /// Get or set labor type name.
        /// </summary>
        /// <value>Get or set labor type name.</value>
        [DataMember(Name = "LaborTypeName", EmitDefaultValue = false)]
        public string LaborTypeName { get; set; }

        /// <summary>
        /// Get or set hourly rate.
        /// </summary>
        /// <value>Get or set hourly rate.</value>
        [DataMember(Name = "HourlyRate", EmitDefaultValue = false)]
        public double HourlyRate { get; set; }

        /// <summary>
        /// Get or set agreed hourly rate.
        /// </summary>
        /// <value>Get or set agreed hourly rate.</value>
        [DataMember(Name = "AgreedRate", EmitDefaultValue = false)]
        public double AgreedRate { get; set; }

        /// <summary>
        /// Get or set number of techs.
        /// </summary>
        /// <value>Get or set number of techs.</value>
        [DataMember(Name = "NumOfTech", EmitDefaultValue = false)]
        public byte[] NumOfTech { get; set; }

        /// <summary>
        /// Get or set spent hours.
        /// </summary>
        /// <value>Get or set spent hours.</value>
        [DataMember(Name = "LaborHours", EmitDefaultValue = false)]
        public double LaborHours { get; set; }

        /// <summary>
        /// Get or set rate discrepancy reason.
        /// </summary>
        /// <value>Get or set rate discrepancy reason.</value>
        [DataMember(Name = "RateDiscrepancyReason", EmitDefaultValue = false)]
        public string RateDiscrepancyReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesRateDiscrepancy {\n");
            sb.Append("  SkillLevel: ").Append(SkillLevel).Append("\n");
            sb.Append("  SkillLevelName: ").Append(SkillLevelName).Append("\n");
            sb.Append("  LaborType: ").Append(LaborType).Append("\n");
            sb.Append("  LaborTypeName: ").Append(LaborTypeName).Append("\n");
            sb.Append("  HourlyRate: ").Append(HourlyRate).Append("\n");
            sb.Append("  AgreedRate: ").Append(AgreedRate).Append("\n");
            sb.Append("  NumOfTech: ").Append(NumOfTech).Append("\n");
            sb.Append("  LaborHours: ").Append(LaborHours).Append("\n");
            sb.Append("  RateDiscrepancyReason: ").Append(RateDiscrepancyReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesRateDiscrepancy);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesRateDiscrepancy instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesRateDiscrepancy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesRateDiscrepancy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SkillLevel == input.SkillLevel ||
                    this.SkillLevel.Equals(input.SkillLevel)
                ) && 
                (
                    this.SkillLevelName == input.SkillLevelName ||
                    (this.SkillLevelName != null &&
                    this.SkillLevelName.Equals(input.SkillLevelName))
                ) && 
                (
                    this.LaborType == input.LaborType ||
                    this.LaborType.Equals(input.LaborType)
                ) && 
                (
                    this.LaborTypeName == input.LaborTypeName ||
                    (this.LaborTypeName != null &&
                    this.LaborTypeName.Equals(input.LaborTypeName))
                ) && 
                (
                    this.HourlyRate == input.HourlyRate ||
                    this.HourlyRate.Equals(input.HourlyRate)
                ) && 
                (
                    this.AgreedRate == input.AgreedRate ||
                    this.AgreedRate.Equals(input.AgreedRate)
                ) && 
                (
                    this.NumOfTech == input.NumOfTech ||
                    (this.NumOfTech != null &&
                    this.NumOfTech.Equals(input.NumOfTech))
                ) && 
                (
                    this.LaborHours == input.LaborHours ||
                    this.LaborHours.Equals(input.LaborHours)
                ) && 
                (
                    this.RateDiscrepancyReason == input.RateDiscrepancyReason ||
                    (this.RateDiscrepancyReason != null &&
                    this.RateDiscrepancyReason.Equals(input.RateDiscrepancyReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SkillLevel.GetHashCode();
                if (this.SkillLevelName != null)
                {
                    hashCode = (hashCode * 59) + this.SkillLevelName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LaborType.GetHashCode();
                if (this.LaborTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.LaborTypeName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HourlyRate.GetHashCode();
                hashCode = (hashCode * 59) + this.AgreedRate.GetHashCode();
                if (this.NumOfTech != null)
                {
                    hashCode = (hashCode * 59) + this.NumOfTech.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LaborHours.GetHashCode();
                if (this.RateDiscrepancyReason != null)
                {
                    hashCode = (hashCode * 59) + this.RateDiscrepancyReason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
