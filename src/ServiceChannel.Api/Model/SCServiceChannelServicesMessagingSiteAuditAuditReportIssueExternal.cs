/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// The details of issues created by the auditor for the inspected checklist item. Issues are also known as action items.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.SiteAudit.AuditReportIssueExternal")]
    public partial class SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal : IEquatable<SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal" /> class.
        /// </summary>
        /// <param name="issueType">The type of the action item, either &#x60;WO&#x60; or &#x60;Comment&#x60;..</param>
        /// <param name="issueDescription">&#x60;Comment type&#x60;: auditor&#39;s comment added to the action item or its attachment. &#x60;WO type&#x60;: work order description that includes the area, problem type, asset, problem, and auditor’s description of the problem..</param>
        /// <param name="attachmentPaths">The paths to the attachments added to the checklist item..</param>
        /// <param name="issueId">&#x60;Comment type&#x60;: numeric identifier of the action item. &#x60;WO type&#x60;: numeric identifier of the work order, also known as WO tracking number..</param>
        /// <param name="workOrderPriority">The name of the work order priority if the action item belongs to the WO type..</param>
        /// <param name="date">The date and time when the auditor created the action item..</param>
        public SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal(string issueType = default(string), string issueDescription = default(string), List<string> attachmentPaths = default(List<string>), int issueId = default(int), string workOrderPriority = default(string), DateTime date = default(DateTime))
        {
            this.IssueType = issueType;
            this.IssueDescription = issueDescription;
            this.AttachmentPaths = attachmentPaths;
            this.IssueId = issueId;
            this.WorkOrderPriority = workOrderPriority;
            this.Date = date;
        }

        /// <summary>
        /// The type of the action item, either &#x60;WO&#x60; or &#x60;Comment&#x60;.
        /// </summary>
        /// <value>The type of the action item, either &#x60;WO&#x60; or &#x60;Comment&#x60;.</value>
        [DataMember(Name = "IssueType", EmitDefaultValue = false)]
        public string IssueType { get; set; }

        /// <summary>
        /// &#x60;Comment type&#x60;: auditor&#39;s comment added to the action item or its attachment. &#x60;WO type&#x60;: work order description that includes the area, problem type, asset, problem, and auditor’s description of the problem.
        /// </summary>
        /// <value>&#x60;Comment type&#x60;: auditor&#39;s comment added to the action item or its attachment. &#x60;WO type&#x60;: work order description that includes the area, problem type, asset, problem, and auditor’s description of the problem.</value>
        [DataMember(Name = "IssueDescription", EmitDefaultValue = false)]
        public string IssueDescription { get; set; }

        /// <summary>
        /// The paths to the attachments added to the checklist item.
        /// </summary>
        /// <value>The paths to the attachments added to the checklist item.</value>
        [DataMember(Name = "AttachmentPaths", EmitDefaultValue = false)]
        public List<string> AttachmentPaths { get; set; }

        /// <summary>
        /// &#x60;Comment type&#x60;: numeric identifier of the action item. &#x60;WO type&#x60;: numeric identifier of the work order, also known as WO tracking number.
        /// </summary>
        /// <value>&#x60;Comment type&#x60;: numeric identifier of the action item. &#x60;WO type&#x60;: numeric identifier of the work order, also known as WO tracking number.</value>
        [DataMember(Name = "IssueId", EmitDefaultValue = false)]
        public int IssueId { get; set; }

        /// <summary>
        /// The name of the work order priority if the action item belongs to the WO type.
        /// </summary>
        /// <value>The name of the work order priority if the action item belongs to the WO type.</value>
        [DataMember(Name = "WorkOrderPriority", EmitDefaultValue = false)]
        public string WorkOrderPriority { get; set; }

        /// <summary>
        /// The date and time when the auditor created the action item.
        /// </summary>
        /// <value>The date and time when the auditor created the action item.</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal {\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  IssueDescription: ").Append(IssueDescription).Append("\n");
            sb.Append("  AttachmentPaths: ").Append(AttachmentPaths).Append("\n");
            sb.Append("  IssueId: ").Append(IssueId).Append("\n");
            sb.Append("  WorkOrderPriority: ").Append(WorkOrderPriority).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IssueType == input.IssueType ||
                    (this.IssueType != null &&
                    this.IssueType.Equals(input.IssueType))
                ) && 
                (
                    this.IssueDescription == input.IssueDescription ||
                    (this.IssueDescription != null &&
                    this.IssueDescription.Equals(input.IssueDescription))
                ) && 
                (
                    this.AttachmentPaths == input.AttachmentPaths ||
                    this.AttachmentPaths != null &&
                    input.AttachmentPaths != null &&
                    this.AttachmentPaths.SequenceEqual(input.AttachmentPaths)
                ) && 
                (
                    this.IssueId == input.IssueId ||
                    this.IssueId.Equals(input.IssueId)
                ) && 
                (
                    this.WorkOrderPriority == input.WorkOrderPriority ||
                    (this.WorkOrderPriority != null &&
                    this.WorkOrderPriority.Equals(input.WorkOrderPriority))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssueType != null)
                {
                    hashCode = (hashCode * 59) + this.IssueType.GetHashCode();
                }
                if (this.IssueDescription != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDescription.GetHashCode();
                }
                if (this.AttachmentPaths != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentPaths.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IssueId.GetHashCode();
                if (this.WorkOrderPriority != null)
                {
                    hashCode = (hashCode * 59) + this.WorkOrderPriority.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
