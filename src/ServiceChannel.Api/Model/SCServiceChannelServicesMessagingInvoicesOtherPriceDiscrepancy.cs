/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// OtherPriceDiscrepancies
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.OtherPriceDiscrepancy")]
    public partial class SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy : IEquatable<SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy" /> class.
        /// </summary>
        /// <param name="lineItemId">Get or set LineItemId.</param>
        /// <param name="appliedUnitPrice">Get or set AppliedUnitPrice.</param>
        /// <param name="agreedUnitPrice">Get or set AgreedUnitPrice.</param>
        /// <param name="discrepancyReason">Get or set DiscrepancyReason.</param>
        public SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy(int lineItemId = default(int), double appliedUnitPrice = default(double), double agreedUnitPrice = default(double), string discrepancyReason = default(string))
        {
            this.LineItemId = lineItemId;
            this.AppliedUnitPrice = appliedUnitPrice;
            this.AgreedUnitPrice = agreedUnitPrice;
            this.DiscrepancyReason = discrepancyReason;
        }

        /// <summary>
        /// Get or set LineItemId
        /// </summary>
        /// <value>Get or set LineItemId</value>
        [DataMember(Name = "LineItemId", EmitDefaultValue = false)]
        public int LineItemId { get; set; }

        /// <summary>
        /// Get or set AppliedUnitPrice
        /// </summary>
        /// <value>Get or set AppliedUnitPrice</value>
        [DataMember(Name = "AppliedUnitPrice", EmitDefaultValue = false)]
        public double AppliedUnitPrice { get; set; }

        /// <summary>
        /// Get or set AgreedUnitPrice
        /// </summary>
        /// <value>Get or set AgreedUnitPrice</value>
        [DataMember(Name = "AgreedUnitPrice", EmitDefaultValue = false)]
        public double AgreedUnitPrice { get; set; }

        /// <summary>
        /// Get or set DiscrepancyReason
        /// </summary>
        /// <value>Get or set DiscrepancyReason</value>
        [DataMember(Name = "DiscrepancyReason", EmitDefaultValue = false)]
        public string DiscrepancyReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy {\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  AppliedUnitPrice: ").Append(AppliedUnitPrice).Append("\n");
            sb.Append("  AgreedUnitPrice: ").Append(AgreedUnitPrice).Append("\n");
            sb.Append("  DiscrepancyReason: ").Append(DiscrepancyReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesOtherPriceDiscrepancy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LineItemId == input.LineItemId ||
                    this.LineItemId.Equals(input.LineItemId)
                ) && 
                (
                    this.AppliedUnitPrice == input.AppliedUnitPrice ||
                    this.AppliedUnitPrice.Equals(input.AppliedUnitPrice)
                ) && 
                (
                    this.AgreedUnitPrice == input.AgreedUnitPrice ||
                    this.AgreedUnitPrice.Equals(input.AgreedUnitPrice)
                ) && 
                (
                    this.DiscrepancyReason == input.DiscrepancyReason ||
                    (this.DiscrepancyReason != null &&
                    this.DiscrepancyReason.Equals(input.DiscrepancyReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LineItemId.GetHashCode();
                hashCode = (hashCode * 59) + this.AppliedUnitPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.AgreedUnitPrice.GetHashCode();
                if (this.DiscrepancyReason != null)
                {
                    hashCode = (hashCode * 59) + this.DiscrepancyReason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
