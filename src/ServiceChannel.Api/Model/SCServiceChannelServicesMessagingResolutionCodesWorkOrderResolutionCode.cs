/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Resolution code object.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.ResolutionCodes.WorkOrderResolutionCode")]
    public partial class SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode : IEquatable<SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode" /> class.
        /// </summary>
        /// <param name="key">Resolution code identifier..</param>
        /// <param name="value">Resolution code name..</param>
        /// <param name="hasFreeText">Defines whether a user can enter a comment explaining their understanding of the resolution code and specifying what was done on site to solve the issue. (default to false).</param>
        /// <param name="text">Comment that a technician enters to provide their understanding of the resolution code of a work order explaining what was done on site to solve the issue.              Comments are enabled for resolution codes with the &#x60;HasFreeText&#x60; attribute..</param>
        /// <param name="assetCategoryId">Asset category ID specified by a user with access to asset categories..</param>
        public SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode(int key = default(int), string value = default(string), bool hasFreeText = false, string text = default(string), int assetCategoryId = default(int))
        {
            this.Key = key;
            this.Value = value;
            this.HasFreeText = hasFreeText;
            this.Text = text;
            this.AssetCategoryId = assetCategoryId;
        }

        /// <summary>
        /// Resolution code identifier.
        /// </summary>
        /// <value>Resolution code identifier.</value>
        [DataMember(Name = "Key", EmitDefaultValue = false)]
        public int Key { get; set; }

        /// <summary>
        /// Resolution code name.
        /// </summary>
        /// <value>Resolution code name.</value>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Defines whether a user can enter a comment explaining their understanding of the resolution code and specifying what was done on site to solve the issue.
        /// </summary>
        /// <value>Defines whether a user can enter a comment explaining their understanding of the resolution code and specifying what was done on site to solve the issue.</value>
        [DataMember(Name = "HasFreeText", EmitDefaultValue = true)]
        public bool HasFreeText { get; set; }

        /// <summary>
        /// Comment that a technician enters to provide their understanding of the resolution code of a work order explaining what was done on site to solve the issue.              Comments are enabled for resolution codes with the &#x60;HasFreeText&#x60; attribute.
        /// </summary>
        /// <value>Comment that a technician enters to provide their understanding of the resolution code of a work order explaining what was done on site to solve the issue.              Comments are enabled for resolution codes with the &#x60;HasFreeText&#x60; attribute.</value>
        [DataMember(Name = "Text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Asset category ID specified by a user with access to asset categories.
        /// </summary>
        /// <value>Asset category ID specified by a user with access to asset categories.</value>
        [DataMember(Name = "AssetCategoryId", EmitDefaultValue = false)]
        public int AssetCategoryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  HasFreeText: ").Append(HasFreeText).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  AssetCategoryId: ").Append(AssetCategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingResolutionCodesWorkOrderResolutionCode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    this.Key.Equals(input.Key)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.HasFreeText == input.HasFreeText ||
                    this.HasFreeText.Equals(input.HasFreeText)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.AssetCategoryId == input.AssetCategoryId ||
                    this.AssetCategoryId.Equals(input.AssetCategoryId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Key.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasFreeText.GetHashCode();
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetCategoryId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
