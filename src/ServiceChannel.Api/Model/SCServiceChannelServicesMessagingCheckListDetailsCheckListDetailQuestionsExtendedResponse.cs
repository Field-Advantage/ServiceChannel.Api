/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Checklist question details.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.CheckListDetails.CheckListDetailQuestionsExtendedResponse")]
    public partial class SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse : IEquatable<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines whether a technician is required to upload an attachment when answering the question:               • 0 — Adding an attachment is optional.               • 1 — An attachment is not required.               • 2 — Uploading an attachment is mandatory.
        /// </summary>
        /// <value>Defines whether a technician is required to upload an attachment when answering the question:               • 0 — Adding an attachment is optional.               • 1 — An attachment is not required.               • 2 — Uploading an attachment is mandatory.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PictureFlagEnum
        {
            /// <summary>
            /// Enum Optional for value: Optional
            /// </summary>
            [EnumMember(Value = "Optional")]
            Optional = 1,

            /// <summary>
            /// Enum No for value: No
            /// </summary>
            [EnumMember(Value = "No")]
            No = 2,

            /// <summary>
            /// Enum Required for value: Required
            /// </summary>
            [EnumMember(Value = "Required")]
            Required = 3

        }


        /// <summary>
        /// Defines whether a technician is required to upload an attachment when answering the question:               • 0 — Adding an attachment is optional.               • 1 — An attachment is not required.               • 2 — Uploading an attachment is mandatory.
        /// </summary>
        /// <value>Defines whether a technician is required to upload an attachment when answering the question:               • 0 — Adding an attachment is optional.               • 1 — An attachment is not required.               • 2 — Uploading an attachment is mandatory.</value>
        [DataMember(Name = "PictureFlag", EmitDefaultValue = false)]
        public PictureFlagEnum? PictureFlag { get; set; }
        /// <summary>
        /// [Checklist question type](https://developer.servicechannel.com/guides/checklists/types-of-checklist-questions/):               • 0 — **Acknowledgement**: Represents an on/off toggle prompting a technician to give a positive or negative response to a question.               • 1 — **Selector**: Provides multiple configured answer options to choose from.               • 2 — **Text Entry**: Allows entering a text answer.               • 4 — **Numeric Input**: Prompts to submit a number as a response.
        /// </summary>
        /// <value>[Checklist question type](https://developer.servicechannel.com/guides/checklists/types-of-checklist-questions/):               • 0 — **Acknowledgement**: Represents an on/off toggle prompting a technician to give a positive or negative response to a question.               • 1 — **Selector**: Provides multiple configured answer options to choose from.               • 2 — **Text Entry**: Allows entering a text answer.               • 4 — **Numeric Input**: Prompts to submit a number as a response.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuestionTypeEnum
        {
            /// <summary>
            /// Enum CheckBox for value: CheckBox
            /// </summary>
            [EnumMember(Value = "CheckBox")]
            CheckBox = 1,

            /// <summary>
            /// Enum RadioButton for value: RadioButton
            /// </summary>
            [EnumMember(Value = "RadioButton")]
            RadioButton = 2,

            /// <summary>
            /// Enum TextEntry for value: TextEntry
            /// </summary>
            [EnumMember(Value = "TextEntry")]
            TextEntry = 3,

            /// <summary>
            /// Enum TriState for value: TriState
            /// </summary>
            [EnumMember(Value = "TriState")]
            TriState = 4,

            /// <summary>
            /// Enum NumericInput for value: NumericInput
            /// </summary>
            [EnumMember(Value = "NumericInput")]
            NumericInput = 5

        }


        /// <summary>
        /// [Checklist question type](https://developer.servicechannel.com/guides/checklists/types-of-checklist-questions/):               • 0 — **Acknowledgement**: Represents an on/off toggle prompting a technician to give a positive or negative response to a question.               • 1 — **Selector**: Provides multiple configured answer options to choose from.               • 2 — **Text Entry**: Allows entering a text answer.               • 4 — **Numeric Input**: Prompts to submit a number as a response.
        /// </summary>
        /// <value>[Checklist question type](https://developer.servicechannel.com/guides/checklists/types-of-checklist-questions/):               • 0 — **Acknowledgement**: Represents an on/off toggle prompting a technician to give a positive or negative response to a question.               • 1 — **Selector**: Provides multiple configured answer options to choose from.               • 2 — **Text Entry**: Allows entering a text answer.               • 4 — **Numeric Input**: Prompts to submit a number as a response.</value>
        [DataMember(Name = "QuestionType", EmitDefaultValue = false)]
        public QuestionTypeEnum? QuestionType { get; set; }
        /// <summary>
        /// Defines the checklist segment the question belongs to: 1 — check-in segment, 2 — check-out segment.
        /// </summary>
        /// <value>Defines the checklist segment the question belongs to: 1 — check-in segment, 2 — check-out segment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CheckListTimingTypeEnum
        {
            /// <summary>
            /// Enum CheckIn for value: CheckIn
            /// </summary>
            [EnumMember(Value = "CheckIn")]
            CheckIn = 1,

            /// <summary>
            /// Enum CheckOut for value: CheckOut
            /// </summary>
            [EnumMember(Value = "CheckOut")]
            CheckOut = 2

        }


        /// <summary>
        /// Defines the checklist segment the question belongs to: 1 — check-in segment, 2 — check-out segment.
        /// </summary>
        /// <value>Defines the checklist segment the question belongs to: 1 — check-in segment, 2 — check-out segment.</value>
        [DataMember(Name = "CheckListTimingType", EmitDefaultValue = false)]
        public CheckListTimingTypeEnum? CheckListTimingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse" /> class.
        /// </summary>
        /// <param name="checkListCreatedDate">Date and time when the checklist was created..</param>
        /// <param name="checkListName">Name of the checklist the question belongs to..</param>
        /// <param name="id">Checklist question ID..</param>
        /// <param name="checkListId">ID of the checklist the question belongs to..</param>
        /// <param name="question">Checklist question that a technician is prompted to answer when working on a service request..</param>
        /// <param name="shortDescription">Not applicable to checklists..</param>
        /// <param name="answerRequired">Defines whether answering this checklist question is mandatory. (default to false).</param>
        /// <param name="pictureFlag">Defines whether a technician is required to upload an attachment when answering the question:               • 0 — Adding an attachment is optional.               • 1 — An attachment is not required.               • 2 — Uploading an attachment is mandatory..</param>
        /// <param name="sequence">Not applicable to checklists..</param>
        /// <param name="questionType">[Checklist question type](https://developer.servicechannel.com/guides/checklists/types-of-checklist-questions/):               • 0 — **Acknowledgement**: Represents an on/off toggle prompting a technician to give a positive or negative response to a question.               • 1 — **Selector**: Provides multiple configured answer options to choose from.               • 2 — **Text Entry**: Allows entering a text answer.               • 4 — **Numeric Input**: Prompts to submit a number as a response..</param>
        /// <param name="checkListQuestionOptions">Answer options for questions of the Selector type..</param>
        /// <param name="answerCanPersist">Defines whether the answer to this question can persist. If the answer is persistent, the last submitted response populates on the question. A technician can either opt for the current response or update it. (default to false).</param>
        /// <param name="checkListTimingType">Defines the checklist segment the question belongs to: 1 — check-in segment, 2 — check-out segment..</param>
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse(DateTime checkListCreatedDate = default(DateTime), string checkListName = default(string), int id = default(int), int checkListId = default(int), string question = default(string), string shortDescription = default(string), bool answerRequired = false, PictureFlagEnum? pictureFlag = default(PictureFlagEnum?), int sequence = default(int), QuestionTypeEnum? questionType = default(QuestionTypeEnum?), List<SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse> checkListQuestionOptions = default(List<SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse>), bool answerCanPersist = false, CheckListTimingTypeEnum? checkListTimingType = default(CheckListTimingTypeEnum?))
        {
            this.CheckListCreatedDate = checkListCreatedDate;
            this.CheckListName = checkListName;
            this.Id = id;
            this.CheckListId = checkListId;
            this.Question = question;
            this.ShortDescription = shortDescription;
            this.AnswerRequired = answerRequired;
            this.PictureFlag = pictureFlag;
            this.Sequence = sequence;
            this.QuestionType = questionType;
            this.CheckListQuestionOptions = checkListQuestionOptions;
            this.AnswerCanPersist = answerCanPersist;
            this.CheckListTimingType = checkListTimingType;
        }

        /// <summary>
        /// Date and time when the checklist was created.
        /// </summary>
        /// <value>Date and time when the checklist was created.</value>
        [DataMember(Name = "CheckListCreatedDate", EmitDefaultValue = false)]
        public DateTime CheckListCreatedDate { get; set; }

        /// <summary>
        /// Name of the checklist the question belongs to.
        /// </summary>
        /// <value>Name of the checklist the question belongs to.</value>
        [DataMember(Name = "CheckListName", EmitDefaultValue = false)]
        public string CheckListName { get; set; }

        /// <summary>
        /// Checklist question ID.
        /// </summary>
        /// <value>Checklist question ID.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// ID of the checklist the question belongs to.
        /// </summary>
        /// <value>ID of the checklist the question belongs to.</value>
        [DataMember(Name = "CheckListId", EmitDefaultValue = false)]
        public int CheckListId { get; set; }

        /// <summary>
        /// Checklist question that a technician is prompted to answer when working on a service request.
        /// </summary>
        /// <value>Checklist question that a technician is prompted to answer when working on a service request.</value>
        [DataMember(Name = "Question", EmitDefaultValue = false)]
        public string Question { get; set; }

        /// <summary>
        /// Not applicable to checklists.
        /// </summary>
        /// <value>Not applicable to checklists.</value>
        [DataMember(Name = "ShortDescription", EmitDefaultValue = false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Defines whether answering this checklist question is mandatory.
        /// </summary>
        /// <value>Defines whether answering this checklist question is mandatory.</value>
        [DataMember(Name = "AnswerRequired", EmitDefaultValue = true)]
        public bool AnswerRequired { get; set; }

        /// <summary>
        /// Not applicable to checklists.
        /// </summary>
        /// <value>Not applicable to checklists.</value>
        [DataMember(Name = "Sequence", EmitDefaultValue = false)]
        public int Sequence { get; set; }

        /// <summary>
        /// Answer options for questions of the Selector type.
        /// </summary>
        /// <value>Answer options for questions of the Selector type.</value>
        [DataMember(Name = "CheckListQuestionOptions", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse> CheckListQuestionOptions { get; set; }

        /// <summary>
        /// Defines whether the answer to this question can persist. If the answer is persistent, the last submitted response populates on the question. A technician can either opt for the current response or update it.
        /// </summary>
        /// <value>Defines whether the answer to this question can persist. If the answer is persistent, the last submitted response populates on the question. A technician can either opt for the current response or update it.</value>
        [DataMember(Name = "AnswerCanPersist", EmitDefaultValue = true)]
        public bool AnswerCanPersist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse {\n");
            sb.Append("  CheckListCreatedDate: ").Append(CheckListCreatedDate).Append("\n");
            sb.Append("  CheckListName: ").Append(CheckListName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CheckListId: ").Append(CheckListId).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  AnswerRequired: ").Append(AnswerRequired).Append("\n");
            sb.Append("  PictureFlag: ").Append(PictureFlag).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  QuestionType: ").Append(QuestionType).Append("\n");
            sb.Append("  CheckListQuestionOptions: ").Append(CheckListQuestionOptions).Append("\n");
            sb.Append("  AnswerCanPersist: ").Append(AnswerCanPersist).Append("\n");
            sb.Append("  CheckListTimingType: ").Append(CheckListTimingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CheckListCreatedDate == input.CheckListCreatedDate ||
                    (this.CheckListCreatedDate != null &&
                    this.CheckListCreatedDate.Equals(input.CheckListCreatedDate))
                ) && 
                (
                    this.CheckListName == input.CheckListName ||
                    (this.CheckListName != null &&
                    this.CheckListName.Equals(input.CheckListName))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CheckListId == input.CheckListId ||
                    this.CheckListId.Equals(input.CheckListId)
                ) && 
                (
                    this.Question == input.Question ||
                    (this.Question != null &&
                    this.Question.Equals(input.Question))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.AnswerRequired == input.AnswerRequired ||
                    this.AnswerRequired.Equals(input.AnswerRequired)
                ) && 
                (
                    this.PictureFlag == input.PictureFlag ||
                    this.PictureFlag.Equals(input.PictureFlag)
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    this.Sequence.Equals(input.Sequence)
                ) && 
                (
                    this.QuestionType == input.QuestionType ||
                    this.QuestionType.Equals(input.QuestionType)
                ) && 
                (
                    this.CheckListQuestionOptions == input.CheckListQuestionOptions ||
                    this.CheckListQuestionOptions != null &&
                    input.CheckListQuestionOptions != null &&
                    this.CheckListQuestionOptions.SequenceEqual(input.CheckListQuestionOptions)
                ) && 
                (
                    this.AnswerCanPersist == input.AnswerCanPersist ||
                    this.AnswerCanPersist.Equals(input.AnswerCanPersist)
                ) && 
                (
                    this.CheckListTimingType == input.CheckListTimingType ||
                    this.CheckListTimingType.Equals(input.CheckListTimingType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckListCreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CheckListCreatedDate.GetHashCode();
                }
                if (this.CheckListName != null)
                {
                    hashCode = (hashCode * 59) + this.CheckListName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CheckListId.GetHashCode();
                if (this.Question != null)
                {
                    hashCode = (hashCode * 59) + this.Question.GetHashCode();
                }
                if (this.ShortDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ShortDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnswerRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.PictureFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.Sequence.GetHashCode();
                hashCode = (hashCode * 59) + this.QuestionType.GetHashCode();
                if (this.CheckListQuestionOptions != null)
                {
                    hashCode = (hashCode * 59) + this.CheckListQuestionOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnswerCanPersist.GetHashCode();
                hashCode = (hashCode * 59) + this.CheckListTimingType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
