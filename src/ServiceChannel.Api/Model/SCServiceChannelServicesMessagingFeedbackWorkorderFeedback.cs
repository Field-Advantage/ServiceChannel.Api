/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingFeedbackWorkorderFeedback
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Feedback.WorkorderFeedback")]
    public partial class SCServiceChannelServicesMessagingFeedbackWorkorderFeedback : IEquatable<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingFeedbackWorkorderFeedback" /> class.
        /// </summary>
        /// <param name="trackingNumber">trackingNumber.</param>
        /// <param name="description">description.</param>
        /// <param name="caller">caller.</param>
        /// <param name="callDateString">callDateString.</param>
        /// <param name="callDateDTO">callDateDTO.</param>
        /// <param name="scheduledDateString">scheduledDateString.</param>
        /// <param name="scheduledDateDTO">scheduledDateDTO.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="vendor">vendor.</param>
        /// <param name="vendorPhone">vendorPhone.</param>
        /// <param name="prioritySub">prioritySub.</param>
        /// <param name="trade">trade.</param>
        /// <param name="category">category.</param>
        /// <param name="review">review.</param>
        /// <param name="status">status.</param>
        /// <param name="area">area.</param>
        /// <param name="completedDate">completedDate.</param>
        /// <param name="notesCount">notesCount.</param>
        public SCServiceChannelServicesMessagingFeedbackWorkorderFeedback(int trackingNumber = default(int), string description = default(string), string caller = default(string), string callDateString = default(string), DateTime callDateDTO = default(DateTime), string scheduledDateString = default(string), DateTime scheduledDateDTO = default(DateTime), string createdBy = default(string), string vendor = default(string), string vendorPhone = default(string), string prioritySub = default(string), string trade = default(string), string category = default(string), SCServiceChannelServicesMessagingFeedbackFeedbackReview review = default(SCServiceChannelServicesMessagingFeedbackFeedbackReview), SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor status = default(SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor), string area = default(string), DateTime completedDate = default(DateTime), int notesCount = default(int))
        {
            this.TrackingNumber = trackingNumber;
            this.Description = description;
            this.Caller = caller;
            this.CallDateString = callDateString;
            this.CallDateDTO = callDateDTO;
            this.ScheduledDateString = scheduledDateString;
            this.ScheduledDateDTO = scheduledDateDTO;
            this.CreatedBy = createdBy;
            this.Vendor = vendor;
            this.VendorPhone = vendorPhone;
            this.PrioritySub = prioritySub;
            this.Trade = trade;
            this.Category = category;
            this.Review = review;
            this.Status = status;
            this.Area = area;
            this.CompletedDate = completedDate;
            this.NotesCount = notesCount;
        }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name = "TrackingNumber", EmitDefaultValue = false)]
        public int TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Caller
        /// </summary>
        [DataMember(Name = "Caller", EmitDefaultValue = false)]
        public string Caller { get; set; }

        /// <summary>
        /// Gets or Sets CallDateString
        /// </summary>
        [DataMember(Name = "CallDateString", EmitDefaultValue = false)]
        public string CallDateString { get; set; }

        /// <summary>
        /// Gets or Sets CallDateDTO
        /// </summary>
        [DataMember(Name = "CallDate_DTO", EmitDefaultValue = false)]
        public DateTime CallDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDateString
        /// </summary>
        [DataMember(Name = "ScheduledDateString", EmitDefaultValue = false)]
        public string ScheduledDateString { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDateDTO
        /// </summary>
        [DataMember(Name = "ScheduledDate_DTO", EmitDefaultValue = false)]
        public DateTime ScheduledDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name = "Vendor", EmitDefaultValue = false)]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or Sets VendorPhone
        /// </summary>
        [DataMember(Name = "VendorPhone", EmitDefaultValue = false)]
        public string VendorPhone { get; set; }

        /// <summary>
        /// Gets or Sets PrioritySub
        /// </summary>
        [DataMember(Name = "PrioritySub", EmitDefaultValue = false)]
        public string PrioritySub { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Review
        /// </summary>
        [DataMember(Name = "Review", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingFeedbackFeedbackReview Review { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor Status { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "Area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name = "CompletedDate", EmitDefaultValue = false)]
        public DateTime CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets NotesCount
        /// </summary>
        [DataMember(Name = "NotesCount", EmitDefaultValue = false)]
        public int NotesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingFeedbackWorkorderFeedback {\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("  CallDateString: ").Append(CallDateString).Append("\n");
            sb.Append("  CallDateDTO: ").Append(CallDateDTO).Append("\n");
            sb.Append("  ScheduledDateString: ").Append(ScheduledDateString).Append("\n");
            sb.Append("  ScheduledDateDTO: ").Append(ScheduledDateDTO).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  VendorPhone: ").Append(VendorPhone).Append("\n");
            sb.Append("  PrioritySub: ").Append(PrioritySub).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Review: ").Append(Review).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  NotesCount: ").Append(NotesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingFeedbackWorkorderFeedback);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingFeedbackWorkorderFeedback instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingFeedbackWorkorderFeedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingFeedbackWorkorderFeedback input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    this.TrackingNumber.Equals(input.TrackingNumber)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Caller == input.Caller ||
                    (this.Caller != null &&
                    this.Caller.Equals(input.Caller))
                ) && 
                (
                    this.CallDateString == input.CallDateString ||
                    (this.CallDateString != null &&
                    this.CallDateString.Equals(input.CallDateString))
                ) && 
                (
                    this.CallDateDTO == input.CallDateDTO ||
                    (this.CallDateDTO != null &&
                    this.CallDateDTO.Equals(input.CallDateDTO))
                ) && 
                (
                    this.ScheduledDateString == input.ScheduledDateString ||
                    (this.ScheduledDateString != null &&
                    this.ScheduledDateString.Equals(input.ScheduledDateString))
                ) && 
                (
                    this.ScheduledDateDTO == input.ScheduledDateDTO ||
                    (this.ScheduledDateDTO != null &&
                    this.ScheduledDateDTO.Equals(input.ScheduledDateDTO))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.VendorPhone == input.VendorPhone ||
                    (this.VendorPhone != null &&
                    this.VendorPhone.Equals(input.VendorPhone))
                ) && 
                (
                    this.PrioritySub == input.PrioritySub ||
                    (this.PrioritySub != null &&
                    this.PrioritySub.Equals(input.PrioritySub))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Review == input.Review ||
                    (this.Review != null &&
                    this.Review.Equals(input.Review))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.NotesCount == input.NotesCount ||
                    this.NotesCount.Equals(input.NotesCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Caller != null)
                {
                    hashCode = (hashCode * 59) + this.Caller.GetHashCode();
                }
                if (this.CallDateString != null)
                {
                    hashCode = (hashCode * 59) + this.CallDateString.GetHashCode();
                }
                if (this.CallDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.CallDateDTO.GetHashCode();
                }
                if (this.ScheduledDateString != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDateString.GetHashCode();
                }
                if (this.ScheduledDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDateDTO.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.Vendor != null)
                {
                    hashCode = (hashCode * 59) + this.Vendor.GetHashCode();
                }
                if (this.VendorPhone != null)
                {
                    hashCode = (hashCode * 59) + this.VendorPhone.GetHashCode();
                }
                if (this.PrioritySub != null)
                {
                    hashCode = (hashCode * 59) + this.PrioritySub.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Review != null)
                {
                    hashCode = (hashCode * 59) + this.Review.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Area != null)
                {
                    hashCode = (hashCode * 59) + this.Area.GetHashCode();
                }
                if (this.CompletedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
