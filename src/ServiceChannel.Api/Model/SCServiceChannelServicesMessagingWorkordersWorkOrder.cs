/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Workorder object for Messages exchenge.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.WorkOrder")]
    public partial class SCServiceChannelServicesMessagingWorkordersWorkOrder : IEquatable<SCServiceChannelServicesMessagingWorkordersWorkOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersWorkOrder" /> class.
        /// </summary>
        /// <param name="id">Work Order identifier..</param>
        /// <param name="number">Work Order Number.</param>
        /// <param name="purchaseNumber">Purchase number of work order.</param>
        /// <param name="subscriber">subscriber.</param>
        /// <param name="provider">provider.</param>
        /// <param name="location">location.</param>
        /// <param name="locationId">LocationId for use in ODATA calls without expanding Location property (ref. PLAT-55878).</param>
        /// <param name="status">status.</param>
        /// <param name="issueTicketInfo">issueTicketInfo.</param>
        /// <param name="caller">Caller.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="callDate">callDate.</param>
        /// <param name="callDateDTO">callDateDTO.</param>
        /// <param name="reassignDate">reassignDate.</param>
        /// <param name="reassignDateDTO">reassignDateDTO.</param>
        /// <param name="locationOpenDate">locationOpenDate.</param>
        /// <param name="locationRemodelDate">locationRemodelDate.</param>
        /// <param name="estimatedCompletionDate">estimatedCompletionDate.</param>
        /// <param name="priority">priority.</param>
        /// <param name="trade">trade.</param>
        /// <param name="tradeId">tradeId.</param>
        /// <param name="providerRank">providerRank.</param>
        /// <param name="approvalCode">approvalCode.</param>
        /// <param name="scheduledDate">scheduledDate.</param>
        /// <param name="scheduledDateDTO">scheduledDateDTO.</param>
        /// <param name="completedDate">completedDate.</param>
        /// <param name="completedDateDTO">completedDateDTO.</param>
        /// <param name="expirationDate">Gets or sets ExpirationDate..</param>
        /// <param name="expirationDateDTO">expirationDateDTO.</param>
        /// <param name="originalEta">originalEta.</param>
        /// <param name="originalEtaDTO">originalEtaDTO.</param>
        /// <param name="updatedDate">Updated Date.</param>
        /// <param name="updatedDateDTO">updatedDateDTO.</param>
        /// <param name="createdDate">s              Created Date.</param>
        /// <param name="createdDateDTO">createdDateDTO.</param>
        /// <param name="description">description.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="category">category.</param>
        /// <param name="nte">nte.</param>
        /// <param name="tax">Tax.</param>
        /// <param name="tax2">Tax2.</param>
        /// <param name="tax2Type">Tax2Type.</param>
        /// <param name="price">Price (subtotal).</param>
        /// <param name="currency">currency.</param>
        /// <param name="problemCode">problemCode.</param>
        /// <param name="invoice">invoice.</param>
        /// <param name="resolution">resolution.</param>
        /// <param name="asset">asset.</param>
        /// <param name="assets">assets.</param>
        /// <param name="assetCount">assetCount.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="notes">notes.</param>
        /// <param name="postedId">Gets or sets PostedId..</param>
        /// <param name="linkedWorkOrders">linkedWorkOrders.</param>
        /// <param name="linkedInWorkOrders">linkedInWorkOrders.</param>
        /// <param name="isCheckInDenied">Gets or sets a value indicating whether IsDenied. (default to false).</param>
        /// <param name="checkInDeniedReason">Gets or sets Reason..</param>
        /// <param name="recallWorkOrder">Recall WorkOrder Id.</param>
        /// <param name="isExpired">Gets or sets IsExpired. (default to false).</param>
        /// <param name="isEnabledForMobile">Gets or sets value that allowed clients to manage their vendors to participate in the mobile App process. (default to false).</param>
        /// <param name="hasWorkActivity">hasWorkActivity (default to false).</param>
        /// <param name="source">source.</param>
        /// <param name="closingAuthorizationNumber">closingAuthorizationNumber.</param>
        /// <param name="callerId">callerId.</param>
        /// <param name="autoComplete">autoComplete (default to false).</param>
        /// <param name="labels">labels.</param>
        /// <param name="autoInvoice">autoInvoice (default to false).</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="frequencyId">frequencyId.</param>
        /// <param name="serviceId">serviceId.</param>
        /// <param name="weatherEvent">weatherEvent.</param>
        public SCServiceChannelServicesMessagingWorkordersWorkOrder(int id = default(int), string number = default(string), string purchaseNumber = default(string), SCServiceChannelServicesMessagingSubscribersSubscriber subscriber = default(SCServiceChannelServicesMessagingSubscribersSubscriber), SCServiceChannelServicesMessagingProvidersProvider provider = default(SCServiceChannelServicesMessagingProvidersProvider), SCServiceChannelServicesMessagingLocationLocation location = default(SCServiceChannelServicesMessagingLocationLocation), int locationId = default(int), SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor status = default(SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor), SCServiceChannelServicesMessagingIssueListsIssueTicketInformation issueTicketInfo = default(SCServiceChannelServicesMessagingIssueListsIssueTicketInformation), string caller = default(string), string createdBy = default(string), DateTime callDate = default(DateTime), DateTime callDateDTO = default(DateTime), DateTime reassignDate = default(DateTime), DateTime reassignDateDTO = default(DateTime), string locationOpenDate = default(string), string locationRemodelDate = default(string), DateTime estimatedCompletionDate = default(DateTime), string priority = default(string), string trade = default(string), int tradeId = default(int), int providerRank = default(int), string approvalCode = default(string), DateTime scheduledDate = default(DateTime), DateTime scheduledDateDTO = default(DateTime), DateTime completedDate = default(DateTime), DateTime completedDateDTO = default(DateTime), DateTime expirationDate = default(DateTime), DateTime expirationDateDTO = default(DateTime), DateTime originalEta = default(DateTime), DateTime originalEtaDTO = default(DateTime), DateTime updatedDate = default(DateTime), DateTime updatedDateDTO = default(DateTime), DateTime createdDate = default(DateTime), DateTime createdDateDTO = default(DateTime), string description = default(string), int categoryId = default(int), string category = default(string), double nte = default(double), double tax = default(double), double tax2 = default(double), string tax2Type = default(string), double price = default(double), SCServiceChannelServicesMessagingCurrenciesCurrency currency = default(SCServiceChannelServicesMessagingCurrenciesCurrency), string problemCode = default(string), SCServiceChannelServicesMessagingInvoicesInvoice invoice = default(SCServiceChannelServicesMessagingInvoicesInvoice), string resolution = default(string), SCServiceChannelServicesMessagingAssetsAssetResponse asset = default(SCServiceChannelServicesMessagingAssetsAssetResponse), List<SCServiceChannelServicesMessagingAssetsAssetResponse> assets = default(List<SCServiceChannelServicesMessagingAssetsAssetResponse>), int assetCount = default(int), SCServiceChannelServicesMessagingAttachmentsAttachmentsDescriptor attachments = default(SCServiceChannelServicesMessagingAttachmentsAttachmentsDescriptor), SCServiceChannelServicesMessagingNotesNotesDescriptor notes = default(SCServiceChannelServicesMessagingNotesNotesDescriptor), int postedId = default(int), List<SCServiceChannelServicesMessagingIdentityObject> linkedWorkOrders = default(List<SCServiceChannelServicesMessagingIdentityObject>), List<SCServiceChannelServicesMessagingIdentityObject> linkedInWorkOrders = default(List<SCServiceChannelServicesMessagingIdentityObject>), bool isCheckInDenied = false, string checkInDeniedReason = default(string), int recallWorkOrder = default(int), bool isExpired = false, bool isEnabledForMobile = false, bool hasWorkActivity = false, string source = default(string), int closingAuthorizationNumber = default(int), int callerId = default(int), bool autoComplete = false, List<SCServiceChannelApiModelWorkordersWorkOrderLabel> labels = default(List<SCServiceChannelApiModelWorkordersWorkOrderLabel>), bool autoInvoice = false, SCServiceChannelServicesMessagingWorkordersAssigneeUser assignee = default(SCServiceChannelServicesMessagingWorkordersAssigneeUser), int projectId = default(int), int frequencyId = default(int), int serviceId = default(int), SCServiceChannelServicesMessagingWorkordersWeatherEvent weatherEvent = default(SCServiceChannelServicesMessagingWorkordersWeatherEvent))
        {
            this.Id = id;
            this.Number = number;
            this.PurchaseNumber = purchaseNumber;
            this.Subscriber = subscriber;
            this.Provider = provider;
            this.Location = location;
            this.LocationId = locationId;
            this.Status = status;
            this.IssueTicketInfo = issueTicketInfo;
            this.Caller = caller;
            this.CreatedBy = createdBy;
            this.CallDate = callDate;
            this.CallDateDTO = callDateDTO;
            this.ReassignDate = reassignDate;
            this.ReassignDateDTO = reassignDateDTO;
            this.LocationOpenDate = locationOpenDate;
            this.LocationRemodelDate = locationRemodelDate;
            this.EstimatedCompletionDate = estimatedCompletionDate;
            this.Priority = priority;
            this.Trade = trade;
            this.TradeId = tradeId;
            this.ProviderRank = providerRank;
            this.ApprovalCode = approvalCode;
            this.ScheduledDate = scheduledDate;
            this.ScheduledDateDTO = scheduledDateDTO;
            this.CompletedDate = completedDate;
            this.CompletedDateDTO = completedDateDTO;
            this.ExpirationDate = expirationDate;
            this.ExpirationDateDTO = expirationDateDTO;
            this.OriginalEta = originalEta;
            this.OriginalEtaDTO = originalEtaDTO;
            this.UpdatedDate = updatedDate;
            this.UpdatedDateDTO = updatedDateDTO;
            this.CreatedDate = createdDate;
            this.CreatedDateDTO = createdDateDTO;
            this.Description = description;
            this.CategoryId = categoryId;
            this.Category = category;
            this.Nte = nte;
            this.Tax = tax;
            this.Tax2 = tax2;
            this.Tax2Type = tax2Type;
            this.Price = price;
            this.Currency = currency;
            this.ProblemCode = problemCode;
            this.Invoice = invoice;
            this.Resolution = resolution;
            this.Asset = asset;
            this.Assets = assets;
            this.AssetCount = assetCount;
            this.Attachments = attachments;
            this.Notes = notes;
            this.PostedId = postedId;
            this.LinkedWorkOrders = linkedWorkOrders;
            this.LinkedInWorkOrders = linkedInWorkOrders;
            this.IsCheckInDenied = isCheckInDenied;
            this.CheckInDeniedReason = checkInDeniedReason;
            this.RecallWorkOrder = recallWorkOrder;
            this.IsExpired = isExpired;
            this.IsEnabledForMobile = isEnabledForMobile;
            this.HasWorkActivity = hasWorkActivity;
            this.Source = source;
            this.ClosingAuthorizationNumber = closingAuthorizationNumber;
            this.CallerId = callerId;
            this.AutoComplete = autoComplete;
            this.Labels = labels;
            this.AutoInvoice = autoInvoice;
            this.Assignee = assignee;
            this.ProjectId = projectId;
            this.FrequencyId = frequencyId;
            this.ServiceId = serviceId;
            this.WeatherEvent = weatherEvent;
        }

        /// <summary>
        /// Work Order identifier.
        /// </summary>
        /// <value>Work Order identifier.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Work Order Number
        /// </summary>
        /// <value>Work Order Number</value>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Purchase number of work order
        /// </summary>
        /// <value>Purchase number of work order</value>
        [DataMember(Name = "PurchaseNumber", EmitDefaultValue = false)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name = "Subscriber", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingSubscribersSubscriber Subscriber { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "Provider", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingProvidersProvider Provider { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "Location", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingLocationLocation Location { get; set; }

        /// <summary>
        /// LocationId for use in ODATA calls without expanding Location property (ref. PLAT-55878)
        /// </summary>
        /// <value>LocationId for use in ODATA calls without expanding Location property (ref. PLAT-55878)</value>
        [DataMember(Name = "LocationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor Status { get; set; }

        /// <summary>
        /// Gets or Sets IssueTicketInfo
        /// </summary>
        [DataMember(Name = "IssueTicketInfo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingIssueListsIssueTicketInformation IssueTicketInfo { get; set; }

        /// <summary>
        /// Caller
        /// </summary>
        /// <value>Caller</value>
        [DataMember(Name = "Caller", EmitDefaultValue = false)]
        public string Caller { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CallDate
        /// </summary>
        [DataMember(Name = "CallDate", EmitDefaultValue = false)]
        public DateTime CallDate { get; set; }

        /// <summary>
        /// Gets or Sets CallDateDTO
        /// </summary>
        [DataMember(Name = "CallDate_DTO", EmitDefaultValue = false)]
        public DateTime CallDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets ReassignDate
        /// </summary>
        [DataMember(Name = "ReassignDate", EmitDefaultValue = false)]
        public DateTime ReassignDate { get; set; }

        /// <summary>
        /// Gets or Sets ReassignDateDTO
        /// </summary>
        [DataMember(Name = "ReassignDate_DTO", EmitDefaultValue = false)]
        public DateTime ReassignDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets LocationOpenDate
        /// </summary>
        [DataMember(Name = "LocationOpenDate", EmitDefaultValue = false)]
        public string LocationOpenDate { get; set; }

        /// <summary>
        /// Gets or Sets LocationRemodelDate
        /// </summary>
        [DataMember(Name = "LocationRemodelDate", EmitDefaultValue = false)]
        public string LocationRemodelDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedCompletionDate
        /// </summary>
        [DataMember(Name = "EstimatedCompletionDate", EmitDefaultValue = false)]
        public DateTime EstimatedCompletionDate { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "Trade", EmitDefaultValue = false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name = "TradeId", EmitDefaultValue = false)]
        public int TradeId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderRank
        /// </summary>
        [DataMember(Name = "ProviderRank", EmitDefaultValue = false)]
        public int ProviderRank { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCode
        /// </summary>
        [DataMember(Name = "ApprovalCode", EmitDefaultValue = false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDate
        /// </summary>
        [DataMember(Name = "ScheduledDate", EmitDefaultValue = false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDateDTO
        /// </summary>
        [DataMember(Name = "ScheduledDate_DTO", EmitDefaultValue = false)]
        public DateTime ScheduledDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name = "CompletedDate", EmitDefaultValue = false)]
        public DateTime CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDateDTO
        /// </summary>
        [DataMember(Name = "CompletedDate_DTO", EmitDefaultValue = false)]
        public DateTime CompletedDateDTO { get; set; }

        /// <summary>
        /// Gets or sets ExpirationDate.
        /// </summary>
        /// <value>Gets or sets ExpirationDate.</value>
        [DataMember(Name = "ExpirationDate", EmitDefaultValue = false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDateDTO
        /// </summary>
        [DataMember(Name = "ExpirationDate_DTO", EmitDefaultValue = false)]
        public DateTime ExpirationDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets OriginalEta
        /// </summary>
        [DataMember(Name = "OriginalEta", EmitDefaultValue = false)]
        public DateTime OriginalEta { get; set; }

        /// <summary>
        /// Gets or Sets OriginalEtaDTO
        /// </summary>
        [DataMember(Name = "OriginalEta_DTO", EmitDefaultValue = false)]
        public DateTime OriginalEtaDTO { get; set; }

        /// <summary>
        /// Updated Date
        /// </summary>
        /// <value>Updated Date</value>
        [DataMember(Name = "UpdatedDate", EmitDefaultValue = false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDateDTO
        /// </summary>
        [DataMember(Name = "UpdatedDate_DTO", EmitDefaultValue = false)]
        public DateTime UpdatedDateDTO { get; set; }

        /// <summary>
        /// s              Created Date
        /// </summary>
        /// <value>s              Created Date</value>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateDTO
        /// </summary>
        [DataMember(Name = "CreatedDate_DTO", EmitDefaultValue = false)]
        public DateTime CreatedDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "CategoryId", EmitDefaultValue = false)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Nte
        /// </summary>
        [DataMember(Name = "Nte", EmitDefaultValue = false)]
        public double Nte { get; set; }

        /// <summary>
        /// Tax
        /// </summary>
        /// <value>Tax</value>
        [DataMember(Name = "Tax", EmitDefaultValue = false)]
        public double Tax { get; set; }

        /// <summary>
        /// Tax2
        /// </summary>
        /// <value>Tax2</value>
        [DataMember(Name = "Tax2", EmitDefaultValue = false)]
        public double Tax2 { get; set; }

        /// <summary>
        /// Tax2Type
        /// </summary>
        /// <value>Tax2Type</value>
        [DataMember(Name = "Tax2Type", EmitDefaultValue = false)]
        public string Tax2Type { get; set; }

        /// <summary>
        /// Price (subtotal)
        /// </summary>
        /// <value>Price (subtotal)</value>
        [DataMember(Name = "Price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingCurrenciesCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets ProblemCode
        /// </summary>
        [DataMember(Name = "ProblemCode", EmitDefaultValue = false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name = "Invoice", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesInvoice Invoice { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name = "Resolution", EmitDefaultValue = false)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "Asset", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingAssetsAssetResponse Asset { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "Assets", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingAssetsAssetResponse> Assets { get; set; }

        /// <summary>
        /// Gets or Sets AssetCount
        /// </summary>
        [DataMember(Name = "AssetCount", EmitDefaultValue = false)]
        public int AssetCount { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingAttachmentsAttachmentsDescriptor Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "Notes", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingNotesNotesDescriptor Notes { get; set; }

        /// <summary>
        /// Gets or sets PostedId.
        /// </summary>
        /// <value>Gets or sets PostedId.</value>
        [DataMember(Name = "PostedId", EmitDefaultValue = false)]
        public int PostedId { get; set; }

        /// <summary>
        /// Gets or Sets LinkedWorkOrders
        /// </summary>
        [DataMember(Name = "LinkedWorkOrders", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingIdentityObject> LinkedWorkOrders { get; set; }

        /// <summary>
        /// Gets or Sets LinkedInWorkOrders
        /// </summary>
        [DataMember(Name = "LinkedInWorkOrders", EmitDefaultValue = false)]
        public List<SCServiceChannelServicesMessagingIdentityObject> LinkedInWorkOrders { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether IsDenied.
        /// </summary>
        /// <value>Gets or sets a value indicating whether IsDenied.</value>
        [DataMember(Name = "IsCheckInDenied", EmitDefaultValue = true)]
        public bool IsCheckInDenied { get; set; }

        /// <summary>
        /// Gets or sets Reason.
        /// </summary>
        /// <value>Gets or sets Reason.</value>
        [DataMember(Name = "CheckInDeniedReason", EmitDefaultValue = false)]
        public string CheckInDeniedReason { get; set; }

        /// <summary>
        /// Recall WorkOrder Id
        /// </summary>
        /// <value>Recall WorkOrder Id</value>
        [DataMember(Name = "RecallWorkOrder", EmitDefaultValue = false)]
        public int RecallWorkOrder { get; set; }

        /// <summary>
        /// Gets or sets IsInvoiced.
        /// </summary>
        /// <value>Gets or sets IsInvoiced.</value>
        [DataMember(Name = "IsInvoiced", EmitDefaultValue = true)]
        public bool IsInvoiced { get; private set; }

        /// <summary>
        /// Returns false as IsInvoiced should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsInvoiced()
        {
            return false;
        }
        /// <summary>
        /// Gets or sets IsExpired.
        /// </summary>
        /// <value>Gets or sets IsExpired.</value>
        [DataMember(Name = "IsExpired", EmitDefaultValue = true)]
        public bool IsExpired { get; set; }

        /// <summary>
        /// Gets or sets value that allowed clients to manage their vendors to participate in the mobile App process.
        /// </summary>
        /// <value>Gets or sets value that allowed clients to manage their vendors to participate in the mobile App process.</value>
        [DataMember(Name = "IsEnabledForMobile", EmitDefaultValue = true)]
        public bool IsEnabledForMobile { get; set; }

        /// <summary>
        /// Gets or Sets HasWorkActivity
        /// </summary>
        [DataMember(Name = "HasWorkActivity", EmitDefaultValue = true)]
        public bool HasWorkActivity { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "Source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets ClosingAuthorizationNumber
        /// </summary>
        [DataMember(Name = "ClosingAuthorizationNumber", EmitDefaultValue = false)]
        public int ClosingAuthorizationNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerId
        /// </summary>
        [DataMember(Name = "CallerId", EmitDefaultValue = false)]
        public int CallerId { get; set; }

        /// <summary>
        /// Gets or Sets AutoComplete
        /// </summary>
        [DataMember(Name = "AutoComplete", EmitDefaultValue = true)]
        public bool AutoComplete { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "Labels", EmitDefaultValue = false)]
        public List<SCServiceChannelApiModelWorkordersWorkOrderLabel> Labels { get; set; }

        /// <summary>
        /// Gets or Sets AutoInvoice
        /// </summary>
        [DataMember(Name = "AutoInvoice", EmitDefaultValue = true)]
        public bool AutoInvoice { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name = "Assignee", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersAssigneeUser Assignee { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "ProjectId", EmitDefaultValue = false)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyId
        /// </summary>
        [DataMember(Name = "FrequencyId", EmitDefaultValue = false)]
        public int FrequencyId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name = "ServiceId", EmitDefaultValue = false)]
        public int ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets WeatherEvent
        /// </summary>
        [DataMember(Name = "WeatherEvent", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersWeatherEvent WeatherEvent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersWorkOrder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PurchaseNumber: ").Append(PurchaseNumber).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IssueTicketInfo: ").Append(IssueTicketInfo).Append("\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CallDate: ").Append(CallDate).Append("\n");
            sb.Append("  CallDateDTO: ").Append(CallDateDTO).Append("\n");
            sb.Append("  ReassignDate: ").Append(ReassignDate).Append("\n");
            sb.Append("  ReassignDateDTO: ").Append(ReassignDateDTO).Append("\n");
            sb.Append("  LocationOpenDate: ").Append(LocationOpenDate).Append("\n");
            sb.Append("  LocationRemodelDate: ").Append(LocationRemodelDate).Append("\n");
            sb.Append("  EstimatedCompletionDate: ").Append(EstimatedCompletionDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  ProviderRank: ").Append(ProviderRank).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  ScheduledDateDTO: ").Append(ScheduledDateDTO).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CompletedDateDTO: ").Append(CompletedDateDTO).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationDateDTO: ").Append(ExpirationDateDTO).Append("\n");
            sb.Append("  OriginalEta: ").Append(OriginalEta).Append("\n");
            sb.Append("  OriginalEtaDTO: ").Append(OriginalEtaDTO).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDateDTO: ").Append(UpdatedDateDTO).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedDateDTO: ").Append(CreatedDateDTO).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Nte: ").Append(Nte).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Tax2: ").Append(Tax2).Append("\n");
            sb.Append("  Tax2Type: ").Append(Tax2Type).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PostedId: ").Append(PostedId).Append("\n");
            sb.Append("  LinkedWorkOrders: ").Append(LinkedWorkOrders).Append("\n");
            sb.Append("  LinkedInWorkOrders: ").Append(LinkedInWorkOrders).Append("\n");
            sb.Append("  IsCheckInDenied: ").Append(IsCheckInDenied).Append("\n");
            sb.Append("  CheckInDeniedReason: ").Append(CheckInDeniedReason).Append("\n");
            sb.Append("  RecallWorkOrder: ").Append(RecallWorkOrder).Append("\n");
            sb.Append("  IsInvoiced: ").Append(IsInvoiced).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  IsEnabledForMobile: ").Append(IsEnabledForMobile).Append("\n");
            sb.Append("  HasWorkActivity: ").Append(HasWorkActivity).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ClosingAuthorizationNumber: ").Append(ClosingAuthorizationNumber).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  AutoComplete: ").Append(AutoComplete).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  AutoInvoice: ").Append(AutoInvoice).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  FrequencyId: ").Append(FrequencyId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  WeatherEvent: ").Append(WeatherEvent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersWorkOrder);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersWorkOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersWorkOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersWorkOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.PurchaseNumber == input.PurchaseNumber ||
                    (this.PurchaseNumber != null &&
                    this.PurchaseNumber.Equals(input.PurchaseNumber))
                ) && 
                (
                    this.Subscriber == input.Subscriber ||
                    (this.Subscriber != null &&
                    this.Subscriber.Equals(input.Subscriber))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.IssueTicketInfo == input.IssueTicketInfo ||
                    (this.IssueTicketInfo != null &&
                    this.IssueTicketInfo.Equals(input.IssueTicketInfo))
                ) && 
                (
                    this.Caller == input.Caller ||
                    (this.Caller != null &&
                    this.Caller.Equals(input.Caller))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CallDate == input.CallDate ||
                    (this.CallDate != null &&
                    this.CallDate.Equals(input.CallDate))
                ) && 
                (
                    this.CallDateDTO == input.CallDateDTO ||
                    (this.CallDateDTO != null &&
                    this.CallDateDTO.Equals(input.CallDateDTO))
                ) && 
                (
                    this.ReassignDate == input.ReassignDate ||
                    (this.ReassignDate != null &&
                    this.ReassignDate.Equals(input.ReassignDate))
                ) && 
                (
                    this.ReassignDateDTO == input.ReassignDateDTO ||
                    (this.ReassignDateDTO != null &&
                    this.ReassignDateDTO.Equals(input.ReassignDateDTO))
                ) && 
                (
                    this.LocationOpenDate == input.LocationOpenDate ||
                    (this.LocationOpenDate != null &&
                    this.LocationOpenDate.Equals(input.LocationOpenDate))
                ) && 
                (
                    this.LocationRemodelDate == input.LocationRemodelDate ||
                    (this.LocationRemodelDate != null &&
                    this.LocationRemodelDate.Equals(input.LocationRemodelDate))
                ) && 
                (
                    this.EstimatedCompletionDate == input.EstimatedCompletionDate ||
                    (this.EstimatedCompletionDate != null &&
                    this.EstimatedCompletionDate.Equals(input.EstimatedCompletionDate))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.TradeId == input.TradeId ||
                    this.TradeId.Equals(input.TradeId)
                ) && 
                (
                    this.ProviderRank == input.ProviderRank ||
                    this.ProviderRank.Equals(input.ProviderRank)
                ) && 
                (
                    this.ApprovalCode == input.ApprovalCode ||
                    (this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(input.ApprovalCode))
                ) && 
                (
                    this.ScheduledDate == input.ScheduledDate ||
                    (this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(input.ScheduledDate))
                ) && 
                (
                    this.ScheduledDateDTO == input.ScheduledDateDTO ||
                    (this.ScheduledDateDTO != null &&
                    this.ScheduledDateDTO.Equals(input.ScheduledDateDTO))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.CompletedDateDTO == input.CompletedDateDTO ||
                    (this.CompletedDateDTO != null &&
                    this.CompletedDateDTO.Equals(input.CompletedDateDTO))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpirationDateDTO == input.ExpirationDateDTO ||
                    (this.ExpirationDateDTO != null &&
                    this.ExpirationDateDTO.Equals(input.ExpirationDateDTO))
                ) && 
                (
                    this.OriginalEta == input.OriginalEta ||
                    (this.OriginalEta != null &&
                    this.OriginalEta.Equals(input.OriginalEta))
                ) && 
                (
                    this.OriginalEtaDTO == input.OriginalEtaDTO ||
                    (this.OriginalEtaDTO != null &&
                    this.OriginalEtaDTO.Equals(input.OriginalEtaDTO))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.UpdatedDateDTO == input.UpdatedDateDTO ||
                    (this.UpdatedDateDTO != null &&
                    this.UpdatedDateDTO.Equals(input.UpdatedDateDTO))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.CreatedDateDTO == input.CreatedDateDTO ||
                    (this.CreatedDateDTO != null &&
                    this.CreatedDateDTO.Equals(input.CreatedDateDTO))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    this.CategoryId.Equals(input.CategoryId)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Nte == input.Nte ||
                    this.Nte.Equals(input.Nte)
                ) && 
                (
                    this.Tax == input.Tax ||
                    this.Tax.Equals(input.Tax)
                ) && 
                (
                    this.Tax2 == input.Tax2 ||
                    this.Tax2.Equals(input.Tax2)
                ) && 
                (
                    this.Tax2Type == input.Tax2Type ||
                    (this.Tax2Type != null &&
                    this.Tax2Type.Equals(input.Tax2Type))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ProblemCode == input.ProblemCode ||
                    (this.ProblemCode != null &&
                    this.ProblemCode.Equals(input.ProblemCode))
                ) && 
                (
                    this.Invoice == input.Invoice ||
                    (this.Invoice != null &&
                    this.Invoice.Equals(input.Invoice))
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.Assets == input.Assets ||
                    this.Assets != null &&
                    input.Assets != null &&
                    this.Assets.SequenceEqual(input.Assets)
                ) && 
                (
                    this.AssetCount == input.AssetCount ||
                    this.AssetCount.Equals(input.AssetCount)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    (this.Attachments != null &&
                    this.Attachments.Equals(input.Attachments))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.PostedId == input.PostedId ||
                    this.PostedId.Equals(input.PostedId)
                ) && 
                (
                    this.LinkedWorkOrders == input.LinkedWorkOrders ||
                    this.LinkedWorkOrders != null &&
                    input.LinkedWorkOrders != null &&
                    this.LinkedWorkOrders.SequenceEqual(input.LinkedWorkOrders)
                ) && 
                (
                    this.LinkedInWorkOrders == input.LinkedInWorkOrders ||
                    this.LinkedInWorkOrders != null &&
                    input.LinkedInWorkOrders != null &&
                    this.LinkedInWorkOrders.SequenceEqual(input.LinkedInWorkOrders)
                ) && 
                (
                    this.IsCheckInDenied == input.IsCheckInDenied ||
                    this.IsCheckInDenied.Equals(input.IsCheckInDenied)
                ) && 
                (
                    this.CheckInDeniedReason == input.CheckInDeniedReason ||
                    (this.CheckInDeniedReason != null &&
                    this.CheckInDeniedReason.Equals(input.CheckInDeniedReason))
                ) && 
                (
                    this.RecallWorkOrder == input.RecallWorkOrder ||
                    this.RecallWorkOrder.Equals(input.RecallWorkOrder)
                ) && 
                (
                    this.IsInvoiced == input.IsInvoiced ||
                    this.IsInvoiced.Equals(input.IsInvoiced)
                ) && 
                (
                    this.IsExpired == input.IsExpired ||
                    this.IsExpired.Equals(input.IsExpired)
                ) && 
                (
                    this.IsEnabledForMobile == input.IsEnabledForMobile ||
                    this.IsEnabledForMobile.Equals(input.IsEnabledForMobile)
                ) && 
                (
                    this.HasWorkActivity == input.HasWorkActivity ||
                    this.HasWorkActivity.Equals(input.HasWorkActivity)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.ClosingAuthorizationNumber == input.ClosingAuthorizationNumber ||
                    this.ClosingAuthorizationNumber.Equals(input.ClosingAuthorizationNumber)
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    this.CallerId.Equals(input.CallerId)
                ) && 
                (
                    this.AutoComplete == input.AutoComplete ||
                    this.AutoComplete.Equals(input.AutoComplete)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.AutoInvoice == input.AutoInvoice ||
                    this.AutoInvoice.Equals(input.AutoInvoice)
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                ) && 
                (
                    this.FrequencyId == input.FrequencyId ||
                    this.FrequencyId.Equals(input.FrequencyId)
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    this.ServiceId.Equals(input.ServiceId)
                ) && 
                (
                    this.WeatherEvent == input.WeatherEvent ||
                    (this.WeatherEvent != null &&
                    this.WeatherEvent.Equals(input.WeatherEvent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.PurchaseNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseNumber.GetHashCode();
                }
                if (this.Subscriber != null)
                {
                    hashCode = (hashCode * 59) + this.Subscriber.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.IssueTicketInfo != null)
                {
                    hashCode = (hashCode * 59) + this.IssueTicketInfo.GetHashCode();
                }
                if (this.Caller != null)
                {
                    hashCode = (hashCode * 59) + this.Caller.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CallDate != null)
                {
                    hashCode = (hashCode * 59) + this.CallDate.GetHashCode();
                }
                if (this.CallDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.CallDateDTO.GetHashCode();
                }
                if (this.ReassignDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReassignDate.GetHashCode();
                }
                if (this.ReassignDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.ReassignDateDTO.GetHashCode();
                }
                if (this.LocationOpenDate != null)
                {
                    hashCode = (hashCode * 59) + this.LocationOpenDate.GetHashCode();
                }
                if (this.LocationRemodelDate != null)
                {
                    hashCode = (hashCode * 59) + this.LocationRemodelDate.GetHashCode();
                }
                if (this.EstimatedCompletionDate != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedCompletionDate.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradeId.GetHashCode();
                hashCode = (hashCode * 59) + this.ProviderRank.GetHashCode();
                if (this.ApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCode.GetHashCode();
                }
                if (this.ScheduledDate != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDate.GetHashCode();
                }
                if (this.ScheduledDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledDateDTO.GetHashCode();
                }
                if (this.CompletedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedDate.GetHashCode();
                }
                if (this.CompletedDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedDateDTO.GetHashCode();
                }
                if (this.ExpirationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationDate.GetHashCode();
                }
                if (this.ExpirationDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationDateDTO.GetHashCode();
                }
                if (this.OriginalEta != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalEta.GetHashCode();
                }
                if (this.OriginalEtaDTO != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalEtaDTO.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                if (this.UpdatedDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateDTO.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.CreatedDateDTO != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateDTO.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nte.GetHashCode();
                hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                hashCode = (hashCode * 59) + this.Tax2.GetHashCode();
                if (this.Tax2Type != null)
                {
                    hashCode = (hashCode * 59) + this.Tax2Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.ProblemCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProblemCode.GetHashCode();
                }
                if (this.Invoice != null)
                {
                    hashCode = (hashCode * 59) + this.Invoice.GetHashCode();
                }
                if (this.Resolution != null)
                {
                    hashCode = (hashCode * 59) + this.Resolution.GetHashCode();
                }
                if (this.Asset != null)
                {
                    hashCode = (hashCode * 59) + this.Asset.GetHashCode();
                }
                if (this.Assets != null)
                {
                    hashCode = (hashCode * 59) + this.Assets.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetCount.GetHashCode();
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PostedId.GetHashCode();
                if (this.LinkedWorkOrders != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedWorkOrders.GetHashCode();
                }
                if (this.LinkedInWorkOrders != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedInWorkOrders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCheckInDenied.GetHashCode();
                if (this.CheckInDeniedReason != null)
                {
                    hashCode = (hashCode * 59) + this.CheckInDeniedReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecallWorkOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInvoiced.GetHashCode();
                hashCode = (hashCode * 59) + this.IsExpired.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEnabledForMobile.GetHashCode();
                hashCode = (hashCode * 59) + this.HasWorkActivity.GetHashCode();
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClosingAuthorizationNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.CallerId.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoComplete.GetHashCode();
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoInvoice.GetHashCode();
                if (this.Assignee != null)
                {
                    hashCode = (hashCode * 59) + this.Assignee.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                hashCode = (hashCode * 59) + this.FrequencyId.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceId.GetHashCode();
                if (this.WeatherEvent != null)
                {
                    hashCode = (hashCode * 59) + this.WeatherEvent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
