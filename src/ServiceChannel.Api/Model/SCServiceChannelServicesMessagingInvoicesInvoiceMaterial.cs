/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// Information on the materials used. Add a separate object for each material.
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Invoices.InvoiceMaterial")]
    public partial class SCServiceChannelServicesMessagingInvoicesInvoiceMaterial : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceMaterial>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingInvoicesInvoiceMaterial" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="invoiceId">Invoice identifier..</param>
        /// <param name="description">Name or description of the material. Length limit is 100 symbols..</param>
        /// <param name="partNum">Part, serial, or manufacturer number of the material. Length limit is 100 symbols..</param>
        /// <param name="unitType">Unit of measurement. Valid values: 1 — Each; 2 — Box; 3 — Feet; 4 — Sqft; 5 — Lbs; 6 — Gal; 7 — Oz. Default value: 1..</param>
        /// <param name="unitPrice">Price per unit..</param>
        /// <param name="partName">Part name..</param>
        /// <param name="markUpPercent">Markup percent..</param>
        /// <param name="agreedMarkUpPercent">Agreed markup percent..</param>
        /// <param name="markUpDiscrepancyReason">Mark up discrepancy reason..</param>
        /// <param name="agreedPartPrice">Agreed part price..</param>
        /// <param name="quantity">Quantity of the material..</param>
        /// <param name="amount">The amount of the material cost. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Materials&#x60; array must equal &#x60;InvoiceAmountsDetails.MaterialAmount&#x60;..</param>
        /// <param name="approvalCodeGroup">approvalCodeGroup.</param>
        /// <param name="isMarkUpDiscrepancy">Markup discrepancy. (default to false).</param>
        /// <param name="isPartPriceDiscrepancy">Part price discrepancy. (default to false).</param>
        /// <param name="priceDiscrepancyReason">Price discrepancy reason..</param>
        /// <param name="isNontaxableVATEU">isNontaxableVATEU (default to false).</param>
        public SCServiceChannelServicesMessagingInvoicesInvoiceMaterial(int id = default(int), int invoiceId = default(int), string description = default(string), string partNum = default(string), byte[] unitType = default(byte[]), double unitPrice = default(double), string partName = default(string), double markUpPercent = default(double), double agreedMarkUpPercent = default(double), string markUpDiscrepancyReason = default(string), double agreedPartPrice = default(double), double quantity = default(double), double amount = default(double), SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup approvalCodeGroup = default(SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup), bool isMarkUpDiscrepancy = false, bool isPartPriceDiscrepancy = false, string priceDiscrepancyReason = default(string), bool isNontaxableVATEU = false)
        {
            this.Id = id;
            this.InvoiceId = invoiceId;
            this.Description = description;
            this.PartNum = partNum;
            this.UnitType = unitType;
            this.UnitPrice = unitPrice;
            this.PartName = partName;
            this.MarkUpPercent = markUpPercent;
            this.AgreedMarkUpPercent = agreedMarkUpPercent;
            this.MarkUpDiscrepancyReason = markUpDiscrepancyReason;
            this.AgreedPartPrice = agreedPartPrice;
            this.Quantity = quantity;
            this.Amount = amount;
            this.ApprovalCodeGroup = approvalCodeGroup;
            this.IsMarkUpDiscrepancy = isMarkUpDiscrepancy;
            this.IsPartPriceDiscrepancy = isPartPriceDiscrepancy;
            this.PriceDiscrepancyReason = priceDiscrepancyReason;
            this.IsNontaxableVATEU = isNontaxableVATEU;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Invoice identifier.
        /// </summary>
        /// <value>Invoice identifier.</value>
        [DataMember(Name = "InvoiceId", EmitDefaultValue = false)]
        public int InvoiceId { get; set; }

        /// <summary>
        /// Name or description of the material. Length limit is 100 symbols.
        /// </summary>
        /// <value>Name or description of the material. Length limit is 100 symbols.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Part, serial, or manufacturer number of the material. Length limit is 100 symbols.
        /// </summary>
        /// <value>Part, serial, or manufacturer number of the material. Length limit is 100 symbols.</value>
        [DataMember(Name = "PartNum", EmitDefaultValue = false)]
        public string PartNum { get; set; }

        /// <summary>
        /// Unit of measurement. Valid values: 1 — Each; 2 — Box; 3 — Feet; 4 — Sqft; 5 — Lbs; 6 — Gal; 7 — Oz. Default value: 1.
        /// </summary>
        /// <value>Unit of measurement. Valid values: 1 — Each; 2 — Box; 3 — Feet; 4 — Sqft; 5 — Lbs; 6 — Gal; 7 — Oz. Default value: 1.</value>
        [DataMember(Name = "UnitType", EmitDefaultValue = false)]
        public byte[] UnitType { get; set; }

        /// <summary>
        /// Price per unit.
        /// </summary>
        /// <value>Price per unit.</value>
        [DataMember(Name = "UnitPrice", EmitDefaultValue = false)]
        public double UnitPrice { get; set; }

        /// <summary>
        /// Part name.
        /// </summary>
        /// <value>Part name.</value>
        [DataMember(Name = "PartName", EmitDefaultValue = false)]
        public string PartName { get; set; }

        /// <summary>
        /// Markup percent.
        /// </summary>
        /// <value>Markup percent.</value>
        [DataMember(Name = "MarkUpPercent", EmitDefaultValue = false)]
        public double MarkUpPercent { get; set; }

        /// <summary>
        /// Agreed markup percent.
        /// </summary>
        /// <value>Agreed markup percent.</value>
        [DataMember(Name = "AgreedMarkUpPercent", EmitDefaultValue = false)]
        public double AgreedMarkUpPercent { get; set; }

        /// <summary>
        /// Mark up discrepancy reason.
        /// </summary>
        /// <value>Mark up discrepancy reason.</value>
        [DataMember(Name = "MarkUpDiscrepancyReason", EmitDefaultValue = false)]
        public string MarkUpDiscrepancyReason { get; set; }

        /// <summary>
        /// Agreed part price.
        /// </summary>
        /// <value>Agreed part price.</value>
        [DataMember(Name = "AgreedPartPrice", EmitDefaultValue = false)]
        public double AgreedPartPrice { get; set; }

        /// <summary>
        /// Quantity of the material.
        /// </summary>
        /// <value>Quantity of the material.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// The amount of the material cost. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Materials&#x60; array must equal &#x60;InvoiceAmountsDetails.MaterialAmount&#x60;.
        /// </summary>
        /// <value>The amount of the material cost. The sum of all &#x60;Amount&#x60; parameters in the &#x60;Materials&#x60; array must equal &#x60;InvoiceAmountsDetails.MaterialAmount&#x60;.</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCodeGroup
        /// </summary>
        [DataMember(Name = "ApprovalCodeGroup", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup ApprovalCodeGroup { get; set; }

        /// <summary>
        /// Markup discrepancy.
        /// </summary>
        /// <value>Markup discrepancy.</value>
        [DataMember(Name = "IsMarkUpDiscrepancy", EmitDefaultValue = true)]
        public bool IsMarkUpDiscrepancy { get; set; }

        /// <summary>
        /// Part price discrepancy.
        /// </summary>
        /// <value>Part price discrepancy.</value>
        [DataMember(Name = "IsPartPriceDiscrepancy", EmitDefaultValue = true)]
        public bool IsPartPriceDiscrepancy { get; set; }

        /// <summary>
        /// Price discrepancy reason.
        /// </summary>
        /// <value>Price discrepancy reason.</value>
        [DataMember(Name = "PriceDiscrepancyReason", EmitDefaultValue = false)]
        public string PriceDiscrepancyReason { get; set; }

        /// <summary>
        /// Gets or Sets IsRateDiscrepancy
        /// </summary>
        [DataMember(Name = "IsRateDiscrepancy", EmitDefaultValue = true)]
        public bool IsRateDiscrepancy { get; private set; }

        /// <summary>
        /// Returns false as IsRateDiscrepancy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsRateDiscrepancy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsNontaxableVATEU
        /// </summary>
        [DataMember(Name = "isNontaxableVATEU", EmitDefaultValue = true)]
        public bool IsNontaxableVATEU { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceMaterial {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PartNum: ").Append(PartNum).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  PartName: ").Append(PartName).Append("\n");
            sb.Append("  MarkUpPercent: ").Append(MarkUpPercent).Append("\n");
            sb.Append("  AgreedMarkUpPercent: ").Append(AgreedMarkUpPercent).Append("\n");
            sb.Append("  MarkUpDiscrepancyReason: ").Append(MarkUpDiscrepancyReason).Append("\n");
            sb.Append("  AgreedPartPrice: ").Append(AgreedPartPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ApprovalCodeGroup: ").Append(ApprovalCodeGroup).Append("\n");
            sb.Append("  IsMarkUpDiscrepancy: ").Append(IsMarkUpDiscrepancy).Append("\n");
            sb.Append("  IsPartPriceDiscrepancy: ").Append(IsPartPriceDiscrepancy).Append("\n");
            sb.Append("  PriceDiscrepancyReason: ").Append(PriceDiscrepancyReason).Append("\n");
            sb.Append("  IsRateDiscrepancy: ").Append(IsRateDiscrepancy).Append("\n");
            sb.Append("  IsNontaxableVATEU: ").Append(IsNontaxableVATEU).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingInvoicesInvoiceMaterial);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceMaterial instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceMaterial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceMaterial input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    this.InvoiceId.Equals(input.InvoiceId)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PartNum == input.PartNum ||
                    (this.PartNum != null &&
                    this.PartNum.Equals(input.PartNum))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    this.UnitPrice.Equals(input.UnitPrice)
                ) && 
                (
                    this.PartName == input.PartName ||
                    (this.PartName != null &&
                    this.PartName.Equals(input.PartName))
                ) && 
                (
                    this.MarkUpPercent == input.MarkUpPercent ||
                    this.MarkUpPercent.Equals(input.MarkUpPercent)
                ) && 
                (
                    this.AgreedMarkUpPercent == input.AgreedMarkUpPercent ||
                    this.AgreedMarkUpPercent.Equals(input.AgreedMarkUpPercent)
                ) && 
                (
                    this.MarkUpDiscrepancyReason == input.MarkUpDiscrepancyReason ||
                    (this.MarkUpDiscrepancyReason != null &&
                    this.MarkUpDiscrepancyReason.Equals(input.MarkUpDiscrepancyReason))
                ) && 
                (
                    this.AgreedPartPrice == input.AgreedPartPrice ||
                    this.AgreedPartPrice.Equals(input.AgreedPartPrice)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.ApprovalCodeGroup == input.ApprovalCodeGroup ||
                    (this.ApprovalCodeGroup != null &&
                    this.ApprovalCodeGroup.Equals(input.ApprovalCodeGroup))
                ) && 
                (
                    this.IsMarkUpDiscrepancy == input.IsMarkUpDiscrepancy ||
                    this.IsMarkUpDiscrepancy.Equals(input.IsMarkUpDiscrepancy)
                ) && 
                (
                    this.IsPartPriceDiscrepancy == input.IsPartPriceDiscrepancy ||
                    this.IsPartPriceDiscrepancy.Equals(input.IsPartPriceDiscrepancy)
                ) && 
                (
                    this.PriceDiscrepancyReason == input.PriceDiscrepancyReason ||
                    (this.PriceDiscrepancyReason != null &&
                    this.PriceDiscrepancyReason.Equals(input.PriceDiscrepancyReason))
                ) && 
                (
                    this.IsRateDiscrepancy == input.IsRateDiscrepancy ||
                    this.IsRateDiscrepancy.Equals(input.IsRateDiscrepancy)
                ) && 
                (
                    this.IsNontaxableVATEU == input.IsNontaxableVATEU ||
                    this.IsNontaxableVATEU.Equals(input.IsNontaxableVATEU)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceId.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.PartNum != null)
                {
                    hashCode = (hashCode * 59) + this.PartNum.GetHashCode();
                }
                if (this.UnitType != null)
                {
                    hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitPrice.GetHashCode();
                if (this.PartName != null)
                {
                    hashCode = (hashCode * 59) + this.PartName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MarkUpPercent.GetHashCode();
                hashCode = (hashCode * 59) + this.AgreedMarkUpPercent.GetHashCode();
                if (this.MarkUpDiscrepancyReason != null)
                {
                    hashCode = (hashCode * 59) + this.MarkUpDiscrepancyReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AgreedPartPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.ApprovalCodeGroup != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCodeGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMarkUpDiscrepancy.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPartPriceDiscrepancy.GetHashCode();
                if (this.PriceDiscrepancyReason != null)
                {
                    hashCode = (hashCode * 59) + this.PriceDiscrepancyReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsRateDiscrepancy.GetHashCode();
                hashCode = (hashCode * 59) + this.IsNontaxableVATEU.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
