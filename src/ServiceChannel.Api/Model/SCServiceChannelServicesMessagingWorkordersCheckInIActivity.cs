/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ServiceChannel.Api.Client.OpenAPIDateConverter;

namespace ServiceChannel.Api.Model
{
    /// <summary>
    /// SCServiceChannelServicesMessagingWorkordersCheckInIActivity
    /// </summary>
    [DataContract(Name = "ServiceChannel.Services.Messaging.Workorders.CheckInIActivity")]
    public partial class SCServiceChannelServicesMessagingWorkordersCheckInIActivity : IEquatable<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>, IValidatableObject
    {
        /// <summary>
        /// Defines CheckInOutType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CheckInOutTypeEnum
        {
            /// <summary>
            /// Enum Common for value: Common
            /// </summary>
            [EnumMember(Value = "Common")]
            Common = 1,

            /// <summary>
            /// Enum Ivr for value: Ivr
            /// </summary>
            [EnumMember(Value = "Ivr")]
            Ivr = 2,

            /// <summary>
            /// Enum Gps for value: Gps
            /// </summary>
            [EnumMember(Value = "Gps")]
            Gps = 3

        }


        /// <summary>
        /// Gets or Sets CheckInOutType
        /// </summary>
        [DataMember(Name = "CheckInOutType", EmitDefaultValue = false)]
        public CheckInOutTypeEnum? CheckInOutType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SCServiceChannelServicesMessagingWorkordersCheckInIActivity" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="date">date.</param>
        /// <param name="dto">dto.</param>
        /// <param name="user">user.</param>
        /// <param name="callerId">callerId.</param>
        /// <param name="action">action.</param>
        /// <param name="statusChangedTo">statusChangedTo.</param>
        /// <param name="workType">workType.</param>
        /// <param name="statusNew">statusNew.</param>
        /// <param name="dnis">dnis.</param>
        /// <param name="checkInOutType">checkInOutType.</param>
        /// <param name="signatureAttachmentId">signatureAttachmentId.</param>
        /// <param name="signatureAttachmentName">signatureAttachmentName.</param>
        /// <param name="signatureAttachmentFullName">signatureAttachmentFullName.</param>
        /// <param name="unableObtainSignatureNoteId">unableObtainSignatureNoteId.</param>
        /// <param name="unableObtainSignatureNote">unableObtainSignatureNote.</param>
        public SCServiceChannelServicesMessagingWorkordersCheckInIActivity(int id = default(int), DateTime date = default(DateTime), DateTime dto = default(DateTime), SCServiceChannelServicesMessagingUsersUserInfo user = default(SCServiceChannelServicesMessagingUsersUserInfo), string callerId = default(string), string action = default(string), SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor statusChangedTo = default(SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor), string workType = default(string), string statusNew = default(string), string dnis = default(string), CheckInOutTypeEnum? checkInOutType = default(CheckInOutTypeEnum?), int signatureAttachmentId = default(int), string signatureAttachmentName = default(string), string signatureAttachmentFullName = default(string), int unableObtainSignatureNoteId = default(int), string unableObtainSignatureNote = default(string))
        {
            this.Id = id;
            this.Date = date;
            this.Dto = dto;
            this.User = user;
            this.CallerId = callerId;
            this.Action = action;
            this.StatusChangedTo = statusChangedTo;
            this.WorkType = workType;
            this.StatusNew = statusNew;
            this.Dnis = dnis;
            this.CheckInOutType = checkInOutType;
            this.SignatureAttachmentId = signatureAttachmentId;
            this.SignatureAttachmentName = signatureAttachmentName;
            this.SignatureAttachmentFullName = signatureAttachmentFullName;
            this.UnableObtainSignatureNoteId = unableObtainSignatureNoteId;
            this.UnableObtainSignatureNote = unableObtainSignatureNote;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets Dto
        /// </summary>
        [DataMember(Name = "Dto", EmitDefaultValue = false)]
        public DateTime Dto { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingUsersUserInfo User { get; set; }

        /// <summary>
        /// Gets or Sets CallerId
        /// </summary>
        [DataMember(Name = "CallerId", EmitDefaultValue = false)]
        public string CallerId { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "Action", EmitDefaultValue = false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangedTo
        /// </summary>
        [DataMember(Name = "StatusChangedTo", EmitDefaultValue = false)]
        public SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor StatusChangedTo { get; set; }

        /// <summary>
        /// Gets or Sets WorkType
        /// </summary>
        [DataMember(Name = "WorkType", EmitDefaultValue = false)]
        public string WorkType { get; set; }

        /// <summary>
        /// Gets or Sets StatusNew
        /// </summary>
        [DataMember(Name = "StatusNew", EmitDefaultValue = false)]
        public string StatusNew { get; set; }

        /// <summary>
        /// Gets or Sets Dnis
        /// </summary>
        [DataMember(Name = "Dnis", EmitDefaultValue = false)]
        public string Dnis { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAttachmentId
        /// </summary>
        [DataMember(Name = "SignatureAttachmentId", EmitDefaultValue = false)]
        public int SignatureAttachmentId { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAttachmentName
        /// </summary>
        [DataMember(Name = "SignatureAttachmentName", EmitDefaultValue = false)]
        public string SignatureAttachmentName { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAttachmentFullName
        /// </summary>
        [DataMember(Name = "SignatureAttachmentFullName", EmitDefaultValue = false)]
        public string SignatureAttachmentFullName { get; set; }

        /// <summary>
        /// Gets or Sets UnableObtainSignatureNoteId
        /// </summary>
        [DataMember(Name = "UnableObtainSignatureNoteId", EmitDefaultValue = false)]
        public int UnableObtainSignatureNoteId { get; set; }

        /// <summary>
        /// Gets or Sets UnableObtainSignatureNote
        /// </summary>
        [DataMember(Name = "UnableObtainSignatureNote", EmitDefaultValue = false)]
        public string UnableObtainSignatureNote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersCheckInIActivity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Dto: ").Append(Dto).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  StatusChangedTo: ").Append(StatusChangedTo).Append("\n");
            sb.Append("  WorkType: ").Append(WorkType).Append("\n");
            sb.Append("  StatusNew: ").Append(StatusNew).Append("\n");
            sb.Append("  Dnis: ").Append(Dnis).Append("\n");
            sb.Append("  CheckInOutType: ").Append(CheckInOutType).Append("\n");
            sb.Append("  SignatureAttachmentId: ").Append(SignatureAttachmentId).Append("\n");
            sb.Append("  SignatureAttachmentName: ").Append(SignatureAttachmentName).Append("\n");
            sb.Append("  SignatureAttachmentFullName: ").Append(SignatureAttachmentFullName).Append("\n");
            sb.Append("  UnableObtainSignatureNoteId: ").Append(UnableObtainSignatureNoteId).Append("\n");
            sb.Append("  UnableObtainSignatureNote: ").Append(UnableObtainSignatureNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SCServiceChannelServicesMessagingWorkordersCheckInIActivity);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersCheckInIActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of SCServiceChannelServicesMessagingWorkordersCheckInIActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersCheckInIActivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Dto == input.Dto ||
                    (this.Dto != null &&
                    this.Dto.Equals(input.Dto))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.StatusChangedTo == input.StatusChangedTo ||
                    (this.StatusChangedTo != null &&
                    this.StatusChangedTo.Equals(input.StatusChangedTo))
                ) && 
                (
                    this.WorkType == input.WorkType ||
                    (this.WorkType != null &&
                    this.WorkType.Equals(input.WorkType))
                ) && 
                (
                    this.StatusNew == input.StatusNew ||
                    (this.StatusNew != null &&
                    this.StatusNew.Equals(input.StatusNew))
                ) && 
                (
                    this.Dnis == input.Dnis ||
                    (this.Dnis != null &&
                    this.Dnis.Equals(input.Dnis))
                ) && 
                (
                    this.CheckInOutType == input.CheckInOutType ||
                    this.CheckInOutType.Equals(input.CheckInOutType)
                ) && 
                (
                    this.SignatureAttachmentId == input.SignatureAttachmentId ||
                    this.SignatureAttachmentId.Equals(input.SignatureAttachmentId)
                ) && 
                (
                    this.SignatureAttachmentName == input.SignatureAttachmentName ||
                    (this.SignatureAttachmentName != null &&
                    this.SignatureAttachmentName.Equals(input.SignatureAttachmentName))
                ) && 
                (
                    this.SignatureAttachmentFullName == input.SignatureAttachmentFullName ||
                    (this.SignatureAttachmentFullName != null &&
                    this.SignatureAttachmentFullName.Equals(input.SignatureAttachmentFullName))
                ) && 
                (
                    this.UnableObtainSignatureNoteId == input.UnableObtainSignatureNoteId ||
                    this.UnableObtainSignatureNoteId.Equals(input.UnableObtainSignatureNoteId)
                ) && 
                (
                    this.UnableObtainSignatureNote == input.UnableObtainSignatureNote ||
                    (this.UnableObtainSignatureNote != null &&
                    this.UnableObtainSignatureNote.Equals(input.UnableObtainSignatureNote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Dto != null)
                {
                    hashCode = (hashCode * 59) + this.Dto.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.CallerId != null)
                {
                    hashCode = (hashCode * 59) + this.CallerId.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.StatusChangedTo != null)
                {
                    hashCode = (hashCode * 59) + this.StatusChangedTo.GetHashCode();
                }
                if (this.WorkType != null)
                {
                    hashCode = (hashCode * 59) + this.WorkType.GetHashCode();
                }
                if (this.StatusNew != null)
                {
                    hashCode = (hashCode * 59) + this.StatusNew.GetHashCode();
                }
                if (this.Dnis != null)
                {
                    hashCode = (hashCode * 59) + this.Dnis.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CheckInOutType.GetHashCode();
                hashCode = (hashCode * 59) + this.SignatureAttachmentId.GetHashCode();
                if (this.SignatureAttachmentName != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureAttachmentName.GetHashCode();
                }
                if (this.SignatureAttachmentFullName != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureAttachmentFullName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnableObtainSignatureNoteId.GetHashCode();
                if (this.UnableObtainSignatureNote != null)
                {
                    hashCode = (hashCode * 59) + this.UnableObtainSignatureNote.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
