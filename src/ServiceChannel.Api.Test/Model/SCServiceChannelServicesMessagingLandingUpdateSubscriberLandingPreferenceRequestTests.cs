/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ServiceChannel.Api.Model;
using ServiceChannel.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ServiceChannel.Api.Test.Model
{
    /// <summary>
    ///  Class for testing SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequestTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest
        //private SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest instance;

        public SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequestTests()
        {
            // TODO uncomment below to create an instance of SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest
            //instance = new SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest
        /// </summary>
        [Fact]
        public void SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequestInstanceTest()
        {
            // TODO uncomment below to test "IsType" SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest
            //Assert.IsType<SCServiceChannelServicesMessagingLandingUpdateSubscriberLandingPreferenceRequest>(instance);
        }


        /// <summary>
        /// Test the property 'UserId'
        /// </summary>
        [Fact]
        public void UserIdTest()
        {
            // TODO unit test for the property 'UserId'
        }
        /// <summary>
        /// Test the property 'SubscriberId'
        /// </summary>
        [Fact]
        public void SubscriberIdTest()
        {
            // TODO unit test for the property 'SubscriberId'
        }
        /// <summary>
        /// Test the property 'SelectedLocationNoteHeaderIds'
        /// </summary>
        [Fact]
        public void SelectedLocationNoteHeaderIdsTest()
        {
            // TODO unit test for the property 'SelectedLocationNoteHeaderIds'
        }
        /// <summary>
        /// Test the property 'ThresholdEDispatchNotConfirmed'
        /// </summary>
        [Fact]
        public void ThresholdEDispatchNotConfirmedTest()
        {
            // TODO unit test for the property 'ThresholdEDispatchNotConfirmed'
        }
        /// <summary>
        /// Test the property 'ThresholdEDispatchDeclined'
        /// </summary>
        [Fact]
        public void ThresholdEDispatchDeclinedTest()
        {
            // TODO unit test for the property 'ThresholdEDispatchDeclined'
        }
        /// <summary>
        /// Test the property 'ThresholdELateToArrive'
        /// </summary>
        [Fact]
        public void ThresholdELateToArriveTest()
        {
            // TODO unit test for the property 'ThresholdELateToArrive'
        }
        /// <summary>
        /// Test the property 'ThresholdEWaitingForQuote'
        /// </summary>
        [Fact]
        public void ThresholdEWaitingForQuoteTest()
        {
            // TODO unit test for the property 'ThresholdEWaitingForQuote'
        }
        /// <summary>
        /// Test the property 'ThresholdEPendingApproval'
        /// </summary>
        [Fact]
        public void ThresholdEPendingApprovalTest()
        {
            // TODO unit test for the property 'ThresholdEPendingApproval'
        }
        /// <summary>
        /// Test the property 'ThresholdEPartsOnOrder'
        /// </summary>
        [Fact]
        public void ThresholdEPartsOnOrderTest()
        {
            // TODO unit test for the property 'ThresholdEPartsOnOrder'
        }
        /// <summary>
        /// Test the property 'ThresholdNeDispatchNotConfirmed'
        /// </summary>
        [Fact]
        public void ThresholdNeDispatchNotConfirmedTest()
        {
            // TODO unit test for the property 'ThresholdNeDispatchNotConfirmed'
        }
        /// <summary>
        /// Test the property 'ThresholdNeDispatchDeclined'
        /// </summary>
        [Fact]
        public void ThresholdNeDispatchDeclinedTest()
        {
            // TODO unit test for the property 'ThresholdNeDispatchDeclined'
        }
        /// <summary>
        /// Test the property 'ThresholdNeLateToArrive'
        /// </summary>
        [Fact]
        public void ThresholdNeLateToArriveTest()
        {
            // TODO unit test for the property 'ThresholdNeLateToArrive'
        }
        /// <summary>
        /// Test the property 'ThresholdNeWaitingForQuote'
        /// </summary>
        [Fact]
        public void ThresholdNeWaitingForQuoteTest()
        {
            // TODO unit test for the property 'ThresholdNeWaitingForQuote'
        }
        /// <summary>
        /// Test the property 'ThresholdNePendingApproval'
        /// </summary>
        [Fact]
        public void ThresholdNePendingApprovalTest()
        {
            // TODO unit test for the property 'ThresholdNePendingApproval'
        }
        /// <summary>
        /// Test the property 'ThresholdNePartsOnOrder'
        /// </summary>
        [Fact]
        public void ThresholdNePartsOnOrderTest()
        {
            // TODO unit test for the property 'ThresholdNePartsOnOrder'
        }
        /// <summary>
        /// Test the property 'ThresholdCompletedNotInvoiced'
        /// </summary>
        [Fact]
        public void ThresholdCompletedNotInvoicedTest()
        {
            // TODO unit test for the property 'ThresholdCompletedNotInvoiced'
        }
        /// <summary>
        /// Test the property 'PriorityId'
        /// </summary>
        [Fact]
        public void PriorityIdTest()
        {
            // TODO unit test for the property 'PriorityId'
        }

    }

}
