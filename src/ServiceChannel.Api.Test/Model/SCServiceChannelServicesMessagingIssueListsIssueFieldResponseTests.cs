/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ServiceChannel.Api.Model;
using ServiceChannel.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ServiceChannel.Api.Test.Model
{
    /// <summary>
    ///  Class for testing SCServiceChannelServicesMessagingIssueListsIssueFieldResponse
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SCServiceChannelServicesMessagingIssueListsIssueFieldResponseTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SCServiceChannelServicesMessagingIssueListsIssueFieldResponse
        //private SCServiceChannelServicesMessagingIssueListsIssueFieldResponse instance;

        public SCServiceChannelServicesMessagingIssueListsIssueFieldResponseTests()
        {
            // TODO uncomment below to create an instance of SCServiceChannelServicesMessagingIssueListsIssueFieldResponse
            //instance = new SCServiceChannelServicesMessagingIssueListsIssueFieldResponse();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SCServiceChannelServicesMessagingIssueListsIssueFieldResponse
        /// </summary>
        [Fact]
        public void SCServiceChannelServicesMessagingIssueListsIssueFieldResponseInstanceTest()
        {
            // TODO uncomment below to test "IsType" SCServiceChannelServicesMessagingIssueListsIssueFieldResponse
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsIssueFieldResponse>(instance);
        }


        /// <summary>
        /// Test the property 'ProblemType'
        /// </summary>
        [Fact]
        public void ProblemTypeTest()
        {
            // TODO unit test for the property 'ProblemType'
        }
        /// <summary>
        /// Test the property 'Item'
        /// </summary>
        [Fact]
        public void ItemTest()
        {
            // TODO unit test for the property 'Item'
        }
        /// <summary>
        /// Test the property 'Problem'
        /// </summary>
        [Fact]
        public void ProblemTest()
        {
            // TODO unit test for the property 'Problem'
        }
        /// <summary>
        /// Test the property 'For'
        /// </summary>
        [Fact]
        public void ForTest()
        {
            // TODO unit test for the property 'For'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'Header'
        /// </summary>
        [Fact]
        public void HeaderTest()
        {
            // TODO unit test for the property 'Header'
        }
        /// <summary>
        /// Test the property 'ErrorText'
        /// </summary>
        [Fact]
        public void ErrorTextTest()
        {
            // TODO unit test for the property 'ErrorText'
        }
        /// <summary>
        /// Test the property 'AreaName'
        /// </summary>
        [Fact]
        public void AreaNameTest()
        {
            // TODO unit test for the property 'AreaName'
        }
        /// <summary>
        /// Test the property 'Exclude'
        /// </summary>
        [Fact]
        public void ExcludeTest()
        {
            // TODO unit test for the property 'Exclude'
        }
        /// <summary>
        /// Test the property 'Min'
        /// </summary>
        [Fact]
        public void MinTest()
        {
            // TODO unit test for the property 'Min'
        }
        /// <summary>
        /// Test the property 'Max'
        /// </summary>
        [Fact]
        public void MaxTest()
        {
            // TODO unit test for the property 'Max'
        }
        /// <summary>
        /// Test the property 'Step'
        /// </summary>
        [Fact]
        public void StepTest()
        {
            // TODO unit test for the property 'Step'
        }
        /// <summary>
        /// Test the property 'Helptip'
        /// </summary>
        [Fact]
        public void HelptipTest()
        {
            // TODO unit test for the property 'Helptip'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'Allow'
        /// </summary>
        [Fact]
        public void AllowTest()
        {
            // TODO unit test for the property 'Allow'
        }
        /// <summary>
        /// Test the property 'ExpectedValue'
        /// </summary>
        [Fact]
        public void ExpectedValueTest()
        {
            // TODO unit test for the property 'ExpectedValue'
        }
        /// <summary>
        /// Test the property 'Options'
        /// </summary>
        [Fact]
        public void OptionsTest()
        {
            // TODO unit test for the property 'Options'
        }
        /// <summary>
        /// Test the property 'Required'
        /// </summary>
        [Fact]
        public void RequiredTest()
        {
            // TODO unit test for the property 'Required'
        }
        /// <summary>
        /// Test the property 'Decisions'
        /// </summary>
        [Fact]
        public void DecisionsTest()
        {
            // TODO unit test for the property 'Decisions'
        }
        /// <summary>
        /// Test the property 'LinkToMedia'
        /// </summary>
        [Fact]
        public void LinkToMediaTest()
        {
            // TODO unit test for the property 'LinkToMedia'
        }
        /// <summary>
        /// Test the property 'DisableFilter'
        /// </summary>
        [Fact]
        public void DisableFilterTest()
        {
            // TODO unit test for the property 'DisableFilter'
        }

    }

}
