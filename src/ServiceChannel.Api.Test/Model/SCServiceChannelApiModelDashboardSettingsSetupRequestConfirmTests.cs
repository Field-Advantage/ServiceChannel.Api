/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ServiceChannel.Api.Model;
using ServiceChannel.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ServiceChannel.Api.Test.Model
{
    /// <summary>
    ///  Class for testing SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SCServiceChannelApiModelDashboardSettingsSetupRequestConfirmTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm
        //private SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm instance;

        public SCServiceChannelApiModelDashboardSettingsSetupRequestConfirmTests()
        {
            // TODO uncomment below to create an instance of SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm
            //instance = new SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm
        /// </summary>
        [Fact]
        public void SCServiceChannelApiModelDashboardSettingsSetupRequestConfirmInstanceTest()
        {
            // TODO uncomment below to test "IsType" SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm
            //Assert.IsType<SCServiceChannelApiModelDashboardSettingsSetupRequestConfirm>(instance);
        }


        /// <summary>
        /// Test the property 'SetupId'
        /// </summary>
        [Fact]
        public void SetupIdTest()
        {
            // TODO unit test for the property 'SetupId'
        }
        /// <summary>
        /// Test the property 'ChangeableCategory'
        /// </summary>
        [Fact]
        public void ChangeableCategoryTest()
        {
            // TODO unit test for the property 'ChangeableCategory'
        }
        /// <summary>
        /// Test the property 'ChangeablePriority'
        /// </summary>
        [Fact]
        public void ChangeablePriorityTest()
        {
            // TODO unit test for the property 'ChangeablePriority'
        }
        /// <summary>
        /// Test the property 'ChangeableNte'
        /// </summary>
        [Fact]
        public void ChangeableNteTest()
        {
            // TODO unit test for the property 'ChangeableNte'
        }
        /// <summary>
        /// Test the property 'ChangeableScheduledDate'
        /// </summary>
        [Fact]
        public void ChangeableScheduledDateTest()
        {
            // TODO unit test for the property 'ChangeableScheduledDate'
        }
        /// <summary>
        /// Test the property 'ChangeableProvider'
        /// </summary>
        [Fact]
        public void ChangeableProviderTest()
        {
            // TODO unit test for the property 'ChangeableProvider'
        }
        /// <summary>
        /// Test the property 'CreateLinkedRequest'
        /// </summary>
        [Fact]
        public void CreateLinkedRequestTest()
        {
            // TODO unit test for the property 'CreateLinkedRequest'
        }
        /// <summary>
        /// Test the property 'ShowRecipients'
        /// </summary>
        [Fact]
        public void ShowRecipientsTest()
        {
            // TODO unit test for the property 'ShowRecipients'
        }
        /// <summary>
        /// Test the property 'AddCopyRecipient'
        /// </summary>
        [Fact]
        public void AddCopyRecipientTest()
        {
            // TODO unit test for the property 'AddCopyRecipient'
        }
        /// <summary>
        /// Test the property 'DeleteCopyRecipients'
        /// </summary>
        [Fact]
        public void DeleteCopyRecipientsTest()
        {
            // TODO unit test for the property 'DeleteCopyRecipients'
        }
        /// <summary>
        /// Test the property 'EnableAdditionalCodes'
        /// </summary>
        [Fact]
        public void EnableAdditionalCodesTest()
        {
            // TODO unit test for the property 'EnableAdditionalCodes'
        }
        /// <summary>
        /// Test the property 'EmptyProviderEmailNotification'
        /// </summary>
        [Fact]
        public void EmptyProviderEmailNotificationTest()
        {
            // TODO unit test for the property 'EmptyProviderEmailNotification'
        }
        /// <summary>
        /// Test the property 'EnablePO'
        /// </summary>
        [Fact]
        public void EnablePOTest()
        {
            // TODO unit test for the property 'EnablePO'
        }
        /// <summary>
        /// Test the property 'RequirePO'
        /// </summary>
        [Fact]
        public void RequirePOTest()
        {
            // TODO unit test for the property 'RequirePO'
        }
        /// <summary>
        /// Test the property 'EnableWO'
        /// </summary>
        [Fact]
        public void EnableWOTest()
        {
            // TODO unit test for the property 'EnableWO'
        }
        /// <summary>
        /// Test the property 'ChangeablePrioritySetDefault'
        /// </summary>
        [Fact]
        public void ChangeablePrioritySetDefaultTest()
        {
            // TODO unit test for the property 'ChangeablePrioritySetDefault'
        }
        /// <summary>
        /// Test the property 'AllowChangeableCurrency'
        /// </summary>
        [Fact]
        public void AllowChangeableCurrencyTest()
        {
            // TODO unit test for the property 'AllowChangeableCurrency'
        }
        /// <summary>
        /// Test the property 'AvoidDispatching'
        /// </summary>
        [Fact]
        public void AvoidDispatchingTest()
        {
            // TODO unit test for the property 'AvoidDispatching'
        }
        /// <summary>
        /// Test the property 'EnableLabels'
        /// </summary>
        [Fact]
        public void EnableLabelsTest()
        {
            // TODO unit test for the property 'EnableLabels'
        }
        /// <summary>
        /// Test the property 'LabelsAsSelectOnly'
        /// </summary>
        [Fact]
        public void LabelsAsSelectOnlyTest()
        {
            // TODO unit test for the property 'LabelsAsSelectOnly'
        }
        /// <summary>
        /// Test the property 'EditWeatherType'
        /// </summary>
        [Fact]
        public void EditWeatherTypeTest()
        {
            // TODO unit test for the property 'EditWeatherType'
        }
        /// <summary>
        /// Test the property 'ChangeableGlCode'
        /// </summary>
        [Fact]
        public void ChangeableGlCodeTest()
        {
            // TODO unit test for the property 'ChangeableGlCode'
        }
        /// <summary>
        /// Test the property 'MaintainOrDecreasePriority'
        /// </summary>
        [Fact]
        public void MaintainOrDecreasePriorityTest()
        {
            // TODO unit test for the property 'MaintainOrDecreasePriority'
        }
        /// <summary>
        /// Test the property 'ShowAsset'
        /// </summary>
        [Fact]
        public void ShowAssetTest()
        {
            // TODO unit test for the property 'ShowAsset'
        }
        /// <summary>
        /// Test the property 'EnableAssignee'
        /// </summary>
        [Fact]
        public void EnableAssigneeTest()
        {
            // TODO unit test for the property 'EnableAssignee'
        }

    }

}
