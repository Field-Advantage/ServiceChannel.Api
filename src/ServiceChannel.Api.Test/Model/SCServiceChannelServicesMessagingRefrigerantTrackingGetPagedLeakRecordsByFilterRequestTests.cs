/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ServiceChannel.Api.Model;
using ServiceChannel.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ServiceChannel.Api.Test.Model
{
    /// <summary>
    ///  Class for testing SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequestTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest
        //private SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest instance;

        public SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequestTests()
        {
            // TODO uncomment below to create an instance of SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest
            //instance = new SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest
        /// </summary>
        [Fact]
        public void SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequestInstanceTest()
        {
            // TODO uncomment below to test "IsType" SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest
            //Assert.IsType<SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest>(instance);
        }


        /// <summary>
        /// Test the property 'EquipmentTypes'
        /// </summary>
        [Fact]
        public void EquipmentTypesTest()
        {
            // TODO unit test for the property 'EquipmentTypes'
        }
        /// <summary>
        /// Test the property 'EquipmentTags'
        /// </summary>
        [Fact]
        public void EquipmentTagsTest()
        {
            // TODO unit test for the property 'EquipmentTags'
        }
        /// <summary>
        /// Test the property 'Locations'
        /// </summary>
        [Fact]
        public void LocationsTest()
        {
            // TODO unit test for the property 'Locations'
        }
        /// <summary>
        /// Test the property 'LeakLocations'
        /// </summary>
        [Fact]
        public void LeakLocationsTest()
        {
            // TODO unit test for the property 'LeakLocations'
        }
        /// <summary>
        /// Test the property 'TrackingNumbers'
        /// </summary>
        [Fact]
        public void TrackingNumbersTest()
        {
            // TODO unit test for the property 'TrackingNumbers'
        }
        /// <summary>
        /// Test the property 'LeakStatusId'
        /// </summary>
        [Fact]
        public void LeakStatusIdTest()
        {
            // TODO unit test for the property 'LeakStatusId'
        }
        /// <summary>
        /// Test the property 'Index'
        /// </summary>
        [Fact]
        public void IndexTest()
        {
            // TODO unit test for the property 'Index'
        }
        /// <summary>
        /// Test the property 'Count'
        /// </summary>
        [Fact]
        public void CountTest()
        {
            // TODO unit test for the property 'Count'
        }
        /// <summary>
        /// Test the property 'DateRangeId'
        /// </summary>
        [Fact]
        public void DateRangeIdTest()
        {
            // TODO unit test for the property 'DateRangeId'
        }
        /// <summary>
        /// Test the property 'StartDate'
        /// </summary>
        [Fact]
        public void StartDateTest()
        {
            // TODO unit test for the property 'StartDate'
        }
        /// <summary>
        /// Test the property 'EndDate'
        /// </summary>
        [Fact]
        public void EndDateTest()
        {
            // TODO unit test for the property 'EndDate'
        }
        /// <summary>
        /// Test the property 'LeakAreaIds'
        /// </summary>
        [Fact]
        public void LeakAreaIdsTest()
        {
            // TODO unit test for the property 'LeakAreaIds'
        }
        /// <summary>
        /// Test the property 'ProviderIds'
        /// </summary>
        [Fact]
        public void ProviderIdsTest()
        {
            // TODO unit test for the property 'ProviderIds'
        }
        /// <summary>
        /// Test the property 'Markets'
        /// </summary>
        [Fact]
        public void MarketsTest()
        {
            // TODO unit test for the property 'Markets'
        }
        /// <summary>
        /// Test the property 'Divisions'
        /// </summary>
        [Fact]
        public void DivisionsTest()
        {
            // TODO unit test for the property 'Divisions'
        }
        /// <summary>
        /// Test the property 'ActionCodeIds'
        /// </summary>
        [Fact]
        public void ActionCodeIdsTest()
        {
            // TODO unit test for the property 'ActionCodeIds'
        }
        /// <summary>
        /// Test the property 'ReasonCodeIds'
        /// </summary>
        [Fact]
        public void ReasonCodeIdsTest()
        {
            // TODO unit test for the property 'ReasonCodeIds'
        }
        /// <summary>
        /// Test the property 'PartGroups'
        /// </summary>
        [Fact]
        public void PartGroupsTest()
        {
            // TODO unit test for the property 'PartGroups'
        }
        /// <summary>
        /// Test the property 'MOENumbers'
        /// </summary>
        [Fact]
        public void MOENumbersTest()
        {
            // TODO unit test for the property 'MOENumbers'
        }
        /// <summary>
        /// Test the property 'UnitOfMeasure'
        /// </summary>
        [Fact]
        public void UnitOfMeasureTest()
        {
            // TODO unit test for the property 'UnitOfMeasure'
        }
        /// <summary>
        /// Test the property 'IsExport'
        /// </summary>
        [Fact]
        public void IsExportTest()
        {
            // TODO unit test for the property 'IsExport'
        }

    }

}
