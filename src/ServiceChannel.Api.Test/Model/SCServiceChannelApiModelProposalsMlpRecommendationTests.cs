/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ServiceChannel.Api.Model;
using ServiceChannel.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ServiceChannel.Api.Test.Model
{
    /// <summary>
    ///  Class for testing SCServiceChannelApiModelProposalsMlpRecommendation
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SCServiceChannelApiModelProposalsMlpRecommendationTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SCServiceChannelApiModelProposalsMlpRecommendation
        //private SCServiceChannelApiModelProposalsMlpRecommendation instance;

        public SCServiceChannelApiModelProposalsMlpRecommendationTests()
        {
            // TODO uncomment below to create an instance of SCServiceChannelApiModelProposalsMlpRecommendation
            //instance = new SCServiceChannelApiModelProposalsMlpRecommendation();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SCServiceChannelApiModelProposalsMlpRecommendation
        /// </summary>
        [Fact]
        public void SCServiceChannelApiModelProposalsMlpRecommendationInstanceTest()
        {
            // TODO uncomment below to test "IsType" SCServiceChannelApiModelProposalsMlpRecommendation
            //Assert.IsType<SCServiceChannelApiModelProposalsMlpRecommendation>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'ProposalId'
        /// </summary>
        [Fact]
        public void ProposalIdTest()
        {
            // TODO unit test for the property 'ProposalId'
        }
        /// <summary>
        /// Test the property 'UserId'
        /// </summary>
        [Fact]
        public void UserIdTest()
        {
            // TODO unit test for the property 'UserId'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }
        /// <summary>
        /// Test the property 'WoType'
        /// </summary>
        [Fact]
        public void WoTypeTest()
        {
            // TODO unit test for the property 'WoType'
        }
        /// <summary>
        /// Test the property 'OriginalTrackingNumber'
        /// </summary>
        [Fact]
        public void OriginalTrackingNumberTest()
        {
            // TODO unit test for the property 'OriginalTrackingNumber'
        }
        /// <summary>
        /// Test the property 'SelectedTrackingNumber'
        /// </summary>
        [Fact]
        public void SelectedTrackingNumberTest()
        {
            // TODO unit test for the property 'SelectedTrackingNumber'
        }
        /// <summary>
        /// Test the property 'GeneratedTrackingNumber'
        /// </summary>
        [Fact]
        public void GeneratedTrackingNumberTest()
        {
            // TODO unit test for the property 'GeneratedTrackingNumber'
        }
        /// <summary>
        /// Test the property 'PoNumber'
        /// </summary>
        [Fact]
        public void PoNumberTest()
        {
            // TODO unit test for the property 'PoNumber'
        }
        /// <summary>
        /// Test the property 'Category'
        /// </summary>
        [Fact]
        public void CategoryTest()
        {
            // TODO unit test for the property 'Category'
        }
        /// <summary>
        /// Test the property 'CategoryId'
        /// </summary>
        [Fact]
        public void CategoryIdTest()
        {
            // TODO unit test for the property 'CategoryId'
        }
        /// <summary>
        /// Test the property 'ApprovalCode'
        /// </summary>
        [Fact]
        public void ApprovalCodeTest()
        {
            // TODO unit test for the property 'ApprovalCode'
        }
        /// <summary>
        /// Test the property 'Priority'
        /// </summary>
        [Fact]
        public void PriorityTest()
        {
            // TODO unit test for the property 'Priority'
        }
        /// <summary>
        /// Test the property 'RejectCodeId'
        /// </summary>
        [Fact]
        public void RejectCodeIdTest()
        {
            // TODO unit test for the property 'RejectCodeId'
        }
        /// <summary>
        /// Test the property 'ApprovalReason'
        /// </summary>
        [Fact]
        public void ApprovalReasonTest()
        {
            // TODO unit test for the property 'ApprovalReason'
        }
        /// <summary>
        /// Test the property 'EmailsToNotify'
        /// </summary>
        [Fact]
        public void EmailsToNotifyTest()
        {
            // TODO unit test for the property 'EmailsToNotify'
        }
        /// <summary>
        /// Test the property 'Applied'
        /// </summary>
        [Fact]
        public void AppliedTest()
        {
            // TODO unit test for the property 'Applied'
        }
        /// <summary>
        /// Test the property 'EmailMyself'
        /// </summary>
        [Fact]
        public void EmailMyselfTest()
        {
            // TODO unit test for the property 'EmailMyself'
        }
        /// <summary>
        /// Test the property 'MyEmail'
        /// </summary>
        [Fact]
        public void MyEmailTest()
        {
            // TODO unit test for the property 'MyEmail'
        }
        /// <summary>
        /// Test the property 'NotSavedRecommendation'
        /// </summary>
        [Fact]
        public void NotSavedRecommendationTest()
        {
            // TODO unit test for the property 'NotSavedRecommendation'
        }
        /// <summary>
        /// Test the property 'WorkOrderLabel'
        /// </summary>
        [Fact]
        public void WorkOrderLabelTest()
        {
            // TODO unit test for the property 'WorkOrderLabel'
        }
        /// <summary>
        /// Test the property 'Comment'
        /// </summary>
        [Fact]
        public void CommentTest()
        {
            // TODO unit test for the property 'Comment'
        }

    }

}
