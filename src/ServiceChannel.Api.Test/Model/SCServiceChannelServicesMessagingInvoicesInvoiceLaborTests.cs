/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ServiceChannel.Api.Model;
using ServiceChannel.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ServiceChannel.Api.Test.Model
{
    /// <summary>
    ///  Class for testing SCServiceChannelServicesMessagingInvoicesInvoiceLabor
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SCServiceChannelServicesMessagingInvoicesInvoiceLaborTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SCServiceChannelServicesMessagingInvoicesInvoiceLabor
        //private SCServiceChannelServicesMessagingInvoicesInvoiceLabor instance;

        public SCServiceChannelServicesMessagingInvoicesInvoiceLaborTests()
        {
            // TODO uncomment below to create an instance of SCServiceChannelServicesMessagingInvoicesInvoiceLabor
            //instance = new SCServiceChannelServicesMessagingInvoicesInvoiceLabor();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SCServiceChannelServicesMessagingInvoicesInvoiceLabor
        /// </summary>
        [Fact]
        public void SCServiceChannelServicesMessagingInvoicesInvoiceLaborInstanceTest()
        {
            // TODO uncomment below to test "IsType" SCServiceChannelServicesMessagingInvoicesInvoiceLabor
            //Assert.IsType<SCServiceChannelServicesMessagingInvoicesInvoiceLabor>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'InvoiceId'
        /// </summary>
        [Fact]
        public void InvoiceIdTest()
        {
            // TODO unit test for the property 'InvoiceId'
        }
        /// <summary>
        /// Test the property 'SkillLevel'
        /// </summary>
        [Fact]
        public void SkillLevelTest()
        {
            // TODO unit test for the property 'SkillLevel'
        }
        /// <summary>
        /// Test the property 'LaborType'
        /// </summary>
        [Fact]
        public void LaborTypeTest()
        {
            // TODO unit test for the property 'LaborType'
        }
        /// <summary>
        /// Test the property 'NumOfTech'
        /// </summary>
        [Fact]
        public void NumOfTechTest()
        {
            // TODO unit test for the property 'NumOfTech'
        }
        /// <summary>
        /// Test the property 'HourlyRate'
        /// </summary>
        [Fact]
        public void HourlyRateTest()
        {
            // TODO unit test for the property 'HourlyRate'
        }
        /// <summary>
        /// Test the property 'Hours'
        /// </summary>
        [Fact]
        public void HoursTest()
        {
            // TODO unit test for the property 'Hours'
        }
        /// <summary>
        /// Test the property 'Amount'
        /// </summary>
        [Fact]
        public void AmountTest()
        {
            // TODO unit test for the property 'Amount'
        }
        /// <summary>
        /// Test the property 'IsOffShore'
        /// </summary>
        [Fact]
        public void IsOffShoreTest()
        {
            // TODO unit test for the property 'IsOffShore'
        }
        /// <summary>
        /// Test the property 'ServiceType'
        /// </summary>
        [Fact]
        public void ServiceTypeTest()
        {
            // TODO unit test for the property 'ServiceType'
        }
        /// <summary>
        /// Test the property 'CityPerformed'
        /// </summary>
        [Fact]
        public void CityPerformedTest()
        {
            // TODO unit test for the property 'CityPerformed'
        }
        /// <summary>
        /// Test the property 'RateDiscrepancyReason'
        /// </summary>
        [Fact]
        public void RateDiscrepancyReasonTest()
        {
            // TODO unit test for the property 'RateDiscrepancyReason'
        }
        /// <summary>
        /// Test the property 'AgreedRate'
        /// </summary>
        [Fact]
        public void AgreedRateTest()
        {
            // TODO unit test for the property 'AgreedRate'
        }
        /// <summary>
        /// Test the property 'ApprovalCodeGroup'
        /// </summary>
        [Fact]
        public void ApprovalCodeGroupTest()
        {
            // TODO unit test for the property 'ApprovalCodeGroup'
        }
        /// <summary>
        /// Test the property 'IsRateDiscrepancy'
        /// </summary>
        [Fact]
        public void IsRateDiscrepancyTest()
        {
            // TODO unit test for the property 'IsRateDiscrepancy'
        }
        /// <summary>
        /// Test the property 'IsNontaxableVATEU'
        /// </summary>
        [Fact]
        public void IsNontaxableVATEUTest()
        {
            // TODO unit test for the property 'IsNontaxableVATEU'
        }

    }

}
