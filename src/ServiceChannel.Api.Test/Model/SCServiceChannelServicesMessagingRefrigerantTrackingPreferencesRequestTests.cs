/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ServiceChannel.Api.Model;
using ServiceChannel.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ServiceChannel.Api.Test.Model
{
    /// <summary>
    ///  Class for testing SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequestTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest
        //private SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest instance;

        public SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequestTests()
        {
            // TODO uncomment below to create an instance of SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest
            //instance = new SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest
        /// </summary>
        [Fact]
        public void SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequestInstanceTest()
        {
            // TODO uncomment below to test "IsType" SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest
            //Assert.IsType<SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest>(instance);
        }


        /// <summary>
        /// Test the property 'SubscriberId'
        /// </summary>
        [Fact]
        public void SubscriberIdTest()
        {
            // TODO unit test for the property 'SubscriberId'
        }
        /// <summary>
        /// Test the property 'ChargeThreshold'
        /// </summary>
        [Fact]
        public void ChargeThresholdTest()
        {
            // TODO unit test for the property 'ChargeThreshold'
        }
        /// <summary>
        /// Test the property 'ComercialRefTriggerRate'
        /// </summary>
        [Fact]
        public void ComercialRefTriggerRateTest()
        {
            // TODO unit test for the property 'ComercialRefTriggerRate'
        }
        /// <summary>
        /// Test the property 'IndustrialRefTriggerRate'
        /// </summary>
        [Fact]
        public void IndustrialRefTriggerRateTest()
        {
            // TODO unit test for the property 'IndustrialRefTriggerRate'
        }
        /// <summary>
        /// Test the property 'HVACTriggerRate'
        /// </summary>
        [Fact]
        public void HVACTriggerRateTest()
        {
            // TODO unit test for the property 'HVACTriggerRate'
        }
        /// <summary>
        /// Test the property 'OthersTriggerRate'
        /// </summary>
        [Fact]
        public void OthersTriggerRateTest()
        {
            // TODO unit test for the property 'OthersTriggerRate'
        }
        /// <summary>
        /// Test the property 'CreateDate'
        /// </summary>
        [Fact]
        public void CreateDateTest()
        {
            // TODO unit test for the property 'CreateDate'
        }
        /// <summary>
        /// Test the property 'CreateDateStr'
        /// </summary>
        [Fact]
        public void CreateDateStrTest()
        {
            // TODO unit test for the property 'CreateDateStr'
        }
        /// <summary>
        /// Test the property 'UserId'
        /// </summary>
        [Fact]
        public void UserIdTest()
        {
            // TODO unit test for the property 'UserId'
        }
        /// <summary>
        /// Test the property 'UserName'
        /// </summary>
        [Fact]
        public void UserNameTest()
        {
            // TODO unit test for the property 'UserName'
        }
        /// <summary>
        /// Test the property 'MaxThreshold'
        /// </summary>
        [Fact]
        public void MaxThresholdTest()
        {
            // TODO unit test for the property 'MaxThreshold'
        }
        /// <summary>
        /// Test the property 'CalculationMethod'
        /// </summary>
        [Fact]
        public void CalculationMethodTest()
        {
            // TODO unit test for the property 'CalculationMethod'
        }
        /// <summary>
        /// Test the property 'CalculationMethods'
        /// </summary>
        [Fact]
        public void CalculationMethodsTest()
        {
            // TODO unit test for the property 'CalculationMethods'
        }
        /// <summary>
        /// Test the property 'UnitsOfMeasure'
        /// </summary>
        [Fact]
        public void UnitsOfMeasureTest()
        {
            // TODO unit test for the property 'UnitsOfMeasure'
        }
        /// <summary>
        /// Test the property 'UnitsOfMeasures'
        /// </summary>
        [Fact]
        public void UnitsOfMeasuresTest()
        {
            // TODO unit test for the property 'UnitsOfMeasures'
        }
        /// <summary>
        /// Test the property 'InventoryLocation'
        /// </summary>
        [Fact]
        public void InventoryLocationTest()
        {
            // TODO unit test for the property 'InventoryLocation'
        }
        /// <summary>
        /// Test the property 'InventoryLocationOptions'
        /// </summary>
        [Fact]
        public void InventoryLocationOptionsTest()
        {
            // TODO unit test for the property 'InventoryLocationOptions'
        }
        /// <summary>
        /// Test the property 'RefrigerationPriorityName'
        /// </summary>
        [Fact]
        public void RefrigerationPriorityNameTest()
        {
            // TODO unit test for the property 'RefrigerationPriorityName'
        }
        /// <summary>
        /// Test the property 'RefrigerationPriorityNameOptions'
        /// </summary>
        [Fact]
        public void RefrigerationPriorityNameOptionsTest()
        {
            // TODO unit test for the property 'RefrigerationPriorityNameOptions'
        }
        /// <summary>
        /// Test the property 'GenerateFollowUpWorkOrders'
        /// </summary>
        [Fact]
        public void GenerateFollowUpWorkOrdersTest()
        {
            // TODO unit test for the property 'GenerateFollowUpWorkOrders'
        }
        /// <summary>
        /// Test the property 'ChargeThresholdStr'
        /// </summary>
        [Fact]
        public void ChargeThresholdStrTest()
        {
            // TODO unit test for the property 'ChargeThresholdStr'
        }
        /// <summary>
        /// Test the property 'RunCARBReport'
        /// </summary>
        [Fact]
        public void RunCARBReportTest()
        {
            // TODO unit test for the property 'RunCARBReport'
        }
        /// <summary>
        /// Test the property 'LeakInspectionNTE'
        /// </summary>
        [Fact]
        public void LeakInspectionNTETest()
        {
            // TODO unit test for the property 'LeakInspectionNTE'
        }
        /// <summary>
        /// Test the property 'GenerateFollowUpWorkOrder'
        /// </summary>
        [Fact]
        public void GenerateFollowUpWorkOrderTest()
        {
            // TODO unit test for the property 'GenerateFollowUpWorkOrder'
        }
        /// <summary>
        /// Test the property 'MaxLocCount'
        /// </summary>
        [Fact]
        public void MaxLocCountTest()
        {
            // TODO unit test for the property 'MaxLocCount'
        }
        /// <summary>
        /// Test the property 'RtLimitedApplianceId'
        /// </summary>
        [Fact]
        public void RtLimitedApplianceIdTest()
        {
            // TODO unit test for the property 'RtLimitedApplianceId'
        }
        /// <summary>
        /// Test the property 'RtLimitedApplianceName'
        /// </summary>
        [Fact]
        public void RtLimitedApplianceNameTest()
        {
            // TODO unit test for the property 'RtLimitedApplianceName'
        }
        /// <summary>
        /// Test the property 'RefrigerantTrackingProviderId'
        /// </summary>
        [Fact]
        public void RefrigerantTrackingProviderIdTest()
        {
            // TODO unit test for the property 'RefrigerantTrackingProviderId'
        }
        /// <summary>
        /// Test the property 'RefrigerantTrackingProviderName'
        /// </summary>
        [Fact]
        public void RefrigerantTrackingProviderNameTest()
        {
            // TODO unit test for the property 'RefrigerantTrackingProviderName'
        }
        /// <summary>
        /// Test the property 'ODSRefrigerantTypes'
        /// </summary>
        [Fact]
        public void ODSRefrigerantTypesTest()
        {
            // TODO unit test for the property 'ODSRefrigerantTypes'
        }
        /// <summary>
        /// Test the property 'GenerateLeakInspectionOption'
        /// </summary>
        [Fact]
        public void GenerateLeakInspectionOptionTest()
        {
            // TODO unit test for the property 'GenerateLeakInspectionOption'
        }
        /// <summary>
        /// Test the property 'CalendarStartDate'
        /// </summary>
        [Fact]
        public void CalendarStartDateTest()
        {
            // TODO unit test for the property 'CalendarStartDate'
        }
        /// <summary>
        /// Test the property 'CalendarStartDateStr'
        /// </summary>
        [Fact]
        public void CalendarStartDateStrTest()
        {
            // TODO unit test for the property 'CalendarStartDateStr'
        }
        /// <summary>
        /// Test the property 'EnableCARBInspections'
        /// </summary>
        [Fact]
        public void EnableCARBInspectionsTest()
        {
            // TODO unit test for the property 'EnableCARBInspections'
        }

    }

}
