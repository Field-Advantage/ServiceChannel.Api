/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing OutgoingXmlApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OutgoingXmlApiTests : IDisposable
    {
        private OutgoingXmlApi instance;

        public OutgoingXmlApiTests()
        {
            instance = new OutgoingXmlApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OutgoingXmlApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OutgoingXmlApi
            //Assert.IsType<OutgoingXmlApi>(instance);
        }

        /// <summary>
        /// Test ApiNotificationsReset
        /// </summary>
        [Fact]
        public void ApiNotificationsResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiNotificationsReset();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsResetnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void ApiNotificationsResetnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.ApiNotificationsResetnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2Sendxml
        /// </summary>
        [Fact]
        public void ApiNotificationsV2SendxmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiNotificationsV2Sendxml();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersCxmlid
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersCxmlidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.ApiNotificationsV2WorkordersCxmlid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersIvrListproIdproIdstartstartfinishfinish
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersIvrListproIdproIdstartstartfinishfinishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proId = null;
            //DateTime start = null;
            //DateTime finish = null;
            //var response = instance.ApiNotificationsV2WorkordersIvrListproIdproIdstartstartfinishfinish(proId, start, finish);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersIvrResend
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersIvrResendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiControllersOutgoingXmlControllerResendData data = null;
            //var response = instance.ApiNotificationsV2WorkordersIvrResend(data);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersIvrSend
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersIvrSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiNotificationsV2WorkordersIvrSend();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersIvrid
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersIvridTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.ApiNotificationsV2WorkordersIvrid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersListproIdproIdstartstartfinishfinish
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersListproIdproIdstartstartfinishfinishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proId = null;
            //DateTime start = null;
            //DateTime finish = null;
            //var response = instance.ApiNotificationsV2WorkordersListproIdproIdstartstartfinishfinish(proId, start, finish);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersNoteSend
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersNoteSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiNotificationsV2WorkordersNoteSend();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersNotesListproIdproIdstartstartfinishfinish
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersNotesListproIdproIdstartstartfinishfinishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proId = null;
            //DateTime start = null;
            //DateTime finish = null;
            //var response = instance.ApiNotificationsV2WorkordersNotesListproIdproIdstartstartfinishfinish(proId, start, finish);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersNotesResend
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersNotesResendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiControllersOutgoingXmlControllerResendData data = null;
            //var response = instance.ApiNotificationsV2WorkordersNotesResend(data);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersNotesid
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersNotesidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.ApiNotificationsV2WorkordersNotesid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersResend
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersResendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiControllersOutgoingXmlControllerResendData data = null;
            //var response = instance.ApiNotificationsV2WorkordersResend(data);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2WorkordersSend
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiNotificationsV2WorkordersSend();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV2Workordersid
        /// </summary>
        [Fact]
        public void ApiNotificationsV2WorkordersidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.ApiNotificationsV2Workordersid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV4WorkordersNoteSendnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void ApiNotificationsV4WorkordersNoteSendnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.ApiNotificationsV4WorkordersNoteSendnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV4WorkordersSendnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void ApiNotificationsV4WorkordersSendnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.ApiNotificationsV4WorkordersSendnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiNotificationsV4WorkordersStatusSendnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void ApiNotificationsV4WorkordersStatusSendnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.ApiNotificationsV4WorkordersStatusSendnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsReset
        /// </summary>
        [Fact]
        public void NotificationsResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NotificationsReset();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsResetnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void NotificationsResetnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.NotificationsResetnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2Sendxml
        /// </summary>
        [Fact]
        public void NotificationsV2SendxmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NotificationsV2Sendxml();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersCxmlid
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersCxmlidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.NotificationsV2WorkordersCxmlid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersIvrListproIdproIdstartstartfinishfinish
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersIvrListproIdproIdstartstartfinishfinishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proId = null;
            //DateTime start = null;
            //DateTime finish = null;
            //var response = instance.NotificationsV2WorkordersIvrListproIdproIdstartstartfinishfinish(proId, start, finish);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersIvrResend
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersIvrResendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiControllersOutgoingXmlControllerResendData data = null;
            //var response = instance.NotificationsV2WorkordersIvrResend(data);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersIvrSend
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersIvrSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NotificationsV2WorkordersIvrSend();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersIvrid
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersIvridTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.NotificationsV2WorkordersIvrid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersListproIdproIdstartstartfinishfinish
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersListproIdproIdstartstartfinishfinishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proId = null;
            //DateTime start = null;
            //DateTime finish = null;
            //var response = instance.NotificationsV2WorkordersListproIdproIdstartstartfinishfinish(proId, start, finish);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersNoteSend
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersNoteSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NotificationsV2WorkordersNoteSend();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersNotesListproIdproIdstartstartfinishfinish
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersNotesListproIdproIdstartstartfinishfinishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proId = null;
            //DateTime start = null;
            //DateTime finish = null;
            //var response = instance.NotificationsV2WorkordersNotesListproIdproIdstartstartfinishfinish(proId, start, finish);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersNotesResend
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersNotesResendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiControllersOutgoingXmlControllerResendData data = null;
            //var response = instance.NotificationsV2WorkordersNotesResend(data);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersNotesid
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersNotesidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.NotificationsV2WorkordersNotesid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersResend
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersResendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiControllersOutgoingXmlControllerResendData data = null;
            //var response = instance.NotificationsV2WorkordersResend(data);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2WorkordersSend
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NotificationsV2WorkordersSend();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV2Workordersid
        /// </summary>
        [Fact]
        public void NotificationsV2WorkordersidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.NotificationsV2Workordersid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV4WorkordersNoteSendnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void NotificationsV4WorkordersNoteSendnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.NotificationsV4WorkordersNoteSendnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV4WorkordersSendnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void NotificationsV4WorkordersSendnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.NotificationsV4WorkordersSendnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test NotificationsV4WorkordersStatusSendnotifysetupNamesetupName
        /// </summary>
        [Fact]
        public void NotificationsV4WorkordersStatusSendnotifysetupNamesetupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setupName = null;
            //var response = instance.NotificationsV4WorkordersStatusSendnotifysetupNamesetupName(setupName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Webhooks
        /// </summary>
        [Fact]
        public void WebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Webhooks();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test WebhooksSubscribe
        /// </summary>
        [Fact]
        public void WebhooksSubscribeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelApiModelOutgoingXmlOutgoingXmlUser ud = null;
            //var response = instance.WebhooksSubscribe(ud);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test WebhooksUnsubscribe
        /// </summary>
        [Fact]
        public void WebhooksUnsubscribeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelApiModelOutgoingXmlOutgoingXmlUser ud = null;
            //var response = instance.WebhooksUnsubscribe(ud);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test WebhooksidproviderIdproviderId
        /// </summary>
        [Fact]
        public void WebhooksidproviderIdproviderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int providerId = null;
            //string id = null;
            //var response = instance.WebhooksidproviderIdproviderId(providerId, id);
            //Assert.IsType<Object>(response);
        }
    }
}
