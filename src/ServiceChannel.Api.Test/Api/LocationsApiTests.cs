/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing LocationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LocationsApiTests : IDisposable
    {
        private LocationsApi instance;

        public LocationsApiTests()
        {
            instance = new LocationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LocationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LocationsApi
            //Assert.IsType<LocationsApi>(instance);
        }

        /// <summary>
        /// Test Filter
        /// </summary>
        [Fact]
        public void FilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter = null;
            //var response = instance.Filter(locationFilter);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetApiLocationResponse>(response);
        }

        /// <summary>
        /// Test GetFilteredLocations
        /// </summary>
        [Fact]
        public void GetFilteredLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request = null;
            //var response = instance.GetFilteredLocations(request);
            //Assert.IsType<List<SCServiceChannelServicesMessagingLocationLocationShortModel>>(response);
        }

        /// <summary>
        /// Test GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression
        /// </summary>
        [Fact]
        public void GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int page = null;
            //int pageSize = null;
            //string? searchExpression = null;
            //var response = instance.GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression(page, pageSize, searchExpression);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse>(response);
        }

        /// <summary>
        /// Test GetLocations
        /// </summary>
        [Fact]
        public void GetLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetLocations(expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingLocationLocation>>(response);
        }

        /// <summary>
        /// Test GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened
        /// </summary>
        [Fact]
        public void GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpenedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int page = null;
            //int pageSize = null;
            //double? latitude = null;
            //double? longitude = null;
            //string? searchExpression = null;
            //bool? onlyOpened = null;
            //var response = instance.GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened(page, pageSize, latitude, longitude, searchExpression, onlyOpened);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse>(response);
        }

        /// <summary>
        /// Test GetLocationsNearMe
        /// </summary>
        [Fact]
        public void GetLocationsNearMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double longitude = null;
            //double latitude = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetLocationsNearMe(longitude, latitude, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingLocationLocation>>(response);
        }

        /// <summary>
        /// Test GetServiceRequestLocations
        /// </summary>
        [Fact]
        public void GetServiceRequestLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetServiceRequestLocations(expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingLocationLocation>>(response);
        }

        /// <summary>
        /// Test LandlordResponsibilities
        /// </summary>
        [Fact]
        public void LandlordResponsibilitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest = null;
            //instance.LandlordResponsibilities(apiRequest);
        }

        /// <summary>
        /// Test LandlordResponsibilities_0
        /// </summary>
        [Fact]
        public void LandlordResponsibilities_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest = null;
            //var response = instance.LandlordResponsibilities_0(apiRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel>(response);
        }

        /// <summary>
        /// Test LandlordResponsibilitiesresponsibilityId
        /// </summary>
        [Fact]
        public void LandlordResponsibilitiesresponsibilityIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int responsibilityId = null;
            //instance.LandlordResponsibilitiesresponsibilityId(responsibilityId);
        }

        /// <summary>
        /// Test LandlordResponsibilitiesstoreIdstoreId
        /// </summary>
        [Fact]
        public void LandlordResponsibilitiesstoreIdstoreIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? storeId = null;
            //var response = instance.LandlordResponsibilitiesstoreIdstoreId(storeId);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse>(response);
        }

        /// <summary>
        /// Test Locations
        /// </summary>
        [Fact]
        public void LocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingLocationCreateLocationRequest request = null;
            //instance.Locations(request);
        }

        /// <summary>
        /// Test LocationsAddressformatsc0c0c1c1id0id0id1id1
        /// </summary>
        [Fact]
        public void LocationsAddressformatsc0c0c1c1id0id0id1id1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> c = null;
            //List<int> id = null;
            //var response = instance.LocationsAddressformatsc0c0c1c1id0id0id1id1(c, id);
            //Assert.IsType<List<SCServiceChannelServicesMessagingLocationAddressType>>(response);
        }

        /// <summary>
        /// Test LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime
        /// </summary>
        [Fact]
        public void LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //DateTime? checkTime = null;
            //var response = instance.LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime(locationId, checkTime);
            //Assert.IsType<SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse>(response);
        }

        /// <summary>
        /// Test LocationsGetLocationsByFilterColumns
        /// </summary>
        [Fact]
        public void LocationsGetLocationsByFilterColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns = null;
            //instance.LocationsGetLocationsByFilterColumns(locationFilterColumns);
        }

        /// <summary>
        /// Test LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize
        /// </summary>
        [Fact]
        public void LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string? storeIdentifier = null;
            //string? name = null;
            //string? sort = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize(id, storeIdentifier, name, sort, page, pageSize);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>(response);
        }

        /// <summary>
        /// Test LocationsLocationWithNotes
        /// </summary>
        [Fact]
        public void LocationsLocationWithNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> locationWithNotes = null;
            //var response = instance.LocationsLocationWithNotes(locationWithNotes);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse>(response);
        }

        /// <summary>
        /// Test LocationsUnassignedContracts
        /// </summary>
        [Fact]
        public void LocationsUnassignedContractsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LocationsUnassignedContracts();
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse>(response);
        }

        /// <summary>
        /// Test LocationslocationId
        /// </summary>
        [Fact]
        public void LocationslocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.LocationslocationId(locationId);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName>(response);
        }

        /// <summary>
        /// Test LocationslocationIdEvacuationmaps
        /// </summary>
        [Fact]
        public void LocationslocationIdEvacuationmapsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.LocationslocationIdEvacuationmaps(locationId);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse>(response);
        }

        /// <summary>
        /// Test LocationslocationIdNotes
        /// </summary>
        [Fact]
        public void LocationslocationIdNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader = null;
            //instance.LocationslocationIdNotes(locationId, locNoteHeader);
        }

        /// <summary>
        /// Test LocationslocationIdNotesprivateNotesprivateNotes
        /// </summary>
        [Fact]
        public void LocationslocationIdNotesprivateNotesprivateNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //bool? privateNotes = null;
            //var response = instance.LocationslocationIdNotesprivateNotesprivateNotes(locationId, privateNotes);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationNoteLocationNote>(response);
        }

        /// <summary>
        /// Test LocationslocationId_0
        /// </summary>
        [Fact]
        public void LocationslocationId_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request = null;
            //instance.LocationslocationId_0(locationId, request);
        }

        /// <summary>
        /// Test LocationslocationId_1
        /// </summary>
        [Fact]
        public void LocationslocationId_1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //instance.LocationslocationId_1(locationId);
        }

        /// <summary>
        /// Test LocationsstoreIdAttachments
        /// </summary>
        [Fact]
        public void LocationsstoreIdAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.LocationsstoreIdAttachments(storeId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingLocationLocationAttachment>>(response);
        }

        /// <summary>
        /// Test LocationsstoreIdAttachmentsattachmentId
        /// </summary>
        [Fact]
        public void LocationsstoreIdAttachmentsattachmentIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int attachmentId = null;
            //instance.LocationsstoreIdAttachmentsattachmentId(storeId, attachmentId);
        }

        /// <summary>
        /// Test LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan
        /// </summary>
        [Fact]
        public void LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //System.IO.Stream file = null;
            //string? fileDescription = null;
            //bool? isEvacuationPlan = null;
            //var response = instance.LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan(storeId, file, fileDescription, isEvacuationPlan);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationLocationAttachment>(response);
        }

        /// <summary>
        /// Test LocationsstoreIdUpdateNotes
        /// </summary>
        [Fact]
        public void LocationsstoreIdUpdateNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders = null;
            //instance.LocationsstoreIdUpdateNotes(storeId, locNoteHeaders);
        }

        /// <summary>
        /// Test ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo
        /// </summary>
        [Fact]
        public void ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateToTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> providerIds = null;
            //DateTime dateFrom = null;
            //DateTime dateTo = null;
            //instance.ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo(providerIds, dateFrom, dateTo);
        }

        /// <summary>
        /// Test ProvidersGetProviderAssignmentsForLocationsAndTrades
        /// </summary>
        [Fact]
        public void ProvidersGetProviderAssignmentsForLocationsAndTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter = null;
            //var response = instance.ProvidersGetProviderAssignmentsForLocationsAndTrades(assignmentsFilter);
            //Assert.IsType<List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>>(response);
        }

        /// <summary>
        /// Test ProvidersGetProviderLocationAssignments
        /// </summary>
        [Fact]
        public void ProvidersGetProviderLocationAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ProvidersGetProviderLocationAssignments();
        }

        /// <summary>
        /// Test StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize
        /// </summary>
        [Fact]
        public void StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string? storeIdentifier = null;
            //string? name = null;
            //string? sort = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize(id, storeIdentifier, name, sort, page, pageSize);
            //Assert.IsType<SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentUsersCurrentStores
        /// </summary>
        [Fact]
        public void SubscribersCurrentUsersCurrentStoresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SubscribersCurrentUsersCurrentStores();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //string? filterType = null;
            //string? searchString = null;
            //instance.SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString(subscriberId, filterType, searchString);
        }
    }
}
