/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing CheckListsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CheckListsApiTests : IDisposable
    {
        private CheckListsApi instance;

        public CheckListsApiTests()
        {
            instance = new CheckListsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CheckListsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CheckListsApi
            //Assert.IsType<CheckListsApi>(instance);
        }

        /// <summary>
        /// Test ChecklistsCheckListResponse
        /// </summary>
        [Fact]
        public void ChecklistsCheckListResponseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object? checkListResponseRequest = null;
            //System.IO.Stream? file = null;
            //var response = instance.ChecklistsCheckListResponse(checkListResponseRequest, file);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>(response);
        }

        /// <summary>
        /// Test ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId
        /// </summary>
        [Fact]
        public void ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? tradeid = null;
            //int? checklistid = null;
            //int? categoryid = null;
            //int? subscriberId = null;
            //string? tradeName = null;
            //string? checkListName = null;
            //string? categoryName = null;
            //int? locationId = null;
            //string? storeId = null;
            //int? workOrderId = null;
            //var response = instance.ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId(tradeid, checklistid, categoryid, subscriberId, tradeName, checkListName, categoryName, locationId, storeId, workOrderId);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse>(response);
        }

        /// <summary>
        /// Test ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId
        /// </summary>
        [Fact]
        public void ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? tradeid = null;
            //int? checklistid = null;
            //int? categoryid = null;
            //int? subscriberId = null;
            //string? tradeName = null;
            //string? checkListName = null;
            //string? categoryName = null;
            //int? locationId = null;
            //string? storeId = null;
            //int? providerId = null;
            //var response = instance.ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId(tradeid, checklistid, categoryid, subscriberId, tradeName, checkListName, categoryName, locationId, storeId, providerId);
            //Assert.IsType<SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse>(response);
        }

        /// <summary>
        /// Test ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId
        /// </summary>
        [Fact]
        public void ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? tradeId = null;
            //int? checklistId = null;
            //int? categoryId = null;
            //int? subscriberId = null;
            //string? tradeName = null;
            //string? checklistName = null;
            //string? categoryName = null;
            //int? locationId = null;
            //string? storeId = null;
            //int? providerId = null;
            //var response = instance.ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId(tradeId, checklistId, categoryId, subscriberId, tradeName, checklistName, categoryName, locationId, storeId, providerId);
            //Assert.IsType<SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse>(response);
        }

        /// <summary>
        /// Test ChecklistscheckListResponseIdCheckListResponse
        /// </summary>
        [Fact]
        public void ChecklistscheckListResponseIdCheckListResponseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int checkListResponseId = null;
            //Object? checkListResponsePictureId = null;
            //Object? checkListResponseRequest = null;
            //System.IO.Stream? file = null;
            //var response = instance.ChecklistscheckListResponseIdCheckListResponse(checkListResponseId, checkListResponsePictureId, checkListResponseRequest, file);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture>(response);
        }
    }
}
