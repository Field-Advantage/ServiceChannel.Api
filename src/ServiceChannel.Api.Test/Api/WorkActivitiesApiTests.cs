/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing WorkActivitiesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkActivitiesApiTests : IDisposable
    {
        private WorkActivitiesApi instance;

        public WorkActivitiesApiTests()
        {
            instance = new WorkActivitiesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkActivitiesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkActivitiesApi
            //Assert.IsType<WorkActivitiesApi>(instance);
        }

        /// <summary>
        /// Test ForTimeInterval
        /// </summary>
        [Fact]
        public void ForTimeIntervalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userId = null;
            //DateTime dtMax = null;
            //DateTime dtMin = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.ForTimeInterval(userId, dtMax, dtMin, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>(response);
        }

        /// <summary>
        /// Test GetWorkActivities
        /// </summary>
        [Fact]
        public void GetWorkActivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkActivities(workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkActivity>>(response);
        }

        /// <summary>
        /// Test GetWorkActivity
        /// </summary>
        [Fact]
        public void GetWorkActivityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workactivityId = null;
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkActivity(workactivityId, workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersWorkActivity>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdWorkactivities
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdWorkactivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersWorkActivityPostRequest activityRequest = null;
            //instance.WorkordersworkorderIdWorkactivities(workorderId, activityRequest);
        }

        /// <summary>
        /// Test WorkordersworkorderIdWorkactivitiesworkactivityId
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdWorkactivitiesworkactivityIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //int workactivityId = null;
            //SCServiceChannelServicesMessagingWorkordersWorkActivityRequest activityRequest = null;
            //instance.WorkordersworkorderIdWorkactivitiesworkactivityId(workorderId, workactivityId, activityRequest);
        }

        /// <summary>
        /// Test WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //List<int> workactivityIds = null;
            //instance.WorkordersworkorderIdWorkactivitiesworkactivityIds0workactivityIds0workactivityIds1workactivityIds1(workorderId, workactivityIds);
        }
    }
}
