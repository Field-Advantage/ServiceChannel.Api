/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing IssueListApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IssueListApiTests : IDisposable
    {
        private IssueListApi instance;

        public IssueListApiTests()
        {
            instance = new IssueListApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IssueListApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IssueListApi
            //Assert.IsType<IssueListApi>(instance);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdIssuelistHeaders
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdIssuelistHeadersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.ApiSubscriberssubscriberIdIssuelistHeaders(subscriberId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdIssuelists
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdIssuelistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriberId = null;
            //SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request = null;
            //var response = instance.ApiSubscriberssubscriberIdIssuelists(subscriberId, request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int? pageIndex = null;
            //int? pageSize = null;
            //var response = instance.ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize(subscriberId, pageIndex, pageSize);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int? pageIndex = null;
            //int? pageSize = null;
            //var response = instance.ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize(subscriberId, pageIndex, pageSize);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //string equipmentType = null;
            //int? locationId = null;
            //int? setupId = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(subscriberId, equipmentType, locationId, setupId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int dashboardId = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist(subscriberId, dashboardId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int dashboardId = null;
            //int areaId = null;
            //string problemType = null;
            //int locationId = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId(subscriberId, dashboardId, areaId, problemType, locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int dashboardId = null;
            //int areaId = null;
            //string problemType = null;
            //string item = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem(subscriberId, dashboardId, areaId, problemType, item);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int dashboardId = null;
            //int areaId = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes(subscriberId, dashboardId, areaId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int dashboardId = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields(subscriberId, dashboardId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriberId = null;
            //string dashboardId = null;
            //SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice(subscriberId, dashboardId, request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int dashboardId = null;
            //string problemType = null;
            //string item = null;
            //string problem = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem(subscriberId, dashboardId, problemType, item, problem);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId
        /// </summary>
        [Fact]
        public void ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriberId = null;
            //string dashboardId = null;
            //string issueListId = null;
            //SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request = null;
            //var response = instance.ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId(subscriberId, dashboardId, issueListId, request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test IssuelistAreaslocationIdlocationIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void IssuelistAreaslocationIdlocationIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //int? setupId = null;
            //var response = instance.IssuelistAreaslocationIdlocationIdsetupIdsetupId(locationId, setupId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>(response);
        }

        /// <summary>
        /// Test IssuelistFieldididsetupIdsetupId
        /// </summary>
        [Fact]
        public void IssuelistFieldididsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? setupId = null;
            //var response = instance.IssuelistFieldididsetupIdsetupId(id, setupId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //int? subscriberId = null;
            //int? setupId = null;
            //var response = instance.IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId(locationId, subscriberId, setupId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test IssuelistIssuechoiceinfotrackingNumber
        /// </summary>
        [Fact]
        public void IssuelistIssuechoiceinfotrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //var response = instance.IssuelistIssuechoiceinfotrackingNumber(trackingNumber);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string problemType = null;
            //string equipmentType = null;
            //string problemCode = null;
            //int locationId = null;
            //int? setupId = null;
            //var response = instance.IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId(problemType, equipmentType, problemCode, locationId, setupId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId
        /// </summary>
        [Fact]
        public void IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //int areaId = null;
            //string problemType = null;
            //int? setupId = null;
            //var response = instance.IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId(locationId, areaId, problemType, setupId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>(response);
        }

        /// <summary>
        /// Test IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int areaId = null;
            //string problemType = null;
            //string equipmentType = null;
            //int? locationId = null;
            //int? setupId = null;
            //var response = instance.IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(areaId, problemType, equipmentType, locationId, setupId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>(response);
        }

        /// <summary>
        /// Test IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int areaId = null;
            //int? locationId = null;
            //int? setupId = null;
            //int? subscriberId = null;
            //var response = instance.IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(areaId, locationId, setupId, subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int areaId = null;
            //int? locationId = null;
            //int? setupId = null;
            //int? subscriberId = null;
            //var response = instance.ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(areaId, locationId, setupId, subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType
        /// </summary>
        [Fact]
        public void ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int locationId = null;
            //int areaId = null;
            //string trade = null;
            //string problemType = null;
            //var response = instance.ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType(subscriberId, locationId, areaId, trade, problemType);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId
        /// </summary>
        [Fact]
        public void ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int? locationId = null;
            //var response = instance.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId(subscriberId, locationId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId
        /// </summary>
        [Fact]
        public void ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int? locationId = null;
            //var response = instance.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId(subscriberId, locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType
        /// </summary>
        [Fact]
        public void ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int locationId = null;
            //int areaId = null;
            //string problemType = null;
            //var response = instance.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType(subscriberId, locationId, areaId, problemType);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId
        /// </summary>
        [Fact]
        public void ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int areaId = null;
            //string problemType = null;
            //string equipmentType = null;
            //int? locationId = null;
            //var response = instance.ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId(subscriberId, areaId, problemType, equipmentType, locationId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId
        /// </summary>
        [Fact]
        public void ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int? assetId = null;
            //int? locationId = null;
            //var response = instance.ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId(subscriberId, assetId, locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes
        /// </summary>
        [Fact]
        public void ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int locationId = null;
            //var response = instance.ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes(subscriberId, locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType
        /// </summary>
        [Fact]
        public void SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int setupId = null;
            //int areaId = null;
            //string problemType = null;
            //var response = instance.SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType(setupId, areaId, problemType);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId
        /// </summary>
        [Fact]
        public void SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //int areaId = null;
            //string problemType = null;
            //int? setupId = null;
            //var response = instance.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId(locationId, areaId, problemType, setupId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int areaId = null;
            //string problemType = null;
            //string equipmentType = null;
            //int? locationId = null;
            //int? setupId = null;
            //var response = instance.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId(areaId, problemType, equipmentType, locationId, setupId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int areaId = null;
            //int? locationId = null;
            //int? setupId = null;
            //int? subscriberId = null;
            //var response = instance.SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId(areaId, locationId, setupId, subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //int? setupId = null;
            //var response = instance.SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId(locationId, setupId);
            //Assert.IsType<SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId
        /// </summary>
        [Fact]
        public void SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? setupId = null;
            //var response = instance.SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId(id, setupId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId
        /// </summary>
        [Fact]
        public void SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string problemType = null;
            //string equipmentType = null;
            //string problemCode = null;
            //int locationId = null;
            //int? setupId = null;
            //var response = instance.SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId(problemType, equipmentType, problemCode, locationId, setupId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory
        /// </summary>
        [Fact]
        public void SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int dashboardSetupId = null;
            //string trade = null;
            //string priority = null;
            //string category = null;
            //var response = instance.SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory(subscriberId, dashboardSetupId, trade, priority, category);
            //Assert.IsType<Object>(response);
        }
    }
}
