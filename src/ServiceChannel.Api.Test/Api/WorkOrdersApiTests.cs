/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing WorkOrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkOrdersApiTests : IDisposable
    {
        private WorkOrdersApi instance;

        public WorkOrdersApiTests()
        {
            instance = new WorkOrdersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkOrdersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkOrdersApi
            //Assert.IsType<WorkOrdersApi>(instance);
        }

        /// <summary>
        /// Test CheckInActivity
        /// </summary>
        [Fact]
        public void CheckInActivityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.CheckInActivity(workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>>(response);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Fact]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.Get(workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersWorkOrder>(response);
        }

        /// <summary>
        /// Test GetDuplicateWorkOrders
        /// </summary>
        [Fact]
        public void GetDuplicateWorkOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetDuplicateWorkOrders(locationId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test GetRecallWorkOrders
        /// </summary>
        [Fact]
        public void GetRecallWorkOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetRecallWorkOrders(locationId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test GetWorkOrders
        /// </summary>
        [Fact]
        public void GetWorkOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkOrders(expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test GetWorkOrdersForLocation
        /// </summary>
        [Fact]
        public void GetWorkOrdersForLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkOrdersForLocation(locationId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test GetWorkOrdersNearBy
        /// </summary>
        [Fact]
        public void GetWorkOrdersNearByTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double longitude = null;
            //double latitude = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkOrdersNearBy(longitude, latitude, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId
        /// </summary>
        [Fact]
        public void LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //int? locationId2 = null;
            //string? problemCode = null;
            //string? equipment = null;
            //string? problemType = null;
            //string? trade = null;
            //bool? completed = null;
            //int? subscriberId = null;
            //var response = instance.LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId(locationId, locationId2, problemCode, equipment, problemType, trade, completed, subscriberId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test LocationslocationIdWorkordersPriorities
        /// </summary>
        [Fact]
        public void LocationslocationIdWorkordersPrioritiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.LocationslocationIdWorkordersPriorities(locationId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>(response);
        }

        /// <summary>
        /// Test LocationslocationIdWorkordersstoreIdstoreId
        /// </summary>
        [Fact]
        public void LocationslocationIdWorkordersstoreIdstoreIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string? storeId = null;
            //List<Object>? id = null;
            //List<Object>? category = null;
            //List<Object>? status = null;
            //List<Object>? extendedStatus = null;
            //List<Object>? number = null;
            //List<Object>? serviceId = null;
            //List<Object>? priority = null;
            //List<Object>? purchaseNumber = null;
            //List<Object>? trade = null;
            //List<Object>? scheduledDate = null;
            //List<Object>? expirationDate = null;
            //List<Object>? callDate = null;
            //string? sort = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.LocationslocationIdWorkordersstoreIdstoreId(locationId, storeId, id, category, status, extendedStatus, number, serviceId, priority, purchaseNumber, trade, scheduledDate, expirationDate, callDate, sort, page, pageSize);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test OdataWorkordersFilter
        /// </summary>
        [Fact]
        public void OdataWorkordersFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingODataRequest request = null;
            //var response = instance.OdataWorkordersFilter(request);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdWorkordersworkorderIdReassign
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdWorkordersworkorderIdReassignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //int workorderId = null;
            //var response = instance.SubscriberssubscriberIdWorkordersworkorderIdReassign(subscriberId, workorderId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Workorders
        /// </summary>
        [Fact]
        public void WorkordersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingWorkordersCreateWoRequest request = null;
            //instance.Workorders(request);
        }

        /// <summary>
        /// Test WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr
        /// </summary>
        [Fact]
        public void WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExprTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //string? sortExpr = null;
            //var response = instance.WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr(subscriberId, sortExpr);
            //Assert.IsType<List<SCServiceChannelServicesMessagingCategoryCategoryResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1
        /// </summary>
        [Fact]
        public void WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> workOrdersIds = null;
            //instance.WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1(workOrdersIds);
        }

        /// <summary>
        /// Test WorkordersHandlewocompletionforsurvey
        /// </summary>
        [Fact]
        public void WorkordersHandlewocompletionforsurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request = null;
            //instance.WorkordersHandlewocompletionforsurvey(request);
        }

        /// <summary>
        /// Test WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId
        /// </summary>
        [Fact]
        public void WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int certificateId = null;
            //var response = instance.WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId(certificateId);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test WorkordersLabelkeywordkeywordpagepagepageSizepageSize
        /// </summary>
        [Fact]
        public void WorkordersLabelkeywordkeywordpagepagepageSizepageSizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? keyword = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.WorkordersLabelkeywordkeywordpagepagepageSizepageSize(keyword, page, pageSize);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersPriorities
        /// </summary>
        [Fact]
        public void WorkordersPrioritiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request = null;
            //var response = instance.WorkordersPriorities(request);
            //Assert.IsType<List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersPrioritiessubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void WorkordersPrioritiessubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //var response = instance.WorkordersPrioritiessubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade
        /// </summary>
        [Fact]
        public void WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //int providerId = null;
            //int locationId = null;
            //string trade = null;
            //instance.WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade(workorderId, providerId, locationId, trade);
        }

        /// <summary>
        /// Test WorkordersReassignReasonssubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void WorkordersReassignReasonssubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //var response = instance.WorkordersReassignReasonssubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>>(response);
        }

        /// <summary>
        /// Test WorkordersSolvedissue
        /// </summary>
        [Fact]
        public void WorkordersSolvedissueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model = null;
            //instance.WorkordersSolvedissue(model);
        }

        /// <summary>
        /// Test WorkordersStarred
        /// </summary>
        [Fact]
        public void WorkordersStarredTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkordersStarred();
            //Assert.IsType<List<int>>(response);
        }

        /// <summary>
        /// Test WorkordersStatisticsdaysPerioddaysPeriod
        /// </summary>
        [Fact]
        public void WorkordersStatisticsdaysPerioddaysPeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? daysPeriod = null;
            //var response = instance.WorkordersStatisticsdaysPerioddaysPeriod(daysPeriod);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse>(response);
        }

        /// <summary>
        /// Test WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId
        /// </summary>
        [Fact]
        public void WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //int? tradeId = null;
            //var response = instance.WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId(subscriberId, tradeId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>(response);
        }

        /// <summary>
        /// Test WorkorderslocationIdlocationIdstoreIdstoreId
        /// </summary>
        [Fact]
        public void WorkorderslocationIdlocationIdstoreIdstoreIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //string? storeId = null;
            //List<Object>? otherLocationId = null;
            //List<Object>? id = null;
            //List<Object>? category = null;
            //List<Object>? status = null;
            //List<Object>? extendedStatus = null;
            //List<Object>? number = null;
            //List<Object>? serviceId = null;
            //List<Object>? priority = null;
            //List<Object>? purchaseNumber = null;
            //List<Object>? trade = null;
            //List<Object>? scheduledDate = null;
            //List<Object>? expirationDate = null;
            //List<Object>? callDate = null;
            //string? sort = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.WorkorderslocationIdlocationIdstoreIdstoreId(locationId, storeId, otherLocationId, id, category, status, extendedStatus, number, serviceId, priority, purchaseNumber, trade, scheduledDate, expirationDate, callDate, sort, page, pageSize);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>(response);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdAccept
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdAcceptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request = null;
            //instance.WorkordersworkOrderIdAccept(workOrderId, request);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdAnalytics
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //var response = instance.WorkordersworkOrderIdAnalytics(workOrderId);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdChecklistsResponsesgetAllgetAll
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdChecklistsResponsesgetAllgetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //bool? getAll = null;
            //var response = instance.WorkordersworkOrderIdChecklistsResponsesgetAllgetAll(workOrderId, getAll);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdDecline
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdDeclineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request = null;
            //instance.WorkordersworkOrderIdDecline(workOrderId, request);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdLeakWasDetected
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdLeakWasDetectedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //var response = instance.WorkordersworkOrderIdLeakWasDetected(workOrderId);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdProjectApproval
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdProjectApprovalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest = null;
            //var response = instance.WorkordersworkOrderIdProjectApproval(workOrderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdProjectApproval_0
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdProjectApproval_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest = null;
            //var response = instance.WorkordersworkOrderIdProjectApproval_0(workOrderId, createRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdTechnicianCertificate
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdTechnicianCertificateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request = null;
            //instance.WorkordersworkOrderIdTechnicianCertificate(workOrderId, request);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetectedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //bool refrigerantWasUsed = null;
            //bool leakWasDetected = null;
            //instance.WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected(workOrderId, refrigerantWasUsed, leakWasDetected);
        }

        /// <summary>
        /// Test WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //int? subscriberId = null;
            //var response = instance.WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId(workOrderId, subscriberId);
            //Assert.IsType<SCServiceChannelApiModelWorkordersWeatherEventType>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderId
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.WorkordersworkorderId(workorderId);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersWorkOrder>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdAddstripecharge
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdAddstripechargeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request = null;
            //instance.WorkordersworkorderIdAddstripecharge(workorderId, request);
        }

        /// <summary>
        /// Test WorkordersworkorderIdCaller
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdCallerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdCaller(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdCategory
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdCategory(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdDescription
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdDescriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdDescription(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdFeaturesfeatures0features0features1features1
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdFeaturesfeatures0features0features1features1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //List<string> features = null;
            //var response = instance.WorkordersworkorderIdFeaturesfeatures0features0features1features1(workorderId, features);
            //Assert.IsType<SCServiceChannelServicesMessagingApplicationAccessFeatureResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdFeedback
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest = null;
            //instance.WorkordersworkorderIdFeedback(workorderId, leaveFeedbackRequest);
        }

        /// <summary>
        /// Test WorkordersworkorderIdFollowers
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request = null;
            //instance.WorkordersworkorderIdFollowers(workorderId, request);
        }

        /// <summary>
        /// Test WorkordersworkorderIdFollowersemailemail
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdFollowersemailemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string email = null;
            //instance.WorkordersworkorderIdFollowersemailemail(workorderId, email);
        }

        /// <summary>
        /// Test WorkordersworkorderIdGPSRadius
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdGPSRadiusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.WorkordersworkorderIdGPSRadius(workorderId);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //int subscriberId = null;
            //SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice = null;
            //int? locationId = null;
            //instance.WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId(workorderId, subscriberId, issueChoice, locationId);
        }

        /// <summary>
        /// Test WorkordersworkorderIdLabel
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest = null;
            //var response = instance.WorkordersworkorderIdLabel(workorderId, workOrderLabelRequest);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdLabel_0
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdLabel_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest = null;
            //var response = instance.WorkordersworkorderIdLabel_0(workorderId, workOrderLabelRequest);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request = null;
            //int? workorderIdToLink = null;
            //instance.WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink(workorderId, request, workorderIdToLink);
        }

        /// <summary>
        /// Test WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //bool? refrigerantWasUsed = null;
            //string? actor = null;
            //instance.WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor(workorderId, refrigerantWasUsed, actor);
        }

        /// <summary>
        /// Test WorkordersworkorderIdNte
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdNteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdNte(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdPonumber
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdPonumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdPonumber(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdPriority
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdPriorityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdPriority(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdProjectid
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdProjectidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdProjectid(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdProjectidUnlink
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdProjectidUnlinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.WorkordersworkorderIdProjectidUnlink(workorderId);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdReassign
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdReassignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersReassignWORequest request = null;
            //var response = instance.WorkordersworkorderIdReassign(workorderId, request);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdRefrigerantUseStatus
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdRefrigerantUseStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.WorkordersworkorderIdRefrigerantUseStatus(workorderId);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdResolution
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdResolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request = null;
            //var response = instance.WorkordersworkorderIdResolution(workorderId, request);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest = null;
            //int? rescheduleReasonCode = null;
            //var response = instance.WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode(workorderId, updateRequest, rescheduleReasonCode);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdServicenowid
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdServicenowidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest = null;
            //var response = instance.WorkordersworkorderIdServicenowid(workorderId, workOrderServiceNowIdRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string moeNumber = null;
            //instance.WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber(workorderId, moeNumber);
        }

        /// <summary>
        /// Test WorkordersworkorderIdStatus
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt = null;
            //var response = instance.WorkordersworkorderIdStatus(workorderId, updateRequestExt);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //int? subscriberId = null;
            //int? tradeId = null;
            //var response = instance.WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId(workorderId, subscriberId, tradeId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdTechniciansAssigned
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdTechniciansAssignedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //instance.WorkordersworkorderIdTechniciansAssigned(workorderId);
        }

        /// <summary>
        /// Test WorkordersworkorderIdTrade
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdTradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdTrade(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdUniversalCheckIn
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdUniversalCheckInTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersCheckInRequest request = null;
            //var response = instance.WorkordersworkorderIdUniversalCheckIn(workorderId, request);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdUniversalCheckOut
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdUniversalCheckOutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersCheckOutRequest request = null;
            //var response = instance.WorkordersworkorderIdUniversalCheckOut(workorderId, request);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request = null;
            //int? linkedWorkorderId = null;
            //instance.WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId(workorderId, request, linkedWorkorderId);
        }

        /// <summary>
        /// Test WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //double latitude = null;
            //double longitude = null;
            //int? workTypeId = null;
            //var response = instance.WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude(workorderId, latitude, longitude, workTypeId);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitudeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //double latitude = null;
            //double longitude = null;
            //int? workTypeId = null;
            //var response = instance.WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude(workorderId, latitude, longitude, workTypeId);
            //Assert.IsType<SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest = null;
            //int? subscriberId = null;
            //var response = instance.WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId(workorderId, updateRequest, subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdWonumber
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdWonumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest = null;
            //var response = instance.WorkordersworkorderIdWonumber(workorderId, updateRequest);
            //Assert.IsType<SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse>(response);
        }

        /// <summary>
        /// Test WorktypessubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void WorktypessubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //var response = instance.WorktypessubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>>(response);
        }
    }
}
