/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing InvoicesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InvoicesApiTests : IDisposable
    {
        private InvoicesApi instance;

        public InvoicesApiTests()
        {
            instance = new InvoicesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InvoicesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InvoicesApi
            //Assert.IsType<InvoicesApi>(instance);
        }

        /// <summary>
        /// Test GetInvoices
        /// </summary>
        [Fact]
        public void GetInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetInvoices(expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingInvoicesInvoice>>(response);
        }

        /// <summary>
        /// Test Invoices
        /// </summary>
        [Fact]
        public void InvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest request = null;
            //instance.Invoices(request);
        }

        /// <summary>
        /// Test InvoicesPayments
        /// </summary>
        [Fact]
        public void InvoicesPaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkRequest request = null;
            //var response = instance.InvoicesPayments(request);
            //Assert.IsType<SCServiceChannelServicesMessagingInvoicesInvoicePaymentBulkResponse>(response);
        }

        /// <summary>
        /// Test InvoicesPingserviceName
        /// </summary>
        [Fact]
        public void InvoicesPingserviceNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceName = null;
            //var response = instance.InvoicesPingserviceName(serviceName);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod
        /// </summary>
        [Fact]
        public void InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? daysPeriod = null;
            //int? approvedInThePastDaysPeriod = null;
            //var response = instance.InvoicesStatisticsdaysPerioddaysPeriodapprovedInThePastDaysPeriodapprovedInThePastDaysPeriod(daysPeriod, approvedInThePastDaysPeriod);
            //Assert.IsType<SCServiceChannelServicesMessagingInvoicesInvoiceStatisticsResponse>(response);
        }

        /// <summary>
        /// Test InvoicesWorkorderstrackingNumberPayment
        /// </summary>
        [Fact]
        public void InvoicesWorkorderstrackingNumberPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment = null;
            //instance.InvoicesWorkorderstrackingNumberPayment(trackingNumber, payment);
        }

        /// <summary>
        /// Test InvoicesinvoiceId
        /// </summary>
        [Fact]
        public void InvoicesinvoiceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int invoiceId = null;
            //var response = instance.InvoicesinvoiceId(invoiceId);
            //Assert.IsType<SCServiceChannelServicesMessagingInvoicesApiGetInvoiceResponse>(response);
        }

        /// <summary>
        /// Test InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory
        /// </summary>
        [Fact]
        public void InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int invoiceId = null;
            //string approvalCode = null;
            //string comments = null;
            //string category = null;
            //instance.InvoicesinvoiceIdApproveapprovalCodeapprovalCodecommentscommentscategorycategory(invoiceId, approvalCode, comments, category);
        }

        /// <summary>
        /// Test InvoicesinvoiceIdDiscrepancy
        /// </summary>
        [Fact]
        public void InvoicesinvoiceIdDiscrepancyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int invoiceId = null;
            //var response = instance.InvoicesinvoiceIdDiscrepancy(invoiceId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingInvoicesRateDiscrepancy>>(response);
        }

        /// <summary>
        /// Test InvoicesinvoiceIdDiscrepancyExtended
        /// </summary>
        [Fact]
        public void InvoicesinvoiceIdDiscrepancyExtendedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int invoiceId = null;
            //var response = instance.InvoicesinvoiceIdDiscrepancyExtended(invoiceId);
            //Assert.IsType<SCServiceChannelServicesMessagingInvoicesInvoiceDiscrepancy>(response);
        }

        /// <summary>
        /// Test InvoicesinvoiceIdOnholdcommentscomments
        /// </summary>
        [Fact]
        public void InvoicesinvoiceIdOnholdcommentscommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int invoiceId = null;
            //string comments = null;
            //instance.InvoicesinvoiceIdOnholdcommentscomments(invoiceId, comments);
        }

        /// <summary>
        /// Test InvoicesinvoiceIdPayment
        /// </summary>
        [Fact]
        public void InvoicesinvoiceIdPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int invoiceId = null;
            //SCServiceChannelServicesMessagingInvoicesInvoicePaymentRequest payment = null;
            //instance.InvoicesinvoiceIdPayment(invoiceId, payment);
        }

        /// <summary>
        /// Test InvoicesinvoiceIdRejectcommentscomments
        /// </summary>
        [Fact]
        public void InvoicesinvoiceIdRejectcommentscommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int invoiceId = null;
            //string comments = null;
            //instance.InvoicesinvoiceIdRejectcommentscomments(invoiceId, comments);
        }

        /// <summary>
        /// Test InvoicessubscriberIdInvoiceRejectionReasons
        /// </summary>
        [Fact]
        public void InvoicessubscriberIdInvoiceRejectionReasonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.InvoicessubscriberIdInvoiceRejectionReasons(subscriberId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingInvoicesInvoiceRejectionReasonResponse>>(response);
        }

        /// <summary>
        /// Test InvoicessubscriberIdInvoiceRequirements
        /// </summary>
        [Fact]
        public void InvoicessubscriberIdInvoiceRequirementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.InvoicessubscriberIdInvoiceRequirements(subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int orderId = null;
            //int invoiceId = null;
            //int userId = null;
            //string approvalCode = null;
            //int organizationPermissionId = null;
            //int subscriberId = null;
            //string? category = null;
            //string? comment = null;
            //int? overrideUserId = null;
            //var response = instance.SubscriberssubscriberIdInvoicesinvoiceIdApproveorderIdorderIduserIduserIdapprovalCodeapprovalCodeorganizationPermissionIdorganizationPermissionIdcategorycategorycommentcommentoverrideUserIdoverrideUserId(orderId, invoiceId, userId, approvalCode, organizationPermissionId, subscriberId, category, comment, overrideUserId);
            //Assert.IsType<string>(response);
        }
    }
}
