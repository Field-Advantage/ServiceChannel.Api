/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing NotesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NotesApiTests : IDisposable
    {
        private NotesApi instance;

        public NotesApiTests()
        {
            instance = new NotesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of NotesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' NotesApi
            //Assert.IsType<NotesApi>(instance);
        }

        /// <summary>
        /// Test GetWorkOrderNote
        /// </summary>
        [Fact]
        public void GetWorkOrderNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int noteId = null;
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkOrderNote(noteId, workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingNotesNote>>(response);
        }

        /// <summary>
        /// Test GetWorkOrderNotes
        /// </summary>
        [Fact]
        public void GetWorkOrderNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkOrderNotes(workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingNotesNote>>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdNotes
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest = null;
            //instance.WorkordersworkorderIdNotes(workorderId, noteRequest);
        }

        /// <summary>
        /// Test WorkordersworkorderIdNotesFollowers
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdNotesFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request = null;
            //instance.WorkordersworkorderIdNotesFollowers(workorderId, request);
        }

        /// <summary>
        /// Test WorkordersworkorderIdNotesFollowersemailemail
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdNotesFollowersemailemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string email = null;
            //instance.WorkordersworkorderIdNotesFollowersemailemail(workorderId, email);
        }

        /// <summary>
        /// Test WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //bool? showExcluded = null;
            //string? noteVisibility = null;
            //var response = instance.WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility(workorderId, showExcluded, noteVisibility);
            //Assert.IsType<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdNotespagingpaging
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdNotespagingpagingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string? paging = null;
            //var response = instance.WorkordersworkorderIdNotespagingpaging(workorderId, paging);
            //Assert.IsType<SCServiceChannelServicesMessagingNotesGetNotesResponse>(response);
        }
    }
}
