/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing ProposalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProposalsApiTests : IDisposable
    {
        private ProposalsApi instance;

        public ProposalsApiTests()
        {
            instance = new ProposalsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProposalsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProposalsApi
            //Assert.IsType<ProposalsApi>(instance);
        }

        /// <summary>
        /// Test GetProposalCategories
        /// </summary>
        [Fact]
        public void GetProposalCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetProposalCategories(proposalId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingProposalsProposalCategory>>(response);
        }

        /// <summary>
        /// Test GetProposals
        /// </summary>
        [Fact]
        public void GetProposalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetProposals(expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>(response);
        }

        /// <summary>
        /// Test GetProposalsForRfp
        /// </summary>
        [Fact]
        public void GetProposalsForRfpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int rfpId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetProposalsForRfp(rfpId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingProposalsProposalInfo>>(response);
        }

        /// <summary>
        /// Test ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName
        /// </summary>
        [Fact]
        public void ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userName = null;
            //string levelName = null;
            //instance.ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName(userName, levelName);
        }

        /// <summary>
        /// Test ProposalsApprovalReasonsTradeTradeCategoryCategory
        /// </summary>
        [Fact]
        public void ProposalsApprovalReasonsTradeTradeCategoryCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string trade = null;
            //string category = null;
            //instance.ProposalsApprovalReasonsTradeTradeCategoryCategory(trade, category);
        }

        /// <summary>
        /// Test ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation
        /// </summary>
        [Fact]
        public void ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userName = null;
            //string location = null;
            //instance.ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation(userName, location);
        }

        /// <summary>
        /// Test ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId
        /// </summary>
        [Fact]
        public void ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //int projectId = null;
            //instance.ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId(proposalId, projectId);
        }

        /// <summary>
        /// Test ProposalsAssignReasonsTradeTradeCategoryCategory
        /// </summary>
        [Fact]
        public void ProposalsAssignReasonsTradeTradeCategoryCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string trade = null;
            //string? category = null;
            //instance.ProposalsAssignReasonsTradeTradeCategoryCategory(trade, category);
        }

        /// <summary>
        /// Test ProposalsGetMlpLevelsForSubscriber
        /// </summary>
        [Fact]
        public void ProposalsGetMlpLevelsForSubscriberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ProposalsGetMlpLevelsForSubscriber();
        }

        /// <summary>
        /// Test ProposalsGetProposals
        /// </summary>
        [Fact]
        public void ProposalsGetProposalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel = null;
            //instance.ProposalsGetProposals(proposalModel);
        }

        /// <summary>
        /// Test ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber
        /// </summary>
        [Fact]
        public void ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //instance.ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber(trackingNumber);
        }

        /// <summary>
        /// Test ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber
        /// </summary>
        [Fact]
        public void ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //instance.ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber(trackingNumber);
        }

        /// <summary>
        /// Test ProposalsGetProposalsToRejecttrackingNumbertrackingNumber
        /// </summary>
        [Fact]
        public void ProposalsGetProposalsToRejecttrackingNumbertrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //var response = instance.ProposalsGetProposalsToRejecttrackingNumbertrackingNumber(trackingNumber);
            //Assert.IsType<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>(response);
        }

        /// <summary>
        /// Test ProposalsGetUsersByLevelNamelevelNamelevelName
        /// </summary>
        [Fact]
        public void ProposalsGetUsersByLevelNamelevelNamelevelNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string levelName = null;
            //instance.ProposalsGetUsersByLevelNamelevelNamelevelName(levelName);
        }

        /// <summary>
        /// Test ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1
        /// </summary>
        [Fact]
        public void ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> proposalIds = null;
            //instance.ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1(proposalIds);
        }

        /// <summary>
        /// Test ProposalsProposalsReject
        /// </summary>
        [Fact]
        public void ProposalsProposalsRejectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data = null;
            //instance.ProposalsProposalsReject(data);
        }

        /// <summary>
        /// Test ProposalsRejectionReasons
        /// </summary>
        [Fact]
        public void ProposalsRejectionReasonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ProposalsRejectionReasons();
        }

        /// <summary>
        /// Test ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation
        /// </summary>
        [Fact]
        public void ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userName = null;
            //string location = null;
            //instance.ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation(userName, location);
        }

        /// <summary>
        /// Test ProposalsRemoveMlpUserValidationAsyncuserIduserId
        /// </summary>
        [Fact]
        public void ProposalsRemoveMlpUserValidationAsyncuserIduserIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userId = null;
            //instance.ProposalsRemoveMlpUserValidationAsyncuserIduserId(userId);
        }

        /// <summary>
        /// Test ProposalsRemoveUserFromMlpLeveluserNameuserName
        /// </summary>
        [Fact]
        public void ProposalsRemoveUserFromMlpLeveluserNameuserNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userName = null;
            //instance.ProposalsRemoveUserFromMlpLeveluserNameuserName(userName);
        }

        /// <summary>
        /// Test ProposalsStatisticsdaysPerioddaysPeriod
        /// </summary>
        [Fact]
        public void ProposalsStatisticsdaysPerioddaysPeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? daysPeriod = null;
            //var response = instance.ProposalsStatisticsdaysPerioddaysPeriod(daysPeriod);
            //Assert.IsType<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>(response);
        }

        /// <summary>
        /// Test ProposalsproposalIdApprove
        /// </summary>
        [Fact]
        public void ProposalsproposalIdApproveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request = null;
            //instance.ProposalsproposalIdApprove(proposalId, request);
        }

        /// <summary>
        /// Test ProposalsproposalIdAssignUser
        /// </summary>
        [Fact]
        public void ProposalsproposalIdAssignUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request = null;
            //instance.ProposalsproposalIdAssignUser(proposalId, request);
        }

        /// <summary>
        /// Test ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule
        /// </summary>
        [Fact]
        public void ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //int workorderId = null;
            //bool? isFromProjectsModule = null;
            //instance.ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule(proposalId, workorderId, isFromProjectsModule);
        }

        /// <summary>
        /// Test ProposalsproposalIdEscalate
        /// </summary>
        [Fact]
        public void ProposalsproposalIdEscalateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request = null;
            //instance.ProposalsproposalIdEscalate(proposalId, request);
        }

        /// <summary>
        /// Test ProposalsproposalIdOnhold
        /// </summary>
        [Fact]
        public void ProposalsproposalIdOnholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request = null;
            //instance.ProposalsproposalIdOnhold(proposalId, request);
        }

        /// <summary>
        /// Test ProposalsproposalIdOpen
        /// </summary>
        [Fact]
        public void ProposalsproposalIdOpenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request = null;
            //instance.ProposalsproposalIdOpen(proposalId, request);
        }

        /// <summary>
        /// Test ProposalsproposalIdRecipients
        /// </summary>
        [Fact]
        public void ProposalsproposalIdRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //var response = instance.ProposalsproposalIdRecipients(proposalId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>>(response);
        }

        /// <summary>
        /// Test ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails
        /// </summary>
        [Fact]
        public void ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request = null;
            //bool? useProposalAlertEmails = null;
            //instance.ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails(proposalId, request, useProposalAlertEmails);
        }

        /// <summary>
        /// Test ProposalsproposalIdUsers
        /// </summary>
        [Fact]
        public void ProposalsproposalIdUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //var response = instance.ProposalsproposalIdUsers(proposalId);
            //Assert.IsType<SCServiceChannelServicesMessagingUsersUserInfo>(response);
        }

        /// <summary>
        /// Test ProposalsproposalIdValidate
        /// </summary>
        [Fact]
        public void ProposalsproposalIdValidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //instance.ProposalsproposalIdValidate(proposalId);
        }

        /// <summary>
        /// Test ProposalsrfpId
        /// </summary>
        [Fact]
        public void ProposalsrfpIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int rfpId = null;
            //instance.ProposalsrfpId(rfpId);
        }

        /// <summary>
        /// Test ProposalsstatusesstatusesassignedToassignedToskipskiptoptop
        /// </summary>
        [Fact]
        public void ProposalsstatusesstatusesassignedToassignedToskipskiptoptopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? statuses = null;
            //int? assignedTo = null;
            //int? skip = null;
            //int? top = null;
            //var response = instance.ProposalsstatusesstatusesassignedToassignedToskipskiptoptop(statuses, assignedTo, skip, top);
            //Assert.IsType<SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse>(response);
        }
    }
}
