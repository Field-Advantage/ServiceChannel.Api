/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing RefrigerantTrackingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RefrigerantTrackingApiTests : IDisposable
    {
        private RefrigerantTrackingApi instance;

        public RefrigerantTrackingApiTests()
        {
            instance = new RefrigerantTrackingApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RefrigerantTrackingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RefrigerantTrackingApi
            //Assert.IsType<RefrigerantTrackingApi>(instance);
        }

        /// <summary>
        /// Test Refrigeranttracking
        /// </summary>
        [Fact]
        public void RefrigeranttrackingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest request = null;
            //var response = instance.Refrigeranttracking(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingAddLeakDetectorAudit
        /// </summary>
        [Fact]
        public void RefrigeranttrackingAddLeakDetectorAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingLeakDetectorAuditAddUpdateRequest request = null;
            //var response = instance.RefrigeranttrackingAddLeakDetectorAudit(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingAddOrUpdateRefrigerationTypes
        /// </summary>
        [Fact]
        public void RefrigeranttrackingAddOrUpdateRefrigerationTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<SCServiceChannelServicesMessagingRefrigerantTrackingRefrigerantType> request = null;
            //var response = instance.RefrigeranttrackingAddOrUpdateRefrigerationTypes(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingAddUpdateRefrigerationDetailsequipmentIdequipmentId
        /// </summary>
        [Fact]
        public void RefrigeranttrackingAddUpdateRefrigerationDetailsequipmentIdequipmentIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int equipmentId = null;
            //SCServiceChannelServicesMessagingRefrigerantTrackingAssetRefrigerant model = null;
            //var response = instance.RefrigeranttrackingAddUpdateRefrigerationDetailsequipmentIdequipmentId(equipmentId, model);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingBulkLeakrecords
        /// </summary>
        [Fact]
        public void RefrigeranttrackingBulkLeakrecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingLeakImmeasurableBulkChangeRequest request = null;
            //var response = instance.RefrigeranttrackingBulkLeakrecords(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingChargeDescriptions
        /// </summary>
        [Fact]
        public void RefrigeranttrackingChargeDescriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingChargeDescriptions();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingCheckRefrigerantTrackingAvailable
        /// </summary>
        [Fact]
        public void RefrigeranttrackingCheckRefrigerantTrackingAvailableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> locationIds = null;
            //var response = instance.RefrigeranttrackingCheckRefrigerantTrackingAvailable(locationIds);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingCheckRefrigerantTrackingAvailableV1
        /// </summary>
        [Fact]
        public void RefrigeranttrackingCheckRefrigerantTrackingAvailableV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesCoreInternalRequestsRefrigerantTrackingCheckRefrigerantTrackingRequest request = null;
            //var response = instance.RefrigeranttrackingCheckRefrigerantTrackingAvailableV1(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingCreateChargeHistory
        /// </summary>
        [Fact]
        public void RefrigeranttrackingCreateChargeHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingChargeHistoryRequest model = null;
            //var response = instance.RefrigeranttrackingCreateChargeHistory(model);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingCreateLeakRecordFollowupWoleakRecordIdleakRecordIdcurrentTrackingNumbercurrentTrackingNumber
        /// </summary>
        [Fact]
        public void RefrigeranttrackingCreateLeakRecordFollowupWoleakRecordIdleakRecordIdcurrentTrackingNumbercurrentTrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int leakRecordId = null;
            //int currentTrackingNumber = null;
            //var response = instance.RefrigeranttrackingCreateLeakRecordFollowupWoleakRecordIdleakRecordIdcurrentTrackingNumbercurrentTrackingNumber(leakRecordId, currentTrackingNumber);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingDeleteLeakRecordImmeasurableidid
        /// </summary>
        [Fact]
        public void RefrigeranttrackingDeleteLeakRecordImmeasurableididTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.RefrigeranttrackingDeleteLeakRecordImmeasurableidid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingGetLeakDetectorLastAuditassetIdassetIdrecIdrecId
        /// </summary>
        [Fact]
        public void RefrigeranttrackingGetLeakDetectorLastAuditassetIdassetIdrecIdrecIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //int recId = null;
            //var response = instance.RefrigeranttrackingGetLeakDetectorLastAuditassetIdassetIdrecIdrecId(assetId, recId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingGetRackTypeListItems
        /// </summary>
        [Fact]
        public void RefrigeranttrackingGetRackTypeListItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingGetRackTypeListItems();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingIsRefrigerantTrackingAvailablelocationId
        /// </summary>
        [Fact]
        public void RefrigeranttrackingIsRefrigerantTrackingAvailablelocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.RefrigeranttrackingIsRefrigerantTrackingAvailablelocationId(locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakInspectionComplianceAcknowledgement
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakInspectionComplianceAcknowledgementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingLeakInspectionComplianceAcknowledgement model = null;
            //var response = instance.RefrigeranttrackingLeakInspectionComplianceAcknowledgement(model);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakNote
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingAddLeakNoteRequest request = null;
            //var response = instance.RefrigeranttrackingLeakNote(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakRecordActionCodes
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakRecordActionCodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingLeakRecordActionCodes();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakRecordFaultCodes
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakRecordFaultCodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingLeakRecordFaultCodes();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakRecordImmearusable
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakRecordImmearusableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingUpdateLeakImmeasurable request = null;
            //var response = instance.RefrigeranttrackingLeakRecordImmearusable(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakRecordImmearusable_0
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakRecordImmearusable_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingAddLeakImmeasurableRequest request = null;
            //var response = instance.RefrigeranttrackingLeakRecordImmearusable_0(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakRecordImmearusabletrackingNumberassetidassetid
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakRecordImmearusabletrackingNumberassetidassetidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //int? assetid = null;
            //var response = instance.RefrigeranttrackingLeakRecordImmearusabletrackingNumberassetidassetid(trackingNumber, assetid);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakVerificationMethods
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakVerificationMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingLeakVerificationMethods();
            //Assert.IsType<List<SCServiceChannelServicesMessagingLeakRecordLeakVerifyMethod>>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakareas
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakareasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingLeakareas();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakrecord
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakrecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingUpdateLeakRecordRequest request = null;
            //var response = instance.RefrigeranttrackingLeakrecord(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakrecordV1
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakrecordV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingUpdateLeakRecordRequest request = null;
            //var response = instance.RefrigeranttrackingLeakrecordV1(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakrecords
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakrecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest request = null;
            //var response = instance.RefrigeranttrackingLeakrecords(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingLeakrecordstrackingNumber
        /// </summary>
        [Fact]
        public void RefrigeranttrackingLeakrecordstrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //var response = instance.RefrigeranttrackingLeakrecordstrackingNumber(trackingNumber);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingOperationalStatuses
        /// </summary>
        [Fact]
        public void RefrigeranttrackingOperationalStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingOperationalStatuses();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingRack
        /// </summary>
        [Fact]
        public void RefrigeranttrackingRackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingCreateUpdateRackConnectionRequest request = null;
            //var response = instance.RefrigeranttrackingRack(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingRackidid
        /// </summary>
        [Fact]
        public void RefrigeranttrackingRackididTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.RefrigeranttrackingRackidid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingRefrigerantTypessubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void RefrigeranttrackingRefrigerantTypessubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.RefrigeranttrackingRefrigerantTypessubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingRetireretrofitplans
        /// </summary>
        [Fact]
        public void RefrigeranttrackingRetireretrofitplansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest request = null;
            //var response = instance.RefrigeranttrackingRetireretrofitplans(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingSaveRefrigerationDetails
        /// </summary>
        [Fact]
        public void RefrigeranttrackingSaveRefrigerationDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingEditAssetRefrigerantRequest assetRefrigerant = null;
            //var response = instance.RefrigeranttrackingSaveRefrigerationDetails(assetRefrigerant);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingSubscribers
        /// </summary>
        [Fact]
        public void RefrigeranttrackingSubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingSubscribers();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingSystemLocations
        /// </summary>
        [Fact]
        public void RefrigeranttrackingSystemLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefrigeranttrackingSystemLocations();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingWOLeakVerification
        /// </summary>
        [Fact]
        public void RefrigeranttrackingWOLeakVerificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsAddUpdatePmLeakVerificationsRequest request = null;
            //var response = instance.RefrigeranttrackingWOLeakVerification(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingWOLeakVerification_0
        /// </summary>
        [Fact]
        public void RefrigeranttrackingWOLeakVerification_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsAddUpdatePmLeakVerificationsRequest request = null;
            //var response = instance.RefrigeranttrackingWOLeakVerification_0(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingWOLeakVerificationtrackingNumber
        /// </summary>
        [Fact]
        public void RefrigeranttrackingWOLeakVerificationtrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //var response = instance.RefrigeranttrackingWOLeakVerificationtrackingNumber(trackingNumber);
            //Assert.IsType<SCServiceChannelApiModelRefrigerantTrackingWOLeakVerificationResponse>(response);
        }

        /// <summary>
        /// Test Refrigeranttracking_0
        /// </summary>
        [Fact]
        public void Refrigeranttracking_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsGetAvailableRacksRequest request = null;
            //var response = instance.Refrigeranttracking_0(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingassetIdRefrigerantusagesummary
        /// </summary>
        [Fact]
        public void RefrigeranttrackingassetIdRefrigerantusagesummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //var response = instance.RefrigeranttrackingassetIdRefrigerantusagesummary(assetId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingassetTypeIdGetRefrigerantUseTypes
        /// </summary>
        [Fact]
        public void RefrigeranttrackingassetTypeIdGetRefrigerantUseTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetTypeId = null;
            //var response = instance.RefrigeranttrackingassetTypeIdGetRefrigerantUseTypes(assetTypeId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackinglocationIdGetRefrigerantSettings
        /// </summary>
        [Fact]
        public void RefrigeranttrackinglocationIdGetRefrigerantSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.RefrigeranttrackinglocationIdGetRefrigerantSettings(locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingsubscriberIdGetRefrigerantUseReasonCodes
        /// </summary>
        [Fact]
        public void RefrigeranttrackingsubscriberIdGetRefrigerantUseReasonCodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.RefrigeranttrackingsubscriberIdGetRefrigerantUseReasonCodes(subscriberId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingsubscriberIdLeaklocations
        /// </summary>
        [Fact]
        public void RefrigeranttrackingsubscriberIdLeaklocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.RefrigeranttrackingsubscriberIdLeaklocations(subscriberId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingsubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void RefrigeranttrackingsubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.RefrigeranttrackingsubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingtrackingNumberLeakRecord
        /// </summary>
        [Fact]
        public void RefrigeranttrackingtrackingNumberLeakRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //var response = instance.RefrigeranttrackingtrackingNumberLeakRecord(trackingNumber);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingworkOrderIdCheckRefrigerantWasUsedIsValidForInvoiceableStatusesrefrigerantWasUsedrefrigerantWasUsed
        /// </summary>
        [Fact]
        public void RefrigeranttrackingworkOrderIdCheckRefrigerantWasUsedIsValidForInvoiceableStatusesrefrigerantWasUsedrefrigerantWasUsedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //string? refrigerantWasUsed = null;
            //var response = instance.RefrigeranttrackingworkOrderIdCheckRefrigerantWasUsedIsValidForInvoiceableStatusesrefrigerantWasUsedrefrigerantWasUsed(workOrderId, refrigerantWasUsed);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingworkOrderIdCreateLeakRecordFollowUpWoForStatusUpdate
        /// </summary>
        [Fact]
        public void RefrigeranttrackingworkOrderIdCreateLeakRecordFollowUpWoForStatusUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //var response = instance.RefrigeranttrackingworkOrderIdCreateLeakRecordFollowUpWoForStatusUpdate(workOrderId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RefrigeranttrackingworkOrderIdIsCompletedStatusesLimitedByRTSetup
        /// </summary>
        [Fact]
        public void RefrigeranttrackingworkOrderIdIsCompletedStatusesLimitedByRTSetupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrderId = null;
            //var response = instance.RefrigeranttrackingworkOrderIdIsCompletedStatusesLimitedByRTSetup(workOrderId);
            //Assert.IsType<Object>(response);
        }
    }
}
