/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing AfterHoursApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AfterHoursApiTests : IDisposable
    {
        private AfterHoursApi instance;

        public AfterHoursApiTests()
        {
            instance = new AfterHoursApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AfterHoursApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AfterHoursApi
            //Assert.IsType<AfterHoursApi>(instance);
        }

        /// <summary>
        /// Test LocationslocationIdBusinesshours
        /// </summary>
        [Fact]
        public void LocationslocationIdBusinesshoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.LocationslocationIdBusinesshours(locationId);
            //Assert.IsType<SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse>(response);
        }

        /// <summary>
        /// Test LocationslocationIdBusinesshours_0
        /// </summary>
        [Fact]
        public void LocationslocationIdBusinesshours_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel = null;
            //instance.LocationslocationIdBusinesshours_0(locationId, businessHoursModel);
        }

        /// <summary>
        /// Test LocationslocationIdHolidays
        /// </summary>
        [Fact]
        public void LocationslocationIdHolidaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.LocationslocationIdHolidays(locationId);
            //Assert.IsType<SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse>(response);
        }

        /// <summary>
        /// Test LocationslocationIdHolidays_0
        /// </summary>
        [Fact]
        public void LocationslocationIdHolidays_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel = null;
            //var response = instance.LocationslocationIdHolidays_0(locationId, holidayModel);
            //Assert.IsType<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>(response);
        }

        /// <summary>
        /// Test LocationslocationIdHolidaysholidayNameholidayName
        /// </summary>
        [Fact]
        public void LocationslocationIdHolidaysholidayNameholidayNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string holidayName = null;
            //var response = instance.LocationslocationIdHolidaysholidayNameholidayName(locationId, holidayName);
            //Assert.IsType<SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse>(response);
        }
    }
}
