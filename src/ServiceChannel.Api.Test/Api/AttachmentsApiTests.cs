/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing AttachmentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AttachmentsApiTests : IDisposable
    {
        private AttachmentsApi instance;

        public AttachmentsApiTests()
        {
            instance = new AttachmentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AttachmentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AttachmentsApi
            //Assert.IsType<AttachmentsApi>(instance);
        }

        /// <summary>
        /// Test AssetsGetattachmentsbyassetids
        /// </summary>
        [Fact]
        public void AssetsGetattachmentsbyassetidsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> assetIds = null;
            //var response = instance.AssetsGetattachmentsbyassetids(assetIds);
            //Assert.IsType<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>(response);
        }

        /// <summary>
        /// Test AssetsGetattachmentsbyassetidsV1
        /// </summary>
        [Fact]
        public void AssetsGetattachmentsbyassetidsV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest = null;
            //var response = instance.AssetsGetattachmentsbyassetidsV1(assetAttachmentsRequest);
            //Assert.IsType<Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>>(response);
        }

        /// <summary>
        /// Test AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription
        /// </summary>
        [Fact]
        public void AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int attachmentId = null;
            //string? fileName = null;
            //string? description = null;
            //var response = instance.AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription(attachmentId, fileName, description);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsassetAttachmentIdDeleteAttachment
        /// </summary>
        [Fact]
        public void AssetsassetAttachmentIdDeleteAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetAttachmentId = null;
            //var response = instance.AssetsassetAttachmentIdDeleteAttachment(assetAttachmentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsassetIdAttachmentsisDefaultisDefault
        /// </summary>
        [Fact]
        public void AssetsassetIdAttachmentsisDefaultisDefaultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //System.IO.Stream file = null;
            //bool? isDefault = null;
            //Object? addAttachmentsRequest = null;
            //var response = instance.AssetsassetIdAttachmentsisDefaultisDefault(assetId, file, isDefault, addAttachmentsRequest);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>>(response);
        }

        /// <summary>
        /// Test AssetsassetIdAttachmentsproviderIdproviderId
        /// </summary>
        [Fact]
        public void AssetsassetIdAttachmentsproviderIdproviderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //int? providerId = null;
            //var response = instance.AssetsassetIdAttachmentsproviderIdproviderId(assetId, providerId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>(response);
        }

        /// <summary>
        /// Test GetProposalAttachmentThumbnail
        /// </summary>
        [Fact]
        public void GetProposalAttachmentThumbnailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string imageFormat = null;
            //string mode = null;
            //int height = null;
            //int width = null;
            //int attachmentId = null;
            //int proposalId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetProposalAttachmentThumbnail(imageFormat, mode, height, width, attachmentId, proposalId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<SCSystemNetHttpByteArrayContent>(response);
        }

        /// <summary>
        /// Test GetProposalAttachments
        /// </summary>
        [Fact]
        public void GetProposalAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int proposalId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetProposalAttachments(proposalId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>(response);
        }

        /// <summary>
        /// Test GetRFPAttachments
        /// </summary>
        [Fact]
        public void GetRFPAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int rfpId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetRFPAttachments(rfpId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>(response);
        }

        /// <summary>
        /// Test GetWorkOrderAttachments
        /// </summary>
        [Fact]
        public void GetWorkOrderAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkOrderAttachments(workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>(response);
        }

        /// <summary>
        /// Test GetWorkOrderNotesAttachments
        /// </summary>
        [Fact]
        public void GetWorkOrderNotesAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int noteId = null;
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkOrderNotesAttachments(noteId, workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>(response);
        }

        /// <summary>
        /// Test GetWorkorderAttachmentThumbnail
        /// </summary>
        [Fact]
        public void GetWorkorderAttachmentThumbnailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string imageFormat = null;
            //string mode = null;
            //int height = null;
            //int width = null;
            //int attachmentId = null;
            //int workorderId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetWorkorderAttachmentThumbnail(imageFormat, mode, height, width, attachmentId, workorderId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<SCSystemNetHttpByteArrayContent>(response);
        }

        /// <summary>
        /// Test RfpsidAttachments
        /// </summary>
        [Fact]
        public void RfpsidAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //System.IO.Stream file = null;
            //instance.RfpsidAttachments(id, file);
        }

        /// <summary>
        /// Test SiteauditCommentscommentIdAttachments
        /// </summary>
        [Fact]
        public void SiteauditCommentscommentIdAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int commentId = null;
            //var response = instance.SiteauditCommentscommentIdAttachments(commentId);
            //Assert.IsType<List<SCServiceChannelApiModelSiteAuditAttachmentInComment>>(response);
        }

        /// <summary>
        /// Test SiteauditCommentscommentIdAttachments_0
        /// </summary>
        [Fact]
        public void SiteauditCommentscommentIdAttachments_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int commentId = null;
            //System.IO.Stream file = null;
            //instance.SiteauditCommentscommentIdAttachments_0(commentId, file);
        }

        /// <summary>
        /// Test SiteauditCommentscommentIdAttachmentsattachmentId
        /// </summary>
        [Fact]
        public void SiteauditCommentscommentIdAttachmentsattachmentIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int commentId = null;
            //int attachmentId = null;
            //var response = instance.SiteauditCommentscommentIdAttachmentsattachmentId(commentId, attachmentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat
        /// </summary>
        [Fact]
        public void SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int commentId = null;
            //int attachmentId = null;
            //int? width = null;
            //int? height = null;
            //string? mode = null;
            //string? imageFormat = null;
            //var response = instance.SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat(commentId, attachmentId, width, height, mode, imageFormat);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test WorkordersAttachmentAsBase64
        /// </summary>
        [Fact]
        public void WorkordersAttachmentAsBase64Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request = null;
            //instance.WorkordersAttachmentAsBase64(request);
        }

        /// <summary>
        /// Test WorkorderspoNumberAttachmentsByPoNumberactoractor
        /// </summary>
        [Fact]
        public void WorkorderspoNumberAttachmentsByPoNumberactoractorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poNumber = null;
            //string? actor = null;
            //Object? addAttachmentsRequest = null;
            //System.IO.Stream? file = null;
            //instance.WorkorderspoNumberAttachmentsByPoNumberactoractor(poNumber, actor, addAttachmentsRequest, file);
        }

        /// <summary>
        /// Test WorkordersworkorderIdAttachmentsactoractor
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdAttachmentsactoractorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //string? actor = null;
            //Object? addAttachmentsRequest = null;
            //System.IO.Stream? file = null;
            //instance.WorkordersworkorderIdAttachmentsactoractor(workorderId, actor, addAttachmentsRequest, file);
        }

        /// <summary>
        /// Test WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //int attachmentId = null;
            //int? width = null;
            //int? height = null;
            //string? mode = null;
            //string? imageFormat = null;
            //var response = instance.WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat(workorderId, attachmentId, width, height, mode, imageFormat);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdNotesnoteIdAttachments
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdNotesnoteIdAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //int noteId = null;
            //System.IO.Stream file = null;
            //Object? addAttachmentsRequest = null;
            //instance.WorkordersworkorderIdNotesnoteIdAttachments(workorderId, noteId, file, addAttachmentsRequest);
        }

        /// <summary>
        /// Test WorkrequestWorkRequestIdNotesNoteIdAttachments
        /// </summary>
        [Fact]
        public void WorkrequestWorkRequestIdNotesNoteIdAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workRequestId = null;
            //int noteId = null;
            //var response = instance.WorkrequestWorkRequestIdNotesNoteIdAttachments(workRequestId, noteId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>(response);
        }

        /// <summary>
        /// Test WorkrequestworkRequestIdAttachments
        /// </summary>
        [Fact]
        public void WorkrequestworkRequestIdAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workRequestId = null;
            //var response = instance.WorkrequestworkRequestIdAttachments(workRequestId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAttachmentsAttachment>>(response);
        }

        /// <summary>
        /// Test WorkrequestworkRequestIdAttachmentsactoractor
        /// </summary>
        [Fact]
        public void WorkrequestworkRequestIdAttachmentsactoractorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workRequestId = null;
            //System.IO.Stream file = null;
            //string? actor = null;
            //Object? addAttachmentsRequest = null;
            //instance.WorkrequestworkRequestIdAttachmentsactoractor(workRequestId, file, actor, addAttachmentsRequest);
        }

        /// <summary>
        /// Test WorkrequestworkRequestIdNotesnoteIdAttachments
        /// </summary>
        [Fact]
        public void WorkrequestworkRequestIdNotesnoteIdAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workRequestId = null;
            //int noteId = null;
            //System.IO.Stream file = null;
            //Object? addAttachmentsRequest = null;
            //instance.WorkrequestworkRequestIdNotesnoteIdAttachments(workRequestId, noteId, file, addAttachmentsRequest);
        }
    }
}
