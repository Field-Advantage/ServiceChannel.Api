/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing TrucksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TrucksApiTests : IDisposable
    {
        private TrucksApi instance;

        public TrucksApiTests()
        {
            instance = new TrucksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TrucksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TrucksApi
            //Assert.IsType<TrucksApi>(instance);
        }

        /// <summary>
        /// Test GetTrucks
        /// </summary>
        [Fact]
        public void GetTrucksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetTrucks(expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Trucks
        /// </summary>
        [Fact]
        public void TrucksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingTrucksTruckRequest truckRequest = null;
            //var response = instance.Trucks(truckRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test TrucksTechnician
        /// </summary>
        [Fact]
        public void TrucksTechnicianTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingTrucksTechTruckRequest techTruckCreate = null;
            //var response = instance.TrucksTechnician(techTruckCreate);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test TrucksTechnicianauthTechId
        /// </summary>
        [Fact]
        public void TrucksTechnicianauthTechIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long authTechId = null;
            //var response = instance.TrucksTechnicianauthTechId(authTechId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test TrucksTechnicianauthTechId_0
        /// </summary>
        [Fact]
        public void TrucksTechnicianauthTechId_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long authTechId = null;
            //SCServiceChannelServicesMessagingTrucksTechTruckRequest techTruck = null;
            //var response = instance.TrucksTechnicianauthTechId_0(authTechId, techTruck);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test TrucksTechnicianauthTechId_1
        /// </summary>
        [Fact]
        public void TrucksTechnicianauthTechId_1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long authTechId = null;
            //var response = instance.TrucksTechnicianauthTechId_1(authTechId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Trucksid
        /// </summary>
        [Fact]
        public void TrucksidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.Trucksid(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Trucksid_0
        /// </summary>
        [Fact]
        public void Trucksid_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //SCServiceChannelServicesMessagingTrucksTruckRequest truckRequest = null;
            //var response = instance.Trucksid_0(id, truckRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Trucksid_1
        /// </summary>
        [Fact]
        public void Trucksid_1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.Trucksid_1(id);
            //Assert.IsType<Object>(response);
        }
    }
}
