/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing SubscribersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubscribersApiTests : IDisposable
    {
        private SubscribersApi instance;

        public SubscribersApiTests()
        {
            instance = new SubscribersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SubscribersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SubscribersApi
            //Assert.IsType<SubscribersApi>(instance);
        }

        /// <summary>
        /// Test Subscribers
        /// </summary>
        [Fact]
        public void SubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingSubscribersRegisterSubscriberRequest registerSubscriberRequest = null;
            //instance.Subscribers(registerSubscriberRequest);
        }

        /// <summary>
        /// Test SubscribersCurrentDashboardssubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void SubscribersCurrentDashboardssubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //var response = instance.SubscribersCurrentDashboardssubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingSubscribersDashboardInfo>>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentSubsidiaries
        /// </summary>
        [Fact]
        public void SubscribersCurrentSubsidiariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SubscribersCurrentSubsidiaries();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersGetSubscribersRegionalSettings
        /// </summary>
        [Fact]
        public void SubscribersGetSubscribersRegionalSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingSubscribersGetSubscribersRegionalSettingsRequest request = null;
            //var response = instance.SubscribersGetSubscribersRegionalSettings(request);
            //Assert.IsType<SCServiceChannelServicesMessagingSubscribersGetSubscribersRegionalSettingsResponse>(response);
        }

        /// <summary>
        /// Test SubscribersRulessubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void SubscribersRulessubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //var response = instance.SubscribersRulessubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingSubscribersGetSubscriberPropertyResponse>(response);
        }

        /// <summary>
        /// Test SubscribersTrades
        /// </summary>
        [Fact]
        public void SubscribersTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SubscribersTrades();
            //Assert.IsType<SCServiceChannelServicesMessagingTradeGetSubscriberTradesResponse>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberId
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //instance.SubscriberssubscriberId(subscriberId);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdDashboards
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdDashboardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.SubscriberssubscriberIdDashboards(subscriberId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingSubscribersDashboardInfo>>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdPrimarytrades
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdPrimarytradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //instance.SubscriberssubscriberIdPrimarytrades(subscriberId);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdRules
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.SubscriberssubscriberIdRules(subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingSubscribersGetSubscriberPropertyResponse>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdSecurityrules
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdSecurityrulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.SubscriberssubscriberIdSecurityrules(subscriberId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdTrades
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.SubscriberssubscriberIdTrades(subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingTradeGetSubscriberTradesResponse>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdValidatepasswordsecuritypassword
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdValidatepasswordsecuritypasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //string password = null;
            //var response = instance.SubscriberssubscriberIdValidatepasswordsecuritypassword(subscriberId, password);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberIdWorkOrderRescheduleReasons
        /// </summary>
        [Fact]
        public void SubscriberssubscriberIdWorkOrderRescheduleReasonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.SubscriberssubscriberIdWorkOrderRescheduleReasons(subscriberId);
            //Assert.IsType<Dictionary<string, string>>(response);
        }

        /// <summary>
        /// Test SubscriberssubscriberId_0
        /// </summary>
        [Fact]
        public void SubscriberssubscriberId_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //SCServiceChannelServicesMessagingSubscribersUpdateSubscriberInfoRequest subscriberInfo = null;
            //instance.SubscriberssubscriberId_0(subscriberId, subscriberInfo);
        }
    }
}
