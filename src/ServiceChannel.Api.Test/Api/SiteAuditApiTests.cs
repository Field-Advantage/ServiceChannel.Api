/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing SiteAuditApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SiteAuditApiTests : IDisposable
    {
        private SiteAuditApi instance;

        public SiteAuditApiTests()
        {
            instance = new SiteAuditApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SiteAuditApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SiteAuditApi
            //Assert.IsType<SiteAuditApi>(instance);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationsAuditInfo
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationsAuditInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingSiteAuditAuditDataExternal request = null;
            //var response = instance.SubscribersCurrentLocationsAuditInfo(request);
            //Assert.IsType<SCServiceChannelServicesMessagingSiteAuditSaveAuditDataResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int templateId = null;
            //var response = instance.SubscribersCurrentLocationsAuditinfoChecklistTemplatestemplateIdtemplateId(templateId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingSiteAuditCheckListTemplateExternal>>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int templateId = null;
            //int? checkListTemplateId = null;
            //var response = instance.SubscribersCurrentLocationsAuditinfoChecklistitemTemplatestemplateIdtemplateIdcheckListTemplateIdcheckListTemplateId(templateId, checkListTemplateId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingSiteAuditCheckListItemExternal>>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //int templateId = null;
            //var response = instance.SubscribersCurrentLocationsAuditinfolocationIdlocationIdtemplateIdtemplateId(locationId, templateId);
            //Assert.IsType<SCServiceChannelServicesMessagingSiteAuditGetAuditInfo>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationslocationIdSiteauditTemplateTypes
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationslocationIdSiteauditTemplateTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //var response = instance.SubscribersCurrentLocationslocationIdSiteauditTemplateTypes(locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //int templateTypeId = null;
            //var response = instance.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo(locationId, templateTypeId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeightedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //int templateTypeId = null;
            //var response = instance.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted(locationId, templateTypeId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //int templateTypeId = null;
            //SCServiceChannelServicesMessagingSiteAuditAuditDataWeightedExternal request = null;
            //var response = instance.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfoWeighted_0(locationId, templateTypeId, request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0
        /// </summary>
        [Fact]
        public void SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //int templateTypeId = null;
            //SCServiceChannelServicesMessagingSiteAuditAuditDataExternalOld request = null;
            //var response = instance.SubscribersCurrentLocationslocationIdSiteauditTemplateTypestemplateTypeIdAuditInfo_0(locationId, templateTypeId, request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod
        /// </summary>
        [Fact]
        public void SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? daysPeriod = null;
            //var response = instance.SubscribersCurrentSiteauditAuditsCompleteddaysPerioddaysPeriod(daysPeriod);
            //Assert.IsType<SCServiceChannelServicesMessagingSiteAuditCompletedAuditListResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentSiteauditCheckListItemscheckListItemId
        /// </summary>
        [Fact]
        public void SubscribersCurrentSiteauditCheckListItemscheckListItemIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int checkListItemId = null;
            //var response = instance.SubscribersCurrentSiteauditCheckListItemscheckListItemId(checkListItemId);
            //Assert.IsType<SCServiceChannelServicesMessagingSiteAuditCheckListItemDetailsResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentSiteauditCompleted
        /// </summary>
        [Fact]
        public void SubscribersCurrentSiteauditCompletedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelApiModelSiteAuditCompletedAuditInfo request = null;
            //var response = instance.SubscribersCurrentSiteauditCompleted(request);
            //Assert.IsType<SCServiceChannelServicesMessagingSiteAuditUpdatedCompletedAuditResponse>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentSiteauditCompletedauditId
        /// </summary>
        [Fact]
        public void SubscribersCurrentSiteauditCompletedauditIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int auditId = null;
            //var response = instance.SubscribersCurrentSiteauditCompletedauditId(auditId);
            //Assert.IsType<SCServiceChannelApiModelSiteAuditCompletedAuditInfoExternal>(response);
        }

        /// <summary>
        /// Test SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea
        /// </summary>
        [Fact]
        public void SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaareaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? auditId = null;
            //DateTime? fromDate = null;
            //DateTime? toDate = null;
            //string? country = null;
            //int? locationId = null;
            //string? area = null;
            //var response = instance.SubscribersCurrentSiteauditReportauditIdauditIdfromDatefromDatetoDatetoDatecountrycountrylocationIdlocationIdareaarea(auditId, fromDate, toDate, country, locationId, area);
            //Assert.IsType<List<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>>(response);
        }
    }
}
