/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing AssetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AssetsApiTests : IDisposable
    {
        private AssetsApi instance;

        public AssetsApiTests()
        {
            instance = new AssetsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AssetsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AssetsApi
            //Assert.IsType<AssetsApi>(instance);
        }

        /// <summary>
        /// Test Assets
        /// </summary>
        [Fact]
        public void AssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest = null;
            //var response = instance.Assets(assetRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsActivation
        /// </summary>
        [Fact]
        public void AssetsActivationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request = null;
            //var response = instance.AssetsActivation(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsAddUpdateAsset
        /// </summary>
        [Fact]
        public void AssetsAddUpdateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request = null;
            //var response = instance.AssetsAddUpdateAsset(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsAssetMeter
        /// </summary>
        [Fact]
        public void AssetsAssetMeterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request = null;
            //instance.AssetsAssetMeter(request);
        }

        /// <summary>
        /// Test AssetsAssetMeterReading
        /// </summary>
        [Fact]
        public void AssetsAssetMeterReadingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request = null;
            //instance.AssetsAssetMeterReading(request);
        }

        /// <summary>
        /// Test AssetsAssetMeterReading_0
        /// </summary>
        [Fact]
        public void AssetsAssetMeterReading_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request = null;
            //instance.AssetsAssetMeterReading_0(request);
        }

        /// <summary>
        /// Test AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly
        /// </summary>
        [Fact]
        public void AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnlyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //bool? lastMeterReadingValuesOnly = null;
            //var response = instance.AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly(assetId, lastMeterReadingValuesOnly);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>(response);
        }

        /// <summary>
        /// Test AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId
        /// </summary>
        [Fact]
        public void AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? assetMeterId = null;
            //int? assetId = null;
            //var response = instance.AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId(assetMeterId, assetId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetMeter>>(response);
        }

        /// <summary>
        /// Test AssetsAssetcomponents
        /// </summary>
        [Fact]
        public void AssetsAssetcomponentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request = null;
            //instance.AssetsAssetcomponents(request);
        }

        /// <summary>
        /// Test AssetsAssetrepairstatusassetIdassetId
        /// </summary>
        [Fact]
        public void AssetsAssetrepairstatusassetIdassetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //var response = instance.AssetsAssetrepairstatusassetIdassetId(assetId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test AssetsAssetsforreplacement
        /// </summary>
        [Fact]
        public void AssetsAssetsforreplacementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request = null;
            //var response = instance.AssetsAssetsforreplacement(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsAssetstatushistoryassetIdassetId
        /// </summary>
        [Fact]
        public void AssetsAssetstatushistoryassetIdassetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //var response = instance.AssetsAssetstatushistoryassetIdassetId(assetId);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse>(response);
        }

        /// <summary>
        /// Test AssetsAssociateAssetCode
        /// </summary>
        [Fact]
        public void AssetsAssociateAssetCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request = null;
            //var response = instance.AssetsAssociateAssetCode(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsBrands
        /// </summary>
        [Fact]
        public void AssetsBrandsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AssetsBrands();
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsManufacturer>>(response);
        }

        /// <summary>
        /// Test AssetsCanCreateAssetassetTypeId
        /// </summary>
        [Fact]
        public void AssetsCanCreateAssetassetTypeIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetTypeId = null;
            //var response = instance.AssetsCanCreateAssetassetTypeId(assetTypeId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsCanManageAttachmentssubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void AssetsCanManageAttachmentssubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //instance.AssetsCanManageAttachmentssubscriberIdsubscriberId(subscriberId);
        }

        /// <summary>
        /// Test AssetsCanProviderCreateAssetForTradetradeId
        /// </summary>
        [Fact]
        public void AssetsCanProviderCreateAssetForTradetradeIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int tradeId = null;
            //var response = instance.AssetsCanProviderCreateAssetForTradetradeId(tradeId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsCanUserEditAssetassetTypeIdassetTypeId
        /// </summary>
        [Fact]
        public void AssetsCanUserEditAssetassetTypeIdassetTypeIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? assetTypeId = null;
            //var response = instance.AssetsCanUserEditAssetassetTypeIdassetTypeId(assetTypeId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsCreateAssetMeterReadingsBulk
        /// </summary>
        [Fact]
        public void AssetsCreateAssetMeterReadingsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request = null;
            //var response = instance.AssetsCreateAssetMeterReadingsBulk(request);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>(response);
        }

        /// <summary>
        /// Test AssetsGetAssetTypeGroupsByAssetsIds
        /// </summary>
        [Fact]
        public void AssetsGetAssetTypeGroupsByAssetsIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request = null;
            //var response = instance.AssetsGetAssetTypeGroupsByAssetsIds(request);
            //Assert.IsType<Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>(response);
        }

        /// <summary>
        /// Test AssetsGetAssetValidationHistoryByTrackingNumber
        /// </summary>
        [Fact]
        public void AssetsGetAssetValidationHistoryByTrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request = null;
            //var response = instance.AssetsGetAssetValidationHistoryByTrackingNumber(request);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>(response);
        }

        /// <summary>
        /// Test AssetsGetAssetValidationInformation
        /// </summary>
        [Fact]
        public void AssetsGetAssetValidationInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests = null;
            //var response = instance.AssetsGetAssetValidationInformation(auditRequests);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>>(response);
        }

        /// <summary>
        /// Test AssetsGetPrimaryAttachmentsForAssetList
        /// </summary>
        [Fact]
        public void AssetsGetPrimaryAttachmentsForAssetListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> listOfAssetIds = null;
            //var response = instance.AssetsGetPrimaryAttachmentsForAssetList(listOfAssetIds);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>(response);
        }

        /// <summary>
        /// Test AssetsGetPrimaryAttachmentsForAssetListV1
        /// </summary>
        [Fact]
        public void AssetsGetPrimaryAttachmentsForAssetListV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest = null;
            //var response = instance.AssetsGetPrimaryAttachmentsForAssetListV1(assetAttachmentsRequest);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>>(response);
        }

        /// <summary>
        /// Test AssetsGetValidationStatusesForMultipleWorkOrders
        /// </summary>
        [Fact]
        public void AssetsGetValidationStatusesForMultipleWorkOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingGetByIdsRequest request = null;
            //var response = instance.AssetsGetValidationStatusesForMultipleWorkOrders(request);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse>(response);
        }

        /// <summary>
        /// Test AssetsGetassetwohistoryworkOrdersCountworkOrdersCount
        /// </summary>
        [Fact]
        public void AssetsGetassetwohistoryworkOrdersCountworkOrdersCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workOrdersCount = null;
            //List<int> assetIds = null;
            //var response = instance.AssetsGetassetwohistoryworkOrdersCountworkOrdersCount(workOrdersCount, assetIds);
            //Assert.IsType<Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>>(response);
        }

        /// <summary>
        /// Test AssetsGetfilteredassetleaks
        /// </summary>
        [Fact]
        public void AssetsGetfilteredassetleaksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request = null;
            //var response = instance.AssetsGetfilteredassetleaks(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsGetfilteredassets
        /// </summary>
        [Fact]
        public void AssetsGetfilteredassetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request = null;
            //var response = instance.AssetsGetfilteredassets(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsGetfilteredassetsV1providerIdproviderId
        /// </summary>
        [Fact]
        public void AssetsGetfilteredassetsV1providerIdproviderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request = null;
            //int? providerId = null;
            //var response = instance.AssetsGetfilteredassetsV1providerIdproviderId(request, providerId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsGetwoassettrackingwoIdwoId
        /// </summary>
        [Fact]
        public void AssetsGetwoassettrackingwoIdwoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int woId = null;
            //var response = instance.AssetsGetwoassettrackingwoIdwoId(woId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsHasAssetBeenValidated
        /// </summary>
        [Fact]
        public void AssetsHasAssetBeenValidatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest = null;
            //var response = instance.AssetsHasAssetBeenValidated(auditRequest);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test AssetsLocationAssetsTreelocationIdlocationIdtradetrade
        /// </summary>
        [Fact]
        public void AssetsLocationAssetsTreelocationIdlocationIdtradetradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string? trade = null;
            //var response = instance.AssetsLocationAssetsTreelocationIdlocationIdtradetrade(locationId, trade);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>>(response);
        }

        /// <summary>
        /// Test AssetsLocationslocationIdtradetrade
        /// </summary>
        [Fact]
        public void AssetsLocationslocationIdtradetradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string? trade = null;
            //var response = instance.AssetsLocationslocationIdtradetrade(locationId, trade);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsAssetsInfoResponse>(response);
        }

        /// <summary>
        /// Test AssetsRecordScannedAsset
        /// </summary>
        [Fact]
        public void AssetsRecordScannedAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest = null;
            //var response = instance.AssetsRecordScannedAsset(auditRequest);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test AssetsSearchassets
        /// </summary>
        [Fact]
        public void AssetsSearchassetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request = null;
            //var response = instance.AssetsSearchassets(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsSearchassetsByGroupId
        /// </summary>
        [Fact]
        public void AssetsSearchassetsByGroupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request = null;
            //var response = instance.AssetsSearchassetsByGroupId(request);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>>(response);
        }

        /// <summary>
        /// Test AssetsUnableToAddReasons
        /// </summary>
        [Fact]
        public void AssetsUnableToAddReasonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AssetsUnableToAddReasons();
            //Assert.IsType<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason>(response);
        }

        /// <summary>
        /// Test AssetsUnableToAddReasons_0
        /// </summary>
        [Fact]
        public void AssetsUnableToAddReasons_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model = null;
            //var response = instance.AssetsUnableToAddReasons_0(model);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest>(response);
        }

        /// <summary>
        /// Test AssetsUnableToScanReasons
        /// </summary>
        [Fact]
        public void AssetsUnableToScanReasonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model = null;
            //var response = instance.AssetsUnableToScanReasons(model);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest>(response);
        }

        /// <summary>
        /// Test AssetsUnableToScanReasonsNotAttachedAsset
        /// </summary>
        [Fact]
        public void AssetsUnableToScanReasonsNotAttachedAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AssetsUnableToScanReasonsNotAttachedAsset();
            //Assert.IsType<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset>(response);
        }

        /// <summary>
        /// Test AssetsUnableToScanReasonssubscriberIdsubscriberId
        /// </summary>
        [Fact]
        public void AssetsUnableToScanReasonssubscriberIdsubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriberId = null;
            //var response = instance.AssetsUnableToScanReasonssubscriberIdsubscriberId(subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason>(response);
        }

        /// <summary>
        /// Test AssetsUnableToValidateReasons
        /// </summary>
        [Fact]
        public void AssetsUnableToValidateReasonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AssetsUnableToValidateReasons();
            //Assert.IsType<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason>(response);
        }

        /// <summary>
        /// Test AssetsUnableToValidateReasonsNotAttachedAsset
        /// </summary>
        [Fact]
        public void AssetsUnableToValidateReasonsNotAttachedAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AssetsUnableToValidateReasonsNotAttachedAsset();
            //Assert.IsType<SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset>(response);
        }

        /// <summary>
        /// Test AssetsUnableToValidateReasons_0
        /// </summary>
        [Fact]
        public void AssetsUnableToValidateReasons_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model = null;
            //var response = instance.AssetsUnableToValidateReasons_0(model);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest>(response);
        }

        /// <summary>
        /// Test AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId
        /// </summary>
        [Fact]
        public void AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //int locationId = null;
            //var response = instance.AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId(assetId, locationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsUpdateAssetMeterReadingsBulk
        /// </summary>
        [Fact]
        public void AssetsUpdateAssetMeterReadingsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request = null;
            //var response = instance.AssetsUpdateAssetMeterReadingsBulk(request);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>>(response);
        }

        /// <summary>
        /// Test AssetsUpdateAssetStatus
        /// </summary>
        [Fact]
        public void AssetsUpdateAssetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request = null;
            //var response = instance.AssetsUpdateAssetStatus(request);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test AssetsUpdateAssetsStatuses
        /// </summary>
        [Fact]
        public void AssetsUpdateAssetsStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request = null;
            //instance.AssetsUpdateAssetsStatuses(request);
        }

        /// <summary>
        /// Test AssetsUpdateassetrepairstatus
        /// </summary>
        [Fact]
        public void AssetsUpdateassetrepairstatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request = null;
            //var response = instance.AssetsUpdateassetrepairstatus(request);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize
        /// </summary>
        [Fact]
        public void AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? keyword = null;
            //int? startIndex = null;
            //int? pageSize = null;
            //var response = instance.AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize(keyword, startIndex, pageSize);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsManufacturersResponce>(response);
        }

        /// <summary>
        /// Test AssetsValidationRulesForMultipleSubscribers
        /// </summary>
        [Fact]
        public void AssetsValidationRulesForMultipleSubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request = null;
            //var response = instance.AssetsValidationRulesForMultipleSubscribers(request);
            //Assert.IsType<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>(response);
        }

        /// <summary>
        /// Test AssetsWorkorderAreassubscriberId
        /// </summary>
        [Fact]
        public void AssetsWorkorderAreassubscriberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.AssetsWorkorderAreassubscriberId(subscriberId);
            //Assert.IsType<List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>>(response);
        }

        /// <summary>
        /// Test AssetsWorkordersAttachassets
        /// </summary>
        [Fact]
        public void AssetsWorkordersAttachassetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request = null;
            //var response = instance.AssetsWorkordersAttachassets(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsWorkordersRemoveassets
        /// </summary>
        [Fact]
        public void AssetsWorkordersRemoveassetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request = null;
            //var response = instance.AssetsWorkordersRemoveassets(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsWorkordersSetupassets
        /// </summary>
        [Fact]
        public void AssetsWorkordersSetupassetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request = null;
            //var response = instance.AssetsWorkordersSetupassets(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsWorkordersworkorderIdAttach
        /// </summary>
        [Fact]
        public void AssetsWorkordersworkorderIdAttachTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest = null;
            //var response = instance.AssetsWorkordersworkorderIdAttach(workorderId, attachAssetRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsWorkordersworkorderIdDetach
        /// </summary>
        [Fact]
        public void AssetsWorkordersworkorderIdDetachTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.AssetsWorkordersworkorderIdDetach(workorderId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsWorkrequestRemove
        /// </summary>
        [Fact]
        public void AssetsWorkrequestRemoveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request = null;
            //var response = instance.AssetsWorkrequestRemove(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsWorkrequestSetup
        /// </summary>
        [Fact]
        public void AssetsWorkrequestSetupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request = null;
            //var response = instance.AssetsWorkrequestSetup(request);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetsWorkrequestworkRequestId
        /// </summary>
        [Fact]
        public void AssetsWorkrequestworkRequestIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workRequestId = null;
            //var response = instance.AssetsWorkrequestworkRequestId(workRequestId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Assets_0
        /// </summary>
        [Fact]
        public void Assets_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest = null;
            //instance.Assets_0(assetRequest);
        }

        /// <summary>
        /// Test AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber
        /// </summary>
        [Fact]
        public void AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //int? locationId = null;
            //string? storeId = null;
            //string? tagId = null;
            //int? trackingNumber = null;
            //var response = instance.AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber(assetId, locationId, storeId, tagId, trackingNumber);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsAssetResponse>(response);
        }

        /// <summary>
        /// Test AssetsassetidAssetwohistory
        /// </summary>
        [Fact]
        public void AssetsassetidAssetwohistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetid = null;
            //var response = instance.AssetsassetidAssetwohistory(assetid);
            //Assert.IsType<List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>>(response);
        }

        /// <summary>
        /// Test AssetsbrandNameAddBrand
        /// </summary>
        [Fact]
        public void AssetsbrandNameAddBrandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandName = null;
            //var response = instance.AssetsbrandNameAddBrand(brandName);
            //Assert.IsType<int>(response);
        }

        /// <summary>
        /// Test AssetssubscriberIdValidationRules
        /// </summary>
        [Fact]
        public void AssetssubscriberIdValidationRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //var response = instance.AssetssubscriberIdValidationRules(subscriberId);
            //Assert.IsType<SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging>(response);
        }

        /// <summary>
        /// Test AssetstrackingNumberIsValidationRequired
        /// </summary>
        [Fact]
        public void AssetstrackingNumberIsValidationRequiredTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int trackingNumber = null;
            //var response = instance.AssetstrackingNumberIsValidationRequired(trackingNumber);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AssetstradeIdGetAssetTypeGroupsByTradeId
        /// </summary>
        [Fact]
        public void AssetstradeIdGetAssetTypeGroupsByTradeIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int tradeId = null;
            //var response = instance.AssetstradeIdGetAssetTypeGroupsByTradeId(tradeId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>>(response);
        }

        /// <summary>
        /// Test AssociateAssetCode
        /// </summary>
        [Fact]
        public void AssociateAssetCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool processDuplicatedAssetTag = null;
            //string code = null;
            //int equipmentId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //instance.AssociateAssetCode(processDuplicatedAssetTag, code, equipmentId, expand, select, filter, orderby, top, skip, count);
        }

        /// <summary>
        /// Test FindAssets
        /// </summary>
        [Fact]
        public void FindAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string searchCriteria = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.FindAssets(searchCriteria, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>(response);
        }

        /// <summary>
        /// Test FindAssetsByLocation
        /// </summary>
        [Fact]
        public void FindAssetsByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int locationId = null;
            //string searchCriteria = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.FindAssetsByLocation(locationId, searchCriteria, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>(response);
        }

        /// <summary>
        /// Test FindAssetsBySubscriber
        /// </summary>
        [Fact]
        public void FindAssetsBySubscriberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriberId = null;
            //string searchCriteria = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.FindAssetsBySubscriber(subscriberId, searchCriteria, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>(response);
        }

        /// <summary>
        /// Test GetAsset
        /// </summary>
        [Fact]
        public void GetAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int assetId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.GetAsset(assetId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsAssetResponse>(response);
        }

        /// <summary>
        /// Test SearchAssets
        /// </summary>
        [Fact]
        public void SearchAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int locationId = null;
            //string? expand = null;
            //string? select = null;
            //string? filter = null;
            //string? orderby = null;
            //int? top = null;
            //int? skip = null;
            //bool? count = null;
            //var response = instance.SearchAssets(code, locationId, expand, select, filter, orderby, top, skip, count);
            //Assert.IsType<List<SCServiceChannelServicesMessagingAssetsAssetResponse>>(response);
        }
    }
}
