/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ServiceChannel.Api.Client;
using ServiceChannel.Api.Api;
// uncomment below to import models
//using ServiceChannel.Api.Model;

namespace ServiceChannel.Api.Test.Api
{
    /// <summary>
    ///  Class for testing PartsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PartsApiTests : IDisposable
    {
        private PartsApi instance;

        public PartsApiTests()
        {
            instance = new PartsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PartsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PartsApi
            //Assert.IsType<PartsApi>(instance);
        }

        /// <summary>
        /// Test PartsIsTechCertificationUsedOnRefrigerantTrackingauthUserIdauthUserIdtechnicianIdtechnicianIdcertificationNumbercertificationNumber
        /// </summary>
        [Fact]
        public void PartsIsTechCertificationUsedOnRefrigerantTrackingauthUserIdauthUserIdtechnicianIdtechnicianIdcertificationNumbercertificationNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long authUserId = null;
            //int technicianId = null;
            //string certificationNumber = null;
            //var response = instance.PartsIsTechCertificationUsedOnRefrigerantTrackingauthUserIdauthUserIdtechnicianIdtechnicianIdcertificationNumbercertificationNumber(authUserId, technicianId, certificationNumber);
            //Assert.IsType<SCServiceChannelServicesMessagingAssetsTechnicianAssociatedResponse>(response);
        }

        /// <summary>
        /// Test WorkordersInventoryPartsBulkPartUsage
        /// </summary>
        [Fact]
        public void WorkordersInventoryPartsBulkPartUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantBulkChangeRequest request = null;
            //instance.WorkordersInventoryPartsBulkPartUsage(request);
        }

        /// <summary>
        /// Test WorkordersworkorderIdInventoryRefrigerantusage
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdInventoryRefrigerantusageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.WorkordersworkorderIdInventoryRefrigerantusage(workorderId);
            //Assert.IsType<SCServiceChannelServicesMessagingPartsRefrigerantUsageResponse>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdParts
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdPartsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.WorkordersworkorderIdParts(workorderId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrderPartResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdPartsUsage
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdPartsUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //var response = instance.WorkordersworkorderIdPartsUsage(workorderId);
            //Assert.IsType<List<SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse>>(response);
        }

        /// <summary>
        /// Test WorkordersworkorderIdParts_0
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdParts_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersUpdateWorkOrderPartsCollectionRequest request = null;
            //instance.WorkordersworkorderIdParts_0(workorderId, request);
        }

        /// <summary>
        /// Test WorkordersworkorderIdParts_1
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdParts_1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //SCServiceChannelServicesMessagingWorkordersCreateWorkOrderPartsCollectionRequest requestModel = null;
            //instance.WorkordersworkorderIdParts_1(workorderId, requestModel);
        }

        /// <summary>
        /// Test WorkordersworkorderIdPartsids0ids0ids1ids1
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdPartsids0ids0ids1ids1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //List<int> ids = null;
            //instance.WorkordersworkorderIdPartsids0ids0ids1ids1(workorderId, ids);
        }

        /// <summary>
        /// Test WorkordersworkorderIdincludeConnectorPartsPartsV1
        /// </summary>
        [Fact]
        public void WorkordersworkorderIdincludeConnectorPartsPartsV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int workorderId = null;
            //bool includeConnectorParts = null;
            //var response = instance.WorkordersworkorderIdincludeConnectorPartsPartsV1(workorderId, includeConnectorParts);
            //Assert.IsType<List<SCServiceChannelServicesMessagingWorkordersWorkOrderPartResponse>>(response);
        }
    }
}
